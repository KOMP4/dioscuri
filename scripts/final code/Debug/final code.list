
final code.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e550  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000674  0800e6f0  0800e6f0  0001e6f0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ed64  0800ed64  00020200  2**0
                  CONTENTS
  4 .ARM          00000008  0800ed64  0800ed64  0001ed64  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ed6c  0800ed6c  00020200  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ed6c  0800ed6c  0001ed6c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ed70  0800ed70  0001ed70  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000200  20000000  0800ed74  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000073ac  20000200  0800ef74  00020200  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200075ac  0800ef74  000275ac  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020200  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001b093  00000000  00000000  00020230  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000386a  00000000  00000000  0003b2c3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001848  00000000  00000000  0003eb30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000016c0  00000000  00000000  00040378  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001bdbf  00000000  00000000  00041a38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001d547  00000000  00000000  0005d7f7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a409b  00000000  00000000  0007ad3e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0011edd9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007788  00000000  00000000  0011ee2c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000200 	.word	0x20000200
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800e6d8 	.word	0x0800e6d8

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000204 	.word	0x20000204
 80001dc:	0800e6d8 	.word	0x0800e6d8

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2f>:
 8000bb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bbc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bc0:	bf24      	itt	cs
 8000bc2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bc6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bca:	d90d      	bls.n	8000be8 <__aeabi_d2f+0x30>
 8000bcc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bd0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bd4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bd8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bdc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000be0:	bf08      	it	eq
 8000be2:	f020 0001 	biceq.w	r0, r0, #1
 8000be6:	4770      	bx	lr
 8000be8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bec:	d121      	bne.n	8000c32 <__aeabi_d2f+0x7a>
 8000bee:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bf2:	bfbc      	itt	lt
 8000bf4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bf8:	4770      	bxlt	lr
 8000bfa:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bfe:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c02:	f1c2 0218 	rsb	r2, r2, #24
 8000c06:	f1c2 0c20 	rsb	ip, r2, #32
 8000c0a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c0e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c12:	bf18      	it	ne
 8000c14:	f040 0001 	orrne.w	r0, r0, #1
 8000c18:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c1c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c20:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c24:	ea40 000c 	orr.w	r0, r0, ip
 8000c28:	fa23 f302 	lsr.w	r3, r3, r2
 8000c2c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c30:	e7cc      	b.n	8000bcc <__aeabi_d2f+0x14>
 8000c32:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c36:	d107      	bne.n	8000c48 <__aeabi_d2f+0x90>
 8000c38:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c3c:	bf1e      	ittt	ne
 8000c3e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c42:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c46:	4770      	bxne	lr
 8000c48:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c4c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c50:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c54:	4770      	bx	lr
 8000c56:	bf00      	nop

08000c58 <__aeabi_ldivmod>:
 8000c58:	b97b      	cbnz	r3, 8000c7a <__aeabi_ldivmod+0x22>
 8000c5a:	b972      	cbnz	r2, 8000c7a <__aeabi_ldivmod+0x22>
 8000c5c:	2900      	cmp	r1, #0
 8000c5e:	bfbe      	ittt	lt
 8000c60:	2000      	movlt	r0, #0
 8000c62:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 8000c66:	e006      	blt.n	8000c76 <__aeabi_ldivmod+0x1e>
 8000c68:	bf08      	it	eq
 8000c6a:	2800      	cmpeq	r0, #0
 8000c6c:	bf1c      	itt	ne
 8000c6e:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 8000c72:	f04f 30ff 	movne.w	r0, #4294967295
 8000c76:	f000 b9bf 	b.w	8000ff8 <__aeabi_idiv0>
 8000c7a:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c7e:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c82:	2900      	cmp	r1, #0
 8000c84:	db09      	blt.n	8000c9a <__aeabi_ldivmod+0x42>
 8000c86:	2b00      	cmp	r3, #0
 8000c88:	db1a      	blt.n	8000cc0 <__aeabi_ldivmod+0x68>
 8000c8a:	f000 f84d 	bl	8000d28 <__udivmoddi4>
 8000c8e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c92:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c96:	b004      	add	sp, #16
 8000c98:	4770      	bx	lr
 8000c9a:	4240      	negs	r0, r0
 8000c9c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ca0:	2b00      	cmp	r3, #0
 8000ca2:	db1b      	blt.n	8000cdc <__aeabi_ldivmod+0x84>
 8000ca4:	f000 f840 	bl	8000d28 <__udivmoddi4>
 8000ca8:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cac:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb0:	b004      	add	sp, #16
 8000cb2:	4240      	negs	r0, r0
 8000cb4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cb8:	4252      	negs	r2, r2
 8000cba:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000cbe:	4770      	bx	lr
 8000cc0:	4252      	negs	r2, r2
 8000cc2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000cc6:	f000 f82f 	bl	8000d28 <__udivmoddi4>
 8000cca:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cce:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cd2:	b004      	add	sp, #16
 8000cd4:	4240      	negs	r0, r0
 8000cd6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cda:	4770      	bx	lr
 8000cdc:	4252      	negs	r2, r2
 8000cde:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000ce2:	f000 f821 	bl	8000d28 <__udivmoddi4>
 8000ce6:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cea:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cee:	b004      	add	sp, #16
 8000cf0:	4252      	negs	r2, r2
 8000cf2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000cf6:	4770      	bx	lr

08000cf8 <__aeabi_uldivmod>:
 8000cf8:	b953      	cbnz	r3, 8000d10 <__aeabi_uldivmod+0x18>
 8000cfa:	b94a      	cbnz	r2, 8000d10 <__aeabi_uldivmod+0x18>
 8000cfc:	2900      	cmp	r1, #0
 8000cfe:	bf08      	it	eq
 8000d00:	2800      	cmpeq	r0, #0
 8000d02:	bf1c      	itt	ne
 8000d04:	f04f 31ff 	movne.w	r1, #4294967295
 8000d08:	f04f 30ff 	movne.w	r0, #4294967295
 8000d0c:	f000 b974 	b.w	8000ff8 <__aeabi_idiv0>
 8000d10:	f1ad 0c08 	sub.w	ip, sp, #8
 8000d14:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000d18:	f000 f806 	bl	8000d28 <__udivmoddi4>
 8000d1c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d20:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d24:	b004      	add	sp, #16
 8000d26:	4770      	bx	lr

08000d28 <__udivmoddi4>:
 8000d28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d2c:	9d08      	ldr	r5, [sp, #32]
 8000d2e:	4604      	mov	r4, r0
 8000d30:	468e      	mov	lr, r1
 8000d32:	2b00      	cmp	r3, #0
 8000d34:	d14d      	bne.n	8000dd2 <__udivmoddi4+0xaa>
 8000d36:	428a      	cmp	r2, r1
 8000d38:	4694      	mov	ip, r2
 8000d3a:	d969      	bls.n	8000e10 <__udivmoddi4+0xe8>
 8000d3c:	fab2 f282 	clz	r2, r2
 8000d40:	b152      	cbz	r2, 8000d58 <__udivmoddi4+0x30>
 8000d42:	fa01 f302 	lsl.w	r3, r1, r2
 8000d46:	f1c2 0120 	rsb	r1, r2, #32
 8000d4a:	fa20 f101 	lsr.w	r1, r0, r1
 8000d4e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d52:	ea41 0e03 	orr.w	lr, r1, r3
 8000d56:	4094      	lsls	r4, r2
 8000d58:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d5c:	0c21      	lsrs	r1, r4, #16
 8000d5e:	fbbe f6f8 	udiv	r6, lr, r8
 8000d62:	fa1f f78c 	uxth.w	r7, ip
 8000d66:	fb08 e316 	mls	r3, r8, r6, lr
 8000d6a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000d6e:	fb06 f107 	mul.w	r1, r6, r7
 8000d72:	4299      	cmp	r1, r3
 8000d74:	d90a      	bls.n	8000d8c <__udivmoddi4+0x64>
 8000d76:	eb1c 0303 	adds.w	r3, ip, r3
 8000d7a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d7e:	f080 811f 	bcs.w	8000fc0 <__udivmoddi4+0x298>
 8000d82:	4299      	cmp	r1, r3
 8000d84:	f240 811c 	bls.w	8000fc0 <__udivmoddi4+0x298>
 8000d88:	3e02      	subs	r6, #2
 8000d8a:	4463      	add	r3, ip
 8000d8c:	1a5b      	subs	r3, r3, r1
 8000d8e:	b2a4      	uxth	r4, r4
 8000d90:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d94:	fb08 3310 	mls	r3, r8, r0, r3
 8000d98:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d9c:	fb00 f707 	mul.w	r7, r0, r7
 8000da0:	42a7      	cmp	r7, r4
 8000da2:	d90a      	bls.n	8000dba <__udivmoddi4+0x92>
 8000da4:	eb1c 0404 	adds.w	r4, ip, r4
 8000da8:	f100 33ff 	add.w	r3, r0, #4294967295
 8000dac:	f080 810a 	bcs.w	8000fc4 <__udivmoddi4+0x29c>
 8000db0:	42a7      	cmp	r7, r4
 8000db2:	f240 8107 	bls.w	8000fc4 <__udivmoddi4+0x29c>
 8000db6:	4464      	add	r4, ip
 8000db8:	3802      	subs	r0, #2
 8000dba:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dbe:	1be4      	subs	r4, r4, r7
 8000dc0:	2600      	movs	r6, #0
 8000dc2:	b11d      	cbz	r5, 8000dcc <__udivmoddi4+0xa4>
 8000dc4:	40d4      	lsrs	r4, r2
 8000dc6:	2300      	movs	r3, #0
 8000dc8:	e9c5 4300 	strd	r4, r3, [r5]
 8000dcc:	4631      	mov	r1, r6
 8000dce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dd2:	428b      	cmp	r3, r1
 8000dd4:	d909      	bls.n	8000dea <__udivmoddi4+0xc2>
 8000dd6:	2d00      	cmp	r5, #0
 8000dd8:	f000 80ef 	beq.w	8000fba <__udivmoddi4+0x292>
 8000ddc:	2600      	movs	r6, #0
 8000dde:	e9c5 0100 	strd	r0, r1, [r5]
 8000de2:	4630      	mov	r0, r6
 8000de4:	4631      	mov	r1, r6
 8000de6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dea:	fab3 f683 	clz	r6, r3
 8000dee:	2e00      	cmp	r6, #0
 8000df0:	d14a      	bne.n	8000e88 <__udivmoddi4+0x160>
 8000df2:	428b      	cmp	r3, r1
 8000df4:	d302      	bcc.n	8000dfc <__udivmoddi4+0xd4>
 8000df6:	4282      	cmp	r2, r0
 8000df8:	f200 80f9 	bhi.w	8000fee <__udivmoddi4+0x2c6>
 8000dfc:	1a84      	subs	r4, r0, r2
 8000dfe:	eb61 0303 	sbc.w	r3, r1, r3
 8000e02:	2001      	movs	r0, #1
 8000e04:	469e      	mov	lr, r3
 8000e06:	2d00      	cmp	r5, #0
 8000e08:	d0e0      	beq.n	8000dcc <__udivmoddi4+0xa4>
 8000e0a:	e9c5 4e00 	strd	r4, lr, [r5]
 8000e0e:	e7dd      	b.n	8000dcc <__udivmoddi4+0xa4>
 8000e10:	b902      	cbnz	r2, 8000e14 <__udivmoddi4+0xec>
 8000e12:	deff      	udf	#255	; 0xff
 8000e14:	fab2 f282 	clz	r2, r2
 8000e18:	2a00      	cmp	r2, #0
 8000e1a:	f040 8092 	bne.w	8000f42 <__udivmoddi4+0x21a>
 8000e1e:	eba1 010c 	sub.w	r1, r1, ip
 8000e22:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e26:	fa1f fe8c 	uxth.w	lr, ip
 8000e2a:	2601      	movs	r6, #1
 8000e2c:	0c20      	lsrs	r0, r4, #16
 8000e2e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000e32:	fb07 1113 	mls	r1, r7, r3, r1
 8000e36:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e3a:	fb0e f003 	mul.w	r0, lr, r3
 8000e3e:	4288      	cmp	r0, r1
 8000e40:	d908      	bls.n	8000e54 <__udivmoddi4+0x12c>
 8000e42:	eb1c 0101 	adds.w	r1, ip, r1
 8000e46:	f103 38ff 	add.w	r8, r3, #4294967295
 8000e4a:	d202      	bcs.n	8000e52 <__udivmoddi4+0x12a>
 8000e4c:	4288      	cmp	r0, r1
 8000e4e:	f200 80cb 	bhi.w	8000fe8 <__udivmoddi4+0x2c0>
 8000e52:	4643      	mov	r3, r8
 8000e54:	1a09      	subs	r1, r1, r0
 8000e56:	b2a4      	uxth	r4, r4
 8000e58:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e5c:	fb07 1110 	mls	r1, r7, r0, r1
 8000e60:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000e64:	fb0e fe00 	mul.w	lr, lr, r0
 8000e68:	45a6      	cmp	lr, r4
 8000e6a:	d908      	bls.n	8000e7e <__udivmoddi4+0x156>
 8000e6c:	eb1c 0404 	adds.w	r4, ip, r4
 8000e70:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e74:	d202      	bcs.n	8000e7c <__udivmoddi4+0x154>
 8000e76:	45a6      	cmp	lr, r4
 8000e78:	f200 80bb 	bhi.w	8000ff2 <__udivmoddi4+0x2ca>
 8000e7c:	4608      	mov	r0, r1
 8000e7e:	eba4 040e 	sub.w	r4, r4, lr
 8000e82:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e86:	e79c      	b.n	8000dc2 <__udivmoddi4+0x9a>
 8000e88:	f1c6 0720 	rsb	r7, r6, #32
 8000e8c:	40b3      	lsls	r3, r6
 8000e8e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e92:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e96:	fa20 f407 	lsr.w	r4, r0, r7
 8000e9a:	fa01 f306 	lsl.w	r3, r1, r6
 8000e9e:	431c      	orrs	r4, r3
 8000ea0:	40f9      	lsrs	r1, r7
 8000ea2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ea6:	fa00 f306 	lsl.w	r3, r0, r6
 8000eaa:	fbb1 f8f9 	udiv	r8, r1, r9
 8000eae:	0c20      	lsrs	r0, r4, #16
 8000eb0:	fa1f fe8c 	uxth.w	lr, ip
 8000eb4:	fb09 1118 	mls	r1, r9, r8, r1
 8000eb8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000ebc:	fb08 f00e 	mul.w	r0, r8, lr
 8000ec0:	4288      	cmp	r0, r1
 8000ec2:	fa02 f206 	lsl.w	r2, r2, r6
 8000ec6:	d90b      	bls.n	8000ee0 <__udivmoddi4+0x1b8>
 8000ec8:	eb1c 0101 	adds.w	r1, ip, r1
 8000ecc:	f108 3aff 	add.w	sl, r8, #4294967295
 8000ed0:	f080 8088 	bcs.w	8000fe4 <__udivmoddi4+0x2bc>
 8000ed4:	4288      	cmp	r0, r1
 8000ed6:	f240 8085 	bls.w	8000fe4 <__udivmoddi4+0x2bc>
 8000eda:	f1a8 0802 	sub.w	r8, r8, #2
 8000ede:	4461      	add	r1, ip
 8000ee0:	1a09      	subs	r1, r1, r0
 8000ee2:	b2a4      	uxth	r4, r4
 8000ee4:	fbb1 f0f9 	udiv	r0, r1, r9
 8000ee8:	fb09 1110 	mls	r1, r9, r0, r1
 8000eec:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000ef0:	fb00 fe0e 	mul.w	lr, r0, lr
 8000ef4:	458e      	cmp	lr, r1
 8000ef6:	d908      	bls.n	8000f0a <__udivmoddi4+0x1e2>
 8000ef8:	eb1c 0101 	adds.w	r1, ip, r1
 8000efc:	f100 34ff 	add.w	r4, r0, #4294967295
 8000f00:	d26c      	bcs.n	8000fdc <__udivmoddi4+0x2b4>
 8000f02:	458e      	cmp	lr, r1
 8000f04:	d96a      	bls.n	8000fdc <__udivmoddi4+0x2b4>
 8000f06:	3802      	subs	r0, #2
 8000f08:	4461      	add	r1, ip
 8000f0a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000f0e:	fba0 9402 	umull	r9, r4, r0, r2
 8000f12:	eba1 010e 	sub.w	r1, r1, lr
 8000f16:	42a1      	cmp	r1, r4
 8000f18:	46c8      	mov	r8, r9
 8000f1a:	46a6      	mov	lr, r4
 8000f1c:	d356      	bcc.n	8000fcc <__udivmoddi4+0x2a4>
 8000f1e:	d053      	beq.n	8000fc8 <__udivmoddi4+0x2a0>
 8000f20:	b15d      	cbz	r5, 8000f3a <__udivmoddi4+0x212>
 8000f22:	ebb3 0208 	subs.w	r2, r3, r8
 8000f26:	eb61 010e 	sbc.w	r1, r1, lr
 8000f2a:	fa01 f707 	lsl.w	r7, r1, r7
 8000f2e:	fa22 f306 	lsr.w	r3, r2, r6
 8000f32:	40f1      	lsrs	r1, r6
 8000f34:	431f      	orrs	r7, r3
 8000f36:	e9c5 7100 	strd	r7, r1, [r5]
 8000f3a:	2600      	movs	r6, #0
 8000f3c:	4631      	mov	r1, r6
 8000f3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f42:	f1c2 0320 	rsb	r3, r2, #32
 8000f46:	40d8      	lsrs	r0, r3
 8000f48:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f4c:	fa21 f303 	lsr.w	r3, r1, r3
 8000f50:	4091      	lsls	r1, r2
 8000f52:	4301      	orrs	r1, r0
 8000f54:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f58:	fa1f fe8c 	uxth.w	lr, ip
 8000f5c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f60:	fb07 3610 	mls	r6, r7, r0, r3
 8000f64:	0c0b      	lsrs	r3, r1, #16
 8000f66:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000f6a:	fb00 f60e 	mul.w	r6, r0, lr
 8000f6e:	429e      	cmp	r6, r3
 8000f70:	fa04 f402 	lsl.w	r4, r4, r2
 8000f74:	d908      	bls.n	8000f88 <__udivmoddi4+0x260>
 8000f76:	eb1c 0303 	adds.w	r3, ip, r3
 8000f7a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f7e:	d22f      	bcs.n	8000fe0 <__udivmoddi4+0x2b8>
 8000f80:	429e      	cmp	r6, r3
 8000f82:	d92d      	bls.n	8000fe0 <__udivmoddi4+0x2b8>
 8000f84:	3802      	subs	r0, #2
 8000f86:	4463      	add	r3, ip
 8000f88:	1b9b      	subs	r3, r3, r6
 8000f8a:	b289      	uxth	r1, r1
 8000f8c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f90:	fb07 3316 	mls	r3, r7, r6, r3
 8000f94:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f98:	fb06 f30e 	mul.w	r3, r6, lr
 8000f9c:	428b      	cmp	r3, r1
 8000f9e:	d908      	bls.n	8000fb2 <__udivmoddi4+0x28a>
 8000fa0:	eb1c 0101 	adds.w	r1, ip, r1
 8000fa4:	f106 38ff 	add.w	r8, r6, #4294967295
 8000fa8:	d216      	bcs.n	8000fd8 <__udivmoddi4+0x2b0>
 8000faa:	428b      	cmp	r3, r1
 8000fac:	d914      	bls.n	8000fd8 <__udivmoddi4+0x2b0>
 8000fae:	3e02      	subs	r6, #2
 8000fb0:	4461      	add	r1, ip
 8000fb2:	1ac9      	subs	r1, r1, r3
 8000fb4:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000fb8:	e738      	b.n	8000e2c <__udivmoddi4+0x104>
 8000fba:	462e      	mov	r6, r5
 8000fbc:	4628      	mov	r0, r5
 8000fbe:	e705      	b.n	8000dcc <__udivmoddi4+0xa4>
 8000fc0:	4606      	mov	r6, r0
 8000fc2:	e6e3      	b.n	8000d8c <__udivmoddi4+0x64>
 8000fc4:	4618      	mov	r0, r3
 8000fc6:	e6f8      	b.n	8000dba <__udivmoddi4+0x92>
 8000fc8:	454b      	cmp	r3, r9
 8000fca:	d2a9      	bcs.n	8000f20 <__udivmoddi4+0x1f8>
 8000fcc:	ebb9 0802 	subs.w	r8, r9, r2
 8000fd0:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000fd4:	3801      	subs	r0, #1
 8000fd6:	e7a3      	b.n	8000f20 <__udivmoddi4+0x1f8>
 8000fd8:	4646      	mov	r6, r8
 8000fda:	e7ea      	b.n	8000fb2 <__udivmoddi4+0x28a>
 8000fdc:	4620      	mov	r0, r4
 8000fde:	e794      	b.n	8000f0a <__udivmoddi4+0x1e2>
 8000fe0:	4640      	mov	r0, r8
 8000fe2:	e7d1      	b.n	8000f88 <__udivmoddi4+0x260>
 8000fe4:	46d0      	mov	r8, sl
 8000fe6:	e77b      	b.n	8000ee0 <__udivmoddi4+0x1b8>
 8000fe8:	3b02      	subs	r3, #2
 8000fea:	4461      	add	r1, ip
 8000fec:	e732      	b.n	8000e54 <__udivmoddi4+0x12c>
 8000fee:	4630      	mov	r0, r6
 8000ff0:	e709      	b.n	8000e06 <__udivmoddi4+0xde>
 8000ff2:	4464      	add	r4, ip
 8000ff4:	3802      	subs	r0, #2
 8000ff6:	e742      	b.n	8000e7e <__udivmoddi4+0x156>

08000ff8 <__aeabi_idiv0>:
 8000ff8:	4770      	bx	lr
 8000ffa:	bf00      	nop

08000ffc <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8000ffc:	b480      	push	{r7}
 8000ffe:	b083      	sub	sp, #12
 8001000:	af00      	add	r7, sp, #0
 8001002:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8001004:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8001008:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 800100c:	f003 0301 	and.w	r3, r3, #1
 8001010:	2b00      	cmp	r3, #0
 8001012:	d013      	beq.n	800103c <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8001014:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8001018:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 800101c:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8001020:	2b00      	cmp	r3, #0
 8001022:	d00b      	beq.n	800103c <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8001024:	e000      	b.n	8001028 <ITM_SendChar+0x2c>
    {
      __NOP();
 8001026:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8001028:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800102c:	681b      	ldr	r3, [r3, #0]
 800102e:	2b00      	cmp	r3, #0
 8001030:	d0f9      	beq.n	8001026 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8001032:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8001036:	687a      	ldr	r2, [r7, #4]
 8001038:	b2d2      	uxtb	r2, r2
 800103a:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 800103c:	687b      	ldr	r3, [r7, #4]
}
 800103e:	4618      	mov	r0, r3
 8001040:	370c      	adds	r7, #12
 8001042:	46bd      	mov	sp, r7
 8001044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001048:	4770      	bx	lr

0800104a <_write>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int _write(int file, char *ptr, int len) //переопределение функции вывода информации через порт swo
{
 800104a:	b580      	push	{r7, lr}
 800104c:	b086      	sub	sp, #24
 800104e:	af00      	add	r7, sp, #0
 8001050:	60f8      	str	r0, [r7, #12]
 8001052:	60b9      	str	r1, [r7, #8]
 8001054:	607a      	str	r2, [r7, #4]
  int i = 0;
 8001056:	2300      	movs	r3, #0
 8001058:	617b      	str	r3, [r7, #20]
  for(i = 0; i < len; i++)
 800105a:	2300      	movs	r3, #0
 800105c:	617b      	str	r3, [r7, #20]
 800105e:	e009      	b.n	8001074 <_write+0x2a>
  {
    ITM_SendChar((*ptr++));  //отправка 1-го значения char через swo
 8001060:	68bb      	ldr	r3, [r7, #8]
 8001062:	1c5a      	adds	r2, r3, #1
 8001064:	60ba      	str	r2, [r7, #8]
 8001066:	781b      	ldrb	r3, [r3, #0]
 8001068:	4618      	mov	r0, r3
 800106a:	f7ff ffc7 	bl	8000ffc <ITM_SendChar>
  for(i = 0; i < len; i++)
 800106e:	697b      	ldr	r3, [r7, #20]
 8001070:	3301      	adds	r3, #1
 8001072:	617b      	str	r3, [r7, #20]
 8001074:	697a      	ldr	r2, [r7, #20]
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	429a      	cmp	r2, r3
 800107a:	dbf1      	blt.n	8001060 <_write+0x16>
  }
  return len;
 800107c:	687b      	ldr	r3, [r7, #4]
}
 800107e:	4618      	mov	r0, r3
 8001080:	3718      	adds	r7, #24
 8001082:	46bd      	mov	sp, r7
 8001084:	bd80      	pop	{r7, pc}
	...

08001088 <bmp_get_call_data>:

//=============================ФУНКЦ�?�?=======================================================

//-------------------------------BMP---------------------------------------------------------
void bmp_get_call_data()
{
 8001088:	b580      	push	{r7, lr}
 800108a:	b082      	sub	sp, #8
 800108c:	af00      	add	r7, sp, #0
	uint8_t buf = 0x88 | (1 << 7); //адрес регистра с которог начинаем читать данные
 800108e:	2388      	movs	r3, #136	; 0x88
 8001090:	71fb      	strb	r3, [r7, #7]

	bmp_cs(0); //отключаем ножку CS у BMP для того чтобы сказать, что мы начали общение с BMP
 8001092:	2000      	movs	r0, #0
 8001094:	f002 fea8 	bl	8003de8 <bmp_cs>

	HAL_SPI_Transmit(&hspi2, &buf, 1, 1000); //отправляем начальный регистор для чтения
 8001098:	1df9      	adds	r1, r7, #7
 800109a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800109e:	2201      	movs	r2, #1
 80010a0:	484b      	ldr	r0, [pc, #300]	; (80011d0 <bmp_get_call_data+0x148>)
 80010a2:	f005 fdad 	bl	8006c00 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi2, bmp_cal_data, 24, 1000); //считываем 24 байта информациии в массив
 80010a6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80010aa:	2218      	movs	r2, #24
 80010ac:	4949      	ldr	r1, [pc, #292]	; (80011d4 <bmp_get_call_data+0x14c>)
 80010ae:	4848      	ldr	r0, [pc, #288]	; (80011d0 <bmp_get_call_data+0x148>)
 80010b0:	f005 fee2 	bl	8006e78 <HAL_SPI_Receive>

	bmp_cs(1); // включаем ножку
 80010b4:	2001      	movs	r0, #1
 80010b6:	f002 fe97 	bl	8003de8 <bmp_cs>

	//совмещаем данные
	dig_T1 = ((unsigned short)bmp_cal_data[1]) << 8 | bmp_cal_data[0];
 80010ba:	4b46      	ldr	r3, [pc, #280]	; (80011d4 <bmp_get_call_data+0x14c>)
 80010bc:	785b      	ldrb	r3, [r3, #1]
 80010be:	021b      	lsls	r3, r3, #8
 80010c0:	b21a      	sxth	r2, r3
 80010c2:	4b44      	ldr	r3, [pc, #272]	; (80011d4 <bmp_get_call_data+0x14c>)
 80010c4:	781b      	ldrb	r3, [r3, #0]
 80010c6:	b21b      	sxth	r3, r3
 80010c8:	4313      	orrs	r3, r2
 80010ca:	b21b      	sxth	r3, r3
 80010cc:	b29a      	uxth	r2, r3
 80010ce:	4b42      	ldr	r3, [pc, #264]	; (80011d8 <bmp_get_call_data+0x150>)
 80010d0:	801a      	strh	r2, [r3, #0]
	dig_T2 = ((signed short)bmp_cal_data[3]) << 8 | bmp_cal_data[2];
 80010d2:	4b40      	ldr	r3, [pc, #256]	; (80011d4 <bmp_get_call_data+0x14c>)
 80010d4:	78db      	ldrb	r3, [r3, #3]
 80010d6:	021b      	lsls	r3, r3, #8
 80010d8:	b21a      	sxth	r2, r3
 80010da:	4b3e      	ldr	r3, [pc, #248]	; (80011d4 <bmp_get_call_data+0x14c>)
 80010dc:	789b      	ldrb	r3, [r3, #2]
 80010de:	b21b      	sxth	r3, r3
 80010e0:	4313      	orrs	r3, r2
 80010e2:	b21a      	sxth	r2, r3
 80010e4:	4b3d      	ldr	r3, [pc, #244]	; (80011dc <bmp_get_call_data+0x154>)
 80010e6:	801a      	strh	r2, [r3, #0]
	dig_T3 = ((signed short)bmp_cal_data[5]) << 8 | bmp_cal_data[4];
 80010e8:	4b3a      	ldr	r3, [pc, #232]	; (80011d4 <bmp_get_call_data+0x14c>)
 80010ea:	795b      	ldrb	r3, [r3, #5]
 80010ec:	021b      	lsls	r3, r3, #8
 80010ee:	b21a      	sxth	r2, r3
 80010f0:	4b38      	ldr	r3, [pc, #224]	; (80011d4 <bmp_get_call_data+0x14c>)
 80010f2:	791b      	ldrb	r3, [r3, #4]
 80010f4:	b21b      	sxth	r3, r3
 80010f6:	4313      	orrs	r3, r2
 80010f8:	b21a      	sxth	r2, r3
 80010fa:	4b39      	ldr	r3, [pc, #228]	; (80011e0 <bmp_get_call_data+0x158>)
 80010fc:	801a      	strh	r2, [r3, #0]
	dig_P1 = ((unsigned short)bmp_cal_data[7]) << 8 | bmp_cal_data[6];
 80010fe:	4b35      	ldr	r3, [pc, #212]	; (80011d4 <bmp_get_call_data+0x14c>)
 8001100:	79db      	ldrb	r3, [r3, #7]
 8001102:	021b      	lsls	r3, r3, #8
 8001104:	b21a      	sxth	r2, r3
 8001106:	4b33      	ldr	r3, [pc, #204]	; (80011d4 <bmp_get_call_data+0x14c>)
 8001108:	799b      	ldrb	r3, [r3, #6]
 800110a:	b21b      	sxth	r3, r3
 800110c:	4313      	orrs	r3, r2
 800110e:	b21b      	sxth	r3, r3
 8001110:	b29a      	uxth	r2, r3
 8001112:	4b34      	ldr	r3, [pc, #208]	; (80011e4 <bmp_get_call_data+0x15c>)
 8001114:	801a      	strh	r2, [r3, #0]
	dig_P2 = ((signed short)bmp_cal_data[9]) << 8 | bmp_cal_data[8];
 8001116:	4b2f      	ldr	r3, [pc, #188]	; (80011d4 <bmp_get_call_data+0x14c>)
 8001118:	7a5b      	ldrb	r3, [r3, #9]
 800111a:	021b      	lsls	r3, r3, #8
 800111c:	b21a      	sxth	r2, r3
 800111e:	4b2d      	ldr	r3, [pc, #180]	; (80011d4 <bmp_get_call_data+0x14c>)
 8001120:	7a1b      	ldrb	r3, [r3, #8]
 8001122:	b21b      	sxth	r3, r3
 8001124:	4313      	orrs	r3, r2
 8001126:	b21a      	sxth	r2, r3
 8001128:	4b2f      	ldr	r3, [pc, #188]	; (80011e8 <bmp_get_call_data+0x160>)
 800112a:	801a      	strh	r2, [r3, #0]
	dig_P3 = ((signed short)bmp_cal_data[11]) << 8 | bmp_cal_data[10];
 800112c:	4b29      	ldr	r3, [pc, #164]	; (80011d4 <bmp_get_call_data+0x14c>)
 800112e:	7adb      	ldrb	r3, [r3, #11]
 8001130:	021b      	lsls	r3, r3, #8
 8001132:	b21a      	sxth	r2, r3
 8001134:	4b27      	ldr	r3, [pc, #156]	; (80011d4 <bmp_get_call_data+0x14c>)
 8001136:	7a9b      	ldrb	r3, [r3, #10]
 8001138:	b21b      	sxth	r3, r3
 800113a:	4313      	orrs	r3, r2
 800113c:	b21a      	sxth	r2, r3
 800113e:	4b2b      	ldr	r3, [pc, #172]	; (80011ec <bmp_get_call_data+0x164>)
 8001140:	801a      	strh	r2, [r3, #0]
	dig_P4 = ((signed short)bmp_cal_data[13]) << 8 | bmp_cal_data[12];
 8001142:	4b24      	ldr	r3, [pc, #144]	; (80011d4 <bmp_get_call_data+0x14c>)
 8001144:	7b5b      	ldrb	r3, [r3, #13]
 8001146:	021b      	lsls	r3, r3, #8
 8001148:	b21a      	sxth	r2, r3
 800114a:	4b22      	ldr	r3, [pc, #136]	; (80011d4 <bmp_get_call_data+0x14c>)
 800114c:	7b1b      	ldrb	r3, [r3, #12]
 800114e:	b21b      	sxth	r3, r3
 8001150:	4313      	orrs	r3, r2
 8001152:	b21a      	sxth	r2, r3
 8001154:	4b26      	ldr	r3, [pc, #152]	; (80011f0 <bmp_get_call_data+0x168>)
 8001156:	801a      	strh	r2, [r3, #0]
	dig_P5 = ((signed short)bmp_cal_data[15]) << 8 | bmp_cal_data[14];
 8001158:	4b1e      	ldr	r3, [pc, #120]	; (80011d4 <bmp_get_call_data+0x14c>)
 800115a:	7bdb      	ldrb	r3, [r3, #15]
 800115c:	021b      	lsls	r3, r3, #8
 800115e:	b21a      	sxth	r2, r3
 8001160:	4b1c      	ldr	r3, [pc, #112]	; (80011d4 <bmp_get_call_data+0x14c>)
 8001162:	7b9b      	ldrb	r3, [r3, #14]
 8001164:	b21b      	sxth	r3, r3
 8001166:	4313      	orrs	r3, r2
 8001168:	b21a      	sxth	r2, r3
 800116a:	4b22      	ldr	r3, [pc, #136]	; (80011f4 <bmp_get_call_data+0x16c>)
 800116c:	801a      	strh	r2, [r3, #0]
	dig_P6 = ((signed short)bmp_cal_data[17]) << 8 | bmp_cal_data[16];
 800116e:	4b19      	ldr	r3, [pc, #100]	; (80011d4 <bmp_get_call_data+0x14c>)
 8001170:	7c5b      	ldrb	r3, [r3, #17]
 8001172:	021b      	lsls	r3, r3, #8
 8001174:	b21a      	sxth	r2, r3
 8001176:	4b17      	ldr	r3, [pc, #92]	; (80011d4 <bmp_get_call_data+0x14c>)
 8001178:	7c1b      	ldrb	r3, [r3, #16]
 800117a:	b21b      	sxth	r3, r3
 800117c:	4313      	orrs	r3, r2
 800117e:	b21a      	sxth	r2, r3
 8001180:	4b1d      	ldr	r3, [pc, #116]	; (80011f8 <bmp_get_call_data+0x170>)
 8001182:	801a      	strh	r2, [r3, #0]
	dig_P7 = ((signed short)bmp_cal_data[19]) << 8 | bmp_cal_data[18];
 8001184:	4b13      	ldr	r3, [pc, #76]	; (80011d4 <bmp_get_call_data+0x14c>)
 8001186:	7cdb      	ldrb	r3, [r3, #19]
 8001188:	021b      	lsls	r3, r3, #8
 800118a:	b21a      	sxth	r2, r3
 800118c:	4b11      	ldr	r3, [pc, #68]	; (80011d4 <bmp_get_call_data+0x14c>)
 800118e:	7c9b      	ldrb	r3, [r3, #18]
 8001190:	b21b      	sxth	r3, r3
 8001192:	4313      	orrs	r3, r2
 8001194:	b21a      	sxth	r2, r3
 8001196:	4b19      	ldr	r3, [pc, #100]	; (80011fc <bmp_get_call_data+0x174>)
 8001198:	801a      	strh	r2, [r3, #0]
	dig_P8 = ((signed short)bmp_cal_data[21]) << 8 | bmp_cal_data[20];
 800119a:	4b0e      	ldr	r3, [pc, #56]	; (80011d4 <bmp_get_call_data+0x14c>)
 800119c:	7d5b      	ldrb	r3, [r3, #21]
 800119e:	021b      	lsls	r3, r3, #8
 80011a0:	b21a      	sxth	r2, r3
 80011a2:	4b0c      	ldr	r3, [pc, #48]	; (80011d4 <bmp_get_call_data+0x14c>)
 80011a4:	7d1b      	ldrb	r3, [r3, #20]
 80011a6:	b21b      	sxth	r3, r3
 80011a8:	4313      	orrs	r3, r2
 80011aa:	b21a      	sxth	r2, r3
 80011ac:	4b14      	ldr	r3, [pc, #80]	; (8001200 <bmp_get_call_data+0x178>)
 80011ae:	801a      	strh	r2, [r3, #0]
	dig_P9 = ((signed short)bmp_cal_data[23]) << 8 | bmp_cal_data[22];
 80011b0:	4b08      	ldr	r3, [pc, #32]	; (80011d4 <bmp_get_call_data+0x14c>)
 80011b2:	7ddb      	ldrb	r3, [r3, #23]
 80011b4:	021b      	lsls	r3, r3, #8
 80011b6:	b21a      	sxth	r2, r3
 80011b8:	4b06      	ldr	r3, [pc, #24]	; (80011d4 <bmp_get_call_data+0x14c>)
 80011ba:	7d9b      	ldrb	r3, [r3, #22]
 80011bc:	b21b      	sxth	r3, r3
 80011be:	4313      	orrs	r3, r2
 80011c0:	b21a      	sxth	r2, r3
 80011c2:	4b10      	ldr	r3, [pc, #64]	; (8001204 <bmp_get_call_data+0x17c>)
 80011c4:	801a      	strh	r2, [r3, #0]
}
 80011c6:	bf00      	nop
 80011c8:	3708      	adds	r7, #8
 80011ca:	46bd      	mov	sp, r7
 80011cc:	bd80      	pop	{r7, pc}
 80011ce:	bf00      	nop
 80011d0:	200002e8 	.word	0x200002e8
 80011d4:	20000414 	.word	0x20000414
 80011d8:	20000434 	.word	0x20000434
 80011dc:	20000436 	.word	0x20000436
 80011e0:	20000438 	.word	0x20000438
 80011e4:	2000043a 	.word	0x2000043a
 80011e8:	2000043c 	.word	0x2000043c
 80011ec:	2000043e 	.word	0x2000043e
 80011f0:	20000440 	.word	0x20000440
 80011f4:	20000442 	.word	0x20000442
 80011f8:	20000444 	.word	0x20000444
 80011fc:	20000446 	.word	0x20000446
 8001200:	20000448 	.word	0x20000448
 8001204:	2000044a 	.word	0x2000044a

08001208 <bmp_get_temp>:

float bmp_get_temp(signed long int adc_T)
{
 8001208:	b480      	push	{r7}
 800120a:	b087      	sub	sp, #28
 800120c:	af00      	add	r7, sp, #0
 800120e:	6078      	str	r0, [r7, #4]
  signed long var1, var2, T;  //буферные переменные
  float T_back;

  var1 = ((((adc_T>>3) - ((signed long int)dig_T1<<1))) * ((signed long int)dig_T2))>>11;
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	10da      	asrs	r2, r3, #3
 8001214:	4b24      	ldr	r3, [pc, #144]	; (80012a8 <bmp_get_temp+0xa0>)
 8001216:	881b      	ldrh	r3, [r3, #0]
 8001218:	005b      	lsls	r3, r3, #1
 800121a:	1ad3      	subs	r3, r2, r3
 800121c:	4a23      	ldr	r2, [pc, #140]	; (80012ac <bmp_get_temp+0xa4>)
 800121e:	f9b2 2000 	ldrsh.w	r2, [r2]
 8001222:	fb02 f303 	mul.w	r3, r2, r3
 8001226:	12db      	asrs	r3, r3, #11
 8001228:	617b      	str	r3, [r7, #20]
  var2 = (((((adc_T>>4) - ((signed long int)dig_T1)) * ((adc_T>>4) - ((signed long int)dig_T1))) >> 12) * ((signed long int)dig_T3)) >> 14;
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	111b      	asrs	r3, r3, #4
 800122e:	4a1e      	ldr	r2, [pc, #120]	; (80012a8 <bmp_get_temp+0xa0>)
 8001230:	8812      	ldrh	r2, [r2, #0]
 8001232:	1a9b      	subs	r3, r3, r2
 8001234:	687a      	ldr	r2, [r7, #4]
 8001236:	1112      	asrs	r2, r2, #4
 8001238:	491b      	ldr	r1, [pc, #108]	; (80012a8 <bmp_get_temp+0xa0>)
 800123a:	8809      	ldrh	r1, [r1, #0]
 800123c:	1a52      	subs	r2, r2, r1
 800123e:	fb02 f303 	mul.w	r3, r2, r3
 8001242:	131b      	asrs	r3, r3, #12
 8001244:	4a1a      	ldr	r2, [pc, #104]	; (80012b0 <bmp_get_temp+0xa8>)
 8001246:	f9b2 2000 	ldrsh.w	r2, [r2]
 800124a:	fb02 f303 	mul.w	r3, r2, r3
 800124e:	139b      	asrs	r3, r3, #14
 8001250:	613b      	str	r3, [r7, #16]
  t_fine = var1 + var2;
 8001252:	697a      	ldr	r2, [r7, #20]
 8001254:	693b      	ldr	r3, [r7, #16]
 8001256:	4413      	add	r3, r2
 8001258:	4a16      	ldr	r2, [pc, #88]	; (80012b4 <bmp_get_temp+0xac>)
 800125a:	6013      	str	r3, [r2, #0]
  T = (t_fine * 5 + 128) >> 8;
 800125c:	4b15      	ldr	r3, [pc, #84]	; (80012b4 <bmp_get_temp+0xac>)
 800125e:	681a      	ldr	r2, [r3, #0]
 8001260:	4613      	mov	r3, r2
 8001262:	009b      	lsls	r3, r3, #2
 8001264:	4413      	add	r3, r2
 8001266:	3380      	adds	r3, #128	; 0x80
 8001268:	121b      	asrs	r3, r3, #8
 800126a:	60fb      	str	r3, [r7, #12]

  T_back = T;
 800126c:	68fb      	ldr	r3, [r7, #12]
 800126e:	ee07 3a90 	vmov	s15, r3
 8001272:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001276:	edc7 7a02 	vstr	s15, [r7, #8]
  temp_nrf = T;
 800127a:	68fb      	ldr	r3, [r7, #12]
 800127c:	b21a      	sxth	r2, r3
 800127e:	4b0e      	ldr	r3, [pc, #56]	; (80012b8 <bmp_get_temp+0xb0>)
 8001280:	801a      	strh	r2, [r3, #0]
  T_back = T_back / 100;
 8001282:	ed97 7a02 	vldr	s14, [r7, #8]
 8001286:	eddf 6a0d 	vldr	s13, [pc, #52]	; 80012bc <bmp_get_temp+0xb4>
 800128a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800128e:	edc7 7a02 	vstr	s15, [r7, #8]

  return T_back;
 8001292:	68bb      	ldr	r3, [r7, #8]
 8001294:	ee07 3a90 	vmov	s15, r3
}
 8001298:	eeb0 0a67 	vmov.f32	s0, s15
 800129c:	371c      	adds	r7, #28
 800129e:	46bd      	mov	sp, r7
 80012a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a4:	4770      	bx	lr
 80012a6:	bf00      	nop
 80012a8:	20000434 	.word	0x20000434
 80012ac:	20000436 	.word	0x20000436
 80012b0:	20000438 	.word	0x20000438
 80012b4:	2000044c 	.word	0x2000044c
 80012b8:	200004c6 	.word	0x200004c6
 80012bc:	42c80000 	.word	0x42c80000

080012c0 <bmp_get_press>:

unsigned long int bmp_get_press(signed long int adc_P)
{
 80012c0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80012c4:	b0ce      	sub	sp, #312	; 0x138
 80012c6:	af00      	add	r7, sp, #0
 80012c8:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114
  signed long long int var1, var2, p;
  var1 = ((signed long long int)t_fine) - 128000;
 80012cc:	4baf      	ldr	r3, [pc, #700]	; (800158c <bmp_get_press+0x2cc>)
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	17da      	asrs	r2, r3, #31
 80012d2:	461c      	mov	r4, r3
 80012d4:	4615      	mov	r5, r2
 80012d6:	f5b4 3afa 	subs.w	sl, r4, #128000	; 0x1f400
 80012da:	f145 3bff 	adc.w	fp, r5, #4294967295
 80012de:	e9c7 ab4c 	strd	sl, fp, [r7, #304]	; 0x130
  var2 = var1 * var1 * (signed long long int)dig_P6;
 80012e2:	f8d7 2134 	ldr.w	r2, [r7, #308]	; 0x134
 80012e6:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80012ea:	fb03 f102 	mul.w	r1, r3, r2
 80012ee:	f8d7 2134 	ldr.w	r2, [r7, #308]	; 0x134
 80012f2:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80012f6:	fb02 f303 	mul.w	r3, r2, r3
 80012fa:	18ca      	adds	r2, r1, r3
 80012fc:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8001300:	fba3 8903 	umull	r8, r9, r3, r3
 8001304:	eb02 0309 	add.w	r3, r2, r9
 8001308:	4699      	mov	r9, r3
 800130a:	4ba1      	ldr	r3, [pc, #644]	; (8001590 <bmp_get_press+0x2d0>)
 800130c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001310:	b21b      	sxth	r3, r3
 8001312:	17da      	asrs	r2, r3, #31
 8001314:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8001318:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800131c:	e9d7 0130 	ldrd	r0, r1, [r7, #192]	; 0xc0
 8001320:	4603      	mov	r3, r0
 8001322:	fb03 f209 	mul.w	r2, r3, r9
 8001326:	460b      	mov	r3, r1
 8001328:	fb08 f303 	mul.w	r3, r8, r3
 800132c:	4413      	add	r3, r2
 800132e:	4602      	mov	r2, r0
 8001330:	fba8 1202 	umull	r1, r2, r8, r2
 8001334:	f8c7 20cc 	str.w	r2, [r7, #204]	; 0xcc
 8001338:	460a      	mov	r2, r1
 800133a:	f8c7 20c8 	str.w	r2, [r7, #200]	; 0xc8
 800133e:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 8001342:	4413      	add	r3, r2
 8001344:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8001348:	e9d7 3432 	ldrd	r3, r4, [r7, #200]	; 0xc8
 800134c:	e9c7 344a 	strd	r3, r4, [r7, #296]	; 0x128
 8001350:	e9c7 344a 	strd	r3, r4, [r7, #296]	; 0x128
  var2 = var2 + ((var1*(signed long long int)dig_P5)<<17);
 8001354:	4b8f      	ldr	r3, [pc, #572]	; (8001594 <bmp_get_press+0x2d4>)
 8001356:	f9b3 3000 	ldrsh.w	r3, [r3]
 800135a:	b21b      	sxth	r3, r3
 800135c:	17da      	asrs	r2, r3, #31
 800135e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8001362:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8001366:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800136a:	e9d7 452e 	ldrd	r4, r5, [r7, #184]	; 0xb8
 800136e:	462a      	mov	r2, r5
 8001370:	fb02 f203 	mul.w	r2, r2, r3
 8001374:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8001378:	4621      	mov	r1, r4
 800137a:	fb01 f303 	mul.w	r3, r1, r3
 800137e:	441a      	add	r2, r3
 8001380:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8001384:	4621      	mov	r1, r4
 8001386:	fba3 1301 	umull	r1, r3, r3, r1
 800138a:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 800138e:	460b      	mov	r3, r1
 8001390:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8001394:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8001398:	18d3      	adds	r3, r2, r3
 800139a:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 800139e:	f04f 0000 	mov.w	r0, #0
 80013a2:	f04f 0100 	mov.w	r1, #0
 80013a6:	e9d7 4542 	ldrd	r4, r5, [r7, #264]	; 0x108
 80013aa:	462b      	mov	r3, r5
 80013ac:	0459      	lsls	r1, r3, #17
 80013ae:	4623      	mov	r3, r4
 80013b0:	ea41 31d3 	orr.w	r1, r1, r3, lsr #15
 80013b4:	4623      	mov	r3, r4
 80013b6:	0458      	lsls	r0, r3, #17
 80013b8:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	; 0x128
 80013bc:	1814      	adds	r4, r2, r0
 80013be:	64bc      	str	r4, [r7, #72]	; 0x48
 80013c0:	414b      	adcs	r3, r1
 80013c2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80013c4:	e9d7 3412 	ldrd	r3, r4, [r7, #72]	; 0x48
 80013c8:	e9c7 344a 	strd	r3, r4, [r7, #296]	; 0x128
  var2 = var2 + (((signed long long int)dig_P4)<<35);
 80013cc:	4b72      	ldr	r3, [pc, #456]	; (8001598 <bmp_get_press+0x2d8>)
 80013ce:	f9b3 3000 	ldrsh.w	r3, [r3]
 80013d2:	b21b      	sxth	r3, r3
 80013d4:	17da      	asrs	r2, r3, #31
 80013d6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80013da:	f8c7 20b4 	str.w	r2, [r7, #180]	; 0xb4
 80013de:	f04f 0000 	mov.w	r0, #0
 80013e2:	f04f 0100 	mov.w	r1, #0
 80013e6:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80013ea:	00d9      	lsls	r1, r3, #3
 80013ec:	2000      	movs	r0, #0
 80013ee:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	; 0x128
 80013f2:	1814      	adds	r4, r2, r0
 80013f4:	643c      	str	r4, [r7, #64]	; 0x40
 80013f6:	414b      	adcs	r3, r1
 80013f8:	647b      	str	r3, [r7, #68]	; 0x44
 80013fa:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
 80013fe:	e9c7 344a 	strd	r3, r4, [r7, #296]	; 0x128
  var1 = ((var1 * var1 * (signed long long int)dig_P3)>>8) + ((var1 * (signed long long int)dig_P2)<<12);
 8001402:	f8d7 2134 	ldr.w	r2, [r7, #308]	; 0x134
 8001406:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800140a:	fb03 f102 	mul.w	r1, r3, r2
 800140e:	f8d7 2134 	ldr.w	r2, [r7, #308]	; 0x134
 8001412:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8001416:	fb02 f303 	mul.w	r3, r2, r3
 800141a:	18ca      	adds	r2, r1, r3
 800141c:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8001420:	fba3 1303 	umull	r1, r3, r3, r3
 8001424:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8001428:	460b      	mov	r3, r1
 800142a:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800142e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8001432:	18d3      	adds	r3, r2, r3
 8001434:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8001438:	4b58      	ldr	r3, [pc, #352]	; (800159c <bmp_get_press+0x2dc>)
 800143a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800143e:	b21b      	sxth	r3, r3
 8001440:	17da      	asrs	r2, r3, #31
 8001442:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8001446:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800144a:	e9d7 4540 	ldrd	r4, r5, [r7, #256]	; 0x100
 800144e:	462b      	mov	r3, r5
 8001450:	e9d7 892a 	ldrd	r8, r9, [r7, #168]	; 0xa8
 8001454:	4642      	mov	r2, r8
 8001456:	fb02 f203 	mul.w	r2, r2, r3
 800145a:	464b      	mov	r3, r9
 800145c:	4621      	mov	r1, r4
 800145e:	fb01 f303 	mul.w	r3, r1, r3
 8001462:	4413      	add	r3, r2
 8001464:	4622      	mov	r2, r4
 8001466:	4641      	mov	r1, r8
 8001468:	fba2 1201 	umull	r1, r2, r2, r1
 800146c:	f8c7 20fc 	str.w	r2, [r7, #252]	; 0xfc
 8001470:	460a      	mov	r2, r1
 8001472:	f8c7 20f8 	str.w	r2, [r7, #248]	; 0xf8
 8001476:	f8d7 20fc 	ldr.w	r2, [r7, #252]	; 0xfc
 800147a:	4413      	add	r3, r2
 800147c:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8001480:	f04f 0000 	mov.w	r0, #0
 8001484:	f04f 0100 	mov.w	r1, #0
 8001488:	e9d7 453e 	ldrd	r4, r5, [r7, #248]	; 0xf8
 800148c:	4623      	mov	r3, r4
 800148e:	0a18      	lsrs	r0, r3, #8
 8001490:	462b      	mov	r3, r5
 8001492:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 8001496:	462b      	mov	r3, r5
 8001498:	1219      	asrs	r1, r3, #8
 800149a:	4b41      	ldr	r3, [pc, #260]	; (80015a0 <bmp_get_press+0x2e0>)
 800149c:	f9b3 3000 	ldrsh.w	r3, [r3]
 80014a0:	b21b      	sxth	r3, r3
 80014a2:	17da      	asrs	r2, r3, #31
 80014a4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80014a8:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80014ac:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80014b0:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80014b4:	464a      	mov	r2, r9
 80014b6:	fb02 f203 	mul.w	r2, r2, r3
 80014ba:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80014be:	4644      	mov	r4, r8
 80014c0:	fb04 f303 	mul.w	r3, r4, r3
 80014c4:	441a      	add	r2, r3
 80014c6:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80014ca:	4644      	mov	r4, r8
 80014cc:	fba3 4304 	umull	r4, r3, r3, r4
 80014d0:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80014d4:	4623      	mov	r3, r4
 80014d6:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80014da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80014de:	18d3      	adds	r3, r2, r3
 80014e0:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80014e4:	f04f 0200 	mov.w	r2, #0
 80014e8:	f04f 0300 	mov.w	r3, #0
 80014ec:	e9d7 893c 	ldrd	r8, r9, [r7, #240]	; 0xf0
 80014f0:	464c      	mov	r4, r9
 80014f2:	0323      	lsls	r3, r4, #12
 80014f4:	4644      	mov	r4, r8
 80014f6:	ea43 5314 	orr.w	r3, r3, r4, lsr #20
 80014fa:	4644      	mov	r4, r8
 80014fc:	0322      	lsls	r2, r4, #12
 80014fe:	1884      	adds	r4, r0, r2
 8001500:	63bc      	str	r4, [r7, #56]	; 0x38
 8001502:	eb41 0303 	adc.w	r3, r1, r3
 8001506:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001508:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	; 0x38
 800150c:	e9c7 344c 	strd	r3, r4, [r7, #304]	; 0x130
  var1 = (((((signed long long int)1)<<47)+var1))*((signed long long int)dig_P1)>>33;
 8001510:	e9d7 234c 	ldrd	r2, r3, [r7, #304]	; 0x130
 8001514:	f503 4100 	add.w	r1, r3, #32768	; 0x8000
 8001518:	f8c7 109c 	str.w	r1, [r7, #156]	; 0x9c
 800151c:	f8c7 2098 	str.w	r2, [r7, #152]	; 0x98
 8001520:	4b20      	ldr	r3, [pc, #128]	; (80015a4 <bmp_get_press+0x2e4>)
 8001522:	881b      	ldrh	r3, [r3, #0]
 8001524:	b29b      	uxth	r3, r3
 8001526:	2200      	movs	r2, #0
 8001528:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800152c:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8001530:	e9d7 4526 	ldrd	r4, r5, [r7, #152]	; 0x98
 8001534:	462b      	mov	r3, r5
 8001536:	e9d7 8924 	ldrd	r8, r9, [r7, #144]	; 0x90
 800153a:	4642      	mov	r2, r8
 800153c:	fb02 f203 	mul.w	r2, r2, r3
 8001540:	464b      	mov	r3, r9
 8001542:	4621      	mov	r1, r4
 8001544:	fb01 f303 	mul.w	r3, r1, r3
 8001548:	4413      	add	r3, r2
 800154a:	4622      	mov	r2, r4
 800154c:	4641      	mov	r1, r8
 800154e:	fba2 1201 	umull	r1, r2, r2, r1
 8001552:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8001556:	460a      	mov	r2, r1
 8001558:	f8c7 20e8 	str.w	r2, [r7, #232]	; 0xe8
 800155c:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8001560:	4413      	add	r3, r2
 8001562:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8001566:	f04f 0200 	mov.w	r2, #0
 800156a:	f04f 0300 	mov.w	r3, #0
 800156e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8001572:	4629      	mov	r1, r5
 8001574:	104a      	asrs	r2, r1, #1
 8001576:	4629      	mov	r1, r5
 8001578:	17cb      	asrs	r3, r1, #31
 800157a:	e9c7 234c 	strd	r2, r3, [r7, #304]	; 0x130
  if (var1 == 0)
 800157e:	e9d7 234c 	ldrd	r2, r3, [r7, #304]	; 0x130
 8001582:	4313      	orrs	r3, r2
 8001584:	d110      	bne.n	80015a8 <bmp_get_press+0x2e8>
  {
    return 0; // avoid exception caused by division by zero
 8001586:	2300      	movs	r3, #0
 8001588:	e174      	b.n	8001874 <bmp_get_press+0x5b4>
 800158a:	bf00      	nop
 800158c:	2000044c 	.word	0x2000044c
 8001590:	20000444 	.word	0x20000444
 8001594:	20000442 	.word	0x20000442
 8001598:	20000440 	.word	0x20000440
 800159c:	2000043e 	.word	0x2000043e
 80015a0:	2000043c 	.word	0x2000043c
 80015a4:	2000043a 	.word	0x2000043a
  }
  p = 1048576-adc_P;
 80015a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80015ac:	f5c3 1380 	rsb	r3, r3, #1048576	; 0x100000
 80015b0:	17da      	asrs	r2, r3, #31
 80015b2:	633b      	str	r3, [r7, #48]	; 0x30
 80015b4:	637a      	str	r2, [r7, #52]	; 0x34
 80015b6:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 80015ba:	e9c7 3448 	strd	r3, r4, [r7, #288]	; 0x120
  p = (((p<<31)-var2)*3125)/var1;
 80015be:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80015c2:	105b      	asrs	r3, r3, #1
 80015c4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80015c8:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80015cc:	07db      	lsls	r3, r3, #31
 80015ce:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80015d2:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	; 0x128
 80015d6:	e9d7 4522 	ldrd	r4, r5, [r7, #136]	; 0x88
 80015da:	4621      	mov	r1, r4
 80015dc:	1a89      	subs	r1, r1, r2
 80015de:	f8c7 1080 	str.w	r1, [r7, #128]	; 0x80
 80015e2:	4629      	mov	r1, r5
 80015e4:	eb61 0303 	sbc.w	r3, r1, r3
 80015e8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80015ec:	e9d7 4520 	ldrd	r4, r5, [r7, #128]	; 0x80
 80015f0:	4622      	mov	r2, r4
 80015f2:	462b      	mov	r3, r5
 80015f4:	1891      	adds	r1, r2, r2
 80015f6:	62b9      	str	r1, [r7, #40]	; 0x28
 80015f8:	415b      	adcs	r3, r3
 80015fa:	62fb      	str	r3, [r7, #44]	; 0x2c
 80015fc:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001600:	4621      	mov	r1, r4
 8001602:	1851      	adds	r1, r2, r1
 8001604:	6239      	str	r1, [r7, #32]
 8001606:	4629      	mov	r1, r5
 8001608:	414b      	adcs	r3, r1
 800160a:	627b      	str	r3, [r7, #36]	; 0x24
 800160c:	f04f 0200 	mov.w	r2, #0
 8001610:	f04f 0300 	mov.w	r3, #0
 8001614:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001618:	4649      	mov	r1, r9
 800161a:	018b      	lsls	r3, r1, #6
 800161c:	4641      	mov	r1, r8
 800161e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001622:	4641      	mov	r1, r8
 8001624:	018a      	lsls	r2, r1, #6
 8001626:	4641      	mov	r1, r8
 8001628:	1889      	adds	r1, r1, r2
 800162a:	61b9      	str	r1, [r7, #24]
 800162c:	4649      	mov	r1, r9
 800162e:	eb43 0101 	adc.w	r1, r3, r1
 8001632:	61f9      	str	r1, [r7, #28]
 8001634:	f04f 0200 	mov.w	r2, #0
 8001638:	f04f 0300 	mov.w	r3, #0
 800163c:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 8001640:	4649      	mov	r1, r9
 8001642:	008b      	lsls	r3, r1, #2
 8001644:	4641      	mov	r1, r8
 8001646:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800164a:	4641      	mov	r1, r8
 800164c:	008a      	lsls	r2, r1, #2
 800164e:	4610      	mov	r0, r2
 8001650:	4619      	mov	r1, r3
 8001652:	4603      	mov	r3, r0
 8001654:	4622      	mov	r2, r4
 8001656:	189b      	adds	r3, r3, r2
 8001658:	613b      	str	r3, [r7, #16]
 800165a:	460b      	mov	r3, r1
 800165c:	462a      	mov	r2, r5
 800165e:	eb42 0303 	adc.w	r3, r2, r3
 8001662:	617b      	str	r3, [r7, #20]
 8001664:	f04f 0200 	mov.w	r2, #0
 8001668:	f04f 0300 	mov.w	r3, #0
 800166c:	e9d7 8904 	ldrd	r8, r9, [r7, #16]
 8001670:	4649      	mov	r1, r9
 8001672:	008b      	lsls	r3, r1, #2
 8001674:	4641      	mov	r1, r8
 8001676:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800167a:	4641      	mov	r1, r8
 800167c:	008a      	lsls	r2, r1, #2
 800167e:	4610      	mov	r0, r2
 8001680:	4619      	mov	r1, r3
 8001682:	4603      	mov	r3, r0
 8001684:	4622      	mov	r2, r4
 8001686:	189b      	adds	r3, r3, r2
 8001688:	67bb      	str	r3, [r7, #120]	; 0x78
 800168a:	462b      	mov	r3, r5
 800168c:	460a      	mov	r2, r1
 800168e:	eb42 0303 	adc.w	r3, r2, r3
 8001692:	67fb      	str	r3, [r7, #124]	; 0x7c
 8001694:	e9d7 234c 	ldrd	r2, r3, [r7, #304]	; 0x130
 8001698:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 800169c:	f7ff fadc 	bl	8000c58 <__aeabi_ldivmod>
 80016a0:	4602      	mov	r2, r0
 80016a2:	460b      	mov	r3, r1
 80016a4:	e9c7 2348 	strd	r2, r3, [r7, #288]	; 0x120
  var1 = (((signed long long int)dig_P9) * (p>>13) * (p>>13)) >> 25;
 80016a8:	4b75      	ldr	r3, [pc, #468]	; (8001880 <bmp_get_press+0x5c0>)
 80016aa:	f9b3 3000 	ldrsh.w	r3, [r3]
 80016ae:	b21b      	sxth	r3, r3
 80016b0:	17da      	asrs	r2, r3, #31
 80016b2:	673b      	str	r3, [r7, #112]	; 0x70
 80016b4:	677a      	str	r2, [r7, #116]	; 0x74
 80016b6:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 80016ba:	f04f 0000 	mov.w	r0, #0
 80016be:	f04f 0100 	mov.w	r1, #0
 80016c2:	0b50      	lsrs	r0, r2, #13
 80016c4:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 80016c8:	1359      	asrs	r1, r3, #13
 80016ca:	e9d7 451c 	ldrd	r4, r5, [r7, #112]	; 0x70
 80016ce:	462b      	mov	r3, r5
 80016d0:	fb00 f203 	mul.w	r2, r0, r3
 80016d4:	4623      	mov	r3, r4
 80016d6:	fb03 f301 	mul.w	r3, r3, r1
 80016da:	4413      	add	r3, r2
 80016dc:	4622      	mov	r2, r4
 80016de:	fba2 1200 	umull	r1, r2, r2, r0
 80016e2:	f8c7 20e4 	str.w	r2, [r7, #228]	; 0xe4
 80016e6:	460a      	mov	r2, r1
 80016e8:	f8c7 20e0 	str.w	r2, [r7, #224]	; 0xe0
 80016ec:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80016f0:	4413      	add	r3, r2
 80016f2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80016f6:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 80016fa:	f04f 0000 	mov.w	r0, #0
 80016fe:	f04f 0100 	mov.w	r1, #0
 8001702:	0b50      	lsrs	r0, r2, #13
 8001704:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 8001708:	1359      	asrs	r1, r3, #13
 800170a:	e9d7 4538 	ldrd	r4, r5, [r7, #224]	; 0xe0
 800170e:	462b      	mov	r3, r5
 8001710:	fb00 f203 	mul.w	r2, r0, r3
 8001714:	4623      	mov	r3, r4
 8001716:	fb03 f301 	mul.w	r3, r3, r1
 800171a:	4413      	add	r3, r2
 800171c:	4622      	mov	r2, r4
 800171e:	fba2 1200 	umull	r1, r2, r2, r0
 8001722:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8001726:	460a      	mov	r2, r1
 8001728:	f8c7 20d8 	str.w	r2, [r7, #216]	; 0xd8
 800172c:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8001730:	4413      	add	r3, r2
 8001732:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8001736:	f04f 0200 	mov.w	r2, #0
 800173a:	f04f 0300 	mov.w	r3, #0
 800173e:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	; 0xd8
 8001742:	4621      	mov	r1, r4
 8001744:	0e4a      	lsrs	r2, r1, #25
 8001746:	4629      	mov	r1, r5
 8001748:	ea42 12c1 	orr.w	r2, r2, r1, lsl #7
 800174c:	4629      	mov	r1, r5
 800174e:	164b      	asrs	r3, r1, #25
 8001750:	e9c7 234c 	strd	r2, r3, [r7, #304]	; 0x130
  var2 = (((signed long long int)dig_P8) * p) >> 19;
 8001754:	4b4b      	ldr	r3, [pc, #300]	; (8001884 <bmp_get_press+0x5c4>)
 8001756:	f9b3 3000 	ldrsh.w	r3, [r3]
 800175a:	b21b      	sxth	r3, r3
 800175c:	17da      	asrs	r2, r3, #31
 800175e:	66bb      	str	r3, [r7, #104]	; 0x68
 8001760:	66fa      	str	r2, [r7, #108]	; 0x6c
 8001762:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001766:	e9d7 451a 	ldrd	r4, r5, [r7, #104]	; 0x68
 800176a:	462a      	mov	r2, r5
 800176c:	fb02 f203 	mul.w	r2, r2, r3
 8001770:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8001774:	4621      	mov	r1, r4
 8001776:	fb01 f303 	mul.w	r3, r1, r3
 800177a:	441a      	add	r2, r3
 800177c:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001780:	4621      	mov	r1, r4
 8001782:	fba3 1301 	umull	r1, r3, r3, r1
 8001786:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800178a:	460b      	mov	r3, r1
 800178c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8001790:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8001794:	18d3      	adds	r3, r2, r3
 8001796:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800179a:	f04f 0200 	mov.w	r2, #0
 800179e:	f04f 0300 	mov.w	r3, #0
 80017a2:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	; 0xd0
 80017a6:	4621      	mov	r1, r4
 80017a8:	0cca      	lsrs	r2, r1, #19
 80017aa:	4629      	mov	r1, r5
 80017ac:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
 80017b0:	4629      	mov	r1, r5
 80017b2:	14cb      	asrs	r3, r1, #19
 80017b4:	e9c7 234a 	strd	r2, r3, [r7, #296]	; 0x128
  p = ((p + var1 + var2) >> 8) + (((signed long long int)dig_P7)<<4);
 80017b8:	e9d7 0148 	ldrd	r0, r1, [r7, #288]	; 0x120
 80017bc:	e9d7 234c 	ldrd	r2, r3, [r7, #304]	; 0x130
 80017c0:	1884      	adds	r4, r0, r2
 80017c2:	663c      	str	r4, [r7, #96]	; 0x60
 80017c4:	eb41 0303 	adc.w	r3, r1, r3
 80017c8:	667b      	str	r3, [r7, #100]	; 0x64
 80017ca:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	; 0x128
 80017ce:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 80017d2:	4621      	mov	r1, r4
 80017d4:	1889      	adds	r1, r1, r2
 80017d6:	65b9      	str	r1, [r7, #88]	; 0x58
 80017d8:	4629      	mov	r1, r5
 80017da:	eb43 0101 	adc.w	r1, r3, r1
 80017de:	65f9      	str	r1, [r7, #92]	; 0x5c
 80017e0:	f04f 0000 	mov.w	r0, #0
 80017e4:	f04f 0100 	mov.w	r1, #0
 80017e8:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	; 0x58
 80017ec:	4623      	mov	r3, r4
 80017ee:	0a18      	lsrs	r0, r3, #8
 80017f0:	462b      	mov	r3, r5
 80017f2:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 80017f6:	462b      	mov	r3, r5
 80017f8:	1219      	asrs	r1, r3, #8
 80017fa:	4b23      	ldr	r3, [pc, #140]	; (8001888 <bmp_get_press+0x5c8>)
 80017fc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001800:	b21b      	sxth	r3, r3
 8001802:	17da      	asrs	r2, r3, #31
 8001804:	653b      	str	r3, [r7, #80]	; 0x50
 8001806:	657a      	str	r2, [r7, #84]	; 0x54
 8001808:	f04f 0200 	mov.w	r2, #0
 800180c:	f04f 0300 	mov.w	r3, #0
 8001810:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 8001814:	464c      	mov	r4, r9
 8001816:	0123      	lsls	r3, r4, #4
 8001818:	4644      	mov	r4, r8
 800181a:	ea43 7314 	orr.w	r3, r3, r4, lsr #28
 800181e:	4644      	mov	r4, r8
 8001820:	0122      	lsls	r2, r4, #4
 8001822:	1884      	adds	r4, r0, r2
 8001824:	60bc      	str	r4, [r7, #8]
 8001826:	eb41 0303 	adc.w	r3, r1, r3
 800182a:	60fb      	str	r3, [r7, #12]
 800182c:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8001830:	e9c7 3448 	strd	r3, r4, [r7, #288]	; 0x120
  p = p  / 256;
 8001834:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 8001838:	2b00      	cmp	r3, #0
 800183a:	da07      	bge.n	800184c <bmp_get_press+0x58c>
 800183c:	f112 01ff 	adds.w	r1, r2, #255	; 0xff
 8001840:	6039      	str	r1, [r7, #0]
 8001842:	f143 0300 	adc.w	r3, r3, #0
 8001846:	607b      	str	r3, [r7, #4]
 8001848:	e9d7 2300 	ldrd	r2, r3, [r7]
 800184c:	f04f 0000 	mov.w	r0, #0
 8001850:	f04f 0100 	mov.w	r1, #0
 8001854:	0a10      	lsrs	r0, r2, #8
 8001856:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 800185a:	1219      	asrs	r1, r3, #8
 800185c:	e9c7 0148 	strd	r0, r1, [r7, #288]	; 0x120

  unsigned long int return_p = (unsigned long int)p;
 8001860:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001864:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  press_nrf = return_p;
 8001868:	4a08      	ldr	r2, [pc, #32]	; (800188c <bmp_get_press+0x5cc>)
 800186a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800186e:	6013      	str	r3, [r2, #0]

  return return_p;
 8001870:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
}
 8001874:	4618      	mov	r0, r3
 8001876:	f507 779c 	add.w	r7, r7, #312	; 0x138
 800187a:	46bd      	mov	sp, r7
 800187c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001880:	2000044a 	.word	0x2000044a
 8001884:	20000448 	.word	0x20000448
 8001888:	20000446 	.word	0x20000446
 800188c:	200004c8 	.word	0x200004c8

08001890 <bmp_setup>:

void bmp_setup()
{
 8001890:	b580      	push	{r7, lr}
 8001892:	b082      	sub	sp, #8
 8001894:	af00      	add	r7, sp, #0
	uint8_t buf = 0xF5 & (~(1 << 7));
 8001896:	2375      	movs	r3, #117	; 0x75
 8001898:	71fb      	strb	r3, [r7, #7]

	bmp_cs(0); //отключаем ножку CS у BMP для того чтобы сказать, что мы начали общение с BMP
 800189a:	2000      	movs	r0, #0
 800189c:	f002 faa4 	bl	8003de8 <bmp_cs>
	HAL_SPI_Transmit(&hspi2, &buf, 1, 1000); //отправляем регистор, который пишем
 80018a0:	1df9      	adds	r1, r7, #7
 80018a2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80018a6:	2201      	movs	r2, #1
 80018a8:	4815      	ldr	r0, [pc, #84]	; (8001900 <bmp_setup+0x70>)
 80018aa:	f005 f9a9 	bl	8006c00 <HAL_SPI_Transmit>

	buf = 0b01000000; //отправляем в регистор, который пишем
 80018ae:	2340      	movs	r3, #64	; 0x40
 80018b0:	71fb      	strb	r3, [r7, #7]

	HAL_SPI_Transmit(&hspi2, &buf, 1, 1000);
 80018b2:	1df9      	adds	r1, r7, #7
 80018b4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80018b8:	2201      	movs	r2, #1
 80018ba:	4811      	ldr	r0, [pc, #68]	; (8001900 <bmp_setup+0x70>)
 80018bc:	f005 f9a0 	bl	8006c00 <HAL_SPI_Transmit>
	bmp_cs(1);
 80018c0:	2001      	movs	r0, #1
 80018c2:	f002 fa91 	bl	8003de8 <bmp_cs>
	bmp_cs(0);
 80018c6:	2000      	movs	r0, #0
 80018c8:	f002 fa8e 	bl	8003de8 <bmp_cs>

	buf = 0xF4 & (~(1 << 7));
 80018cc:	2374      	movs	r3, #116	; 0x74
 80018ce:	71fb      	strb	r3, [r7, #7]

	HAL_SPI_Transmit(&hspi2, &buf, 1, 1000);
 80018d0:	1df9      	adds	r1, r7, #7
 80018d2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80018d6:	2201      	movs	r2, #1
 80018d8:	4809      	ldr	r0, [pc, #36]	; (8001900 <bmp_setup+0x70>)
 80018da:	f005 f991 	bl	8006c00 <HAL_SPI_Transmit>

	buf = 0b10010111;
 80018de:	2397      	movs	r3, #151	; 0x97
 80018e0:	71fb      	strb	r3, [r7, #7]

	HAL_SPI_Transmit(&hspi2, &buf, 1, 1000);
 80018e2:	1df9      	adds	r1, r7, #7
 80018e4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80018e8:	2201      	movs	r2, #1
 80018ea:	4805      	ldr	r0, [pc, #20]	; (8001900 <bmp_setup+0x70>)
 80018ec:	f005 f988 	bl	8006c00 <HAL_SPI_Transmit>
	bmp_cs(1);
 80018f0:	2001      	movs	r0, #1
 80018f2:	f002 fa79 	bl	8003de8 <bmp_cs>
}
 80018f6:	bf00      	nop
 80018f8:	3708      	adds	r7, #8
 80018fa:	46bd      	mov	sp, r7
 80018fc:	bd80      	pop	{r7, pc}
 80018fe:	bf00      	nop
 8001900:	200002e8 	.word	0x200002e8

08001904 <bmp_get_data>:

void bmp_get_data()
{
 8001904:	b590      	push	{r4, r7, lr}
 8001906:	b08d      	sub	sp, #52	; 0x34
 8001908:	af02      	add	r7, sp, #8
	uint8_t buf = 0xF3 | (1 << 7); //адрес регистра с которог начинаем читать данные
 800190a:	23f3      	movs	r3, #243	; 0xf3
 800190c:	71bb      	strb	r3, [r7, #6]

	bmp_cs(0); //отключаем ножку CS у BMP для того чтобы сказать, что мы начали общение с BMP
 800190e:	2000      	movs	r0, #0
 8001910:	f002 fa6a 	bl	8003de8 <bmp_cs>

	HAL_SPI_Transmit(&hspi2, &buf, 1, 1000); //отправляем начальный регистор для чтения
 8001914:	1db9      	adds	r1, r7, #6
 8001916:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800191a:	2201      	movs	r2, #1
 800191c:	487a      	ldr	r0, [pc, #488]	; (8001b08 <bmp_get_data+0x204>)
 800191e:	f005 f96f 	bl	8006c00 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi2, &buf, 1, 1000); //считываем 24 байта информациии в массив
 8001922:	1db9      	adds	r1, r7, #6
 8001924:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001928:	2201      	movs	r2, #1
 800192a:	4877      	ldr	r0, [pc, #476]	; (8001b08 <bmp_get_data+0x204>)
 800192c:	f005 faa4 	bl	8006e78 <HAL_SPI_Receive>

	bmp_cs(1); // включаем ножку
 8001930:	2001      	movs	r0, #1
 8001932:	f002 fa59 	bl	8003de8 <bmp_cs>

	buf = (buf & 0b00001000) >> 3;  //получаем бит, отвечающий за то, идёт ли обработка данных с датчика или нет (бит measuring)
 8001936:	79bb      	ldrb	r3, [r7, #6]
 8001938:	10db      	asrs	r3, r3, #3
 800193a:	b2db      	uxtb	r3, r3
 800193c:	f003 0301 	and.w	r3, r3, #1
 8001940:	b2db      	uxtb	r3, r3
 8001942:	71bb      	strb	r3, [r7, #6]


	if((buf == 0)&(bmp_prev_status == 1))  //проверяем бит считанный из регстра статус, что данные сейчас не обрабатываются и проверяем, была ли до этого обработка данных
 8001944:	79bb      	ldrb	r3, [r7, #6]
 8001946:	2b00      	cmp	r3, #0
 8001948:	bf0c      	ite	eq
 800194a:	2301      	moveq	r3, #1
 800194c:	2300      	movne	r3, #0
 800194e:	b2da      	uxtb	r2, r3
 8001950:	4b6e      	ldr	r3, [pc, #440]	; (8001b0c <bmp_get_data+0x208>)
 8001952:	781b      	ldrb	r3, [r3, #0]
 8001954:	2b01      	cmp	r3, #1
 8001956:	bf0c      	ite	eq
 8001958:	2301      	moveq	r3, #1
 800195a:	2300      	movne	r3, #0
 800195c:	b2db      	uxtb	r3, r3
 800195e:	4013      	ands	r3, r2
 8001960:	b2db      	uxtb	r3, r3
 8001962:	2b00      	cmp	r3, #0
 8001964:	f000 80c8 	beq.w	8001af8 <bmp_get_data+0x1f4>
	{
		bmp_prev_status = buf;
 8001968:	79ba      	ldrb	r2, [r7, #6]
 800196a:	4b68      	ldr	r3, [pc, #416]	; (8001b0c <bmp_get_data+0x208>)
 800196c:	701a      	strb	r2, [r3, #0]
		buf = 0xF7 | (1<<7);
 800196e:	23f7      	movs	r3, #247	; 0xf7
 8001970:	71bb      	strb	r3, [r7, #6]
		bmp_cs(0); //отключаем ножку CS у BMP для того чтобы сказать, что мы начали общение с BMP
 8001972:	2000      	movs	r0, #0
 8001974:	f002 fa38 	bl	8003de8 <bmp_cs>
		HAL_SPI_Transmit(&hspi2, &buf, 1, 1000); //отправляем начальный регистор для чтения
 8001978:	1db9      	adds	r1, r7, #6
 800197a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800197e:	2201      	movs	r2, #1
 8001980:	4861      	ldr	r0, [pc, #388]	; (8001b08 <bmp_get_data+0x204>)
 8001982:	f005 f93d 	bl	8006c00 <HAL_SPI_Transmit>
		HAL_SPI_Receive(&hspi2, bmp_raw_data, 6, 1000); //считываем 24 байта информациии в массив
 8001986:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800198a:	2206      	movs	r2, #6
 800198c:	4960      	ldr	r1, [pc, #384]	; (8001b10 <bmp_get_data+0x20c>)
 800198e:	485e      	ldr	r0, [pc, #376]	; (8001b08 <bmp_get_data+0x204>)
 8001990:	f005 fa72 	bl	8006e78 <HAL_SPI_Receive>
		bmp_cs(1); // включаем ножку
 8001994:	2001      	movs	r0, #1
 8001996:	f002 fa27 	bl	8003de8 <bmp_cs>

		new_data++;  // говорим, что есть новые данные для отправки
 800199a:	4b5e      	ldr	r3, [pc, #376]	; (8001b14 <bmp_get_data+0x210>)
 800199c:	781b      	ldrb	r3, [r3, #0]
 800199e:	3301      	adds	r3, #1
 80019a0:	b2da      	uxtb	r2, r3
 80019a2:	4b5c      	ldr	r3, [pc, #368]	; (8001b14 <bmp_get_data+0x210>)
 80019a4:	701a      	strb	r2, [r3, #0]

		//карта памяти
		uint32_t buf_milis = milis; //время
 80019a6:	4b5c      	ldr	r3, [pc, #368]	; (8001b18 <bmp_get_data+0x214>)
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	61bb      	str	r3, [r7, #24]
		for(int i = 0; i < 4; i++)
 80019ac:	2300      	movs	r3, #0
 80019ae:	627b      	str	r3, [r7, #36]	; 0x24
 80019b0:	e012      	b.n	80019d8 <bmp_get_data+0xd4>
		{
			uint8_t buf = buf_milis >> (i*8);
 80019b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019b4:	00db      	lsls	r3, r3, #3
 80019b6:	69ba      	ldr	r2, [r7, #24]
 80019b8:	fa22 f303 	lsr.w	r3, r2, r3
 80019bc:	71fb      	strb	r3, [r7, #7]
			sd_data_bmp[sd_pos_bmp] = buf;
 80019be:	4b57      	ldr	r3, [pc, #348]	; (8001b1c <bmp_get_data+0x218>)
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	4957      	ldr	r1, [pc, #348]	; (8001b20 <bmp_get_data+0x21c>)
 80019c4:	79fa      	ldrb	r2, [r7, #7]
 80019c6:	54ca      	strb	r2, [r1, r3]
			sd_pos_bmp++;
 80019c8:	4b54      	ldr	r3, [pc, #336]	; (8001b1c <bmp_get_data+0x218>)
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	3301      	adds	r3, #1
 80019ce:	4a53      	ldr	r2, [pc, #332]	; (8001b1c <bmp_get_data+0x218>)
 80019d0:	6013      	str	r3, [r2, #0]
		for(int i = 0; i < 4; i++)
 80019d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019d4:	3301      	adds	r3, #1
 80019d6:	627b      	str	r3, [r7, #36]	; 0x24
 80019d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019da:	2b03      	cmp	r3, #3
 80019dc:	dde9      	ble.n	80019b2 <bmp_get_data+0xae>
		}

		for(int i = 0; i < 6; i++) //данные
 80019de:	2300      	movs	r3, #0
 80019e0:	623b      	str	r3, [r7, #32]
 80019e2:	e00f      	b.n	8001a04 <bmp_get_data+0x100>
		{
			sd_data_bmp[sd_pos_bmp] = bmp_raw_data[i];
 80019e4:	4b4d      	ldr	r3, [pc, #308]	; (8001b1c <bmp_get_data+0x218>)
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	4949      	ldr	r1, [pc, #292]	; (8001b10 <bmp_get_data+0x20c>)
 80019ea:	6a3a      	ldr	r2, [r7, #32]
 80019ec:	440a      	add	r2, r1
 80019ee:	7811      	ldrb	r1, [r2, #0]
 80019f0:	4a4b      	ldr	r2, [pc, #300]	; (8001b20 <bmp_get_data+0x21c>)
 80019f2:	54d1      	strb	r1, [r2, r3]
			sd_pos_bmp++;
 80019f4:	4b49      	ldr	r3, [pc, #292]	; (8001b1c <bmp_get_data+0x218>)
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	3301      	adds	r3, #1
 80019fa:	4a48      	ldr	r2, [pc, #288]	; (8001b1c <bmp_get_data+0x218>)
 80019fc:	6013      	str	r3, [r2, #0]
		for(int i = 0; i < 6; i++) //данные
 80019fe:	6a3b      	ldr	r3, [r7, #32]
 8001a00:	3301      	adds	r3, #1
 8001a02:	623b      	str	r3, [r7, #32]
 8001a04:	6a3b      	ldr	r3, [r7, #32]
 8001a06:	2b05      	cmp	r3, #5
 8001a08:	ddec      	ble.n	80019e4 <bmp_get_data+0xe0>
		}

		for (int i = 0; i < 6; ++i)
 8001a0a:	2300      	movs	r3, #0
 8001a0c:	61fb      	str	r3, [r7, #28]
 8001a0e:	e00c      	b.n	8001a2a <bmp_get_data+0x126>
		{
			sd_data_bmp[sd_pos_bmp] = 0;
 8001a10:	4b42      	ldr	r3, [pc, #264]	; (8001b1c <bmp_get_data+0x218>)
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	4a42      	ldr	r2, [pc, #264]	; (8001b20 <bmp_get_data+0x21c>)
 8001a16:	2100      	movs	r1, #0
 8001a18:	54d1      	strb	r1, [r2, r3]
			sd_pos_bmp++;
 8001a1a:	4b40      	ldr	r3, [pc, #256]	; (8001b1c <bmp_get_data+0x218>)
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	3301      	adds	r3, #1
 8001a20:	4a3e      	ldr	r2, [pc, #248]	; (8001b1c <bmp_get_data+0x218>)
 8001a22:	6013      	str	r3, [r2, #0]
		for (int i = 0; i < 6; ++i)
 8001a24:	69fb      	ldr	r3, [r7, #28]
 8001a26:	3301      	adds	r3, #1
 8001a28:	61fb      	str	r3, [r7, #28]
 8001a2a:	69fb      	ldr	r3, [r7, #28]
 8001a2c:	2b05      	cmp	r3, #5
 8001a2e:	ddef      	ble.n	8001a10 <bmp_get_data+0x10c>
		}

		if(sd_pos_bmp == sizeof(sd_data_bmp)) //запись в файл
 8001a30:	4b3a      	ldr	r3, [pc, #232]	; (8001b1c <bmp_get_data+0x218>)
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001a38:	d127      	bne.n	8001a8a <bmp_get_data+0x186>
		{
			res = f_open(&MyFile, "BMP.hex",FA_WRITE);
 8001a3a:	2202      	movs	r2, #2
 8001a3c:	4939      	ldr	r1, [pc, #228]	; (8001b24 <bmp_get_data+0x220>)
 8001a3e:	483a      	ldr	r0, [pc, #232]	; (8001b28 <bmp_get_data+0x224>)
 8001a40:	f009 fb52 	bl	800b0e8 <f_open>
 8001a44:	4603      	mov	r3, r0
 8001a46:	461a      	mov	r2, r3
 8001a48:	4b38      	ldr	r3, [pc, #224]	; (8001b2c <bmp_get_data+0x228>)
 8001a4a:	701a      	strb	r2, [r3, #0]
			res = f_lseek(&MyFile, f_size(&MyFile));
 8001a4c:	4b36      	ldr	r3, [pc, #216]	; (8001b28 <bmp_get_data+0x224>)
 8001a4e:	68db      	ldr	r3, [r3, #12]
 8001a50:	4619      	mov	r1, r3
 8001a52:	4835      	ldr	r0, [pc, #212]	; (8001b28 <bmp_get_data+0x224>)
 8001a54:	f009 ff41 	bl	800b8da <f_lseek>
 8001a58:	4603      	mov	r3, r0
 8001a5a:	461a      	mov	r2, r3
 8001a5c:	4b33      	ldr	r3, [pc, #204]	; (8001b2c <bmp_get_data+0x228>)
 8001a5e:	701a      	strb	r2, [r3, #0]
			res = f_write(&MyFile, sd_data_bmp, sizeof(sd_data_bmp), (void*)&byteswritten);
 8001a60:	4b33      	ldr	r3, [pc, #204]	; (8001b30 <bmp_get_data+0x22c>)
 8001a62:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001a66:	492e      	ldr	r1, [pc, #184]	; (8001b20 <bmp_get_data+0x21c>)
 8001a68:	482f      	ldr	r0, [pc, #188]	; (8001b28 <bmp_get_data+0x224>)
 8001a6a:	f009 fd06 	bl	800b47a <f_write>
 8001a6e:	4603      	mov	r3, r0
 8001a70:	461a      	mov	r2, r3
 8001a72:	4b2e      	ldr	r3, [pc, #184]	; (8001b2c <bmp_get_data+0x228>)
 8001a74:	701a      	strb	r2, [r3, #0]
			res = f_close(&MyFile);
 8001a76:	482c      	ldr	r0, [pc, #176]	; (8001b28 <bmp_get_data+0x224>)
 8001a78:	f009 ff05 	bl	800b886 <f_close>
 8001a7c:	4603      	mov	r3, r0
 8001a7e:	461a      	mov	r2, r3
 8001a80:	4b2a      	ldr	r3, [pc, #168]	; (8001b2c <bmp_get_data+0x228>)
 8001a82:	701a      	strb	r2, [r3, #0]
			sd_pos_bmp = 0;
 8001a84:	4b25      	ldr	r3, [pc, #148]	; (8001b1c <bmp_get_data+0x218>)
 8001a86:	2200      	movs	r2, #0
 8001a88:	601a      	str	r2, [r3, #0]

		#ifdef debug
			signed long int raw_press;
			signed long int raw_temp;

			raw_press = ((signed long int)bmp_raw_data[0])<<12 | ((signed long int)bmp_raw_data[1])<<4 | bmp_raw_data[2]>>4;
 8001a8a:	4b21      	ldr	r3, [pc, #132]	; (8001b10 <bmp_get_data+0x20c>)
 8001a8c:	781b      	ldrb	r3, [r3, #0]
 8001a8e:	031a      	lsls	r2, r3, #12
 8001a90:	4b1f      	ldr	r3, [pc, #124]	; (8001b10 <bmp_get_data+0x20c>)
 8001a92:	785b      	ldrb	r3, [r3, #1]
 8001a94:	011b      	lsls	r3, r3, #4
 8001a96:	4313      	orrs	r3, r2
 8001a98:	4a1d      	ldr	r2, [pc, #116]	; (8001b10 <bmp_get_data+0x20c>)
 8001a9a:	7892      	ldrb	r2, [r2, #2]
 8001a9c:	0912      	lsrs	r2, r2, #4
 8001a9e:	b2d2      	uxtb	r2, r2
 8001aa0:	4313      	orrs	r3, r2
 8001aa2:	617b      	str	r3, [r7, #20]
			raw_temp = ((signed long int)bmp_raw_data[3])<<12 | ((signed long int)bmp_raw_data[4])<<4 | bmp_raw_data[5]>>4;
 8001aa4:	4b1a      	ldr	r3, [pc, #104]	; (8001b10 <bmp_get_data+0x20c>)
 8001aa6:	78db      	ldrb	r3, [r3, #3]
 8001aa8:	031a      	lsls	r2, r3, #12
 8001aaa:	4b19      	ldr	r3, [pc, #100]	; (8001b10 <bmp_get_data+0x20c>)
 8001aac:	791b      	ldrb	r3, [r3, #4]
 8001aae:	011b      	lsls	r3, r3, #4
 8001ab0:	4313      	orrs	r3, r2
 8001ab2:	4a17      	ldr	r2, [pc, #92]	; (8001b10 <bmp_get_data+0x20c>)
 8001ab4:	7952      	ldrb	r2, [r2, #5]
 8001ab6:	0912      	lsrs	r2, r2, #4
 8001ab8:	b2d2      	uxtb	r2, r2
 8001aba:	4313      	orrs	r3, r2
 8001abc:	613b      	str	r3, [r7, #16]

			float bmp_temp = 0;
 8001abe:	f04f 0300 	mov.w	r3, #0
 8001ac2:	60fb      	str	r3, [r7, #12]
			int bmp_press = 0;
 8001ac4:	2300      	movs	r3, #0
 8001ac6:	60bb      	str	r3, [r7, #8]

			bmp_temp = bmp_get_temp(raw_temp);
 8001ac8:	6938      	ldr	r0, [r7, #16]
 8001aca:	f7ff fb9d 	bl	8001208 <bmp_get_temp>
 8001ace:	ed87 0a03 	vstr	s0, [r7, #12]
			bmp_press = bmp_get_press(raw_press);
 8001ad2:	6978      	ldr	r0, [r7, #20]
 8001ad4:	f7ff fbf4 	bl	80012c0 <bmp_get_press>
 8001ad8:	4603      	mov	r3, r0
 8001ada:	60bb      	str	r3, [r7, #8]

			printf("time = %lu, temp = %f, press = %d\n", milis, bmp_temp, bmp_press);
 8001adc:	4b0e      	ldr	r3, [pc, #56]	; (8001b18 <bmp_get_data+0x214>)
 8001ade:	681c      	ldr	r4, [r3, #0]
 8001ae0:	68f8      	ldr	r0, [r7, #12]
 8001ae2:	f7fe fd39 	bl	8000558 <__aeabi_f2d>
 8001ae6:	4602      	mov	r2, r0
 8001ae8:	460b      	mov	r3, r1
 8001aea:	68b9      	ldr	r1, [r7, #8]
 8001aec:	9100      	str	r1, [sp, #0]
 8001aee:	4621      	mov	r1, r4
 8001af0:	4810      	ldr	r0, [pc, #64]	; (8001b34 <bmp_get_data+0x230>)
 8001af2:	f00a fd2b 	bl	800c54c <iprintf>
	{
		bmp_prev_status = buf;
	}


}
 8001af6:	e002      	b.n	8001afe <bmp_get_data+0x1fa>
		bmp_prev_status = buf;
 8001af8:	79ba      	ldrb	r2, [r7, #6]
 8001afa:	4b04      	ldr	r3, [pc, #16]	; (8001b0c <bmp_get_data+0x208>)
 8001afc:	701a      	strb	r2, [r3, #0]
}
 8001afe:	bf00      	nop
 8001b00:	372c      	adds	r7, #44	; 0x2c
 8001b02:	46bd      	mov	sp, r7
 8001b04:	bd90      	pop	{r4, r7, pc}
 8001b06:	bf00      	nop
 8001b08:	200002e8 	.word	0x200002e8
 8001b0c:	20000432 	.word	0x20000432
 8001b10:	2000042c 	.word	0x2000042c
 8001b14:	200004cd 	.word	0x200004cd
 8001b18:	20000450 	.word	0x20000450
 8001b1c:	20006500 	.word	0x20006500
 8001b20:	20001500 	.word	0x20001500
 8001b24:	0800e6f0 	.word	0x0800e6f0
 8001b28:	200004d4 	.word	0x200004d4
 8001b2c:	200004ce 	.word	0x200004ce
 8001b30:	200004d0 	.word	0x200004d0
 8001b34:	0800e6f8 	.word	0x0800e6f8

08001b38 <bmp_calibr>:

void bmp_calibr()
{
 8001b38:	b580      	push	{r7, lr}
 8001b3a:	b082      	sub	sp, #8
 8001b3c:	af00      	add	r7, sp, #0
	  uint8_t buf;

	  buf = 0xD0 | (1<<7);
 8001b3e:	23d0      	movs	r3, #208	; 0xd0
 8001b40:	70fb      	strb	r3, [r7, #3]

	  bmp_cs(0);
 8001b42:	2000      	movs	r0, #0
 8001b44:	f002 f950 	bl	8003de8 <bmp_cs>

	  HAL_SPI_Transmit(&hspi2, &buf, 1, 1000);
 8001b48:	1cf9      	adds	r1, r7, #3
 8001b4a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001b4e:	2201      	movs	r2, #1
 8001b50:	483f      	ldr	r0, [pc, #252]	; (8001c50 <bmp_calibr+0x118>)
 8001b52:	f005 f855 	bl	8006c00 <HAL_SPI_Transmit>
	  HAL_SPI_Receive(&hspi2, &buf, 1, 1000);
 8001b56:	1cf9      	adds	r1, r7, #3
 8001b58:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001b5c:	2201      	movs	r2, #1
 8001b5e:	483c      	ldr	r0, [pc, #240]	; (8001c50 <bmp_calibr+0x118>)
 8001b60:	f005 f98a 	bl	8006e78 <HAL_SPI_Receive>

	  bmp_cs(1);
 8001b64:	2001      	movs	r0, #1
 8001b66:	f002 f93f 	bl	8003de8 <bmp_cs>

	  printf("ID = %x = %d\n", buf, buf);
 8001b6a:	78fb      	ldrb	r3, [r7, #3]
 8001b6c:	4619      	mov	r1, r3
 8001b6e:	78fb      	ldrb	r3, [r7, #3]
 8001b70:	461a      	mov	r2, r3
 8001b72:	4838      	ldr	r0, [pc, #224]	; (8001c54 <bmp_calibr+0x11c>)
 8001b74:	f00a fcea 	bl	800c54c <iprintf>

	  bmp_get_call_data();
 8001b78:	f7ff fa86 	bl	8001088 <bmp_get_call_data>

	  for(int i = 0; i < 24; ++i)
 8001b7c:	2300      	movs	r3, #0
 8001b7e:	607b      	str	r3, [r7, #4]
 8001b80:	e00b      	b.n	8001b9a <bmp_calibr+0x62>
	  {
		  printf("cal[%d] = %x\n", i, bmp_cal_data[i]);
 8001b82:	4a35      	ldr	r2, [pc, #212]	; (8001c58 <bmp_calibr+0x120>)
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	4413      	add	r3, r2
 8001b88:	781b      	ldrb	r3, [r3, #0]
 8001b8a:	461a      	mov	r2, r3
 8001b8c:	6879      	ldr	r1, [r7, #4]
 8001b8e:	4833      	ldr	r0, [pc, #204]	; (8001c5c <bmp_calibr+0x124>)
 8001b90:	f00a fcdc 	bl	800c54c <iprintf>
	  for(int i = 0; i < 24; ++i)
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	3301      	adds	r3, #1
 8001b98:	607b      	str	r3, [r7, #4]
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	2b17      	cmp	r3, #23
 8001b9e:	ddf0      	ble.n	8001b82 <bmp_calibr+0x4a>
	  }

	  printf("dig_T1 = %x\n", dig_T1);
 8001ba0:	4b2f      	ldr	r3, [pc, #188]	; (8001c60 <bmp_calibr+0x128>)
 8001ba2:	881b      	ldrh	r3, [r3, #0]
 8001ba4:	4619      	mov	r1, r3
 8001ba6:	482f      	ldr	r0, [pc, #188]	; (8001c64 <bmp_calibr+0x12c>)
 8001ba8:	f00a fcd0 	bl	800c54c <iprintf>
	  printf("dig_T2 = %x\n", dig_T2);
 8001bac:	4b2e      	ldr	r3, [pc, #184]	; (8001c68 <bmp_calibr+0x130>)
 8001bae:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001bb2:	4619      	mov	r1, r3
 8001bb4:	482d      	ldr	r0, [pc, #180]	; (8001c6c <bmp_calibr+0x134>)
 8001bb6:	f00a fcc9 	bl	800c54c <iprintf>
	  printf("dig_T3 = %x\n", dig_T3);
 8001bba:	4b2d      	ldr	r3, [pc, #180]	; (8001c70 <bmp_calibr+0x138>)
 8001bbc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001bc0:	4619      	mov	r1, r3
 8001bc2:	482c      	ldr	r0, [pc, #176]	; (8001c74 <bmp_calibr+0x13c>)
 8001bc4:	f00a fcc2 	bl	800c54c <iprintf>
	  printf("dig_P1 = %x\n", dig_P1);
 8001bc8:	4b2b      	ldr	r3, [pc, #172]	; (8001c78 <bmp_calibr+0x140>)
 8001bca:	881b      	ldrh	r3, [r3, #0]
 8001bcc:	4619      	mov	r1, r3
 8001bce:	482b      	ldr	r0, [pc, #172]	; (8001c7c <bmp_calibr+0x144>)
 8001bd0:	f00a fcbc 	bl	800c54c <iprintf>
	  printf("dig_P2 = %x\n", dig_P2);
 8001bd4:	4b2a      	ldr	r3, [pc, #168]	; (8001c80 <bmp_calibr+0x148>)
 8001bd6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001bda:	4619      	mov	r1, r3
 8001bdc:	4829      	ldr	r0, [pc, #164]	; (8001c84 <bmp_calibr+0x14c>)
 8001bde:	f00a fcb5 	bl	800c54c <iprintf>
	  printf("dig_P3 = %x\n", dig_P3);
 8001be2:	4b29      	ldr	r3, [pc, #164]	; (8001c88 <bmp_calibr+0x150>)
 8001be4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001be8:	4619      	mov	r1, r3
 8001bea:	4828      	ldr	r0, [pc, #160]	; (8001c8c <bmp_calibr+0x154>)
 8001bec:	f00a fcae 	bl	800c54c <iprintf>
	  printf("dig_P4 = %x\n", dig_P4);
 8001bf0:	4b27      	ldr	r3, [pc, #156]	; (8001c90 <bmp_calibr+0x158>)
 8001bf2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001bf6:	4619      	mov	r1, r3
 8001bf8:	4826      	ldr	r0, [pc, #152]	; (8001c94 <bmp_calibr+0x15c>)
 8001bfa:	f00a fca7 	bl	800c54c <iprintf>
	  printf("dig_P5 = %x\n", dig_P5);
 8001bfe:	4b26      	ldr	r3, [pc, #152]	; (8001c98 <bmp_calibr+0x160>)
 8001c00:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001c04:	4619      	mov	r1, r3
 8001c06:	4825      	ldr	r0, [pc, #148]	; (8001c9c <bmp_calibr+0x164>)
 8001c08:	f00a fca0 	bl	800c54c <iprintf>
	  printf("dig_P6 = %x\n", dig_P6);
 8001c0c:	4b24      	ldr	r3, [pc, #144]	; (8001ca0 <bmp_calibr+0x168>)
 8001c0e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001c12:	4619      	mov	r1, r3
 8001c14:	4823      	ldr	r0, [pc, #140]	; (8001ca4 <bmp_calibr+0x16c>)
 8001c16:	f00a fc99 	bl	800c54c <iprintf>
	  printf("dig_P7 = %x\n", dig_P7);
 8001c1a:	4b23      	ldr	r3, [pc, #140]	; (8001ca8 <bmp_calibr+0x170>)
 8001c1c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001c20:	4619      	mov	r1, r3
 8001c22:	4822      	ldr	r0, [pc, #136]	; (8001cac <bmp_calibr+0x174>)
 8001c24:	f00a fc92 	bl	800c54c <iprintf>
	  printf("dig_P8 = %x\n", dig_P8);
 8001c28:	4b21      	ldr	r3, [pc, #132]	; (8001cb0 <bmp_calibr+0x178>)
 8001c2a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001c2e:	4619      	mov	r1, r3
 8001c30:	4820      	ldr	r0, [pc, #128]	; (8001cb4 <bmp_calibr+0x17c>)
 8001c32:	f00a fc8b 	bl	800c54c <iprintf>
	  printf("dig_P9 = %x\n", dig_P9);
 8001c36:	4b20      	ldr	r3, [pc, #128]	; (8001cb8 <bmp_calibr+0x180>)
 8001c38:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001c3c:	4619      	mov	r1, r3
 8001c3e:	481f      	ldr	r0, [pc, #124]	; (8001cbc <bmp_calibr+0x184>)
 8001c40:	f00a fc84 	bl	800c54c <iprintf>

	  bmp_setup();
 8001c44:	f7ff fe24 	bl	8001890 <bmp_setup>
}
 8001c48:	bf00      	nop
 8001c4a:	3708      	adds	r7, #8
 8001c4c:	46bd      	mov	sp, r7
 8001c4e:	bd80      	pop	{r7, pc}
 8001c50:	200002e8 	.word	0x200002e8
 8001c54:	0800e71c 	.word	0x0800e71c
 8001c58:	20000414 	.word	0x20000414
 8001c5c:	0800e72c 	.word	0x0800e72c
 8001c60:	20000434 	.word	0x20000434
 8001c64:	0800e73c 	.word	0x0800e73c
 8001c68:	20000436 	.word	0x20000436
 8001c6c:	0800e74c 	.word	0x0800e74c
 8001c70:	20000438 	.word	0x20000438
 8001c74:	0800e75c 	.word	0x0800e75c
 8001c78:	2000043a 	.word	0x2000043a
 8001c7c:	0800e76c 	.word	0x0800e76c
 8001c80:	2000043c 	.word	0x2000043c
 8001c84:	0800e77c 	.word	0x0800e77c
 8001c88:	2000043e 	.word	0x2000043e
 8001c8c:	0800e78c 	.word	0x0800e78c
 8001c90:	20000440 	.word	0x20000440
 8001c94:	0800e79c 	.word	0x0800e79c
 8001c98:	20000442 	.word	0x20000442
 8001c9c:	0800e7ac 	.word	0x0800e7ac
 8001ca0:	20000444 	.word	0x20000444
 8001ca4:	0800e7bc 	.word	0x0800e7bc
 8001ca8:	20000446 	.word	0x20000446
 8001cac:	0800e7cc 	.word	0x0800e7cc
 8001cb0:	20000448 	.word	0x20000448
 8001cb4:	0800e7dc 	.word	0x0800e7dc
 8001cb8:	2000044a 	.word	0x2000044a
 8001cbc:	0800e7ec 	.word	0x0800e7ec

08001cc0 <HAL_TIM_PeriodElapsedCallback>:
//-----------------------------DS18B20------------------------------------------------------
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)  //вектор прерываний для таймеров
{
 8001cc0:	b480      	push	{r7}
 8001cc2:	b083      	sub	sp, #12
 8001cc4:	af00      	add	r7, sp, #0
 8001cc6:	6078      	str	r0, [r7, #4]
  if(htim->Instance == TIM3) //check if the interrupt comes from TIM3
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	4a0b      	ldr	r2, [pc, #44]	; (8001cfc <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8001cce:	4293      	cmp	r3, r2
 8001cd0:	d104      	bne.n	8001cdc <HAL_TIM_PeriodElapsedCallback+0x1c>
    {
      micros += 15;
 8001cd2:	4b0b      	ldr	r3, [pc, #44]	; (8001d00 <HAL_TIM_PeriodElapsedCallback+0x40>)
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	330f      	adds	r3, #15
 8001cd8:	4a09      	ldr	r2, [pc, #36]	; (8001d00 <HAL_TIM_PeriodElapsedCallback+0x40>)
 8001cda:	6013      	str	r3, [r2, #0]
    }
  if(htim->Instance == TIM4) //check if the interrupt comes from TIM4 (если прерывание пришло от 4таймера)
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	4a08      	ldr	r2, [pc, #32]	; (8001d04 <HAL_TIM_PeriodElapsedCallback+0x44>)
 8001ce2:	4293      	cmp	r3, r2
 8001ce4:	d104      	bne.n	8001cf0 <HAL_TIM_PeriodElapsedCallback+0x30>
    {
      milis++;
 8001ce6:	4b08      	ldr	r3, [pc, #32]	; (8001d08 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	3301      	adds	r3, #1
 8001cec:	4a06      	ldr	r2, [pc, #24]	; (8001d08 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8001cee:	6013      	str	r3, [r2, #0]
    }
}
 8001cf0:	bf00      	nop
 8001cf2:	370c      	adds	r7, #12
 8001cf4:	46bd      	mov	sp, r7
 8001cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cfa:	4770      	bx	lr
 8001cfc:	40000400 	.word	0x40000400
 8001d00:	20000454 	.word	0x20000454
 8001d04:	40000800 	.word	0x40000800
 8001d08:	20000450 	.word	0x20000450

08001d0c <DS_INIT>:

static void DS_INIT(int a)  //переинициализация пина протокола 1-WIRE
  {
 8001d0c:	b580      	push	{r7, lr}
 8001d0e:	b08a      	sub	sp, #40	; 0x28
 8001d10:	af00      	add	r7, sp, #0
 8001d12:	6078      	str	r0, [r7, #4]
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d14:	f107 0314 	add.w	r3, r7, #20
 8001d18:	2200      	movs	r2, #0
 8001d1a:	601a      	str	r2, [r3, #0]
 8001d1c:	605a      	str	r2, [r3, #4]
 8001d1e:	609a      	str	r2, [r3, #8]
 8001d20:	60da      	str	r2, [r3, #12]
 8001d22:	611a      	str	r2, [r3, #16]

    /* GPIO Ports Clock Enable */
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8001d24:	2300      	movs	r3, #0
 8001d26:	613b      	str	r3, [r7, #16]
 8001d28:	4b1f      	ldr	r3, [pc, #124]	; (8001da8 <DS_INIT+0x9c>)
 8001d2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d2c:	4a1e      	ldr	r2, [pc, #120]	; (8001da8 <DS_INIT+0x9c>)
 8001d2e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001d32:	6313      	str	r3, [r2, #48]	; 0x30
 8001d34:	4b1c      	ldr	r3, [pc, #112]	; (8001da8 <DS_INIT+0x9c>)
 8001d36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d38:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d3c:	613b      	str	r3, [r7, #16]
 8001d3e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d40:	2300      	movs	r3, #0
 8001d42:	60fb      	str	r3, [r7, #12]
 8001d44:	4b18      	ldr	r3, [pc, #96]	; (8001da8 <DS_INIT+0x9c>)
 8001d46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d48:	4a17      	ldr	r2, [pc, #92]	; (8001da8 <DS_INIT+0x9c>)
 8001d4a:	f043 0301 	orr.w	r3, r3, #1
 8001d4e:	6313      	str	r3, [r2, #48]	; 0x30
 8001d50:	4b15      	ldr	r3, [pc, #84]	; (8001da8 <DS_INIT+0x9c>)
 8001d52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d54:	f003 0301 	and.w	r3, r3, #1
 8001d58:	60fb      	str	r3, [r7, #12]
 8001d5a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d5c:	2300      	movs	r3, #0
 8001d5e:	60bb      	str	r3, [r7, #8]
 8001d60:	4b11      	ldr	r3, [pc, #68]	; (8001da8 <DS_INIT+0x9c>)
 8001d62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d64:	4a10      	ldr	r2, [pc, #64]	; (8001da8 <DS_INIT+0x9c>)
 8001d66:	f043 0302 	orr.w	r3, r3, #2
 8001d6a:	6313      	str	r3, [r2, #48]	; 0x30
 8001d6c:	4b0e      	ldr	r3, [pc, #56]	; (8001da8 <DS_INIT+0x9c>)
 8001d6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d70:	f003 0302 	and.w	r3, r3, #2
 8001d74:	60bb      	str	r3, [r7, #8]
 8001d76:	68bb      	ldr	r3, [r7, #8]

    /*Configure GPIO pin : DS_Pin */
    GPIO_InitStruct.Pin = DS_Pin;
 8001d78:	2302      	movs	r3, #2
 8001d7a:	617b      	str	r3, [r7, #20]
    if(a == 0)
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d102      	bne.n	8001d88 <DS_INIT+0x7c>
     GPIO_InitStruct.Mode = GPIO_MODE_INPUT; //перестраивается в режим входа
 8001d82:	2300      	movs	r3, #0
 8001d84:	61bb      	str	r3, [r7, #24]
 8001d86:	e003      	b.n	8001d90 <DS_INIT+0x84>
    else
     {
     GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d88:	2301      	movs	r3, #1
 8001d8a:	61bb      	str	r3, [r7, #24]
     GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d8c:	2300      	movs	r3, #0
 8001d8e:	623b      	str	r3, [r7, #32]
     }
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d90:	2300      	movs	r3, #0
 8001d92:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(DS_GPIO_Port, &GPIO_InitStruct);
 8001d94:	f107 0314 	add.w	r3, r7, #20
 8001d98:	4619      	mov	r1, r3
 8001d9a:	4804      	ldr	r0, [pc, #16]	; (8001dac <DS_INIT+0xa0>)
 8001d9c:	f002 fef4 	bl	8004b88 <HAL_GPIO_Init>

  }
 8001da0:	bf00      	nop
 8001da2:	3728      	adds	r7, #40	; 0x28
 8001da4:	46bd      	mov	sp, r7
 8001da6:	bd80      	pop	{r7, pc}
 8001da8:	40023800 	.word	0x40023800
 8001dac:	40020000 	.word	0x40020000

08001db0 <DS_find>:

uint8_t DS_find()  //поиск датчика на шине 1-WIRE
{
 8001db0:	b580      	push	{r7, lr}
 8001db2:	b082      	sub	sp, #8
 8001db4:	af00      	add	r7, sp, #0
	uint8_t buf = 0;
 8001db6:	2300      	movs	r3, #0
 8001db8:	71fb      	strb	r3, [r7, #7]
	DS_INIT(1);
 8001dba:	2001      	movs	r0, #1
 8001dbc:	f7ff ffa6 	bl	8001d0c <DS_INIT>
	HAL_GPIO_WritePin(DS_GPIO_Port, DS_Pin, 0);
 8001dc0:	2200      	movs	r2, #0
 8001dc2:	2102      	movs	r1, #2
 8001dc4:	481d      	ldr	r0, [pc, #116]	; (8001e3c <DS_find+0x8c>)
 8001dc6:	f003 f87b 	bl	8004ec0 <HAL_GPIO_WritePin>
	ds_micros = micros + 480;
 8001dca:	4b1d      	ldr	r3, [pc, #116]	; (8001e40 <DS_find+0x90>)
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	f503 73f0 	add.w	r3, r3, #480	; 0x1e0
 8001dd2:	4a1c      	ldr	r2, [pc, #112]	; (8001e44 <DS_find+0x94>)
 8001dd4:	6013      	str	r3, [r2, #0]
	while( ds_micros > micros);
 8001dd6:	bf00      	nop
 8001dd8:	4b1a      	ldr	r3, [pc, #104]	; (8001e44 <DS_find+0x94>)
 8001dda:	681a      	ldr	r2, [r3, #0]
 8001ddc:	4b18      	ldr	r3, [pc, #96]	; (8001e40 <DS_find+0x90>)
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	429a      	cmp	r2, r3
 8001de2:	d8f9      	bhi.n	8001dd8 <DS_find+0x28>
	DS_INIT(0);
 8001de4:	2000      	movs	r0, #0
 8001de6:	f7ff ff91 	bl	8001d0c <DS_INIT>

	ds_micros = micros + 60;
 8001dea:	4b15      	ldr	r3, [pc, #84]	; (8001e40 <DS_find+0x90>)
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	333c      	adds	r3, #60	; 0x3c
 8001df0:	4a14      	ldr	r2, [pc, #80]	; (8001e44 <DS_find+0x94>)
 8001df2:	6013      	str	r3, [r2, #0]
	while( ds_micros > micros );
 8001df4:	bf00      	nop
 8001df6:	4b13      	ldr	r3, [pc, #76]	; (8001e44 <DS_find+0x94>)
 8001df8:	681a      	ldr	r2, [r3, #0]
 8001dfa:	4b11      	ldr	r3, [pc, #68]	; (8001e40 <DS_find+0x90>)
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	429a      	cmp	r2, r3
 8001e00:	d8f9      	bhi.n	8001df6 <DS_find+0x46>
	buf = HAL_GPIO_ReadPin(DS_GPIO_Port, DS_Pin);
 8001e02:	2102      	movs	r1, #2
 8001e04:	480d      	ldr	r0, [pc, #52]	; (8001e3c <DS_find+0x8c>)
 8001e06:	f003 f843 	bl	8004e90 <HAL_GPIO_ReadPin>
 8001e0a:	4603      	mov	r3, r0
 8001e0c:	71fb      	strb	r3, [r7, #7]

	ds_micros = micros + 420;
 8001e0e:	4b0c      	ldr	r3, [pc, #48]	; (8001e40 <DS_find+0x90>)
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	f503 73d2 	add.w	r3, r3, #420	; 0x1a4
 8001e16:	4a0b      	ldr	r2, [pc, #44]	; (8001e44 <DS_find+0x94>)
 8001e18:	6013      	str	r3, [r2, #0]
	while( ds_micros > micros);
 8001e1a:	bf00      	nop
 8001e1c:	4b09      	ldr	r3, [pc, #36]	; (8001e44 <DS_find+0x94>)
 8001e1e:	681a      	ldr	r2, [r3, #0]
 8001e20:	4b07      	ldr	r3, [pc, #28]	; (8001e40 <DS_find+0x90>)
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	429a      	cmp	r2, r3
 8001e26:	d8f9      	bhi.n	8001e1c <DS_find+0x6c>

	if(buf == 0)
 8001e28:	79fb      	ldrb	r3, [r7, #7]
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d101      	bne.n	8001e32 <DS_find+0x82>
		return 1;
 8001e2e:	2301      	movs	r3, #1
 8001e30:	e000      	b.n	8001e34 <DS_find+0x84>
	else
		return 0;
 8001e32:	2300      	movs	r3, #0

}
 8001e34:	4618      	mov	r0, r3
 8001e36:	3708      	adds	r7, #8
 8001e38:	46bd      	mov	sp, r7
 8001e3a:	bd80      	pop	{r7, pc}
 8001e3c:	40020000 	.word	0x40020000
 8001e40:	20000454 	.word	0x20000454
 8001e44:	20000458 	.word	0x20000458

08001e48 <DS_send>:

 void DS_send(uint8_t data)  //отправка байта данных по 1-WIRE
 {
 8001e48:	b580      	push	{r7, lr}
 8001e4a:	b084      	sub	sp, #16
 8001e4c:	af00      	add	r7, sp, #0
 8001e4e:	4603      	mov	r3, r0
 8001e50:	71fb      	strb	r3, [r7, #7]
   for(int i = 0; i < 8; i++)
 8001e52:	2300      	movs	r3, #0
 8001e54:	60fb      	str	r3, [r7, #12]
 8001e56:	e051      	b.n	8001efc <DS_send+0xb4>
   {
	   if( (data & (1<<i)) == (1<<i) )
 8001e58:	79fa      	ldrb	r2, [r7, #7]
 8001e5a:	2101      	movs	r1, #1
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	fa01 f303 	lsl.w	r3, r1, r3
 8001e62:	401a      	ands	r2, r3
 8001e64:	2101      	movs	r1, #1
 8001e66:	68fb      	ldr	r3, [r7, #12]
 8001e68:	fa01 f303 	lsl.w	r3, r1, r3
 8001e6c:	429a      	cmp	r2, r3
 8001e6e:	d12b      	bne.n	8001ec8 <DS_send+0x80>
	   {
		   DS_INIT(1);
 8001e70:	2001      	movs	r0, #1
 8001e72:	f7ff ff4b 	bl	8001d0c <DS_INIT>
		   HAL_GPIO_WritePin(DS_GPIO_Port, DS_Pin, 0);
 8001e76:	2200      	movs	r2, #0
 8001e78:	2102      	movs	r1, #2
 8001e7a:	4824      	ldr	r0, [pc, #144]	; (8001f0c <DS_send+0xc4>)
 8001e7c:	f003 f820 	bl	8004ec0 <HAL_GPIO_WritePin>
		   HAL_GPIO_WritePin(DS_GPIO_Port, DS_Pin, 0);
 8001e80:	2200      	movs	r2, #0
 8001e82:	2102      	movs	r1, #2
 8001e84:	4821      	ldr	r0, [pc, #132]	; (8001f0c <DS_send+0xc4>)
 8001e86:	f003 f81b 	bl	8004ec0 <HAL_GPIO_WritePin>
		   HAL_GPIO_WritePin(DS_GPIO_Port, DS_Pin, 0);
 8001e8a:	2200      	movs	r2, #0
 8001e8c:	2102      	movs	r1, #2
 8001e8e:	481f      	ldr	r0, [pc, #124]	; (8001f0c <DS_send+0xc4>)
 8001e90:	f003 f816 	bl	8004ec0 <HAL_GPIO_WritePin>
		   HAL_GPIO_WritePin(DS_GPIO_Port, DS_Pin, 0);
 8001e94:	2200      	movs	r2, #0
 8001e96:	2102      	movs	r1, #2
 8001e98:	481c      	ldr	r0, [pc, #112]	; (8001f0c <DS_send+0xc4>)
 8001e9a:	f003 f811 	bl	8004ec0 <HAL_GPIO_WritePin>
		   HAL_GPIO_WritePin(DS_GPIO_Port, DS_Pin, 0);
 8001e9e:	2200      	movs	r2, #0
 8001ea0:	2102      	movs	r1, #2
 8001ea2:	481a      	ldr	r0, [pc, #104]	; (8001f0c <DS_send+0xc4>)
 8001ea4:	f003 f80c 	bl	8004ec0 <HAL_GPIO_WritePin>
		   DS_INIT(0);
 8001ea8:	2000      	movs	r0, #0
 8001eaa:	f7ff ff2f 	bl	8001d0c <DS_INIT>

		   ds_micros = micros + 65;
 8001eae:	4b18      	ldr	r3, [pc, #96]	; (8001f10 <DS_send+0xc8>)
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	3341      	adds	r3, #65	; 0x41
 8001eb4:	4a17      	ldr	r2, [pc, #92]	; (8001f14 <DS_send+0xcc>)
 8001eb6:	6013      	str	r3, [r2, #0]
		   while( ds_micros > micros );
 8001eb8:	bf00      	nop
 8001eba:	4b16      	ldr	r3, [pc, #88]	; (8001f14 <DS_send+0xcc>)
 8001ebc:	681a      	ldr	r2, [r3, #0]
 8001ebe:	4b14      	ldr	r3, [pc, #80]	; (8001f10 <DS_send+0xc8>)
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	429a      	cmp	r2, r3
 8001ec4:	d8f9      	bhi.n	8001eba <DS_send+0x72>
 8001ec6:	e016      	b.n	8001ef6 <DS_send+0xae>
	   }
	   else
	   {
		   DS_INIT(1);
 8001ec8:	2001      	movs	r0, #1
 8001eca:	f7ff ff1f 	bl	8001d0c <DS_INIT>
		   HAL_GPIO_WritePin(DS_GPIO_Port, DS_Pin, 0);
 8001ece:	2200      	movs	r2, #0
 8001ed0:	2102      	movs	r1, #2
 8001ed2:	480e      	ldr	r0, [pc, #56]	; (8001f0c <DS_send+0xc4>)
 8001ed4:	f002 fff4 	bl	8004ec0 <HAL_GPIO_WritePin>

		   ds_micros = micros + 65;
 8001ed8:	4b0d      	ldr	r3, [pc, #52]	; (8001f10 <DS_send+0xc8>)
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	3341      	adds	r3, #65	; 0x41
 8001ede:	4a0d      	ldr	r2, [pc, #52]	; (8001f14 <DS_send+0xcc>)
 8001ee0:	6013      	str	r3, [r2, #0]
		   while( ds_micros > micros);
 8001ee2:	bf00      	nop
 8001ee4:	4b0b      	ldr	r3, [pc, #44]	; (8001f14 <DS_send+0xcc>)
 8001ee6:	681a      	ldr	r2, [r3, #0]
 8001ee8:	4b09      	ldr	r3, [pc, #36]	; (8001f10 <DS_send+0xc8>)
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	429a      	cmp	r2, r3
 8001eee:	d8f9      	bhi.n	8001ee4 <DS_send+0x9c>

		   DS_INIT(0);
 8001ef0:	2000      	movs	r0, #0
 8001ef2:	f7ff ff0b 	bl	8001d0c <DS_INIT>
   for(int i = 0; i < 8; i++)
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	3301      	adds	r3, #1
 8001efa:	60fb      	str	r3, [r7, #12]
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	2b07      	cmp	r3, #7
 8001f00:	ddaa      	ble.n	8001e58 <DS_send+0x10>
	   }
   }
 }
 8001f02:	bf00      	nop
 8001f04:	bf00      	nop
 8001f06:	3710      	adds	r7, #16
 8001f08:	46bd      	mov	sp, r7
 8001f0a:	bd80      	pop	{r7, pc}
 8001f0c:	40020000 	.word	0x40020000
 8001f10:	20000454 	.word	0x20000454
 8001f14:	20000458 	.word	0x20000458

08001f18 <DS_read>:

uint8_t DS_read()  //чтение байта данных с 1-WIRE
{
 8001f18:	b580      	push	{r7, lr}
 8001f1a:	b082      	sub	sp, #8
 8001f1c:	af00      	add	r7, sp, #0
   uint8_t data = 0;
 8001f1e:	2300      	movs	r3, #0
 8001f20:	71fb      	strb	r3, [r7, #7]
   for(int i = 0; i < 8; i++)
 8001f22:	2300      	movs	r3, #0
 8001f24:	603b      	str	r3, [r7, #0]
 8001f26:	e046      	b.n	8001fb6 <DS_read+0x9e>
   {
		DS_INIT(1);
 8001f28:	2001      	movs	r0, #1
 8001f2a:	f7ff feef 	bl	8001d0c <DS_INIT>
		HAL_GPIO_WritePin(DS_GPIO_Port, DS_Pin, 0);
 8001f2e:	2200      	movs	r2, #0
 8001f30:	2102      	movs	r1, #2
 8001f32:	4825      	ldr	r0, [pc, #148]	; (8001fc8 <DS_read+0xb0>)
 8001f34:	f002 ffc4 	bl	8004ec0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(DS_GPIO_Port, DS_Pin, 0);
 8001f38:	2200      	movs	r2, #0
 8001f3a:	2102      	movs	r1, #2
 8001f3c:	4822      	ldr	r0, [pc, #136]	; (8001fc8 <DS_read+0xb0>)
 8001f3e:	f002 ffbf 	bl	8004ec0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(DS_GPIO_Port, DS_Pin, 0);
 8001f42:	2200      	movs	r2, #0
 8001f44:	2102      	movs	r1, #2
 8001f46:	4820      	ldr	r0, [pc, #128]	; (8001fc8 <DS_read+0xb0>)
 8001f48:	f002 ffba 	bl	8004ec0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(DS_GPIO_Port, DS_Pin, 0);
 8001f4c:	2200      	movs	r2, #0
 8001f4e:	2102      	movs	r1, #2
 8001f50:	481d      	ldr	r0, [pc, #116]	; (8001fc8 <DS_read+0xb0>)
 8001f52:	f002 ffb5 	bl	8004ec0 <HAL_GPIO_WritePin>
		DS_INIT(0);
 8001f56:	2000      	movs	r0, #0
 8001f58:	f7ff fed8 	bl	8001d0c <DS_INIT>

		ds_micros = micros + 15;
 8001f5c:	4b1b      	ldr	r3, [pc, #108]	; (8001fcc <DS_read+0xb4>)
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	330f      	adds	r3, #15
 8001f62:	4a1b      	ldr	r2, [pc, #108]	; (8001fd0 <DS_read+0xb8>)
 8001f64:	6013      	str	r3, [r2, #0]
		while( ds_micros > micros );
 8001f66:	bf00      	nop
 8001f68:	4b19      	ldr	r3, [pc, #100]	; (8001fd0 <DS_read+0xb8>)
 8001f6a:	681a      	ldr	r2, [r3, #0]
 8001f6c:	4b17      	ldr	r3, [pc, #92]	; (8001fcc <DS_read+0xb4>)
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	429a      	cmp	r2, r3
 8001f72:	d8f9      	bhi.n	8001f68 <DS_read+0x50>
		if(HAL_GPIO_ReadPin(DS_GPIO_Port, DS_Pin) ==  0)
 8001f74:	2102      	movs	r1, #2
 8001f76:	4814      	ldr	r0, [pc, #80]	; (8001fc8 <DS_read+0xb0>)
 8001f78:	f002 ff8a 	bl	8004e90 <HAL_GPIO_ReadPin>
 8001f7c:	4603      	mov	r3, r0
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d10c      	bne.n	8001f9c <DS_read+0x84>
			data &= ~(1<<i);
 8001f82:	2201      	movs	r2, #1
 8001f84:	683b      	ldr	r3, [r7, #0]
 8001f86:	fa02 f303 	lsl.w	r3, r2, r3
 8001f8a:	b25b      	sxtb	r3, r3
 8001f8c:	43db      	mvns	r3, r3
 8001f8e:	b25a      	sxtb	r2, r3
 8001f90:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f94:	4013      	ands	r3, r2
 8001f96:	b25b      	sxtb	r3, r3
 8001f98:	71fb      	strb	r3, [r7, #7]
 8001f9a:	e009      	b.n	8001fb0 <DS_read+0x98>
		else
			data |= (1<<i);
 8001f9c:	2201      	movs	r2, #1
 8001f9e:	683b      	ldr	r3, [r7, #0]
 8001fa0:	fa02 f303 	lsl.w	r3, r2, r3
 8001fa4:	b25a      	sxtb	r2, r3
 8001fa6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001faa:	4313      	orrs	r3, r2
 8001fac:	b25b      	sxtb	r3, r3
 8001fae:	71fb      	strb	r3, [r7, #7]
   for(int i = 0; i < 8; i++)
 8001fb0:	683b      	ldr	r3, [r7, #0]
 8001fb2:	3301      	adds	r3, #1
 8001fb4:	603b      	str	r3, [r7, #0]
 8001fb6:	683b      	ldr	r3, [r7, #0]
 8001fb8:	2b07      	cmp	r3, #7
 8001fba:	ddb5      	ble.n	8001f28 <DS_read+0x10>
   }
   return data;
 8001fbc:	79fb      	ldrb	r3, [r7, #7]
}
 8001fbe:	4618      	mov	r0, r3
 8001fc0:	3708      	adds	r7, #8
 8001fc2:	46bd      	mov	sp, r7
 8001fc4:	bd80      	pop	{r7, pc}
 8001fc6:	bf00      	nop
 8001fc8:	40020000 	.word	0x40020000
 8001fcc:	20000454 	.word	0x20000454
 8001fd0:	20000458 	.word	0x20000458

08001fd4 <DS_get_data>:

 float DS_get_data()  //получение данных о температуре с датчика DS18B20
 {
 8001fd4:	b5b0      	push	{r4, r5, r7, lr}
 8001fd6:	b086      	sub	sp, #24
 8001fd8:	af00      	add	r7, sp, #0
	float temp = 0;
 8001fda:	f04f 0300 	mov.w	r3, #0
 8001fde:	617b      	str	r3, [r7, #20]
	HAL_TIM_Base_Start_IT(&htim3);  //запускаем таймер для микросекунд
 8001fe0:	48b4      	ldr	r0, [pc, #720]	; (80022b4 <DS_get_data+0x2e0>)
 8001fe2:	f005 fb7d 	bl	80076e0 <HAL_TIM_Base_Start_IT>

	if(ds_started == 0)
 8001fe6:	4bb4      	ldr	r3, [pc, #720]	; (80022b8 <DS_get_data+0x2e4>)
 8001fe8:	781b      	ldrb	r3, [r3, #0]
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d116      	bne.n	800201c <DS_get_data+0x48>
	{
		if(DS_find() == 1)
 8001fee:	f7ff fedf 	bl	8001db0 <DS_find>
 8001ff2:	4603      	mov	r3, r0
 8001ff4:	2b01      	cmp	r3, #1
 8001ff6:	f040 8151 	bne.w	800229c <DS_get_data+0x2c8>
		{
			DS_send(0xcc);
 8001ffa:	20cc      	movs	r0, #204	; 0xcc
 8001ffc:	f7ff ff24 	bl	8001e48 <DS_send>
			DS_send(0x44);
 8002000:	2044      	movs	r0, #68	; 0x44
 8002002:	f7ff ff21 	bl	8001e48 <DS_send>
			ds_started = 1;
 8002006:	4bac      	ldr	r3, [pc, #688]	; (80022b8 <DS_get_data+0x2e4>)
 8002008:	2201      	movs	r2, #1
 800200a:	701a      	strb	r2, [r3, #0]
			ds_wait_temp = milis + ds_convert_delay;
 800200c:	4bab      	ldr	r3, [pc, #684]	; (80022bc <DS_get_data+0x2e8>)
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	4aab      	ldr	r2, [pc, #684]	; (80022c0 <DS_get_data+0x2ec>)
 8002012:	6812      	ldr	r2, [r2, #0]
 8002014:	4413      	add	r3, r2
 8002016:	4aab      	ldr	r2, [pc, #684]	; (80022c4 <DS_get_data+0x2f0>)
 8002018:	6013      	str	r3, [r2, #0]
 800201a:	e13f      	b.n	800229c <DS_get_data+0x2c8>
		}
	}
	else if (ds_wait_temp <= milis)
 800201c:	4ba9      	ldr	r3, [pc, #676]	; (80022c4 <DS_get_data+0x2f0>)
 800201e:	681a      	ldr	r2, [r3, #0]
 8002020:	4ba6      	ldr	r3, [pc, #664]	; (80022bc <DS_get_data+0x2e8>)
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	429a      	cmp	r2, r3
 8002026:	f200 8139 	bhi.w	800229c <DS_get_data+0x2c8>
	{
		if(DS_find() == 1)
 800202a:	f7ff fec1 	bl	8001db0 <DS_find>
 800202e:	4603      	mov	r3, r0
 8002030:	2b01      	cmp	r3, #1
 8002032:	f040 8133 	bne.w	800229c <DS_get_data+0x2c8>
		{
			DS_send(0xcc);
 8002036:	20cc      	movs	r0, #204	; 0xcc
 8002038:	f7ff ff06 	bl	8001e48 <DS_send>
			DS_send(0xbe);
 800203c:	20be      	movs	r0, #190	; 0xbe
 800203e:	f7ff ff03 	bl	8001e48 <DS_send>
			ds_data[0] = DS_read();
 8002042:	f7ff ff69 	bl	8001f18 <DS_read>
 8002046:	4603      	mov	r3, r0
 8002048:	461a      	mov	r2, r3
 800204a:	4b9f      	ldr	r3, [pc, #636]	; (80022c8 <DS_get_data+0x2f4>)
 800204c:	701a      	strb	r2, [r3, #0]
			ds_data[1] = DS_read();
 800204e:	f7ff ff63 	bl	8001f18 <DS_read>
 8002052:	4603      	mov	r3, r0
 8002054:	461a      	mov	r2, r3
 8002056:	4b9c      	ldr	r3, [pc, #624]	; (80022c8 <DS_get_data+0x2f4>)
 8002058:	705a      	strb	r2, [r3, #1]
			HAL_TIM_Base_Stop_IT(&htim3);
 800205a:	4896      	ldr	r0, [pc, #600]	; (80022b4 <DS_get_data+0x2e0>)
 800205c:	f005 fba2 	bl	80077a4 <HAL_TIM_Base_Stop_IT>

			new_data++;  // говорим, что есть новые данные для отправки
 8002060:	4b9a      	ldr	r3, [pc, #616]	; (80022cc <DS_get_data+0x2f8>)
 8002062:	781b      	ldrb	r3, [r3, #0]
 8002064:	3301      	adds	r3, #1
 8002066:	b2da      	uxtb	r2, r3
 8002068:	4b98      	ldr	r3, [pc, #608]	; (80022cc <DS_get_data+0x2f8>)
 800206a:	701a      	strb	r2, [r3, #0]

			//карта памяти
			uint32_t buf_milis = milis; //время
 800206c:	4b93      	ldr	r3, [pc, #588]	; (80022bc <DS_get_data+0x2e8>)
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	607b      	str	r3, [r7, #4]
			for(int i = 0; i < 4; i++)
 8002072:	2300      	movs	r3, #0
 8002074:	613b      	str	r3, [r7, #16]
 8002076:	e012      	b.n	800209e <DS_get_data+0xca>
			{
				uint8_t buf = buf_milis >> (i*8);
 8002078:	693b      	ldr	r3, [r7, #16]
 800207a:	00db      	lsls	r3, r3, #3
 800207c:	687a      	ldr	r2, [r7, #4]
 800207e:	fa22 f303 	lsr.w	r3, r2, r3
 8002082:	707b      	strb	r3, [r7, #1]
				sd_data_ds[sd_pos_ds] = buf;
 8002084:	4b92      	ldr	r3, [pc, #584]	; (80022d0 <DS_get_data+0x2fc>)
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	4992      	ldr	r1, [pc, #584]	; (80022d4 <DS_get_data+0x300>)
 800208a:	787a      	ldrb	r2, [r7, #1]
 800208c:	54ca      	strb	r2, [r1, r3]
				sd_pos_ds++;
 800208e:	4b90      	ldr	r3, [pc, #576]	; (80022d0 <DS_get_data+0x2fc>)
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	3301      	adds	r3, #1
 8002094:	4a8e      	ldr	r2, [pc, #568]	; (80022d0 <DS_get_data+0x2fc>)
 8002096:	6013      	str	r3, [r2, #0]
			for(int i = 0; i < 4; i++)
 8002098:	693b      	ldr	r3, [r7, #16]
 800209a:	3301      	adds	r3, #1
 800209c:	613b      	str	r3, [r7, #16]
 800209e:	693b      	ldr	r3, [r7, #16]
 80020a0:	2b03      	cmp	r3, #3
 80020a2:	dde9      	ble.n	8002078 <DS_get_data+0xa4>
			}

			for(int i = 0; i < 2; i++) //данные
 80020a4:	2300      	movs	r3, #0
 80020a6:	60fb      	str	r3, [r7, #12]
 80020a8:	e00f      	b.n	80020ca <DS_get_data+0xf6>
			{
				sd_data_ds[sd_pos_ds] = ds_data[i];
 80020aa:	4b89      	ldr	r3, [pc, #548]	; (80022d0 <DS_get_data+0x2fc>)
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	4986      	ldr	r1, [pc, #536]	; (80022c8 <DS_get_data+0x2f4>)
 80020b0:	68fa      	ldr	r2, [r7, #12]
 80020b2:	440a      	add	r2, r1
 80020b4:	7811      	ldrb	r1, [r2, #0]
 80020b6:	4a87      	ldr	r2, [pc, #540]	; (80022d4 <DS_get_data+0x300>)
 80020b8:	54d1      	strb	r1, [r2, r3]
				sd_pos_ds++;
 80020ba:	4b85      	ldr	r3, [pc, #532]	; (80022d0 <DS_get_data+0x2fc>)
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	3301      	adds	r3, #1
 80020c0:	4a83      	ldr	r2, [pc, #524]	; (80022d0 <DS_get_data+0x2fc>)
 80020c2:	6013      	str	r3, [r2, #0]
			for(int i = 0; i < 2; i++) //данные
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	3301      	adds	r3, #1
 80020c8:	60fb      	str	r3, [r7, #12]
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	2b01      	cmp	r3, #1
 80020ce:	ddec      	ble.n	80020aa <DS_get_data+0xd6>
			}

			for(int i = 0; i < 2; i++) //доп данные
 80020d0:	2300      	movs	r3, #0
 80020d2:	60bb      	str	r3, [r7, #8]
 80020d4:	e00c      	b.n	80020f0 <DS_get_data+0x11c>
			{
				sd_data_ds[sd_pos_ds] = 0;
 80020d6:	4b7e      	ldr	r3, [pc, #504]	; (80022d0 <DS_get_data+0x2fc>)
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	4a7e      	ldr	r2, [pc, #504]	; (80022d4 <DS_get_data+0x300>)
 80020dc:	2100      	movs	r1, #0
 80020de:	54d1      	strb	r1, [r2, r3]
				sd_pos_ds++;
 80020e0:	4b7b      	ldr	r3, [pc, #492]	; (80022d0 <DS_get_data+0x2fc>)
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	3301      	adds	r3, #1
 80020e6:	4a7a      	ldr	r2, [pc, #488]	; (80022d0 <DS_get_data+0x2fc>)
 80020e8:	6013      	str	r3, [r2, #0]
			for(int i = 0; i < 2; i++) //доп данные
 80020ea:	68bb      	ldr	r3, [r7, #8]
 80020ec:	3301      	adds	r3, #1
 80020ee:	60bb      	str	r3, [r7, #8]
 80020f0:	68bb      	ldr	r3, [r7, #8]
 80020f2:	2b01      	cmp	r3, #1
 80020f4:	ddef      	ble.n	80020d6 <DS_get_data+0x102>
			}

			if(sd_pos_ds == sizeof(sd_data_ds)) //запись в файл
 80020f6:	4b76      	ldr	r3, [pc, #472]	; (80022d0 <DS_get_data+0x2fc>)
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80020fe:	d127      	bne.n	8002150 <DS_get_data+0x17c>
			{
				res = f_open(&MyFile, "DS.hex",FA_WRITE);
 8002100:	2202      	movs	r2, #2
 8002102:	4975      	ldr	r1, [pc, #468]	; (80022d8 <DS_get_data+0x304>)
 8002104:	4875      	ldr	r0, [pc, #468]	; (80022dc <DS_get_data+0x308>)
 8002106:	f008 ffef 	bl	800b0e8 <f_open>
 800210a:	4603      	mov	r3, r0
 800210c:	461a      	mov	r2, r3
 800210e:	4b74      	ldr	r3, [pc, #464]	; (80022e0 <DS_get_data+0x30c>)
 8002110:	701a      	strb	r2, [r3, #0]
				res = f_lseek(&MyFile, f_size(&MyFile));
 8002112:	4b72      	ldr	r3, [pc, #456]	; (80022dc <DS_get_data+0x308>)
 8002114:	68db      	ldr	r3, [r3, #12]
 8002116:	4619      	mov	r1, r3
 8002118:	4870      	ldr	r0, [pc, #448]	; (80022dc <DS_get_data+0x308>)
 800211a:	f009 fbde 	bl	800b8da <f_lseek>
 800211e:	4603      	mov	r3, r0
 8002120:	461a      	mov	r2, r3
 8002122:	4b6f      	ldr	r3, [pc, #444]	; (80022e0 <DS_get_data+0x30c>)
 8002124:	701a      	strb	r2, [r3, #0]
				res = f_write(&MyFile, sd_data_ds, sizeof(sd_data_ds), (void*)&byteswritten);
 8002126:	4b6f      	ldr	r3, [pc, #444]	; (80022e4 <DS_get_data+0x310>)
 8002128:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800212c:	4969      	ldr	r1, [pc, #420]	; (80022d4 <DS_get_data+0x300>)
 800212e:	486b      	ldr	r0, [pc, #428]	; (80022dc <DS_get_data+0x308>)
 8002130:	f009 f9a3 	bl	800b47a <f_write>
 8002134:	4603      	mov	r3, r0
 8002136:	461a      	mov	r2, r3
 8002138:	4b69      	ldr	r3, [pc, #420]	; (80022e0 <DS_get_data+0x30c>)
 800213a:	701a      	strb	r2, [r3, #0]
				res = f_close(&MyFile);
 800213c:	4867      	ldr	r0, [pc, #412]	; (80022dc <DS_get_data+0x308>)
 800213e:	f009 fba2 	bl	800b886 <f_close>
 8002142:	4603      	mov	r3, r0
 8002144:	461a      	mov	r2, r3
 8002146:	4b66      	ldr	r3, [pc, #408]	; (80022e0 <DS_get_data+0x30c>)
 8002148:	701a      	strb	r2, [r3, #0]
				sd_pos_ds = 0;
 800214a:	4b61      	ldr	r3, [pc, #388]	; (80022d0 <DS_get_data+0x2fc>)
 800214c:	2200      	movs	r2, #0
 800214e:	601a      	str	r2, [r3, #0]
			}

			#ifdef debug
				uint16_t buf_ds=0;
 8002150:	2300      	movs	r3, #0
 8002152:	807b      	strh	r3, [r7, #2]
				buf_ds = (ds_data[1]<<8) | ds_data[0];
 8002154:	4b5c      	ldr	r3, [pc, #368]	; (80022c8 <DS_get_data+0x2f4>)
 8002156:	785b      	ldrb	r3, [r3, #1]
 8002158:	021b      	lsls	r3, r3, #8
 800215a:	b21a      	sxth	r2, r3
 800215c:	4b5a      	ldr	r3, [pc, #360]	; (80022c8 <DS_get_data+0x2f4>)
 800215e:	781b      	ldrb	r3, [r3, #0]
 8002160:	b21b      	sxth	r3, r3
 8002162:	4313      	orrs	r3, r2
 8002164:	b21b      	sxth	r3, r3
 8002166:	807b      	strh	r3, [r7, #2]

				temp = (buf_ds>>4)&0b01111111;
 8002168:	887b      	ldrh	r3, [r7, #2]
 800216a:	091b      	lsrs	r3, r3, #4
 800216c:	b29b      	uxth	r3, r3
 800216e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002172:	ee07 3a90 	vmov	s15, r3
 8002176:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800217a:	edc7 7a05 	vstr	s15, [r7, #20]
				temp += 0.5*((buf_ds>>3)&0x01);
 800217e:	6978      	ldr	r0, [r7, #20]
 8002180:	f7fe f9ea 	bl	8000558 <__aeabi_f2d>
 8002184:	4604      	mov	r4, r0
 8002186:	460d      	mov	r5, r1
 8002188:	887b      	ldrh	r3, [r7, #2]
 800218a:	08db      	lsrs	r3, r3, #3
 800218c:	b29b      	uxth	r3, r3
 800218e:	f003 0301 	and.w	r3, r3, #1
 8002192:	4618      	mov	r0, r3
 8002194:	f7fe f9ce 	bl	8000534 <__aeabi_i2d>
 8002198:	f04f 0200 	mov.w	r2, #0
 800219c:	4b52      	ldr	r3, [pc, #328]	; (80022e8 <DS_get_data+0x314>)
 800219e:	f7fe fa33 	bl	8000608 <__aeabi_dmul>
 80021a2:	4602      	mov	r2, r0
 80021a4:	460b      	mov	r3, r1
 80021a6:	4620      	mov	r0, r4
 80021a8:	4629      	mov	r1, r5
 80021aa:	f7fe f877 	bl	800029c <__adddf3>
 80021ae:	4602      	mov	r2, r0
 80021b0:	460b      	mov	r3, r1
 80021b2:	4610      	mov	r0, r2
 80021b4:	4619      	mov	r1, r3
 80021b6:	f7fe fcff 	bl	8000bb8 <__aeabi_d2f>
 80021ba:	4603      	mov	r3, r0
 80021bc:	617b      	str	r3, [r7, #20]
				temp += 0.25*((buf_ds>>2)&0x01);
 80021be:	6978      	ldr	r0, [r7, #20]
 80021c0:	f7fe f9ca 	bl	8000558 <__aeabi_f2d>
 80021c4:	4604      	mov	r4, r0
 80021c6:	460d      	mov	r5, r1
 80021c8:	887b      	ldrh	r3, [r7, #2]
 80021ca:	089b      	lsrs	r3, r3, #2
 80021cc:	b29b      	uxth	r3, r3
 80021ce:	f003 0301 	and.w	r3, r3, #1
 80021d2:	4618      	mov	r0, r3
 80021d4:	f7fe f9ae 	bl	8000534 <__aeabi_i2d>
 80021d8:	f04f 0200 	mov.w	r2, #0
 80021dc:	4b43      	ldr	r3, [pc, #268]	; (80022ec <DS_get_data+0x318>)
 80021de:	f7fe fa13 	bl	8000608 <__aeabi_dmul>
 80021e2:	4602      	mov	r2, r0
 80021e4:	460b      	mov	r3, r1
 80021e6:	4620      	mov	r0, r4
 80021e8:	4629      	mov	r1, r5
 80021ea:	f7fe f857 	bl	800029c <__adddf3>
 80021ee:	4602      	mov	r2, r0
 80021f0:	460b      	mov	r3, r1
 80021f2:	4610      	mov	r0, r2
 80021f4:	4619      	mov	r1, r3
 80021f6:	f7fe fcdf 	bl	8000bb8 <__aeabi_d2f>
 80021fa:	4603      	mov	r3, r0
 80021fc:	617b      	str	r3, [r7, #20]
				temp += 0.125*((buf_ds>>1)&0x01);
 80021fe:	6978      	ldr	r0, [r7, #20]
 8002200:	f7fe f9aa 	bl	8000558 <__aeabi_f2d>
 8002204:	4604      	mov	r4, r0
 8002206:	460d      	mov	r5, r1
 8002208:	887b      	ldrh	r3, [r7, #2]
 800220a:	085b      	lsrs	r3, r3, #1
 800220c:	b29b      	uxth	r3, r3
 800220e:	f003 0301 	and.w	r3, r3, #1
 8002212:	4618      	mov	r0, r3
 8002214:	f7fe f98e 	bl	8000534 <__aeabi_i2d>
 8002218:	f04f 0200 	mov.w	r2, #0
 800221c:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8002220:	f7fe f9f2 	bl	8000608 <__aeabi_dmul>
 8002224:	4602      	mov	r2, r0
 8002226:	460b      	mov	r3, r1
 8002228:	4620      	mov	r0, r4
 800222a:	4629      	mov	r1, r5
 800222c:	f7fe f836 	bl	800029c <__adddf3>
 8002230:	4602      	mov	r2, r0
 8002232:	460b      	mov	r3, r1
 8002234:	4610      	mov	r0, r2
 8002236:	4619      	mov	r1, r3
 8002238:	f7fe fcbe 	bl	8000bb8 <__aeabi_d2f>
 800223c:	4603      	mov	r3, r0
 800223e:	617b      	str	r3, [r7, #20]
				temp += 0.0625*(buf_ds&0x01);
 8002240:	6978      	ldr	r0, [r7, #20]
 8002242:	f7fe f989 	bl	8000558 <__aeabi_f2d>
 8002246:	4604      	mov	r4, r0
 8002248:	460d      	mov	r5, r1
 800224a:	887b      	ldrh	r3, [r7, #2]
 800224c:	f003 0301 	and.w	r3, r3, #1
 8002250:	4618      	mov	r0, r3
 8002252:	f7fe f96f 	bl	8000534 <__aeabi_i2d>
 8002256:	f04f 0200 	mov.w	r2, #0
 800225a:	4b25      	ldr	r3, [pc, #148]	; (80022f0 <DS_get_data+0x31c>)
 800225c:	f7fe f9d4 	bl	8000608 <__aeabi_dmul>
 8002260:	4602      	mov	r2, r0
 8002262:	460b      	mov	r3, r1
 8002264:	4620      	mov	r0, r4
 8002266:	4629      	mov	r1, r5
 8002268:	f7fe f818 	bl	800029c <__adddf3>
 800226c:	4602      	mov	r2, r0
 800226e:	460b      	mov	r3, r1
 8002270:	4610      	mov	r0, r2
 8002272:	4619      	mov	r1, r3
 8002274:	f7fe fca0 	bl	8000bb8 <__aeabi_d2f>
 8002278:	4603      	mov	r3, r0
 800227a:	617b      	str	r3, [r7, #20]
				if (((buf_ds>>15)&0x01) > 0)
 800227c:	887b      	ldrh	r3, [r7, #2]
 800227e:	0bdb      	lsrs	r3, r3, #15
 8002280:	b29b      	uxth	r3, r3
 8002282:	f003 0301 	and.w	r3, r3, #1
 8002286:	2b00      	cmp	r3, #0
 8002288:	dd05      	ble.n	8002296 <DS_get_data+0x2c2>
					temp = temp * (-1);
 800228a:	edd7 7a05 	vldr	s15, [r7, #20]
 800228e:	eef1 7a67 	vneg.f32	s15, s15
 8002292:	edc7 7a05 	vstr	s15, [r7, #20]
			#endif

			ds_started = 0;
 8002296:	4b08      	ldr	r3, [pc, #32]	; (80022b8 <DS_get_data+0x2e4>)
 8002298:	2200      	movs	r2, #0
 800229a:	701a      	strb	r2, [r3, #0]
		}
	}

	HAL_TIM_Base_Stop_IT(&htim3);
 800229c:	4805      	ldr	r0, [pc, #20]	; (80022b4 <DS_get_data+0x2e0>)
 800229e:	f005 fa81 	bl	80077a4 <HAL_TIM_Base_Stop_IT>
	return temp;
 80022a2:	697b      	ldr	r3, [r7, #20]
 80022a4:	ee07 3a90 	vmov	s15, r3
}
 80022a8:	eeb0 0a67 	vmov.f32	s0, s15
 80022ac:	3718      	adds	r7, #24
 80022ae:	46bd      	mov	sp, r7
 80022b0:	bdb0      	pop	{r4, r5, r7, pc}
 80022b2:	bf00      	nop
 80022b4:	20000340 	.word	0x20000340
 80022b8:	20000460 	.word	0x20000460
 80022bc:	20000450 	.word	0x20000450
 80022c0:	20000000 	.word	0x20000000
 80022c4:	2000045c 	.word	0x2000045c
 80022c8:	20000468 	.word	0x20000468
 80022cc:	200004cd 	.word	0x200004cd
 80022d0:	20006504 	.word	0x20006504
 80022d4:	20002500 	.word	0x20002500
 80022d8:	0800e7fc 	.word	0x0800e7fc
 80022dc:	200004d4 	.word	0x200004d4
 80022e0:	200004ce 	.word	0x200004ce
 80022e4:	200004d0 	.word	0x200004d0
 80022e8:	3fe00000 	.word	0x3fe00000
 80022ec:	3fd00000 	.word	0x3fd00000
 80022f0:	3fb00000 	.word	0x3fb00000

080022f4 <DS_init>:

  void DS_init(uint8_t res)  //инициализация датчика DS18B20
  {
 80022f4:	b580      	push	{r7, lr}
 80022f6:	b082      	sub	sp, #8
 80022f8:	af00      	add	r7, sp, #0
 80022fa:	4603      	mov	r3, r0
 80022fc:	71fb      	strb	r3, [r7, #7]
    * 0 - 9 бит
    * 1 - 10 бит
    * 2 - 11 бит
    * остальные - 12 бит
  */
   HAL_TIM_Base_Start_IT(&htim3);
 80022fe:	4822      	ldr	r0, [pc, #136]	; (8002388 <DS_init+0x94>)
 8002300:	f005 f9ee 	bl	80076e0 <HAL_TIM_Base_Start_IT>

   if(DS_find())
 8002304:	f7ff fd54 	bl	8001db0 <DS_find>
 8002308:	4603      	mov	r3, r0
 800230a:	2b00      	cmp	r3, #0
 800230c:	d033      	beq.n	8002376 <DS_init+0x82>
   {
    DS_send(0xcc);
 800230e:	20cc      	movs	r0, #204	; 0xcc
 8002310:	f7ff fd9a 	bl	8001e48 <DS_send>
    DS_send(0x4E);
 8002314:	204e      	movs	r0, #78	; 0x4e
 8002316:	f7ff fd97 	bl	8001e48 <DS_send>
    DS_send(0xff);
 800231a:	20ff      	movs	r0, #255	; 0xff
 800231c:	f7ff fd94 	bl	8001e48 <DS_send>
    DS_send(0x00);
 8002320:	2000      	movs	r0, #0
 8002322:	f7ff fd91 	bl	8001e48 <DS_send>

    switch(res)
 8002326:	79fb      	ldrb	r3, [r7, #7]
 8002328:	2b02      	cmp	r3, #2
 800232a:	d014      	beq.n	8002356 <DS_init+0x62>
 800232c:	2b02      	cmp	r3, #2
 800232e:	dc1a      	bgt.n	8002366 <DS_init+0x72>
 8002330:	2b00      	cmp	r3, #0
 8002332:	d002      	beq.n	800233a <DS_init+0x46>
 8002334:	2b01      	cmp	r3, #1
 8002336:	d007      	beq.n	8002348 <DS_init+0x54>
 8002338:	e015      	b.n	8002366 <DS_init+0x72>
    {
    case 0:
    {
     DS_send(0b00011111);
 800233a:	201f      	movs	r0, #31
 800233c:	f7ff fd84 	bl	8001e48 <DS_send>
     ds_convert_delay = 100;
 8002340:	4b12      	ldr	r3, [pc, #72]	; (800238c <DS_init+0x98>)
 8002342:	2264      	movs	r2, #100	; 0x64
 8002344:	601a      	str	r2, [r3, #0]
     break;
 8002346:	e017      	b.n	8002378 <DS_init+0x84>
    }
    case 1:
    {
     DS_send(0b00111111);
 8002348:	203f      	movs	r0, #63	; 0x3f
 800234a:	f7ff fd7d 	bl	8001e48 <DS_send>
     ds_convert_delay = 200;
 800234e:	4b0f      	ldr	r3, [pc, #60]	; (800238c <DS_init+0x98>)
 8002350:	22c8      	movs	r2, #200	; 0xc8
 8002352:	601a      	str	r2, [r3, #0]
     break;
 8002354:	e010      	b.n	8002378 <DS_init+0x84>
    }
    case 2:
    {
     DS_send(0b01011111);
 8002356:	205f      	movs	r0, #95	; 0x5f
 8002358:	f7ff fd76 	bl	8001e48 <DS_send>
     ds_convert_delay = 400;
 800235c:	4b0b      	ldr	r3, [pc, #44]	; (800238c <DS_init+0x98>)
 800235e:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8002362:	601a      	str	r2, [r3, #0]
     break;
 8002364:	e008      	b.n	8002378 <DS_init+0x84>
    }
    default:
     DS_send(0b01111111);
 8002366:	207f      	movs	r0, #127	; 0x7f
 8002368:	f7ff fd6e 	bl	8001e48 <DS_send>
     ds_convert_delay = 800;
 800236c:	4b07      	ldr	r3, [pc, #28]	; (800238c <DS_init+0x98>)
 800236e:	f44f 7248 	mov.w	r2, #800	; 0x320
 8002372:	601a      	str	r2, [r3, #0]
 8002374:	e000      	b.n	8002378 <DS_init+0x84>
    }
   }
 8002376:	bf00      	nop
   HAL_TIM_Base_Stop_IT(&htim3);
 8002378:	4803      	ldr	r0, [pc, #12]	; (8002388 <DS_init+0x94>)
 800237a:	f005 fa13 	bl	80077a4 <HAL_TIM_Base_Stop_IT>

  }
 800237e:	bf00      	nop
 8002380:	3708      	adds	r7, #8
 8002382:	46bd      	mov	sp, r7
 8002384:	bd80      	pop	{r7, pc}
 8002386:	bf00      	nop
 8002388:	20000340 	.word	0x20000340
 800238c:	20000000 	.word	0x20000000

08002390 <lis_init>:

//-----------------------------LIS------------------------------------------
void lis_init()
   {
 8002390:	b580      	push	{r7, lr}
 8002392:	b082      	sub	sp, #8
 8002394:	af00      	add	r7, sp, #0
     // настройка lis3mdl. Особенность в том, что надо сразу все настройки загружать в память датчика, иначе работать не будет. Почему такое происходит неизвестно
     uint8_t lis_config[6]={(0x20|0b01000000),0b01111100,0b01100000,0b00000000,0b00001100,0b01000000};
 8002396:	4a0c      	ldr	r2, [pc, #48]	; (80023c8 <lis_init+0x38>)
 8002398:	463b      	mov	r3, r7
 800239a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800239e:	6018      	str	r0, [r3, #0]
 80023a0:	3304      	adds	r3, #4
 80023a2:	8019      	strh	r1, [r3, #0]
     lis3mdl_cs(0);
 80023a4:	2000      	movs	r0, #0
 80023a6:	f001 fd3f 	bl	8003e28 <lis3mdl_cs>
     HAL_SPI_Transmit(&hspi2, (uint8_t *)lis_config,6,5000);
 80023aa:	4639      	mov	r1, r7
 80023ac:	f241 3388 	movw	r3, #5000	; 0x1388
 80023b0:	2206      	movs	r2, #6
 80023b2:	4806      	ldr	r0, [pc, #24]	; (80023cc <lis_init+0x3c>)
 80023b4:	f004 fc24 	bl	8006c00 <HAL_SPI_Transmit>
     lis3mdl_cs(1);
 80023b8:	2001      	movs	r0, #1
 80023ba:	f001 fd35 	bl	8003e28 <lis3mdl_cs>
   }
 80023be:	bf00      	nop
 80023c0:	3708      	adds	r7, #8
 80023c2:	46bd      	mov	sp, r7
 80023c4:	bd80      	pop	{r7, pc}
 80023c6:	bf00      	nop
 80023c8:	0800e804 	.word	0x0800e804
 80023cc:	200002e8 	.word	0x200002e8

080023d0 <lis_get_data>:

void lis_get_data()
{
 80023d0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80023d4:	b08f      	sub	sp, #60	; 0x3c
 80023d6:	af04      	add	r7, sp, #16
	uint8_t buf;

	buf = (0x27) | 0b11000000;
 80023d8:	23e7      	movs	r3, #231	; 0xe7
 80023da:	74bb      	strb	r3, [r7, #18]
	lis3mdl_cs(0);
 80023dc:	2000      	movs	r0, #0
 80023de:	f001 fd23 	bl	8003e28 <lis3mdl_cs>
	HAL_SPI_Transmit(&hspi2, &buf, 1, 500);
 80023e2:	f107 0112 	add.w	r1, r7, #18
 80023e6:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80023ea:	2201      	movs	r2, #1
 80023ec:	4883      	ldr	r0, [pc, #524]	; (80025fc <lis_get_data+0x22c>)
 80023ee:	f004 fc07 	bl	8006c00 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi2, &buf, 1, 500);
 80023f2:	f107 0112 	add.w	r1, r7, #18
 80023f6:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80023fa:	2201      	movs	r2, #1
 80023fc:	487f      	ldr	r0, [pc, #508]	; (80025fc <lis_get_data+0x22c>)
 80023fe:	f004 fd3b 	bl	8006e78 <HAL_SPI_Receive>
	lis3mdl_cs(1);
 8002402:	2001      	movs	r0, #1
 8002404:	f001 fd10 	bl	8003e28 <lis3mdl_cs>

	buf = buf & 0x0f;
 8002408:	7cbb      	ldrb	r3, [r7, #18]
 800240a:	f003 030f 	and.w	r3, r3, #15
 800240e:	b2db      	uxtb	r3, r3
 8002410:	74bb      	strb	r3, [r7, #18]

	if(buf == 15)
 8002412:	7cbb      	ldrb	r3, [r7, #18]
 8002414:	2b0f      	cmp	r3, #15
 8002416:	f040 80ec 	bne.w	80025f2 <lis_get_data+0x222>
	{

		lis3mdl_cs(0);
 800241a:	2000      	movs	r0, #0
 800241c:	f001 fd04 	bl	8003e28 <lis3mdl_cs>
		buf = (0x28) | 0b11000000;
 8002420:	23e8      	movs	r3, #232	; 0xe8
 8002422:	74bb      	strb	r3, [r7, #18]
		HAL_SPI_Transmit(&hspi2, &buf, 1, 500);
 8002424:	f107 0112 	add.w	r1, r7, #18
 8002428:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800242c:	2201      	movs	r2, #1
 800242e:	4873      	ldr	r0, [pc, #460]	; (80025fc <lis_get_data+0x22c>)
 8002430:	f004 fbe6 	bl	8006c00 <HAL_SPI_Transmit>
		HAL_SPI_Receive(&hspi2, lis_raw_data, 6, 500);  //читывание данных с датчика
 8002434:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8002438:	2206      	movs	r2, #6
 800243a:	4971      	ldr	r1, [pc, #452]	; (8002600 <lis_get_data+0x230>)
 800243c:	486f      	ldr	r0, [pc, #444]	; (80025fc <lis_get_data+0x22c>)
 800243e:	f004 fd1b 	bl	8006e78 <HAL_SPI_Receive>
		lis3mdl_cs(1);
 8002442:	2001      	movs	r0, #1
 8002444:	f001 fcf0 	bl	8003e28 <lis3mdl_cs>
		new_data++;  // говорим, что есть новые данные для отправки
 8002448:	4b6e      	ldr	r3, [pc, #440]	; (8002604 <lis_get_data+0x234>)
 800244a:	781b      	ldrb	r3, [r3, #0]
 800244c:	3301      	adds	r3, #1
 800244e:	b2da      	uxtb	r2, r3
 8002450:	4b6c      	ldr	r3, [pc, #432]	; (8002604 <lis_get_data+0x234>)
 8002452:	701a      	strb	r2, [r3, #0]
#ifdef debug
		int16_t lis_data[3];
		float lis_data_float[3];
		for(int i=0; i<3; i++)  //преобразование данных с датчика и вывод
 8002454:	2300      	movs	r3, #0
 8002456:	627b      	str	r3, [r7, #36]	; 0x24
 8002458:	e038      	b.n	80024cc <lis_get_data+0xfc>
		{
		  lis_data[i] = lis_raw_data[i*2+1];
 800245a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800245c:	005b      	lsls	r3, r3, #1
 800245e:	3301      	adds	r3, #1
 8002460:	4a67      	ldr	r2, [pc, #412]	; (8002600 <lis_get_data+0x230>)
 8002462:	5cd3      	ldrb	r3, [r2, r3]
 8002464:	b21a      	sxth	r2, r3
 8002466:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002468:	005b      	lsls	r3, r3, #1
 800246a:	3328      	adds	r3, #40	; 0x28
 800246c:	443b      	add	r3, r7
 800246e:	f823 2c1c 	strh.w	r2, [r3, #-28]
		  lis_data[i] = lis_data[i]<<8 | lis_raw_data[i*2];
 8002472:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002474:	005b      	lsls	r3, r3, #1
 8002476:	3328      	adds	r3, #40	; 0x28
 8002478:	443b      	add	r3, r7
 800247a:	f933 3c1c 	ldrsh.w	r3, [r3, #-28]
 800247e:	021b      	lsls	r3, r3, #8
 8002480:	b21a      	sxth	r2, r3
 8002482:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002484:	005b      	lsls	r3, r3, #1
 8002486:	495e      	ldr	r1, [pc, #376]	; (8002600 <lis_get_data+0x230>)
 8002488:	5ccb      	ldrb	r3, [r1, r3]
 800248a:	b21b      	sxth	r3, r3
 800248c:	4313      	orrs	r3, r2
 800248e:	b21a      	sxth	r2, r3
 8002490:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002492:	005b      	lsls	r3, r3, #1
 8002494:	3328      	adds	r3, #40	; 0x28
 8002496:	443b      	add	r3, r7
 8002498:	f823 2c1c 	strh.w	r2, [r3, #-28]
		  lis_data_float[i] = (float)lis_data[i]/1711.0;
 800249c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800249e:	005b      	lsls	r3, r3, #1
 80024a0:	3328      	adds	r3, #40	; 0x28
 80024a2:	443b      	add	r3, r7
 80024a4:	f933 3c1c 	ldrsh.w	r3, [r3, #-28]
 80024a8:	ee07 3a90 	vmov	s15, r3
 80024ac:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80024b0:	eddf 6a55 	vldr	s13, [pc, #340]	; 8002608 <lis_get_data+0x238>
 80024b4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80024b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024ba:	009b      	lsls	r3, r3, #2
 80024bc:	3328      	adds	r3, #40	; 0x28
 80024be:	443b      	add	r3, r7
 80024c0:	3b28      	subs	r3, #40	; 0x28
 80024c2:	edc3 7a00 	vstr	s15, [r3]
		for(int i=0; i<3; i++)  //преобразование данных с датчика и вывод
 80024c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024c8:	3301      	adds	r3, #1
 80024ca:	627b      	str	r3, [r7, #36]	; 0x24
 80024cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024ce:	2b02      	cmp	r3, #2
 80024d0:	ddc3      	ble.n	800245a <lis_get_data+0x8a>
//		  printf("%d, ", lis_data[i]);
		}
//		printf("\n");

		printf("time = %lu, Mag X = %f, Mag Y = %f, Mag Z = %f\n",milis, lis_data_float[0],lis_data_float[1],lis_data_float[2]);
 80024d2:	4b4e      	ldr	r3, [pc, #312]	; (800260c <lis_get_data+0x23c>)
 80024d4:	681e      	ldr	r6, [r3, #0]
 80024d6:	683b      	ldr	r3, [r7, #0]
 80024d8:	4618      	mov	r0, r3
 80024da:	f7fe f83d 	bl	8000558 <__aeabi_f2d>
 80024de:	4680      	mov	r8, r0
 80024e0:	4689      	mov	r9, r1
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	4618      	mov	r0, r3
 80024e6:	f7fe f837 	bl	8000558 <__aeabi_f2d>
 80024ea:	4604      	mov	r4, r0
 80024ec:	460d      	mov	r5, r1
 80024ee:	68bb      	ldr	r3, [r7, #8]
 80024f0:	4618      	mov	r0, r3
 80024f2:	f7fe f831 	bl	8000558 <__aeabi_f2d>
 80024f6:	4602      	mov	r2, r0
 80024f8:	460b      	mov	r3, r1
 80024fa:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80024fe:	e9cd 4500 	strd	r4, r5, [sp]
 8002502:	4642      	mov	r2, r8
 8002504:	464b      	mov	r3, r9
 8002506:	4631      	mov	r1, r6
 8002508:	4841      	ldr	r0, [pc, #260]	; (8002610 <lis_get_data+0x240>)
 800250a:	f00a f81f 	bl	800c54c <iprintf>
#endif
	//карта памяти
	uint32_t buf_milis = milis; //время
 800250e:	4b3f      	ldr	r3, [pc, #252]	; (800260c <lis_get_data+0x23c>)
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	617b      	str	r3, [r7, #20]
	for(int i = 0; i < 4; i++)
 8002514:	2300      	movs	r3, #0
 8002516:	623b      	str	r3, [r7, #32]
 8002518:	e012      	b.n	8002540 <lis_get_data+0x170>
	{
		uint8_t buf = buf_milis >> (i*8);
 800251a:	6a3b      	ldr	r3, [r7, #32]
 800251c:	00db      	lsls	r3, r3, #3
 800251e:	697a      	ldr	r2, [r7, #20]
 8002520:	fa22 f303 	lsr.w	r3, r2, r3
 8002524:	74fb      	strb	r3, [r7, #19]
		sd_data_lis[sd_pos_lis] = buf;
 8002526:	4b3b      	ldr	r3, [pc, #236]	; (8002614 <lis_get_data+0x244>)
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	493b      	ldr	r1, [pc, #236]	; (8002618 <lis_get_data+0x248>)
 800252c:	7cfa      	ldrb	r2, [r7, #19]
 800252e:	54ca      	strb	r2, [r1, r3]
		sd_pos_lis++;
 8002530:	4b38      	ldr	r3, [pc, #224]	; (8002614 <lis_get_data+0x244>)
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	3301      	adds	r3, #1
 8002536:	4a37      	ldr	r2, [pc, #220]	; (8002614 <lis_get_data+0x244>)
 8002538:	6013      	str	r3, [r2, #0]
	for(int i = 0; i < 4; i++)
 800253a:	6a3b      	ldr	r3, [r7, #32]
 800253c:	3301      	adds	r3, #1
 800253e:	623b      	str	r3, [r7, #32]
 8002540:	6a3b      	ldr	r3, [r7, #32]
 8002542:	2b03      	cmp	r3, #3
 8002544:	dde9      	ble.n	800251a <lis_get_data+0x14a>
	}

	for(int i = 0; i < 6; i++) //данные
 8002546:	2300      	movs	r3, #0
 8002548:	61fb      	str	r3, [r7, #28]
 800254a:	e00f      	b.n	800256c <lis_get_data+0x19c>
	{
		sd_data_lis[sd_pos_lis] = lis_raw_data[i];
 800254c:	4b31      	ldr	r3, [pc, #196]	; (8002614 <lis_get_data+0x244>)
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	492b      	ldr	r1, [pc, #172]	; (8002600 <lis_get_data+0x230>)
 8002552:	69fa      	ldr	r2, [r7, #28]
 8002554:	440a      	add	r2, r1
 8002556:	7811      	ldrb	r1, [r2, #0]
 8002558:	4a2f      	ldr	r2, [pc, #188]	; (8002618 <lis_get_data+0x248>)
 800255a:	54d1      	strb	r1, [r2, r3]
		sd_pos_lis++;
 800255c:	4b2d      	ldr	r3, [pc, #180]	; (8002614 <lis_get_data+0x244>)
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	3301      	adds	r3, #1
 8002562:	4a2c      	ldr	r2, [pc, #176]	; (8002614 <lis_get_data+0x244>)
 8002564:	6013      	str	r3, [r2, #0]
	for(int i = 0; i < 6; i++) //данные
 8002566:	69fb      	ldr	r3, [r7, #28]
 8002568:	3301      	adds	r3, #1
 800256a:	61fb      	str	r3, [r7, #28]
 800256c:	69fb      	ldr	r3, [r7, #28]
 800256e:	2b05      	cmp	r3, #5
 8002570:	ddec      	ble.n	800254c <lis_get_data+0x17c>
	}

	for(int i = 0; i < 6; i++) //данные
 8002572:	2300      	movs	r3, #0
 8002574:	61bb      	str	r3, [r7, #24]
 8002576:	e00c      	b.n	8002592 <lis_get_data+0x1c2>
	{
		sd_data_lis[sd_pos_lis] = 0;
 8002578:	4b26      	ldr	r3, [pc, #152]	; (8002614 <lis_get_data+0x244>)
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	4a26      	ldr	r2, [pc, #152]	; (8002618 <lis_get_data+0x248>)
 800257e:	2100      	movs	r1, #0
 8002580:	54d1      	strb	r1, [r2, r3]
		sd_pos_lis++;
 8002582:	4b24      	ldr	r3, [pc, #144]	; (8002614 <lis_get_data+0x244>)
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	3301      	adds	r3, #1
 8002588:	4a22      	ldr	r2, [pc, #136]	; (8002614 <lis_get_data+0x244>)
 800258a:	6013      	str	r3, [r2, #0]
	for(int i = 0; i < 6; i++) //данные
 800258c:	69bb      	ldr	r3, [r7, #24]
 800258e:	3301      	adds	r3, #1
 8002590:	61bb      	str	r3, [r7, #24]
 8002592:	69bb      	ldr	r3, [r7, #24]
 8002594:	2b05      	cmp	r3, #5
 8002596:	ddef      	ble.n	8002578 <lis_get_data+0x1a8>
	}

	if(sd_pos_lis == sizeof(sd_data_lis)) //запись в файл
 8002598:	4b1e      	ldr	r3, [pc, #120]	; (8002614 <lis_get_data+0x244>)
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80025a0:	d127      	bne.n	80025f2 <lis_get_data+0x222>
	{
		res = f_open(&MyFile, "LIS.hex",FA_WRITE);
 80025a2:	2202      	movs	r2, #2
 80025a4:	491d      	ldr	r1, [pc, #116]	; (800261c <lis_get_data+0x24c>)
 80025a6:	481e      	ldr	r0, [pc, #120]	; (8002620 <lis_get_data+0x250>)
 80025a8:	f008 fd9e 	bl	800b0e8 <f_open>
 80025ac:	4603      	mov	r3, r0
 80025ae:	461a      	mov	r2, r3
 80025b0:	4b1c      	ldr	r3, [pc, #112]	; (8002624 <lis_get_data+0x254>)
 80025b2:	701a      	strb	r2, [r3, #0]
		res = f_lseek(&MyFile, f_size(&MyFile));
 80025b4:	4b1a      	ldr	r3, [pc, #104]	; (8002620 <lis_get_data+0x250>)
 80025b6:	68db      	ldr	r3, [r3, #12]
 80025b8:	4619      	mov	r1, r3
 80025ba:	4819      	ldr	r0, [pc, #100]	; (8002620 <lis_get_data+0x250>)
 80025bc:	f009 f98d 	bl	800b8da <f_lseek>
 80025c0:	4603      	mov	r3, r0
 80025c2:	461a      	mov	r2, r3
 80025c4:	4b17      	ldr	r3, [pc, #92]	; (8002624 <lis_get_data+0x254>)
 80025c6:	701a      	strb	r2, [r3, #0]
		res = f_write(&MyFile, sd_data_lis, sizeof(sd_data_lis), (void*)&byteswritten);
 80025c8:	4b17      	ldr	r3, [pc, #92]	; (8002628 <lis_get_data+0x258>)
 80025ca:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80025ce:	4912      	ldr	r1, [pc, #72]	; (8002618 <lis_get_data+0x248>)
 80025d0:	4813      	ldr	r0, [pc, #76]	; (8002620 <lis_get_data+0x250>)
 80025d2:	f008 ff52 	bl	800b47a <f_write>
 80025d6:	4603      	mov	r3, r0
 80025d8:	461a      	mov	r2, r3
 80025da:	4b12      	ldr	r3, [pc, #72]	; (8002624 <lis_get_data+0x254>)
 80025dc:	701a      	strb	r2, [r3, #0]
		res = f_close(&MyFile);
 80025de:	4810      	ldr	r0, [pc, #64]	; (8002620 <lis_get_data+0x250>)
 80025e0:	f009 f951 	bl	800b886 <f_close>
 80025e4:	4603      	mov	r3, r0
 80025e6:	461a      	mov	r2, r3
 80025e8:	4b0e      	ldr	r3, [pc, #56]	; (8002624 <lis_get_data+0x254>)
 80025ea:	701a      	strb	r2, [r3, #0]
		sd_pos_lis = 0;
 80025ec:	4b09      	ldr	r3, [pc, #36]	; (8002614 <lis_get_data+0x244>)
 80025ee:	2200      	movs	r2, #0
 80025f0:	601a      	str	r2, [r3, #0]
	}
	}

}
 80025f2:	bf00      	nop
 80025f4:	372c      	adds	r7, #44	; 0x2c
 80025f6:	46bd      	mov	sp, r7
 80025f8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80025fc:	200002e8 	.word	0x200002e8
 8002600:	2000046c 	.word	0x2000046c
 8002604:	200004cd 	.word	0x200004cd
 8002608:	44d5e000 	.word	0x44d5e000
 800260c:	20000450 	.word	0x20000450
 8002610:	0800e80c 	.word	0x0800e80c
 8002614:	20006508 	.word	0x20006508
 8002618:	20003500 	.word	0x20003500
 800261c:	0800e83c 	.word	0x0800e83c
 8002620:	200004d4 	.word	0x200004d4
 8002624:	200004ce 	.word	0x200004ce
 8002628:	200004d0 	.word	0x200004d0

0800262c <lsm_init>:

 //----------------------------LSM-------------------------------------------
void lsm_init() //настройка
{
 800262c:	b580      	push	{r7, lr}
 800262e:	b082      	sub	sp, #8
 8002630:	af00      	add	r7, sp, #0
	uint8_t buf;

	lsm6ds_cs(0);
 8002632:	2000      	movs	r0, #0
 8002634:	f001 fc18 	bl	8003e68 <lsm6ds_cs>
	buf = 0x10;
 8002638:	2310      	movs	r3, #16
 800263a:	71fb      	strb	r3, [r7, #7]
	HAL_SPI_Transmit(&hspi2, &buf, 1, 500);
 800263c:	1df9      	adds	r1, r7, #7
 800263e:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8002642:	2201      	movs	r2, #1
 8002644:	4839      	ldr	r0, [pc, #228]	; (800272c <lsm_init+0x100>)
 8002646:	f004 fadb 	bl	8006c00 <HAL_SPI_Transmit>
	buf = 0b01000100;
 800264a:	2344      	movs	r3, #68	; 0x44
 800264c:	71fb      	strb	r3, [r7, #7]
	HAL_SPI_Transmit(&hspi2, &buf, 1, 500);
 800264e:	1df9      	adds	r1, r7, #7
 8002650:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8002654:	2201      	movs	r2, #1
 8002656:	4835      	ldr	r0, [pc, #212]	; (800272c <lsm_init+0x100>)
 8002658:	f004 fad2 	bl	8006c00 <HAL_SPI_Transmit>
	lsm6ds_cs(1);
 800265c:	2001      	movs	r0, #1
 800265e:	f001 fc03 	bl	8003e68 <lsm6ds_cs>

	lsm6ds_cs(0);
 8002662:	2000      	movs	r0, #0
 8002664:	f001 fc00 	bl	8003e68 <lsm6ds_cs>
	buf = 0x11;
 8002668:	2311      	movs	r3, #17
 800266a:	71fb      	strb	r3, [r7, #7]
	HAL_SPI_Transmit(&hspi2, &buf, 1, 500);
 800266c:	1df9      	adds	r1, r7, #7
 800266e:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8002672:	2201      	movs	r2, #1
 8002674:	482d      	ldr	r0, [pc, #180]	; (800272c <lsm_init+0x100>)
 8002676:	f004 fac3 	bl	8006c00 <HAL_SPI_Transmit>
	buf = 0b01001100;
 800267a:	234c      	movs	r3, #76	; 0x4c
 800267c:	71fb      	strb	r3, [r7, #7]
	HAL_SPI_Transmit(&hspi2, &buf, 1, 500);
 800267e:	1df9      	adds	r1, r7, #7
 8002680:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8002684:	2201      	movs	r2, #1
 8002686:	4829      	ldr	r0, [pc, #164]	; (800272c <lsm_init+0x100>)
 8002688:	f004 faba 	bl	8006c00 <HAL_SPI_Transmit>
	lsm6ds_cs(1);
 800268c:	2001      	movs	r0, #1
 800268e:	f001 fbeb 	bl	8003e68 <lsm6ds_cs>

	lsm6ds_cs(0);
 8002692:	2000      	movs	r0, #0
 8002694:	f001 fbe8 	bl	8003e68 <lsm6ds_cs>
	buf = 0x12;
 8002698:	2312      	movs	r3, #18
 800269a:	71fb      	strb	r3, [r7, #7]
	HAL_SPI_Transmit(&hspi2, &buf, 1, 500);
 800269c:	1df9      	adds	r1, r7, #7
 800269e:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80026a2:	2201      	movs	r2, #1
 80026a4:	4821      	ldr	r0, [pc, #132]	; (800272c <lsm_init+0x100>)
 80026a6:	f004 faab 	bl	8006c00 <HAL_SPI_Transmit>
	buf = 0b01000100;
 80026aa:	2344      	movs	r3, #68	; 0x44
 80026ac:	71fb      	strb	r3, [r7, #7]
	HAL_SPI_Transmit(&hspi2, &buf, 1, 500);
 80026ae:	1df9      	adds	r1, r7, #7
 80026b0:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80026b4:	2201      	movs	r2, #1
 80026b6:	481d      	ldr	r0, [pc, #116]	; (800272c <lsm_init+0x100>)
 80026b8:	f004 faa2 	bl	8006c00 <HAL_SPI_Transmit>
	lsm6ds_cs(1);
 80026bc:	2001      	movs	r0, #1
 80026be:	f001 fbd3 	bl	8003e68 <lsm6ds_cs>

	lsm6ds_cs(0);
 80026c2:	2000      	movs	r0, #0
 80026c4:	f001 fbd0 	bl	8003e68 <lsm6ds_cs>
	buf = 0x13;
 80026c8:	2313      	movs	r3, #19
 80026ca:	71fb      	strb	r3, [r7, #7]
	HAL_SPI_Transmit(&hspi2, &buf, 1, 500);
 80026cc:	1df9      	adds	r1, r7, #7
 80026ce:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80026d2:	2201      	movs	r2, #1
 80026d4:	4815      	ldr	r0, [pc, #84]	; (800272c <lsm_init+0x100>)
 80026d6:	f004 fa93 	bl	8006c00 <HAL_SPI_Transmit>
	buf = 0b00000100;
 80026da:	2304      	movs	r3, #4
 80026dc:	71fb      	strb	r3, [r7, #7]
	HAL_SPI_Transmit(&hspi2, &buf, 1, 500);
 80026de:	1df9      	adds	r1, r7, #7
 80026e0:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80026e4:	2201      	movs	r2, #1
 80026e6:	4811      	ldr	r0, [pc, #68]	; (800272c <lsm_init+0x100>)
 80026e8:	f004 fa8a 	bl	8006c00 <HAL_SPI_Transmit>
	lsm6ds_cs(1);
 80026ec:	2001      	movs	r0, #1
 80026ee:	f001 fbbb 	bl	8003e68 <lsm6ds_cs>

	lsm6ds_cs(0);
 80026f2:	2000      	movs	r0, #0
 80026f4:	f001 fbb8 	bl	8003e68 <lsm6ds_cs>
	buf = 0x14;
 80026f8:	2314      	movs	r3, #20
 80026fa:	71fb      	strb	r3, [r7, #7]
	HAL_SPI_Transmit(&hspi2, &buf, 1, 500);
 80026fc:	1df9      	adds	r1, r7, #7
 80026fe:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8002702:	2201      	movs	r2, #1
 8002704:	4809      	ldr	r0, [pc, #36]	; (800272c <lsm_init+0x100>)
 8002706:	f004 fa7b 	bl	8006c00 <HAL_SPI_Transmit>
	buf = 0b00000000;
 800270a:	2300      	movs	r3, #0
 800270c:	71fb      	strb	r3, [r7, #7]
	HAL_SPI_Transmit(&hspi2, &buf, 1, 500);
 800270e:	1df9      	adds	r1, r7, #7
 8002710:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8002714:	2201      	movs	r2, #1
 8002716:	4805      	ldr	r0, [pc, #20]	; (800272c <lsm_init+0x100>)
 8002718:	f004 fa72 	bl	8006c00 <HAL_SPI_Transmit>
	lsm6ds_cs(1);
 800271c:	2001      	movs	r0, #1
 800271e:	f001 fba3 	bl	8003e68 <lsm6ds_cs>

}
 8002722:	bf00      	nop
 8002724:	3708      	adds	r7, #8
 8002726:	46bd      	mov	sp, r7
 8002728:	bd80      	pop	{r7, pc}
 800272a:	bf00      	nop
 800272c:	200002e8 	.word	0x200002e8

08002730 <lsm_get_data>:

void lsm_get_data()
{
 8002730:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002734:	b097      	sub	sp, #92	; 0x5c
 8002736:	af0a      	add	r7, sp, #40	; 0x28
	uint8_t buf;
	buf = 0x1E | 0b10000000;
 8002738:	239e      	movs	r3, #158	; 0x9e
 800273a:	75bb      	strb	r3, [r7, #22]

	lsm6ds_cs(0);
 800273c:	2000      	movs	r0, #0
 800273e:	f001 fb93 	bl	8003e68 <lsm6ds_cs>
	HAL_SPI_Transmit(&hspi2, &buf, 1, 500);
 8002742:	f107 0116 	add.w	r1, r7, #22
 8002746:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800274a:	2201      	movs	r2, #1
 800274c:	48ab      	ldr	r0, [pc, #684]	; (80029fc <lsm_get_data+0x2cc>)
 800274e:	f004 fa57 	bl	8006c00 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi2, &buf, 1, 500);
 8002752:	f107 0116 	add.w	r1, r7, #22
 8002756:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800275a:	2201      	movs	r2, #1
 800275c:	48a7      	ldr	r0, [pc, #668]	; (80029fc <lsm_get_data+0x2cc>)
 800275e:	f004 fb8b 	bl	8006e78 <HAL_SPI_Receive>
	lsm6ds_cs(1);
 8002762:	2001      	movs	r0, #1
 8002764:	f001 fb80 	bl	8003e68 <lsm6ds_cs>
	buf = buf & 0b00000011;  //вычленяем только 2 последних бита
 8002768:	7dbb      	ldrb	r3, [r7, #22]
 800276a:	f003 0303 	and.w	r3, r3, #3
 800276e:	b2db      	uxtb	r3, r3
 8002770:	75bb      	strb	r3, [r7, #22]

	if(buf > 0)
 8002772:	7dbb      	ldrb	r3, [r7, #22]
 8002774:	2b00      	cmp	r3, #0
 8002776:	f000 813c 	beq.w	80029f2 <lsm_get_data+0x2c2>
	{
		  buf = 0x22 | 0b10000000;
 800277a:	23a2      	movs	r3, #162	; 0xa2
 800277c:	75bb      	strb	r3, [r7, #22]
		  lsm6ds_cs(0);
 800277e:	2000      	movs	r0, #0
 8002780:	f001 fb72 	bl	8003e68 <lsm6ds_cs>
		  HAL_SPI_Transmit(&hspi2, &buf, 1, 500);
 8002784:	f107 0116 	add.w	r1, r7, #22
 8002788:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800278c:	2201      	movs	r2, #1
 800278e:	489b      	ldr	r0, [pc, #620]	; (80029fc <lsm_get_data+0x2cc>)
 8002790:	f004 fa36 	bl	8006c00 <HAL_SPI_Transmit>
		  HAL_SPI_Receive(&hspi2, &data_lsm[0], 12, 500);
 8002794:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8002798:	220c      	movs	r2, #12
 800279a:	4999      	ldr	r1, [pc, #612]	; (8002a00 <lsm_get_data+0x2d0>)
 800279c:	4897      	ldr	r0, [pc, #604]	; (80029fc <lsm_get_data+0x2cc>)
 800279e:	f004 fb6b 	bl	8006e78 <HAL_SPI_Receive>
		  lsm6ds_cs(1);
 80027a2:	2001      	movs	r0, #1
 80027a4:	f001 fb60 	bl	8003e68 <lsm6ds_cs>

		  new_data++;  // говорим, что есть новые данные для отправки
 80027a8:	4b96      	ldr	r3, [pc, #600]	; (8002a04 <lsm_get_data+0x2d4>)
 80027aa:	781b      	ldrb	r3, [r3, #0]
 80027ac:	3301      	adds	r3, #1
 80027ae:	b2da      	uxtb	r2, r3
 80027b0:	4b94      	ldr	r3, [pc, #592]	; (8002a04 <lsm_get_data+0x2d4>)
 80027b2:	701a      	strb	r2, [r3, #0]

		  //карта памяти
		  	uint32_t buf_milis = milis; //время
 80027b4:	4b94      	ldr	r3, [pc, #592]	; (8002a08 <lsm_get_data+0x2d8>)
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	61bb      	str	r3, [r7, #24]
		  	for(int i = 0; i < 4; i++)
 80027ba:	2300      	movs	r3, #0
 80027bc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80027be:	e012      	b.n	80027e6 <lsm_get_data+0xb6>
		  	{
		  		uint8_t buf = buf_milis >> (i*8);
 80027c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027c2:	00db      	lsls	r3, r3, #3
 80027c4:	69ba      	ldr	r2, [r7, #24]
 80027c6:	fa22 f303 	lsr.w	r3, r2, r3
 80027ca:	75fb      	strb	r3, [r7, #23]
		  		sd_data_lsm[sd_pos_lsm] = buf;
 80027cc:	4b8f      	ldr	r3, [pc, #572]	; (8002a0c <lsm_get_data+0x2dc>)
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	498f      	ldr	r1, [pc, #572]	; (8002a10 <lsm_get_data+0x2e0>)
 80027d2:	7dfa      	ldrb	r2, [r7, #23]
 80027d4:	54ca      	strb	r2, [r1, r3]
		  		sd_pos_lsm++;
 80027d6:	4b8d      	ldr	r3, [pc, #564]	; (8002a0c <lsm_get_data+0x2dc>)
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	3301      	adds	r3, #1
 80027dc:	4a8b      	ldr	r2, [pc, #556]	; (8002a0c <lsm_get_data+0x2dc>)
 80027de:	6013      	str	r3, [r2, #0]
		  	for(int i = 0; i < 4; i++)
 80027e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027e2:	3301      	adds	r3, #1
 80027e4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80027e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027e8:	2b03      	cmp	r3, #3
 80027ea:	dde9      	ble.n	80027c0 <lsm_get_data+0x90>
		  	}

		  	for(int i = 0; i < 12; i++) //данные
 80027ec:	2300      	movs	r3, #0
 80027ee:	62bb      	str	r3, [r7, #40]	; 0x28
 80027f0:	e00f      	b.n	8002812 <lsm_get_data+0xe2>
		  	{
		  		sd_data_lsm[sd_pos_lsm] = data_lsm[i];
 80027f2:	4b86      	ldr	r3, [pc, #536]	; (8002a0c <lsm_get_data+0x2dc>)
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	4982      	ldr	r1, [pc, #520]	; (8002a00 <lsm_get_data+0x2d0>)
 80027f8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80027fa:	440a      	add	r2, r1
 80027fc:	7811      	ldrb	r1, [r2, #0]
 80027fe:	4a84      	ldr	r2, [pc, #528]	; (8002a10 <lsm_get_data+0x2e0>)
 8002800:	54d1      	strb	r1, [r2, r3]
		  		sd_pos_lsm++;
 8002802:	4b82      	ldr	r3, [pc, #520]	; (8002a0c <lsm_get_data+0x2dc>)
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	3301      	adds	r3, #1
 8002808:	4a80      	ldr	r2, [pc, #512]	; (8002a0c <lsm_get_data+0x2dc>)
 800280a:	6013      	str	r3, [r2, #0]
		  	for(int i = 0; i < 12; i++) //данные
 800280c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800280e:	3301      	adds	r3, #1
 8002810:	62bb      	str	r3, [r7, #40]	; 0x28
 8002812:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002814:	2b0b      	cmp	r3, #11
 8002816:	ddec      	ble.n	80027f2 <lsm_get_data+0xc2>
		  	}

		  	if(sd_pos_lsm == sizeof(sd_data_lsm)) //запись в файл
 8002818:	4b7c      	ldr	r3, [pc, #496]	; (8002a0c <lsm_get_data+0x2dc>)
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002820:	d127      	bne.n	8002872 <lsm_get_data+0x142>
		  	{
		  		res = f_open(&MyFile, "LSM.hex",FA_WRITE);
 8002822:	2202      	movs	r2, #2
 8002824:	497b      	ldr	r1, [pc, #492]	; (8002a14 <lsm_get_data+0x2e4>)
 8002826:	487c      	ldr	r0, [pc, #496]	; (8002a18 <lsm_get_data+0x2e8>)
 8002828:	f008 fc5e 	bl	800b0e8 <f_open>
 800282c:	4603      	mov	r3, r0
 800282e:	461a      	mov	r2, r3
 8002830:	4b7a      	ldr	r3, [pc, #488]	; (8002a1c <lsm_get_data+0x2ec>)
 8002832:	701a      	strb	r2, [r3, #0]
		  		res = f_lseek(&MyFile, f_size(&MyFile));
 8002834:	4b78      	ldr	r3, [pc, #480]	; (8002a18 <lsm_get_data+0x2e8>)
 8002836:	68db      	ldr	r3, [r3, #12]
 8002838:	4619      	mov	r1, r3
 800283a:	4877      	ldr	r0, [pc, #476]	; (8002a18 <lsm_get_data+0x2e8>)
 800283c:	f009 f84d 	bl	800b8da <f_lseek>
 8002840:	4603      	mov	r3, r0
 8002842:	461a      	mov	r2, r3
 8002844:	4b75      	ldr	r3, [pc, #468]	; (8002a1c <lsm_get_data+0x2ec>)
 8002846:	701a      	strb	r2, [r3, #0]
		  		res = f_write(&MyFile, sd_data_lsm, sizeof(sd_data_lsm), (void*)&byteswritten);
 8002848:	4b75      	ldr	r3, [pc, #468]	; (8002a20 <lsm_get_data+0x2f0>)
 800284a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800284e:	4970      	ldr	r1, [pc, #448]	; (8002a10 <lsm_get_data+0x2e0>)
 8002850:	4871      	ldr	r0, [pc, #452]	; (8002a18 <lsm_get_data+0x2e8>)
 8002852:	f008 fe12 	bl	800b47a <f_write>
 8002856:	4603      	mov	r3, r0
 8002858:	461a      	mov	r2, r3
 800285a:	4b70      	ldr	r3, [pc, #448]	; (8002a1c <lsm_get_data+0x2ec>)
 800285c:	701a      	strb	r2, [r3, #0]
		  		res = f_close(&MyFile);
 800285e:	486e      	ldr	r0, [pc, #440]	; (8002a18 <lsm_get_data+0x2e8>)
 8002860:	f009 f811 	bl	800b886 <f_close>
 8002864:	4603      	mov	r3, r0
 8002866:	461a      	mov	r2, r3
 8002868:	4b6c      	ldr	r3, [pc, #432]	; (8002a1c <lsm_get_data+0x2ec>)
 800286a:	701a      	strb	r2, [r3, #0]
		  		sd_pos_lsm = 0;
 800286c:	4b67      	ldr	r3, [pc, #412]	; (8002a0c <lsm_get_data+0x2dc>)
 800286e:	2200      	movs	r2, #0
 8002870:	601a      	str	r2, [r3, #0]
		  	}

			#ifdef debug
				  for(int i=0; i<6; i++)
 8002872:	2300      	movs	r3, #0
 8002874:	627b      	str	r3, [r7, #36]	; 0x24
 8002876:	e01d      	b.n	80028b4 <lsm_get_data+0x184>
				  {
					  out_data_lsm[i] = data_lsm[i*2+1];
 8002878:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800287a:	005b      	lsls	r3, r3, #1
 800287c:	3301      	adds	r3, #1
 800287e:	4a60      	ldr	r2, [pc, #384]	; (8002a00 <lsm_get_data+0x2d0>)
 8002880:	5cd3      	ldrb	r3, [r2, r3]
 8002882:	b219      	sxth	r1, r3
 8002884:	4a67      	ldr	r2, [pc, #412]	; (8002a24 <lsm_get_data+0x2f4>)
 8002886:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002888:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
					  out_data_lsm[i] = out_data_lsm[i]<<8 | data_lsm[i*2];
 800288c:	4a65      	ldr	r2, [pc, #404]	; (8002a24 <lsm_get_data+0x2f4>)
 800288e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002890:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8002894:	021b      	lsls	r3, r3, #8
 8002896:	b21a      	sxth	r2, r3
 8002898:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800289a:	005b      	lsls	r3, r3, #1
 800289c:	4958      	ldr	r1, [pc, #352]	; (8002a00 <lsm_get_data+0x2d0>)
 800289e:	5ccb      	ldrb	r3, [r1, r3]
 80028a0:	b21b      	sxth	r3, r3
 80028a2:	4313      	orrs	r3, r2
 80028a4:	b219      	sxth	r1, r3
 80028a6:	4a5f      	ldr	r2, [pc, #380]	; (8002a24 <lsm_get_data+0x2f4>)
 80028a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028aa:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
				  for(int i=0; i<6; i++)
 80028ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028b0:	3301      	adds	r3, #1
 80028b2:	627b      	str	r3, [r7, #36]	; 0x24
 80028b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028b6:	2b05      	cmp	r3, #5
 80028b8:	ddde      	ble.n	8002878 <lsm_get_data+0x148>
			//		  printf("%d, ", out_data_lsm[i]);
				  }
			//	  printf("\n");

				  for(int i=0; i<3; i++)
 80028ba:	2300      	movs	r3, #0
 80028bc:	623b      	str	r3, [r7, #32]
 80028be:	e028      	b.n	8002912 <lsm_get_data+0x1e2>
				  {
					  data_lsm_float[i] = (float)out_data_lsm[i]/32768.0*2000.0;
 80028c0:	4a58      	ldr	r2, [pc, #352]	; (8002a24 <lsm_get_data+0x2f4>)
 80028c2:	6a3b      	ldr	r3, [r7, #32]
 80028c4:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 80028c8:	ee07 3a90 	vmov	s15, r3
 80028cc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80028d0:	ee17 0a90 	vmov	r0, s15
 80028d4:	f7fd fe40 	bl	8000558 <__aeabi_f2d>
 80028d8:	f04f 0200 	mov.w	r2, #0
 80028dc:	4b52      	ldr	r3, [pc, #328]	; (8002a28 <lsm_get_data+0x2f8>)
 80028de:	f7fd ffbd 	bl	800085c <__aeabi_ddiv>
 80028e2:	4602      	mov	r2, r0
 80028e4:	460b      	mov	r3, r1
 80028e6:	4610      	mov	r0, r2
 80028e8:	4619      	mov	r1, r3
 80028ea:	f04f 0200 	mov.w	r2, #0
 80028ee:	4b4f      	ldr	r3, [pc, #316]	; (8002a2c <lsm_get_data+0x2fc>)
 80028f0:	f7fd fe8a 	bl	8000608 <__aeabi_dmul>
 80028f4:	4602      	mov	r2, r0
 80028f6:	460b      	mov	r3, r1
 80028f8:	4610      	mov	r0, r2
 80028fa:	4619      	mov	r1, r3
 80028fc:	f7fe f95c 	bl	8000bb8 <__aeabi_d2f>
 8002900:	4602      	mov	r2, r0
 8002902:	494b      	ldr	r1, [pc, #300]	; (8002a30 <lsm_get_data+0x300>)
 8002904:	6a3b      	ldr	r3, [r7, #32]
 8002906:	009b      	lsls	r3, r3, #2
 8002908:	440b      	add	r3, r1
 800290a:	601a      	str	r2, [r3, #0]
				  for(int i=0; i<3; i++)
 800290c:	6a3b      	ldr	r3, [r7, #32]
 800290e:	3301      	adds	r3, #1
 8002910:	623b      	str	r3, [r7, #32]
 8002912:	6a3b      	ldr	r3, [r7, #32]
 8002914:	2b02      	cmp	r3, #2
 8002916:	ddd3      	ble.n	80028c0 <lsm_get_data+0x190>
				  }
				  for(int i=3; i<6; i++)
 8002918:	2303      	movs	r3, #3
 800291a:	61fb      	str	r3, [r7, #28]
 800291c:	e028      	b.n	8002970 <lsm_get_data+0x240>
				  {
					  data_lsm_float[i] = (float)out_data_lsm[i]/32768.0*16.0;
 800291e:	4a41      	ldr	r2, [pc, #260]	; (8002a24 <lsm_get_data+0x2f4>)
 8002920:	69fb      	ldr	r3, [r7, #28]
 8002922:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8002926:	ee07 3a90 	vmov	s15, r3
 800292a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800292e:	ee17 0a90 	vmov	r0, s15
 8002932:	f7fd fe11 	bl	8000558 <__aeabi_f2d>
 8002936:	f04f 0200 	mov.w	r2, #0
 800293a:	4b3b      	ldr	r3, [pc, #236]	; (8002a28 <lsm_get_data+0x2f8>)
 800293c:	f7fd ff8e 	bl	800085c <__aeabi_ddiv>
 8002940:	4602      	mov	r2, r0
 8002942:	460b      	mov	r3, r1
 8002944:	4610      	mov	r0, r2
 8002946:	4619      	mov	r1, r3
 8002948:	f04f 0200 	mov.w	r2, #0
 800294c:	4b39      	ldr	r3, [pc, #228]	; (8002a34 <lsm_get_data+0x304>)
 800294e:	f7fd fe5b 	bl	8000608 <__aeabi_dmul>
 8002952:	4602      	mov	r2, r0
 8002954:	460b      	mov	r3, r1
 8002956:	4610      	mov	r0, r2
 8002958:	4619      	mov	r1, r3
 800295a:	f7fe f92d 	bl	8000bb8 <__aeabi_d2f>
 800295e:	4602      	mov	r2, r0
 8002960:	4933      	ldr	r1, [pc, #204]	; (8002a30 <lsm_get_data+0x300>)
 8002962:	69fb      	ldr	r3, [r7, #28]
 8002964:	009b      	lsls	r3, r3, #2
 8002966:	440b      	add	r3, r1
 8002968:	601a      	str	r2, [r3, #0]
				  for(int i=3; i<6; i++)
 800296a:	69fb      	ldr	r3, [r7, #28]
 800296c:	3301      	adds	r3, #1
 800296e:	61fb      	str	r3, [r7, #28]
 8002970:	69fb      	ldr	r3, [r7, #28]
 8002972:	2b05      	cmp	r3, #5
 8002974:	ddd3      	ble.n	800291e <lsm_get_data+0x1ee>
				  }

				  printf("time = %lu, GX = %f, GY = %f, GZ = %f, AX = %f, AY = %f, AZ = %f\n",milis, data_lsm_float[0],data_lsm_float[1],data_lsm_float[2],data_lsm_float[3],data_lsm_float[4],data_lsm_float[5]);
 8002976:	4b24      	ldr	r3, [pc, #144]	; (8002a08 <lsm_get_data+0x2d8>)
 8002978:	681e      	ldr	r6, [r3, #0]
 800297a:	4b2d      	ldr	r3, [pc, #180]	; (8002a30 <lsm_get_data+0x300>)
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	4618      	mov	r0, r3
 8002980:	f7fd fdea 	bl	8000558 <__aeabi_f2d>
 8002984:	e9c7 0102 	strd	r0, r1, [r7, #8]
 8002988:	4b29      	ldr	r3, [pc, #164]	; (8002a30 <lsm_get_data+0x300>)
 800298a:	685b      	ldr	r3, [r3, #4]
 800298c:	4618      	mov	r0, r3
 800298e:	f7fd fde3 	bl	8000558 <__aeabi_f2d>
 8002992:	4604      	mov	r4, r0
 8002994:	460d      	mov	r5, r1
 8002996:	4b26      	ldr	r3, [pc, #152]	; (8002a30 <lsm_get_data+0x300>)
 8002998:	689b      	ldr	r3, [r3, #8]
 800299a:	4618      	mov	r0, r3
 800299c:	f7fd fddc 	bl	8000558 <__aeabi_f2d>
 80029a0:	4680      	mov	r8, r0
 80029a2:	4689      	mov	r9, r1
 80029a4:	4b22      	ldr	r3, [pc, #136]	; (8002a30 <lsm_get_data+0x300>)
 80029a6:	68db      	ldr	r3, [r3, #12]
 80029a8:	4618      	mov	r0, r3
 80029aa:	f7fd fdd5 	bl	8000558 <__aeabi_f2d>
 80029ae:	4682      	mov	sl, r0
 80029b0:	468b      	mov	fp, r1
 80029b2:	4b1f      	ldr	r3, [pc, #124]	; (8002a30 <lsm_get_data+0x300>)
 80029b4:	691b      	ldr	r3, [r3, #16]
 80029b6:	4618      	mov	r0, r3
 80029b8:	f7fd fdce 	bl	8000558 <__aeabi_f2d>
 80029bc:	e9c7 0100 	strd	r0, r1, [r7]
 80029c0:	4b1b      	ldr	r3, [pc, #108]	; (8002a30 <lsm_get_data+0x300>)
 80029c2:	695b      	ldr	r3, [r3, #20]
 80029c4:	4618      	mov	r0, r3
 80029c6:	f7fd fdc7 	bl	8000558 <__aeabi_f2d>
 80029ca:	4602      	mov	r2, r0
 80029cc:	460b      	mov	r3, r1
 80029ce:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80029d2:	ed97 7b00 	vldr	d7, [r7]
 80029d6:	ed8d 7b06 	vstr	d7, [sp, #24]
 80029da:	e9cd ab04 	strd	sl, fp, [sp, #16]
 80029de:	e9cd 8902 	strd	r8, r9, [sp, #8]
 80029e2:	e9cd 4500 	strd	r4, r5, [sp]
 80029e6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80029ea:	4631      	mov	r1, r6
 80029ec:	4812      	ldr	r0, [pc, #72]	; (8002a38 <lsm_get_data+0x308>)
 80029ee:	f009 fdad 	bl	800c54c <iprintf>
			#endif
	}


}
 80029f2:	bf00      	nop
 80029f4:	3734      	adds	r7, #52	; 0x34
 80029f6:	46bd      	mov	sp, r7
 80029f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80029fc:	200002e8 	.word	0x200002e8
 8002a00:	20000474 	.word	0x20000474
 8002a04:	200004cd 	.word	0x200004cd
 8002a08:	20000450 	.word	0x20000450
 8002a0c:	2000650c 	.word	0x2000650c
 8002a10:	20004500 	.word	0x20004500
 8002a14:	0800e844 	.word	0x0800e844
 8002a18:	200004d4 	.word	0x200004d4
 8002a1c:	200004ce 	.word	0x200004ce
 8002a20:	200004d0 	.word	0x200004d0
 8002a24:	20000484 	.word	0x20000484
 8002a28:	40e00000 	.word	0x40e00000
 8002a2c:	409f4000 	.word	0x409f4000
 8002a30:	20000490 	.word	0x20000490
 8002a34:	40300000 	.word	0x40300000
 8002a38:	0800e84c 	.word	0x0800e84c

08002a3c <nrf_identifier>:

//-----------------------------NRF----------------------------------------
void nrf_identifier()  //функция для настройки заголовка пакета данных для отправки
{
 8002a3c:	b480      	push	{r7}
 8002a3e:	af00      	add	r7, sp, #0
  // задаём заголовок начала пакета
	data_nrf[0] = 0xA4;
 8002a40:	4b08      	ldr	r3, [pc, #32]	; (8002a64 <nrf_identifier+0x28>)
 8002a42:	22a4      	movs	r2, #164	; 0xa4
 8002a44:	701a      	strb	r2, [r3, #0]
	data_nrf[1] = 0xB3;
 8002a46:	4b07      	ldr	r3, [pc, #28]	; (8002a64 <nrf_identifier+0x28>)
 8002a48:	22b3      	movs	r2, #179	; 0xb3
 8002a4a:	705a      	strb	r2, [r3, #1]
  // задаём идентификатор команды
	data_nrf[2] = 0xBB;
 8002a4c:	4b05      	ldr	r3, [pc, #20]	; (8002a64 <nrf_identifier+0x28>)
 8002a4e:	22bb      	movs	r2, #187	; 0xbb
 8002a50:	709a      	strb	r2, [r3, #2]
	data_nrf[3] = 0xBB;
 8002a52:	4b04      	ldr	r3, [pc, #16]	; (8002a64 <nrf_identifier+0x28>)
 8002a54:	22bb      	movs	r2, #187	; 0xbb
 8002a56:	70da      	strb	r2, [r3, #3]
}
 8002a58:	bf00      	nop
 8002a5a:	46bd      	mov	sp, r7
 8002a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a60:	4770      	bx	lr
 8002a62:	bf00      	nop
 8002a64:	200004a8 	.word	0x200004a8

08002a68 <nrf_time>:

void nrf_time()  //записываем время в пакет данных
{
 8002a68:	b480      	push	{r7}
 8002a6a:	b083      	sub	sp, #12
 8002a6c:	af00      	add	r7, sp, #0
  uint32_t local_milis = milis;  //для того, чтобы избежать проблем с внезапной сменой времени во время записи, делаем локальную переменную и работаем с ней
 8002a6e:	4b0e      	ldr	r3, [pc, #56]	; (8002aa8 <nrf_time+0x40>)
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	607b      	str	r3, [r7, #4]

  data_nrf[4] = local_milis & 0xff;
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	b2da      	uxtb	r2, r3
 8002a78:	4b0c      	ldr	r3, [pc, #48]	; (8002aac <nrf_time+0x44>)
 8002a7a:	711a      	strb	r2, [r3, #4]
  data_nrf[5] = (local_milis >> 8) & 0xff;
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	0a1b      	lsrs	r3, r3, #8
 8002a80:	b2da      	uxtb	r2, r3
 8002a82:	4b0a      	ldr	r3, [pc, #40]	; (8002aac <nrf_time+0x44>)
 8002a84:	715a      	strb	r2, [r3, #5]
  data_nrf[6] = (local_milis >> 16) & 0xff;
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	0c1b      	lsrs	r3, r3, #16
 8002a8a:	b2da      	uxtb	r2, r3
 8002a8c:	4b07      	ldr	r3, [pc, #28]	; (8002aac <nrf_time+0x44>)
 8002a8e:	719a      	strb	r2, [r3, #6]
  data_nrf[7] = (local_milis >> 24) & 0xff;
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	0e1b      	lsrs	r3, r3, #24
 8002a94:	b2da      	uxtb	r2, r3
 8002a96:	4b05      	ldr	r3, [pc, #20]	; (8002aac <nrf_time+0x44>)
 8002a98:	71da      	strb	r2, [r3, #7]
}
 8002a9a:	bf00      	nop
 8002a9c:	370c      	adds	r7, #12
 8002a9e:	46bd      	mov	sp, r7
 8002aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa4:	4770      	bx	lr
 8002aa6:	bf00      	nop
 8002aa8:	20000450 	.word	0x20000450
 8002aac:	200004a8 	.word	0x200004a8

08002ab0 <nrf_bmp>:

void nrf_bmp() //данные c bmp
{
 8002ab0:	b480      	push	{r7}
 8002ab2:	af00      	add	r7, sp, #0
	data_nrf[8] = temp_nrf & 0xFF;
 8002ab4:	4b14      	ldr	r3, [pc, #80]	; (8002b08 <nrf_bmp+0x58>)
 8002ab6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002aba:	b2da      	uxtb	r2, r3
 8002abc:	4b13      	ldr	r3, [pc, #76]	; (8002b0c <nrf_bmp+0x5c>)
 8002abe:	721a      	strb	r2, [r3, #8]
	data_nrf[9] = (temp_nrf >> 8) & 0xFF;
 8002ac0:	4b11      	ldr	r3, [pc, #68]	; (8002b08 <nrf_bmp+0x58>)
 8002ac2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002ac6:	121b      	asrs	r3, r3, #8
 8002ac8:	b21b      	sxth	r3, r3
 8002aca:	b2da      	uxtb	r2, r3
 8002acc:	4b0f      	ldr	r3, [pc, #60]	; (8002b0c <nrf_bmp+0x5c>)
 8002ace:	725a      	strb	r2, [r3, #9]

	data_nrf[10] = press_nrf & 0xFF;
 8002ad0:	4b0f      	ldr	r3, [pc, #60]	; (8002b10 <nrf_bmp+0x60>)
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	b2da      	uxtb	r2, r3
 8002ad6:	4b0d      	ldr	r3, [pc, #52]	; (8002b0c <nrf_bmp+0x5c>)
 8002ad8:	729a      	strb	r2, [r3, #10]
	data_nrf[11] = (press_nrf >> 8) & 0xFF;
 8002ada:	4b0d      	ldr	r3, [pc, #52]	; (8002b10 <nrf_bmp+0x60>)
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	0a1b      	lsrs	r3, r3, #8
 8002ae0:	b2da      	uxtb	r2, r3
 8002ae2:	4b0a      	ldr	r3, [pc, #40]	; (8002b0c <nrf_bmp+0x5c>)
 8002ae4:	72da      	strb	r2, [r3, #11]
	data_nrf[12] = (press_nrf >> 16) & 0xFF;
 8002ae6:	4b0a      	ldr	r3, [pc, #40]	; (8002b10 <nrf_bmp+0x60>)
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	0c1b      	lsrs	r3, r3, #16
 8002aec:	b2da      	uxtb	r2, r3
 8002aee:	4b07      	ldr	r3, [pc, #28]	; (8002b0c <nrf_bmp+0x5c>)
 8002af0:	731a      	strb	r2, [r3, #12]
	data_nrf[13] = (press_nrf >> 24) & 0xFF;
 8002af2:	4b07      	ldr	r3, [pc, #28]	; (8002b10 <nrf_bmp+0x60>)
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	0e1b      	lsrs	r3, r3, #24
 8002af8:	b2da      	uxtb	r2, r3
 8002afa:	4b04      	ldr	r3, [pc, #16]	; (8002b0c <nrf_bmp+0x5c>)
 8002afc:	735a      	strb	r2, [r3, #13]
}
 8002afe:	bf00      	nop
 8002b00:	46bd      	mov	sp, r7
 8002b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b06:	4770      	bx	lr
 8002b08:	200004c6 	.word	0x200004c6
 8002b0c:	200004a8 	.word	0x200004a8
 8002b10:	200004c8 	.word	0x200004c8

08002b14 <nrf_aks>:

void nrf_aks() //данные от акселерометра
{
 8002b14:	b480      	push	{r7}
 8002b16:	b083      	sub	sp, #12
 8002b18:	af00      	add	r7, sp, #0
	for (int i = 14; i <= 19; ++i)
 8002b1a:	230e      	movs	r3, #14
 8002b1c:	607b      	str	r3, [r7, #4]
 8002b1e:	e00b      	b.n	8002b38 <nrf_aks+0x24>
	{
		data_nrf[i] = data_lsm[i - 8];
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	3b08      	subs	r3, #8
 8002b24:	4a09      	ldr	r2, [pc, #36]	; (8002b4c <nrf_aks+0x38>)
 8002b26:	5cd1      	ldrb	r1, [r2, r3]
 8002b28:	4a09      	ldr	r2, [pc, #36]	; (8002b50 <nrf_aks+0x3c>)
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	4413      	add	r3, r2
 8002b2e:	460a      	mov	r2, r1
 8002b30:	701a      	strb	r2, [r3, #0]
	for (int i = 14; i <= 19; ++i)
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	3301      	adds	r3, #1
 8002b36:	607b      	str	r3, [r7, #4]
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	2b13      	cmp	r3, #19
 8002b3c:	ddf0      	ble.n	8002b20 <nrf_aks+0xc>
	}
}
 8002b3e:	bf00      	nop
 8002b40:	bf00      	nop
 8002b42:	370c      	adds	r7, #12
 8002b44:	46bd      	mov	sp, r7
 8002b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b4a:	4770      	bx	lr
 8002b4c:	20000474 	.word	0x20000474
 8002b50:	200004a8 	.word	0x200004a8

08002b54 <nrf_gyr>:

void nrf_gyr() //данные от гирокопа
{
 8002b54:	b480      	push	{r7}
 8002b56:	b083      	sub	sp, #12
 8002b58:	af00      	add	r7, sp, #0
	for (int i = 23; i <= 28; ++i)
 8002b5a:	2317      	movs	r3, #23
 8002b5c:	607b      	str	r3, [r7, #4]
 8002b5e:	e00b      	b.n	8002b78 <nrf_gyr+0x24>
	{
		data_nrf[i] = data_lsm[i - 23];
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	3b17      	subs	r3, #23
 8002b64:	4a09      	ldr	r2, [pc, #36]	; (8002b8c <nrf_gyr+0x38>)
 8002b66:	5cd1      	ldrb	r1, [r2, r3]
 8002b68:	4a09      	ldr	r2, [pc, #36]	; (8002b90 <nrf_gyr+0x3c>)
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	4413      	add	r3, r2
 8002b6e:	460a      	mov	r2, r1
 8002b70:	701a      	strb	r2, [r3, #0]
	for (int i = 23; i <= 28; ++i)
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	3301      	adds	r3, #1
 8002b76:	607b      	str	r3, [r7, #4]
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	2b1c      	cmp	r3, #28
 8002b7c:	ddf0      	ble.n	8002b60 <nrf_gyr+0xc>
	}
}
 8002b7e:	bf00      	nop
 8002b80:	bf00      	nop
 8002b82:	370c      	adds	r7, #12
 8002b84:	46bd      	mov	sp, r7
 8002b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b8a:	4770      	bx	lr
 8002b8c:	20000474 	.word	0x20000474
 8002b90:	200004a8 	.word	0x200004a8

08002b94 <nrf_lis>:

void nrf_lis() //данные от магнитометра
{
 8002b94:	b480      	push	{r7}
 8002b96:	b083      	sub	sp, #12
 8002b98:	af00      	add	r7, sp, #0
	for (int i = 23; i <= 28; ++i)
 8002b9a:	2317      	movs	r3, #23
 8002b9c:	607b      	str	r3, [r7, #4]
 8002b9e:	e00b      	b.n	8002bb8 <nrf_lis+0x24>
	{
		data_nrf[i] = lis_raw_data[i - 23];
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	3b17      	subs	r3, #23
 8002ba4:	4a09      	ldr	r2, [pc, #36]	; (8002bcc <nrf_lis+0x38>)
 8002ba6:	5cd1      	ldrb	r1, [r2, r3]
 8002ba8:	4a09      	ldr	r2, [pc, #36]	; (8002bd0 <nrf_lis+0x3c>)
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	4413      	add	r3, r2
 8002bae:	460a      	mov	r2, r1
 8002bb0:	701a      	strb	r2, [r3, #0]
	for (int i = 23; i <= 28; ++i)
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	3301      	adds	r3, #1
 8002bb6:	607b      	str	r3, [r7, #4]
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	2b1c      	cmp	r3, #28
 8002bbc:	ddf0      	ble.n	8002ba0 <nrf_lis+0xc>
	}
}
 8002bbe:	bf00      	nop
 8002bc0:	bf00      	nop
 8002bc2:	370c      	adds	r7, #12
 8002bc4:	46bd      	mov	sp, r7
 8002bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bca:	4770      	bx	lr
 8002bcc:	2000046c 	.word	0x2000046c
 8002bd0:	200004a8 	.word	0x200004a8

08002bd4 <nrf_check_sum>:

void nrf_check_sum() //функция для расчёта контрольной суммы
{
 8002bd4:	b480      	push	{r7}
 8002bd6:	b083      	sub	sp, #12
 8002bd8:	af00      	add	r7, sp, #0
	data_nrf[20] = data_nrf[0]; //задаём начальное значение контрольной суммы
 8002bda:	4b0f      	ldr	r3, [pc, #60]	; (8002c18 <nrf_check_sum+0x44>)
 8002bdc:	781a      	ldrb	r2, [r3, #0]
 8002bde:	4b0e      	ldr	r3, [pc, #56]	; (8002c18 <nrf_check_sum+0x44>)
 8002be0:	751a      	strb	r2, [r3, #20]
	for (int i = 1; i < 20; ++i) //цикл для выполнения логической операции "исключающее �?Л�?" из всех байт информации
 8002be2:	2301      	movs	r3, #1
 8002be4:	607b      	str	r3, [r7, #4]
 8002be6:	e00c      	b.n	8002c02 <nrf_check_sum+0x2e>
	{
		data_nrf[20] ^= data_nrf[i];
 8002be8:	4b0b      	ldr	r3, [pc, #44]	; (8002c18 <nrf_check_sum+0x44>)
 8002bea:	7d1a      	ldrb	r2, [r3, #20]
 8002bec:	490a      	ldr	r1, [pc, #40]	; (8002c18 <nrf_check_sum+0x44>)
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	440b      	add	r3, r1
 8002bf2:	781b      	ldrb	r3, [r3, #0]
 8002bf4:	4053      	eors	r3, r2
 8002bf6:	b2da      	uxtb	r2, r3
 8002bf8:	4b07      	ldr	r3, [pc, #28]	; (8002c18 <nrf_check_sum+0x44>)
 8002bfa:	751a      	strb	r2, [r3, #20]
	for (int i = 1; i < 20; ++i) //цикл для выполнения логической операции "исключающее �?Л�?" из всех байт информации
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	3301      	adds	r3, #1
 8002c00:	607b      	str	r3, [r7, #4]
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	2b13      	cmp	r3, #19
 8002c06:	ddef      	ble.n	8002be8 <nrf_check_sum+0x14>
	}
}
 8002c08:	bf00      	nop
 8002c0a:	bf00      	nop
 8002c0c:	370c      	adds	r7, #12
 8002c0e:	46bd      	mov	sp, r7
 8002c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c14:	4770      	bx	lr
 8002c16:	bf00      	nop
 8002c18:	200004a8 	.word	0x200004a8

08002c1c <nrf_transmit>:

void nrf_transmit()  //функция для подготовки данных к отправке и сама отправка данных
{
 8002c1c:	b580      	push	{r7, lr}
 8002c1e:	af00      	add	r7, sp, #0
  nrf_identifier();
 8002c20:	f7ff ff0c 	bl	8002a3c <nrf_identifier>
  nrf_time();
 8002c24:	f7ff ff20 	bl	8002a68 <nrf_time>
  nrf_bmp();
 8002c28:	f7ff ff42 	bl	8002ab0 <nrf_bmp>
  nrf_aks();
 8002c2c:	f7ff ff72 	bl	8002b14 <nrf_aks>

  nrf_check_sum();  //считаем контрольную сумму
 8002c30:	f7ff ffd0 	bl	8002bd4 <nrf_check_sum>

  // Записываем данные о температуре с DS18B20 вне зависимости от того, было считывание температуры с него или нет
  data_nrf[21] = ds_data[1] & 0x0f;  // Первым пишем старший байт с DS, т.к. в нём мы можем взять 4 старших бита под служебную инфу
 8002c34:	4b26      	ldr	r3, [pc, #152]	; (8002cd0 <nrf_transmit+0xb4>)
 8002c36:	785b      	ldrb	r3, [r3, #1]
 8002c38:	f003 030f 	and.w	r3, r3, #15
 8002c3c:	b2da      	uxtb	r2, r3
 8002c3e:	4b25      	ldr	r3, [pc, #148]	; (8002cd4 <nrf_transmit+0xb8>)
 8002c40:	755a      	strb	r2, [r3, #21]
  data_nrf[22] = ds_data[0];
 8002c42:	4b23      	ldr	r3, [pc, #140]	; (8002cd0 <nrf_transmit+0xb4>)
 8002c44:	781a      	ldrb	r2, [r3, #0]
 8002c46:	4b23      	ldr	r3, [pc, #140]	; (8002cd4 <nrf_transmit+0xb8>)
 8002c48:	759a      	strb	r2, [r3, #22]

  if (adc >= is_highlighted)
 8002c4a:	4b23      	ldr	r3, [pc, #140]	; (8002cd8 <nrf_transmit+0xbc>)
 8002c4c:	881a      	ldrh	r2, [r3, #0]
 8002c4e:	4b23      	ldr	r3, [pc, #140]	; (8002cdc <nrf_transmit+0xc0>)
 8002c50:	881b      	ldrh	r3, [r3, #0]
 8002c52:	429a      	cmp	r2, r3
 8002c54:	d307      	bcc.n	8002c66 <nrf_transmit+0x4a>
  {
	  data_nrf[21] = data_nrf[21] | 0b01000000; //фоторезистор засвечен
 8002c56:	4b1f      	ldr	r3, [pc, #124]	; (8002cd4 <nrf_transmit+0xb8>)
 8002c58:	7d5b      	ldrb	r3, [r3, #21]
 8002c5a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002c5e:	b2da      	uxtb	r2, r3
 8002c60:	4b1c      	ldr	r3, [pc, #112]	; (8002cd4 <nrf_transmit+0xb8>)
 8002c62:	755a      	strb	r2, [r3, #21]
 8002c64:	e006      	b.n	8002c74 <nrf_transmit+0x58>
  }
  else
  {
	   data_nrf[21] = data_nrf[21] & 0b10111111; //фоторезистор НЕ засвечен
 8002c66:	4b1b      	ldr	r3, [pc, #108]	; (8002cd4 <nrf_transmit+0xb8>)
 8002c68:	7d5b      	ldrb	r3, [r3, #21]
 8002c6a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002c6e:	b2da      	uxtb	r2, r3
 8002c70:	4b18      	ldr	r3, [pc, #96]	; (8002cd4 <nrf_transmit+0xb8>)
 8002c72:	755a      	strb	r2, [r3, #21]
  }

  if(NRF_msg_type)  //Проверяем на тип сообщения, если тип сообщения 1, то отправляем в конце пакета магнитометр
 8002c74:	4b1a      	ldr	r3, [pc, #104]	; (8002ce0 <nrf_transmit+0xc4>)
 8002c76:	781b      	ldrb	r3, [r3, #0]
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d00c      	beq.n	8002c96 <nrf_transmit+0x7a>
  {
    data_nrf[21] = data_nrf[21] | 0b10000000;  // выставляем тип сообщения в старший бит 21-го элемента массива
 8002c7c:	4b15      	ldr	r3, [pc, #84]	; (8002cd4 <nrf_transmit+0xb8>)
 8002c7e:	7d5b      	ldrb	r3, [r3, #21]
 8002c80:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002c84:	b2da      	uxtb	r2, r3
 8002c86:	4b13      	ldr	r3, [pc, #76]	; (8002cd4 <nrf_transmit+0xb8>)
 8002c88:	755a      	strb	r2, [r3, #21]

    // Записываем данные от магнитометра
    nrf_lis();
 8002c8a:	f7ff ff83 	bl	8002b94 <nrf_lis>

    NRF_msg_type = 0;  //меняем для следующей отправки тип сообщения
 8002c8e:	4b14      	ldr	r3, [pc, #80]	; (8002ce0 <nrf_transmit+0xc4>)
 8002c90:	2200      	movs	r2, #0
 8002c92:	701a      	strb	r2, [r3, #0]
 8002c94:	e00b      	b.n	8002cae <nrf_transmit+0x92>
  }
  else  // Если тип сообщения 0, то отправляем гироскоп
  {
    data_nrf[21] = data_nrf[21] & 0b01111111;  // выставляем тип сообщения в старший бит 21-го элемента массива
 8002c96:	4b0f      	ldr	r3, [pc, #60]	; (8002cd4 <nrf_transmit+0xb8>)
 8002c98:	7d5b      	ldrb	r3, [r3, #21]
 8002c9a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002c9e:	b2da      	uxtb	r2, r3
 8002ca0:	4b0c      	ldr	r3, [pc, #48]	; (8002cd4 <nrf_transmit+0xb8>)
 8002ca2:	755a      	strb	r2, [r3, #21]

    // Записываем данные от гироскопа
    nrf_gyr();
 8002ca4:	f7ff ff56 	bl	8002b54 <nrf_gyr>

    NRF_msg_type = 1;  //меняем для следующей отправки тип сообщения
 8002ca8:	4b0d      	ldr	r3, [pc, #52]	; (8002ce0 <nrf_transmit+0xc4>)
 8002caa:	2201      	movs	r2, #1
 8002cac:	701a      	strb	r2, [r3, #0]
  }
  if (new_data > 0)
 8002cae:	4b0d      	ldr	r3, [pc, #52]	; (8002ce4 <nrf_transmit+0xc8>)
 8002cb0:	781b      	ldrb	r3, [r3, #0]
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d00a      	beq.n	8002ccc <nrf_transmit+0xb0>
  {
	  NRF_Send_data(data_nrf,data_length);  //передаём данные в NRF для отправки
 8002cb6:	211d      	movs	r1, #29
 8002cb8:	4806      	ldr	r0, [pc, #24]	; (8002cd4 <nrf_transmit+0xb8>)
 8002cba:	f000 ff59 	bl	8003b70 <NRF_Send_data>
	  HAL_UART_Transmit(&huart2, data_nrf, data_length, 500);
 8002cbe:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8002cc2:	221d      	movs	r2, #29
 8002cc4:	4903      	ldr	r1, [pc, #12]	; (8002cd4 <nrf_transmit+0xb8>)
 8002cc6:	4808      	ldr	r0, [pc, #32]	; (8002ce8 <nrf_transmit+0xcc>)
 8002cc8:	f005 f97b 	bl	8007fc2 <HAL_UART_Transmit>
  }
}
 8002ccc:	bf00      	nop
 8002cce:	bd80      	pop	{r7, pc}
 8002cd0:	20000468 	.word	0x20000468
 8002cd4:	200004a8 	.word	0x200004a8
 8002cd8:	20006514 	.word	0x20006514
 8002cdc:	2000000c 	.word	0x2000000c
 8002ce0:	200004cc 	.word	0x200004cc
 8002ce4:	200004cd 	.word	0x200004cd
 8002ce8:	200003d0 	.word	0x200003d0

08002cec <HAL_ADC_ConvCpltCallback>:

//-------------------------ADC------------------------------------------
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002cec:	b580      	push	{r7, lr}
 8002cee:	b082      	sub	sp, #8
 8002cf0:	af00      	add	r7, sp, #0
 8002cf2:	6078      	str	r0, [r7, #4]
    if(hadc->Instance == ADC1) //check if the interrupt comes from ACD1
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	4a06      	ldr	r2, [pc, #24]	; (8002d14 <HAL_ADC_ConvCpltCallback+0x28>)
 8002cfa:	4293      	cmp	r3, r2
 8002cfc:	d106      	bne.n	8002d0c <HAL_ADC_ConvCpltCallback+0x20>
    {
        adc = HAL_ADC_GetValue(&hadc1);
 8002cfe:	4806      	ldr	r0, [pc, #24]	; (8002d18 <HAL_ADC_ConvCpltCallback+0x2c>)
 8002d00:	f001 fbe6 	bl	80044d0 <HAL_ADC_GetValue>
 8002d04:	4603      	mov	r3, r0
 8002d06:	b29a      	uxth	r2, r3
 8002d08:	4b04      	ldr	r3, [pc, #16]	; (8002d1c <HAL_ADC_ConvCpltCallback+0x30>)
 8002d0a:	801a      	strh	r2, [r3, #0]
    }
}
 8002d0c:	bf00      	nop
 8002d0e:	3708      	adds	r7, #8
 8002d10:	46bd      	mov	sp, r7
 8002d12:	bd80      	pop	{r7, pc}
 8002d14:	40012000 	.word	0x40012000
 8002d18:	2000021c 	.word	0x2000021c
 8002d1c:	20006514 	.word	0x20006514

08002d20 <sd_adc>:

void sd_adc()
{
 8002d20:	b580      	push	{r7, lr}
 8002d22:	b084      	sub	sp, #16
 8002d24:	af00      	add	r7, sp, #0
	uint32_t buf_milis = milis; //время
 8002d26:	4b43      	ldr	r3, [pc, #268]	; (8002e34 <sd_adc+0x114>)
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	60bb      	str	r3, [r7, #8]
	for(int i = 0; i < 4; ++i)
 8002d2c:	2300      	movs	r3, #0
 8002d2e:	60fb      	str	r3, [r7, #12]
 8002d30:	e012      	b.n	8002d58 <sd_adc+0x38>
	{
		uint8_t buf = buf_milis >> (i*8);
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	00db      	lsls	r3, r3, #3
 8002d36:	68ba      	ldr	r2, [r7, #8]
 8002d38:	fa22 f303 	lsr.w	r3, r2, r3
 8002d3c:	71fb      	strb	r3, [r7, #7]
		sd_data_adc[sd_pos_adc] = buf;
 8002d3e:	4b3e      	ldr	r3, [pc, #248]	; (8002e38 <sd_adc+0x118>)
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	493e      	ldr	r1, [pc, #248]	; (8002e3c <sd_adc+0x11c>)
 8002d44:	79fa      	ldrb	r2, [r7, #7]
 8002d46:	54ca      	strb	r2, [r1, r3]
		sd_pos_adc++;
 8002d48:	4b3b      	ldr	r3, [pc, #236]	; (8002e38 <sd_adc+0x118>)
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	3301      	adds	r3, #1
 8002d4e:	4a3a      	ldr	r2, [pc, #232]	; (8002e38 <sd_adc+0x118>)
 8002d50:	6013      	str	r3, [r2, #0]
	for(int i = 0; i < 4; ++i)
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	3301      	adds	r3, #1
 8002d56:	60fb      	str	r3, [r7, #12]
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	2b03      	cmp	r3, #3
 8002d5c:	dde9      	ble.n	8002d32 <sd_adc+0x12>
	}

	if (milis > adc_time)
 8002d5e:	4b35      	ldr	r3, [pc, #212]	; (8002e34 <sd_adc+0x114>)
 8002d60:	681a      	ldr	r2, [r3, #0]
 8002d62:	4b37      	ldr	r3, [pc, #220]	; (8002e40 <sd_adc+0x120>)
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	429a      	cmp	r2, r3
 8002d68:	d95f      	bls.n	8002e2a <sd_adc+0x10a>
	{
		adc_time = milis + 100;
 8002d6a:	4b32      	ldr	r3, [pc, #200]	; (8002e34 <sd_adc+0x114>)
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	3364      	adds	r3, #100	; 0x64
 8002d70:	4a33      	ldr	r2, [pc, #204]	; (8002e40 <sd_adc+0x120>)
 8002d72:	6013      	str	r3, [r2, #0]

		sd_data_adc[sd_pos_adc] = adc;
 8002d74:	4b33      	ldr	r3, [pc, #204]	; (8002e44 <sd_adc+0x124>)
 8002d76:	881a      	ldrh	r2, [r3, #0]
 8002d78:	4b2f      	ldr	r3, [pc, #188]	; (8002e38 <sd_adc+0x118>)
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	b2d1      	uxtb	r1, r2
 8002d7e:	4a2f      	ldr	r2, [pc, #188]	; (8002e3c <sd_adc+0x11c>)
 8002d80:	54d1      	strb	r1, [r2, r3]
		sd_pos_adc++;
 8002d82:	4b2d      	ldr	r3, [pc, #180]	; (8002e38 <sd_adc+0x118>)
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	3301      	adds	r3, #1
 8002d88:	4a2b      	ldr	r2, [pc, #172]	; (8002e38 <sd_adc+0x118>)
 8002d8a:	6013      	str	r3, [r2, #0]
		sd_data_adc[sd_pos_adc] = (adc >> 8);
 8002d8c:	4b2d      	ldr	r3, [pc, #180]	; (8002e44 <sd_adc+0x124>)
 8002d8e:	881b      	ldrh	r3, [r3, #0]
 8002d90:	0a1b      	lsrs	r3, r3, #8
 8002d92:	b29a      	uxth	r2, r3
 8002d94:	4b28      	ldr	r3, [pc, #160]	; (8002e38 <sd_adc+0x118>)
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	b2d1      	uxtb	r1, r2
 8002d9a:	4a28      	ldr	r2, [pc, #160]	; (8002e3c <sd_adc+0x11c>)
 8002d9c:	54d1      	strb	r1, [r2, r3]
		sd_pos_adc++;
 8002d9e:	4b26      	ldr	r3, [pc, #152]	; (8002e38 <sd_adc+0x118>)
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	3301      	adds	r3, #1
 8002da4:	4a24      	ldr	r2, [pc, #144]	; (8002e38 <sd_adc+0x118>)
 8002da6:	6013      	str	r3, [r2, #0]

		sd_data_adc[sd_pos_adc] = 0;
 8002da8:	4b23      	ldr	r3, [pc, #140]	; (8002e38 <sd_adc+0x118>)
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	4a23      	ldr	r2, [pc, #140]	; (8002e3c <sd_adc+0x11c>)
 8002dae:	2100      	movs	r1, #0
 8002db0:	54d1      	strb	r1, [r2, r3]
		sd_pos_adc++;
 8002db2:	4b21      	ldr	r3, [pc, #132]	; (8002e38 <sd_adc+0x118>)
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	3301      	adds	r3, #1
 8002db8:	4a1f      	ldr	r2, [pc, #124]	; (8002e38 <sd_adc+0x118>)
 8002dba:	6013      	str	r3, [r2, #0]
		sd_data_adc[sd_pos_adc] = 0;
 8002dbc:	4b1e      	ldr	r3, [pc, #120]	; (8002e38 <sd_adc+0x118>)
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	4a1e      	ldr	r2, [pc, #120]	; (8002e3c <sd_adc+0x11c>)
 8002dc2:	2100      	movs	r1, #0
 8002dc4:	54d1      	strb	r1, [r2, r3]
		sd_pos_adc++;
 8002dc6:	4b1c      	ldr	r3, [pc, #112]	; (8002e38 <sd_adc+0x118>)
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	3301      	adds	r3, #1
 8002dcc:	4a1a      	ldr	r2, [pc, #104]	; (8002e38 <sd_adc+0x118>)
 8002dce:	6013      	str	r3, [r2, #0]

		if(sd_pos_adc == sizeof(sd_data_adc)) //запись в файл
 8002dd0:	4b19      	ldr	r3, [pc, #100]	; (8002e38 <sd_adc+0x118>)
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002dd8:	d127      	bne.n	8002e2a <sd_adc+0x10a>
		{
		    res = f_open(&MyFile, "ADC.hex",FA_WRITE);
 8002dda:	2202      	movs	r2, #2
 8002ddc:	491a      	ldr	r1, [pc, #104]	; (8002e48 <sd_adc+0x128>)
 8002dde:	481b      	ldr	r0, [pc, #108]	; (8002e4c <sd_adc+0x12c>)
 8002de0:	f008 f982 	bl	800b0e8 <f_open>
 8002de4:	4603      	mov	r3, r0
 8002de6:	461a      	mov	r2, r3
 8002de8:	4b19      	ldr	r3, [pc, #100]	; (8002e50 <sd_adc+0x130>)
 8002dea:	701a      	strb	r2, [r3, #0]
		    res = f_lseek(&MyFile, f_size(&MyFile));
 8002dec:	4b17      	ldr	r3, [pc, #92]	; (8002e4c <sd_adc+0x12c>)
 8002dee:	68db      	ldr	r3, [r3, #12]
 8002df0:	4619      	mov	r1, r3
 8002df2:	4816      	ldr	r0, [pc, #88]	; (8002e4c <sd_adc+0x12c>)
 8002df4:	f008 fd71 	bl	800b8da <f_lseek>
 8002df8:	4603      	mov	r3, r0
 8002dfa:	461a      	mov	r2, r3
 8002dfc:	4b14      	ldr	r3, [pc, #80]	; (8002e50 <sd_adc+0x130>)
 8002dfe:	701a      	strb	r2, [r3, #0]
		    res = f_write(&MyFile, sd_data_adc, sizeof(sd_data_adc), (void*)&byteswritten);
 8002e00:	4b14      	ldr	r3, [pc, #80]	; (8002e54 <sd_adc+0x134>)
 8002e02:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002e06:	490d      	ldr	r1, [pc, #52]	; (8002e3c <sd_adc+0x11c>)
 8002e08:	4810      	ldr	r0, [pc, #64]	; (8002e4c <sd_adc+0x12c>)
 8002e0a:	f008 fb36 	bl	800b47a <f_write>
 8002e0e:	4603      	mov	r3, r0
 8002e10:	461a      	mov	r2, r3
 8002e12:	4b0f      	ldr	r3, [pc, #60]	; (8002e50 <sd_adc+0x130>)
 8002e14:	701a      	strb	r2, [r3, #0]
		    res = f_close(&MyFile);
 8002e16:	480d      	ldr	r0, [pc, #52]	; (8002e4c <sd_adc+0x12c>)
 8002e18:	f008 fd35 	bl	800b886 <f_close>
 8002e1c:	4603      	mov	r3, r0
 8002e1e:	461a      	mov	r2, r3
 8002e20:	4b0b      	ldr	r3, [pc, #44]	; (8002e50 <sd_adc+0x130>)
 8002e22:	701a      	strb	r2, [r3, #0]
		    sd_pos_adc = 0;
 8002e24:	4b04      	ldr	r3, [pc, #16]	; (8002e38 <sd_adc+0x118>)
 8002e26:	2200      	movs	r2, #0
 8002e28:	601a      	str	r2, [r3, #0]
		}
	}
}
 8002e2a:	bf00      	nop
 8002e2c:	3710      	adds	r7, #16
 8002e2e:	46bd      	mov	sp, r7
 8002e30:	bd80      	pop	{r7, pc}
 8002e32:	bf00      	nop
 8002e34:	20000450 	.word	0x20000450
 8002e38:	20006510 	.word	0x20006510
 8002e3c:	20005500 	.word	0x20005500
 8002e40:	20006518 	.word	0x20006518
 8002e44:	20006514 	.word	0x20006514
 8002e48:	0800e890 	.word	0x0800e890
 8002e4c:	200004d4 	.word	0x200004d4
 8002e50:	200004ce 	.word	0x200004ce
 8002e54:	200004d0 	.word	0x200004d0

08002e58 <beeper>:

void beeper()
{
 8002e58:	b580      	push	{r7, lr}
 8002e5a:	af00      	add	r7, sp, #0
	if (((milis >= start_time) & (adc >= is_highlighted)) | (milis >= start_spare_time))
 8002e5c:	4b21      	ldr	r3, [pc, #132]	; (8002ee4 <beeper+0x8c>)
 8002e5e:	681a      	ldr	r2, [r3, #0]
 8002e60:	4b21      	ldr	r3, [pc, #132]	; (8002ee8 <beeper+0x90>)
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	429a      	cmp	r2, r3
 8002e66:	bf2c      	ite	cs
 8002e68:	2301      	movcs	r3, #1
 8002e6a:	2300      	movcc	r3, #0
 8002e6c:	b2da      	uxtb	r2, r3
 8002e6e:	4b1f      	ldr	r3, [pc, #124]	; (8002eec <beeper+0x94>)
 8002e70:	8819      	ldrh	r1, [r3, #0]
 8002e72:	4b1f      	ldr	r3, [pc, #124]	; (8002ef0 <beeper+0x98>)
 8002e74:	881b      	ldrh	r3, [r3, #0]
 8002e76:	4299      	cmp	r1, r3
 8002e78:	bf2c      	ite	cs
 8002e7a:	2301      	movcs	r3, #1
 8002e7c:	2300      	movcc	r3, #0
 8002e7e:	b2db      	uxtb	r3, r3
 8002e80:	4013      	ands	r3, r2
 8002e82:	b2db      	uxtb	r3, r3
 8002e84:	4619      	mov	r1, r3
 8002e86:	4b17      	ldr	r3, [pc, #92]	; (8002ee4 <beeper+0x8c>)
 8002e88:	681a      	ldr	r2, [r3, #0]
 8002e8a:	4b1a      	ldr	r3, [pc, #104]	; (8002ef4 <beeper+0x9c>)
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	429a      	cmp	r2, r3
 8002e90:	bf2c      	ite	cs
 8002e92:	2301      	movcs	r3, #1
 8002e94:	2300      	movcc	r3, #0
 8002e96:	b2db      	uxtb	r3, r3
 8002e98:	430b      	orrs	r3, r1
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d002      	beq.n	8002ea4 <beeper+0x4c>
	{
		flag_beep = 1;
 8002e9e:	4b16      	ldr	r3, [pc, #88]	; (8002ef8 <beeper+0xa0>)
 8002ea0:	2201      	movs	r2, #1
 8002ea2:	701a      	strb	r2, [r3, #0]
	}

	if ((flag_beep == 1) & (milis > beep_time))
 8002ea4:	4b14      	ldr	r3, [pc, #80]	; (8002ef8 <beeper+0xa0>)
 8002ea6:	781b      	ldrb	r3, [r3, #0]
 8002ea8:	2b01      	cmp	r3, #1
 8002eaa:	bf0c      	ite	eq
 8002eac:	2301      	moveq	r3, #1
 8002eae:	2300      	movne	r3, #0
 8002eb0:	b2da      	uxtb	r2, r3
 8002eb2:	4b0c      	ldr	r3, [pc, #48]	; (8002ee4 <beeper+0x8c>)
 8002eb4:	6819      	ldr	r1, [r3, #0]
 8002eb6:	4b11      	ldr	r3, [pc, #68]	; (8002efc <beeper+0xa4>)
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	4299      	cmp	r1, r3
 8002ebc:	bf8c      	ite	hi
 8002ebe:	2301      	movhi	r3, #1
 8002ec0:	2300      	movls	r3, #0
 8002ec2:	b2db      	uxtb	r3, r3
 8002ec4:	4013      	ands	r3, r2
 8002ec6:	b2db      	uxtb	r3, r3
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d009      	beq.n	8002ee0 <beeper+0x88>
	{
		beep_time = milis + 500;
 8002ecc:	4b05      	ldr	r3, [pc, #20]	; (8002ee4 <beeper+0x8c>)
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8002ed4:	4a09      	ldr	r2, [pc, #36]	; (8002efc <beeper+0xa4>)
 8002ed6:	6013      	str	r3, [r2, #0]
		HAL_GPIO_TogglePin(Beep_GPIO_Port, Beep_Pin);
 8002ed8:	2180      	movs	r1, #128	; 0x80
 8002eda:	4809      	ldr	r0, [pc, #36]	; (8002f00 <beeper+0xa8>)
 8002edc:	f002 f809 	bl	8004ef2 <HAL_GPIO_TogglePin>
	}
}
 8002ee0:	bf00      	nop
 8002ee2:	bd80      	pop	{r7, pc}
 8002ee4:	20000450 	.word	0x20000450
 8002ee8:	20000004 	.word	0x20000004
 8002eec:	20006514 	.word	0x20006514
 8002ef0:	2000000c 	.word	0x2000000c
 8002ef4:	20000008 	.word	0x20000008
 8002ef8:	2000651c 	.word	0x2000651c
 8002efc:	20006520 	.word	0x20006520
 8002f00:	40020000 	.word	0x40020000

08002f04 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002f04:	b580      	push	{r7, lr}
 8002f06:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002f08:	f001 f83a 	bl	8003f80 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002f0c:	f000 f8b4 	bl	8003078 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002f10:	f000 fa8a 	bl	8003428 <MX_GPIO_Init>
  MX_SPI2_Init();
 8002f14:	f000 f98c 	bl	8003230 <MX_SPI2_Init>
  MX_TIM3_Init();
 8002f18:	f000 f9c0 	bl	800329c <MX_TIM3_Init>
  MX_TIM4_Init();
 8002f1c:	f000 fa0c 	bl	8003338 <MX_TIM4_Init>
  MX_SDIO_SD_Init();
 8002f20:	f000 f966 	bl	80031f0 <MX_SDIO_SD_Init>
  MX_FATFS_Init();
 8002f24:	f006 f936 	bl	8009194 <MX_FATFS_Init>
  MX_ADC1_Init();
 8002f28:	f000 f910 	bl	800314c <MX_ADC1_Init>
  MX_USART2_UART_Init();
 8002f2c:	f000 fa52 	bl	80033d4 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_Base_Start_IT(&htim4);  //стартуем таймер 4 для милисекунд
 8002f30:	4845      	ldr	r0, [pc, #276]	; (8003048 <main+0x144>)
 8002f32:	f004 fbd5 	bl	80076e0 <HAL_TIM_Base_Start_IT>

  ShiftRegs_init();
 8002f36:	f000 fefb 	bl	8003d30 <ShiftRegs_init>

//------------------карта памяти-------------
    res = disk_initialize(0);
 8002f3a:	2000      	movs	r0, #0
 8002f3c:	f006 faea 	bl	8009514 <disk_initialize>
 8002f40:	4603      	mov	r3, r0
 8002f42:	461a      	mov	r2, r3
 8002f44:	4b41      	ldr	r3, [pc, #260]	; (800304c <main+0x148>)
 8002f46:	701a      	strb	r2, [r3, #0]
    res = f_mount(&SDFatFS, (TCHAR const*)SDPath, 1);
 8002f48:	2201      	movs	r2, #1
 8002f4a:	4941      	ldr	r1, [pc, #260]	; (8003050 <main+0x14c>)
 8002f4c:	4841      	ldr	r0, [pc, #260]	; (8003054 <main+0x150>)
 8002f4e:	f008 f885 	bl	800b05c <f_mount>
 8002f52:	4603      	mov	r3, r0
 8002f54:	461a      	mov	r2, r3
 8002f56:	4b3d      	ldr	r3, [pc, #244]	; (800304c <main+0x148>)
 8002f58:	701a      	strb	r2, [r3, #0]

    res = f_open(&MyFile, "BMP.hex",FA_CREATE_NEW | FA_WRITE);
 8002f5a:	2206      	movs	r2, #6
 8002f5c:	493e      	ldr	r1, [pc, #248]	; (8003058 <main+0x154>)
 8002f5e:	483f      	ldr	r0, [pc, #252]	; (800305c <main+0x158>)
 8002f60:	f008 f8c2 	bl	800b0e8 <f_open>
 8002f64:	4603      	mov	r3, r0
 8002f66:	461a      	mov	r2, r3
 8002f68:	4b38      	ldr	r3, [pc, #224]	; (800304c <main+0x148>)
 8002f6a:	701a      	strb	r2, [r3, #0]
    res = f_close(&MyFile);
 8002f6c:	483b      	ldr	r0, [pc, #236]	; (800305c <main+0x158>)
 8002f6e:	f008 fc8a 	bl	800b886 <f_close>
 8002f72:	4603      	mov	r3, r0
 8002f74:	461a      	mov	r2, r3
 8002f76:	4b35      	ldr	r3, [pc, #212]	; (800304c <main+0x148>)
 8002f78:	701a      	strb	r2, [r3, #0]

    res = f_open(&MyFile, "LIS.hex",FA_CREATE_NEW | FA_WRITE);
 8002f7a:	2206      	movs	r2, #6
 8002f7c:	4938      	ldr	r1, [pc, #224]	; (8003060 <main+0x15c>)
 8002f7e:	4837      	ldr	r0, [pc, #220]	; (800305c <main+0x158>)
 8002f80:	f008 f8b2 	bl	800b0e8 <f_open>
 8002f84:	4603      	mov	r3, r0
 8002f86:	461a      	mov	r2, r3
 8002f88:	4b30      	ldr	r3, [pc, #192]	; (800304c <main+0x148>)
 8002f8a:	701a      	strb	r2, [r3, #0]
    res = f_close(&MyFile);
 8002f8c:	4833      	ldr	r0, [pc, #204]	; (800305c <main+0x158>)
 8002f8e:	f008 fc7a 	bl	800b886 <f_close>
 8002f92:	4603      	mov	r3, r0
 8002f94:	461a      	mov	r2, r3
 8002f96:	4b2d      	ldr	r3, [pc, #180]	; (800304c <main+0x148>)
 8002f98:	701a      	strb	r2, [r3, #0]

    res = f_open(&MyFile, "LSM.hex",FA_CREATE_NEW | FA_WRITE);
 8002f9a:	2206      	movs	r2, #6
 8002f9c:	4931      	ldr	r1, [pc, #196]	; (8003064 <main+0x160>)
 8002f9e:	482f      	ldr	r0, [pc, #188]	; (800305c <main+0x158>)
 8002fa0:	f008 f8a2 	bl	800b0e8 <f_open>
 8002fa4:	4603      	mov	r3, r0
 8002fa6:	461a      	mov	r2, r3
 8002fa8:	4b28      	ldr	r3, [pc, #160]	; (800304c <main+0x148>)
 8002faa:	701a      	strb	r2, [r3, #0]
    res = f_close(&MyFile);
 8002fac:	482b      	ldr	r0, [pc, #172]	; (800305c <main+0x158>)
 8002fae:	f008 fc6a 	bl	800b886 <f_close>
 8002fb2:	4603      	mov	r3, r0
 8002fb4:	461a      	mov	r2, r3
 8002fb6:	4b25      	ldr	r3, [pc, #148]	; (800304c <main+0x148>)
 8002fb8:	701a      	strb	r2, [r3, #0]

    res = f_open(&MyFile, "DS.hex",FA_CREATE_NEW | FA_WRITE);
 8002fba:	2206      	movs	r2, #6
 8002fbc:	492a      	ldr	r1, [pc, #168]	; (8003068 <main+0x164>)
 8002fbe:	4827      	ldr	r0, [pc, #156]	; (800305c <main+0x158>)
 8002fc0:	f008 f892 	bl	800b0e8 <f_open>
 8002fc4:	4603      	mov	r3, r0
 8002fc6:	461a      	mov	r2, r3
 8002fc8:	4b20      	ldr	r3, [pc, #128]	; (800304c <main+0x148>)
 8002fca:	701a      	strb	r2, [r3, #0]
    res = f_close(&MyFile);
 8002fcc:	4823      	ldr	r0, [pc, #140]	; (800305c <main+0x158>)
 8002fce:	f008 fc5a 	bl	800b886 <f_close>
 8002fd2:	4603      	mov	r3, r0
 8002fd4:	461a      	mov	r2, r3
 8002fd6:	4b1d      	ldr	r3, [pc, #116]	; (800304c <main+0x148>)
 8002fd8:	701a      	strb	r2, [r3, #0]

    res = f_open(&MyFile, "ADC.hex",FA_CREATE_NEW | FA_WRITE);
 8002fda:	2206      	movs	r2, #6
 8002fdc:	4923      	ldr	r1, [pc, #140]	; (800306c <main+0x168>)
 8002fde:	481f      	ldr	r0, [pc, #124]	; (800305c <main+0x158>)
 8002fe0:	f008 f882 	bl	800b0e8 <f_open>
 8002fe4:	4603      	mov	r3, r0
 8002fe6:	461a      	mov	r2, r3
 8002fe8:	4b18      	ldr	r3, [pc, #96]	; (800304c <main+0x148>)
 8002fea:	701a      	strb	r2, [r3, #0]
    res = f_close(&MyFile);
 8002fec:	481b      	ldr	r0, [pc, #108]	; (800305c <main+0x158>)
 8002fee:	f008 fc4a 	bl	800b886 <f_close>
 8002ff2:	4603      	mov	r3, r0
 8002ff4:	461a      	mov	r2, r3
 8002ff6:	4b15      	ldr	r3, [pc, #84]	; (800304c <main+0x148>)
 8002ff8:	701a      	strb	r2, [r3, #0]


//--------------NRF-------------------
  NRF_Init();
 8002ffa:	f000 fe75 	bl	8003ce8 <NRF_Init>
  NRF_Set_TX();
 8002ffe:	f000 fe5f 	bl	8003cc0 <NRF_Set_TX>
//-------------BMP280-----------------
  bmp_calibr();
 8003002:	f7fe fd99 	bl	8001b38 <bmp_calibr>
//--------------LIS------------------
  lis_init();
 8003006:	f7ff f9c3 	bl	8002390 <lis_init>
//--------------LSM------------------
  lsm_init();
 800300a:	f7ff fb0f 	bl	800262c <lsm_init>
//------------DS18B20----------------
  DS_init(4);
 800300e:	2004      	movs	r0, #4
 8003010:	f7ff f970 	bl	80022f4 <DS_init>

//--------------ADC------------------
  HAL_ADC_Start_IT(&hadc1);
 8003014:	4816      	ldr	r0, [pc, #88]	; (8003070 <main+0x16c>)
 8003016:	f001 f88d 	bl	8004134 <HAL_ADC_Start_IT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  ds_temp = DS_get_data();
 800301a:	f7fe ffdb 	bl	8001fd4 <DS_get_data>
 800301e:	eef0 7a40 	vmov.f32	s15, s0
 8003022:	4b14      	ldr	r3, [pc, #80]	; (8003074 <main+0x170>)
 8003024:	edc3 7a00 	vstr	s15, [r3]
	  bmp_get_data();
 8003028:	f7fe fc6c 	bl	8001904 <bmp_get_data>
  	  lis_get_data();
 800302c:	f7ff f9d0 	bl	80023d0 <lis_get_data>
  	  lsm_get_data();
 8003030:	f7ff fb7e 	bl	8002730 <lsm_get_data>

  	  nrf_transmit();
 8003034:	f7ff fdf2 	bl	8002c1c <nrf_transmit>

  	  sd_adc();
 8003038:	f7ff fe72 	bl	8002d20 <sd_adc>
  	  beeper();
 800303c:	f7ff ff0c 	bl	8002e58 <beeper>
	  HAL_ADC_Start_IT(&hadc1);
 8003040:	480b      	ldr	r0, [pc, #44]	; (8003070 <main+0x16c>)
 8003042:	f001 f877 	bl	8004134 <HAL_ADC_Start_IT>
	  ds_temp = DS_get_data();
 8003046:	e7e8      	b.n	800301a <main+0x116>
 8003048:	20000388 	.word	0x20000388
 800304c:	200004ce 	.word	0x200004ce
 8003050:	20006530 	.word	0x20006530
 8003054:	20006534 	.word	0x20006534
 8003058:	0800e6f0 	.word	0x0800e6f0
 800305c:	200004d4 	.word	0x200004d4
 8003060:	0800e83c 	.word	0x0800e83c
 8003064:	0800e844 	.word	0x0800e844
 8003068:	0800e7fc 	.word	0x0800e7fc
 800306c:	0800e890 	.word	0x0800e890
 8003070:	2000021c 	.word	0x2000021c
 8003074:	20000464 	.word	0x20000464

08003078 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003078:	b580      	push	{r7, lr}
 800307a:	b094      	sub	sp, #80	; 0x50
 800307c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800307e:	f107 0320 	add.w	r3, r7, #32
 8003082:	2230      	movs	r2, #48	; 0x30
 8003084:	2100      	movs	r1, #0
 8003086:	4618      	mov	r0, r3
 8003088:	f008 fdee 	bl	800bc68 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800308c:	f107 030c 	add.w	r3, r7, #12
 8003090:	2200      	movs	r2, #0
 8003092:	601a      	str	r2, [r3, #0]
 8003094:	605a      	str	r2, [r3, #4]
 8003096:	609a      	str	r2, [r3, #8]
 8003098:	60da      	str	r2, [r3, #12]
 800309a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800309c:	2300      	movs	r3, #0
 800309e:	60bb      	str	r3, [r7, #8]
 80030a0:	4b28      	ldr	r3, [pc, #160]	; (8003144 <SystemClock_Config+0xcc>)
 80030a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030a4:	4a27      	ldr	r2, [pc, #156]	; (8003144 <SystemClock_Config+0xcc>)
 80030a6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80030aa:	6413      	str	r3, [r2, #64]	; 0x40
 80030ac:	4b25      	ldr	r3, [pc, #148]	; (8003144 <SystemClock_Config+0xcc>)
 80030ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80030b4:	60bb      	str	r3, [r7, #8]
 80030b6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80030b8:	2300      	movs	r3, #0
 80030ba:	607b      	str	r3, [r7, #4]
 80030bc:	4b22      	ldr	r3, [pc, #136]	; (8003148 <SystemClock_Config+0xd0>)
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80030c4:	4a20      	ldr	r2, [pc, #128]	; (8003148 <SystemClock_Config+0xd0>)
 80030c6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80030ca:	6013      	str	r3, [r2, #0]
 80030cc:	4b1e      	ldr	r3, [pc, #120]	; (8003148 <SystemClock_Config+0xd0>)
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80030d4:	607b      	str	r3, [r7, #4]
 80030d6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80030d8:	2302      	movs	r3, #2
 80030da:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80030dc:	2301      	movs	r3, #1
 80030de:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80030e0:	2310      	movs	r3, #16
 80030e2:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80030e4:	2302      	movs	r3, #2
 80030e6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80030e8:	2300      	movs	r3, #0
 80030ea:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80030ec:	2308      	movs	r3, #8
 80030ee:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 84;
 80030f0:	2354      	movs	r3, #84	; 0x54
 80030f2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80030f4:	2302      	movs	r3, #2
 80030f6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80030f8:	2304      	movs	r3, #4
 80030fa:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80030fc:	f107 0320 	add.w	r3, r7, #32
 8003100:	4618      	mov	r0, r3
 8003102:	f001 ff11 	bl	8004f28 <HAL_RCC_OscConfig>
 8003106:	4603      	mov	r3, r0
 8003108:	2b00      	cmp	r3, #0
 800310a:	d001      	beq.n	8003110 <SystemClock_Config+0x98>
  {
    Error_Handler();
 800310c:	f000 fa1c 	bl	8003548 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003110:	230f      	movs	r3, #15
 8003112:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003114:	2302      	movs	r3, #2
 8003116:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003118:	2300      	movs	r3, #0
 800311a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800311c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003120:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003122:	2300      	movs	r3, #0
 8003124:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8003126:	f107 030c 	add.w	r3, r7, #12
 800312a:	2102      	movs	r1, #2
 800312c:	4618      	mov	r0, r3
 800312e:	f002 f973 	bl	8005418 <HAL_RCC_ClockConfig>
 8003132:	4603      	mov	r3, r0
 8003134:	2b00      	cmp	r3, #0
 8003136:	d001      	beq.n	800313c <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8003138:	f000 fa06 	bl	8003548 <Error_Handler>
  }
}
 800313c:	bf00      	nop
 800313e:	3750      	adds	r7, #80	; 0x50
 8003140:	46bd      	mov	sp, r7
 8003142:	bd80      	pop	{r7, pc}
 8003144:	40023800 	.word	0x40023800
 8003148:	40007000 	.word	0x40007000

0800314c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800314c:	b580      	push	{r7, lr}
 800314e:	b084      	sub	sp, #16
 8003150:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8003152:	463b      	mov	r3, r7
 8003154:	2200      	movs	r2, #0
 8003156:	601a      	str	r2, [r3, #0]
 8003158:	605a      	str	r2, [r3, #4]
 800315a:	609a      	str	r2, [r3, #8]
 800315c:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800315e:	4b21      	ldr	r3, [pc, #132]	; (80031e4 <MX_ADC1_Init+0x98>)
 8003160:	4a21      	ldr	r2, [pc, #132]	; (80031e8 <MX_ADC1_Init+0x9c>)
 8003162:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8003164:	4b1f      	ldr	r3, [pc, #124]	; (80031e4 <MX_ADC1_Init+0x98>)
 8003166:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800316a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800316c:	4b1d      	ldr	r3, [pc, #116]	; (80031e4 <MX_ADC1_Init+0x98>)
 800316e:	2200      	movs	r2, #0
 8003170:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8003172:	4b1c      	ldr	r3, [pc, #112]	; (80031e4 <MX_ADC1_Init+0x98>)
 8003174:	2200      	movs	r2, #0
 8003176:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8003178:	4b1a      	ldr	r3, [pc, #104]	; (80031e4 <MX_ADC1_Init+0x98>)
 800317a:	2200      	movs	r2, #0
 800317c:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800317e:	4b19      	ldr	r3, [pc, #100]	; (80031e4 <MX_ADC1_Init+0x98>)
 8003180:	2200      	movs	r2, #0
 8003182:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8003186:	4b17      	ldr	r3, [pc, #92]	; (80031e4 <MX_ADC1_Init+0x98>)
 8003188:	2200      	movs	r2, #0
 800318a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800318c:	4b15      	ldr	r3, [pc, #84]	; (80031e4 <MX_ADC1_Init+0x98>)
 800318e:	4a17      	ldr	r2, [pc, #92]	; (80031ec <MX_ADC1_Init+0xa0>)
 8003190:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8003192:	4b14      	ldr	r3, [pc, #80]	; (80031e4 <MX_ADC1_Init+0x98>)
 8003194:	2200      	movs	r2, #0
 8003196:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8003198:	4b12      	ldr	r3, [pc, #72]	; (80031e4 <MX_ADC1_Init+0x98>)
 800319a:	2201      	movs	r2, #1
 800319c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800319e:	4b11      	ldr	r3, [pc, #68]	; (80031e4 <MX_ADC1_Init+0x98>)
 80031a0:	2200      	movs	r2, #0
 80031a2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80031a6:	4b0f      	ldr	r3, [pc, #60]	; (80031e4 <MX_ADC1_Init+0x98>)
 80031a8:	2201      	movs	r2, #1
 80031aa:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80031ac:	480d      	ldr	r0, [pc, #52]	; (80031e4 <MX_ADC1_Init+0x98>)
 80031ae:	f000 ff7d 	bl	80040ac <HAL_ADC_Init>
 80031b2:	4603      	mov	r3, r0
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d001      	beq.n	80031bc <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80031b8:	f000 f9c6 	bl	8003548 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 80031bc:	2304      	movs	r3, #4
 80031be:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80031c0:	2301      	movs	r3, #1
 80031c2:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80031c4:	2300      	movs	r3, #0
 80031c6:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80031c8:	463b      	mov	r3, r7
 80031ca:	4619      	mov	r1, r3
 80031cc:	4805      	ldr	r0, [pc, #20]	; (80031e4 <MX_ADC1_Init+0x98>)
 80031ce:	f001 f9a1 	bl	8004514 <HAL_ADC_ConfigChannel>
 80031d2:	4603      	mov	r3, r0
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d001      	beq.n	80031dc <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80031d8:	f000 f9b6 	bl	8003548 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80031dc:	bf00      	nop
 80031de:	3710      	adds	r7, #16
 80031e0:	46bd      	mov	sp, r7
 80031e2:	bd80      	pop	{r7, pc}
 80031e4:	2000021c 	.word	0x2000021c
 80031e8:	40012000 	.word	0x40012000
 80031ec:	0f000001 	.word	0x0f000001

080031f0 <MX_SDIO_SD_Init>:
  * @brief SDIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDIO_SD_Init(void)
{
 80031f0:	b480      	push	{r7}
 80031f2:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 80031f4:	4b0c      	ldr	r3, [pc, #48]	; (8003228 <MX_SDIO_SD_Init+0x38>)
 80031f6:	4a0d      	ldr	r2, [pc, #52]	; (800322c <MX_SDIO_SD_Init+0x3c>)
 80031f8:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 80031fa:	4b0b      	ldr	r3, [pc, #44]	; (8003228 <MX_SDIO_SD_Init+0x38>)
 80031fc:	2200      	movs	r2, #0
 80031fe:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 8003200:	4b09      	ldr	r3, [pc, #36]	; (8003228 <MX_SDIO_SD_Init+0x38>)
 8003202:	2200      	movs	r2, #0
 8003204:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8003206:	4b08      	ldr	r3, [pc, #32]	; (8003228 <MX_SDIO_SD_Init+0x38>)
 8003208:	2200      	movs	r2, #0
 800320a:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 800320c:	4b06      	ldr	r3, [pc, #24]	; (8003228 <MX_SDIO_SD_Init+0x38>)
 800320e:	2200      	movs	r2, #0
 8003210:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8003212:	4b05      	ldr	r3, [pc, #20]	; (8003228 <MX_SDIO_SD_Init+0x38>)
 8003214:	2200      	movs	r2, #0
 8003216:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 46;
 8003218:	4b03      	ldr	r3, [pc, #12]	; (8003228 <MX_SDIO_SD_Init+0x38>)
 800321a:	222e      	movs	r2, #46	; 0x2e
 800321c:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDIO_Init 2 */

  /* USER CODE END SDIO_Init 2 */

}
 800321e:	bf00      	nop
 8003220:	46bd      	mov	sp, r7
 8003222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003226:	4770      	bx	lr
 8003228:	20000264 	.word	0x20000264
 800322c:	40012c00 	.word	0x40012c00

08003230 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8003230:	b580      	push	{r7, lr}
 8003232:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8003234:	4b17      	ldr	r3, [pc, #92]	; (8003294 <MX_SPI2_Init+0x64>)
 8003236:	4a18      	ldr	r2, [pc, #96]	; (8003298 <MX_SPI2_Init+0x68>)
 8003238:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800323a:	4b16      	ldr	r3, [pc, #88]	; (8003294 <MX_SPI2_Init+0x64>)
 800323c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8003240:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8003242:	4b14      	ldr	r3, [pc, #80]	; (8003294 <MX_SPI2_Init+0x64>)
 8003244:	2200      	movs	r2, #0
 8003246:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8003248:	4b12      	ldr	r3, [pc, #72]	; (8003294 <MX_SPI2_Init+0x64>)
 800324a:	2200      	movs	r2, #0
 800324c:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800324e:	4b11      	ldr	r3, [pc, #68]	; (8003294 <MX_SPI2_Init+0x64>)
 8003250:	2200      	movs	r2, #0
 8003252:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003254:	4b0f      	ldr	r3, [pc, #60]	; (8003294 <MX_SPI2_Init+0x64>)
 8003256:	2200      	movs	r2, #0
 8003258:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800325a:	4b0e      	ldr	r3, [pc, #56]	; (8003294 <MX_SPI2_Init+0x64>)
 800325c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003260:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8003262:	4b0c      	ldr	r3, [pc, #48]	; (8003294 <MX_SPI2_Init+0x64>)
 8003264:	2218      	movs	r2, #24
 8003266:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003268:	4b0a      	ldr	r3, [pc, #40]	; (8003294 <MX_SPI2_Init+0x64>)
 800326a:	2200      	movs	r2, #0
 800326c:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800326e:	4b09      	ldr	r3, [pc, #36]	; (8003294 <MX_SPI2_Init+0x64>)
 8003270:	2200      	movs	r2, #0
 8003272:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003274:	4b07      	ldr	r3, [pc, #28]	; (8003294 <MX_SPI2_Init+0x64>)
 8003276:	2200      	movs	r2, #0
 8003278:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 800327a:	4b06      	ldr	r3, [pc, #24]	; (8003294 <MX_SPI2_Init+0x64>)
 800327c:	220a      	movs	r2, #10
 800327e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8003280:	4804      	ldr	r0, [pc, #16]	; (8003294 <MX_SPI2_Init+0x64>)
 8003282:	f003 fc34 	bl	8006aee <HAL_SPI_Init>
 8003286:	4603      	mov	r3, r0
 8003288:	2b00      	cmp	r3, #0
 800328a:	d001      	beq.n	8003290 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 800328c:	f000 f95c 	bl	8003548 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8003290:	bf00      	nop
 8003292:	bd80      	pop	{r7, pc}
 8003294:	200002e8 	.word	0x200002e8
 8003298:	40003800 	.word	0x40003800

0800329c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800329c:	b580      	push	{r7, lr}
 800329e:	b086      	sub	sp, #24
 80032a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80032a2:	f107 0308 	add.w	r3, r7, #8
 80032a6:	2200      	movs	r2, #0
 80032a8:	601a      	str	r2, [r3, #0]
 80032aa:	605a      	str	r2, [r3, #4]
 80032ac:	609a      	str	r2, [r3, #8]
 80032ae:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80032b0:	463b      	mov	r3, r7
 80032b2:	2200      	movs	r2, #0
 80032b4:	601a      	str	r2, [r3, #0]
 80032b6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80032b8:	4b1d      	ldr	r3, [pc, #116]	; (8003330 <MX_TIM3_Init+0x94>)
 80032ba:	4a1e      	ldr	r2, [pc, #120]	; (8003334 <MX_TIM3_Init+0x98>)
 80032bc:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80032be:	4b1c      	ldr	r3, [pc, #112]	; (8003330 <MX_TIM3_Init+0x94>)
 80032c0:	2200      	movs	r2, #0
 80032c2:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80032c4:	4b1a      	ldr	r3, [pc, #104]	; (8003330 <MX_TIM3_Init+0x94>)
 80032c6:	2200      	movs	r2, #0
 80032c8:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1259;
 80032ca:	4b19      	ldr	r3, [pc, #100]	; (8003330 <MX_TIM3_Init+0x94>)
 80032cc:	f240 42eb 	movw	r2, #1259	; 0x4eb
 80032d0:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80032d2:	4b17      	ldr	r3, [pc, #92]	; (8003330 <MX_TIM3_Init+0x94>)
 80032d4:	2200      	movs	r2, #0
 80032d6:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80032d8:	4b15      	ldr	r3, [pc, #84]	; (8003330 <MX_TIM3_Init+0x94>)
 80032da:	2200      	movs	r2, #0
 80032dc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80032de:	4814      	ldr	r0, [pc, #80]	; (8003330 <MX_TIM3_Init+0x94>)
 80032e0:	f004 f9ae 	bl	8007640 <HAL_TIM_Base_Init>
 80032e4:	4603      	mov	r3, r0
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d001      	beq.n	80032ee <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 80032ea:	f000 f92d 	bl	8003548 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80032ee:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80032f2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80032f4:	f107 0308 	add.w	r3, r7, #8
 80032f8:	4619      	mov	r1, r3
 80032fa:	480d      	ldr	r0, [pc, #52]	; (8003330 <MX_TIM3_Init+0x94>)
 80032fc:	f004 fb89 	bl	8007a12 <HAL_TIM_ConfigClockSource>
 8003300:	4603      	mov	r3, r0
 8003302:	2b00      	cmp	r3, #0
 8003304:	d001      	beq.n	800330a <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 8003306:	f000 f91f 	bl	8003548 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800330a:	2300      	movs	r3, #0
 800330c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800330e:	2300      	movs	r3, #0
 8003310:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8003312:	463b      	mov	r3, r7
 8003314:	4619      	mov	r1, r3
 8003316:	4806      	ldr	r0, [pc, #24]	; (8003330 <MX_TIM3_Init+0x94>)
 8003318:	f004 fd84 	bl	8007e24 <HAL_TIMEx_MasterConfigSynchronization>
 800331c:	4603      	mov	r3, r0
 800331e:	2b00      	cmp	r3, #0
 8003320:	d001      	beq.n	8003326 <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 8003322:	f000 f911 	bl	8003548 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8003326:	bf00      	nop
 8003328:	3718      	adds	r7, #24
 800332a:	46bd      	mov	sp, r7
 800332c:	bd80      	pop	{r7, pc}
 800332e:	bf00      	nop
 8003330:	20000340 	.word	0x20000340
 8003334:	40000400 	.word	0x40000400

08003338 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8003338:	b580      	push	{r7, lr}
 800333a:	b086      	sub	sp, #24
 800333c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800333e:	f107 0308 	add.w	r3, r7, #8
 8003342:	2200      	movs	r2, #0
 8003344:	601a      	str	r2, [r3, #0]
 8003346:	605a      	str	r2, [r3, #4]
 8003348:	609a      	str	r2, [r3, #8]
 800334a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800334c:	463b      	mov	r3, r7
 800334e:	2200      	movs	r2, #0
 8003350:	601a      	str	r2, [r3, #0]
 8003352:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8003354:	4b1d      	ldr	r3, [pc, #116]	; (80033cc <MX_TIM4_Init+0x94>)
 8003356:	4a1e      	ldr	r2, [pc, #120]	; (80033d0 <MX_TIM4_Init+0x98>)
 8003358:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 83;
 800335a:	4b1c      	ldr	r3, [pc, #112]	; (80033cc <MX_TIM4_Init+0x94>)
 800335c:	2253      	movs	r2, #83	; 0x53
 800335e:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003360:	4b1a      	ldr	r3, [pc, #104]	; (80033cc <MX_TIM4_Init+0x94>)
 8003362:	2200      	movs	r2, #0
 8003364:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 999;
 8003366:	4b19      	ldr	r3, [pc, #100]	; (80033cc <MX_TIM4_Init+0x94>)
 8003368:	f240 32e7 	movw	r2, #999	; 0x3e7
 800336c:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800336e:	4b17      	ldr	r3, [pc, #92]	; (80033cc <MX_TIM4_Init+0x94>)
 8003370:	2200      	movs	r2, #0
 8003372:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003374:	4b15      	ldr	r3, [pc, #84]	; (80033cc <MX_TIM4_Init+0x94>)
 8003376:	2200      	movs	r2, #0
 8003378:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 800337a:	4814      	ldr	r0, [pc, #80]	; (80033cc <MX_TIM4_Init+0x94>)
 800337c:	f004 f960 	bl	8007640 <HAL_TIM_Base_Init>
 8003380:	4603      	mov	r3, r0
 8003382:	2b00      	cmp	r3, #0
 8003384:	d001      	beq.n	800338a <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 8003386:	f000 f8df 	bl	8003548 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800338a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800338e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8003390:	f107 0308 	add.w	r3, r7, #8
 8003394:	4619      	mov	r1, r3
 8003396:	480d      	ldr	r0, [pc, #52]	; (80033cc <MX_TIM4_Init+0x94>)
 8003398:	f004 fb3b 	bl	8007a12 <HAL_TIM_ConfigClockSource>
 800339c:	4603      	mov	r3, r0
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d001      	beq.n	80033a6 <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 80033a2:	f000 f8d1 	bl	8003548 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80033a6:	2300      	movs	r3, #0
 80033a8:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80033aa:	2300      	movs	r3, #0
 80033ac:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80033ae:	463b      	mov	r3, r7
 80033b0:	4619      	mov	r1, r3
 80033b2:	4806      	ldr	r0, [pc, #24]	; (80033cc <MX_TIM4_Init+0x94>)
 80033b4:	f004 fd36 	bl	8007e24 <HAL_TIMEx_MasterConfigSynchronization>
 80033b8:	4603      	mov	r3, r0
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d001      	beq.n	80033c2 <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 80033be:	f000 f8c3 	bl	8003548 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80033c2:	bf00      	nop
 80033c4:	3718      	adds	r7, #24
 80033c6:	46bd      	mov	sp, r7
 80033c8:	bd80      	pop	{r7, pc}
 80033ca:	bf00      	nop
 80033cc:	20000388 	.word	0x20000388
 80033d0:	40000800 	.word	0x40000800

080033d4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80033d4:	b580      	push	{r7, lr}
 80033d6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80033d8:	4b11      	ldr	r3, [pc, #68]	; (8003420 <MX_USART2_UART_Init+0x4c>)
 80033da:	4a12      	ldr	r2, [pc, #72]	; (8003424 <MX_USART2_UART_Init+0x50>)
 80033dc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80033de:	4b10      	ldr	r3, [pc, #64]	; (8003420 <MX_USART2_UART_Init+0x4c>)
 80033e0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80033e4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80033e6:	4b0e      	ldr	r3, [pc, #56]	; (8003420 <MX_USART2_UART_Init+0x4c>)
 80033e8:	2200      	movs	r2, #0
 80033ea:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80033ec:	4b0c      	ldr	r3, [pc, #48]	; (8003420 <MX_USART2_UART_Init+0x4c>)
 80033ee:	2200      	movs	r2, #0
 80033f0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80033f2:	4b0b      	ldr	r3, [pc, #44]	; (8003420 <MX_USART2_UART_Init+0x4c>)
 80033f4:	2200      	movs	r2, #0
 80033f6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80033f8:	4b09      	ldr	r3, [pc, #36]	; (8003420 <MX_USART2_UART_Init+0x4c>)
 80033fa:	220c      	movs	r2, #12
 80033fc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80033fe:	4b08      	ldr	r3, [pc, #32]	; (8003420 <MX_USART2_UART_Init+0x4c>)
 8003400:	2200      	movs	r2, #0
 8003402:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8003404:	4b06      	ldr	r3, [pc, #24]	; (8003420 <MX_USART2_UART_Init+0x4c>)
 8003406:	2200      	movs	r2, #0
 8003408:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800340a:	4805      	ldr	r0, [pc, #20]	; (8003420 <MX_USART2_UART_Init+0x4c>)
 800340c:	f004 fd8c 	bl	8007f28 <HAL_UART_Init>
 8003410:	4603      	mov	r3, r0
 8003412:	2b00      	cmp	r3, #0
 8003414:	d001      	beq.n	800341a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8003416:	f000 f897 	bl	8003548 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800341a:	bf00      	nop
 800341c:	bd80      	pop	{r7, pc}
 800341e:	bf00      	nop
 8003420:	200003d0 	.word	0x200003d0
 8003424:	40004400 	.word	0x40004400

08003428 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003428:	b580      	push	{r7, lr}
 800342a:	b08a      	sub	sp, #40	; 0x28
 800342c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800342e:	f107 0314 	add.w	r3, r7, #20
 8003432:	2200      	movs	r2, #0
 8003434:	601a      	str	r2, [r3, #0]
 8003436:	605a      	str	r2, [r3, #4]
 8003438:	609a      	str	r2, [r3, #8]
 800343a:	60da      	str	r2, [r3, #12]
 800343c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800343e:	2300      	movs	r3, #0
 8003440:	613b      	str	r3, [r7, #16]
 8003442:	4b3e      	ldr	r3, [pc, #248]	; (800353c <MX_GPIO_Init+0x114>)
 8003444:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003446:	4a3d      	ldr	r2, [pc, #244]	; (800353c <MX_GPIO_Init+0x114>)
 8003448:	f043 0304 	orr.w	r3, r3, #4
 800344c:	6313      	str	r3, [r2, #48]	; 0x30
 800344e:	4b3b      	ldr	r3, [pc, #236]	; (800353c <MX_GPIO_Init+0x114>)
 8003450:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003452:	f003 0304 	and.w	r3, r3, #4
 8003456:	613b      	str	r3, [r7, #16]
 8003458:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800345a:	2300      	movs	r3, #0
 800345c:	60fb      	str	r3, [r7, #12]
 800345e:	4b37      	ldr	r3, [pc, #220]	; (800353c <MX_GPIO_Init+0x114>)
 8003460:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003462:	4a36      	ldr	r2, [pc, #216]	; (800353c <MX_GPIO_Init+0x114>)
 8003464:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003468:	6313      	str	r3, [r2, #48]	; 0x30
 800346a:	4b34      	ldr	r3, [pc, #208]	; (800353c <MX_GPIO_Init+0x114>)
 800346c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800346e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003472:	60fb      	str	r3, [r7, #12]
 8003474:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003476:	2300      	movs	r3, #0
 8003478:	60bb      	str	r3, [r7, #8]
 800347a:	4b30      	ldr	r3, [pc, #192]	; (800353c <MX_GPIO_Init+0x114>)
 800347c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800347e:	4a2f      	ldr	r2, [pc, #188]	; (800353c <MX_GPIO_Init+0x114>)
 8003480:	f043 0301 	orr.w	r3, r3, #1
 8003484:	6313      	str	r3, [r2, #48]	; 0x30
 8003486:	4b2d      	ldr	r3, [pc, #180]	; (800353c <MX_GPIO_Init+0x114>)
 8003488:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800348a:	f003 0301 	and.w	r3, r3, #1
 800348e:	60bb      	str	r3, [r7, #8]
 8003490:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003492:	2300      	movs	r3, #0
 8003494:	607b      	str	r3, [r7, #4]
 8003496:	4b29      	ldr	r3, [pc, #164]	; (800353c <MX_GPIO_Init+0x114>)
 8003498:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800349a:	4a28      	ldr	r2, [pc, #160]	; (800353c <MX_GPIO_Init+0x114>)
 800349c:	f043 0302 	orr.w	r3, r3, #2
 80034a0:	6313      	str	r3, [r2, #48]	; 0x30
 80034a2:	4b26      	ldr	r3, [pc, #152]	; (800353c <MX_GPIO_Init+0x114>)
 80034a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034a6:	f003 0302 	and.w	r3, r3, #2
 80034aa:	607b      	str	r3, [r7, #4]
 80034ac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80034ae:	2300      	movs	r3, #0
 80034b0:	603b      	str	r3, [r7, #0]
 80034b2:	4b22      	ldr	r3, [pc, #136]	; (800353c <MX_GPIO_Init+0x114>)
 80034b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034b6:	4a21      	ldr	r2, [pc, #132]	; (800353c <MX_GPIO_Init+0x114>)
 80034b8:	f043 0308 	orr.w	r3, r3, #8
 80034bc:	6313      	str	r3, [r2, #48]	; 0x30
 80034be:	4b1f      	ldr	r3, [pc, #124]	; (800353c <MX_GPIO_Init+0x114>)
 80034c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034c2:	f003 0308 	and.w	r3, r3, #8
 80034c6:	603b      	str	r3, [r7, #0]
 80034c8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, SR0E_Pin|SRL_Pin|RF_SRL_Pin|RF_SRE_Pin, GPIO_PIN_RESET);
 80034ca:	2200      	movs	r2, #0
 80034cc:	f242 0132 	movw	r1, #8242	; 0x2032
 80034d0:	481b      	ldr	r0, [pc, #108]	; (8003540 <MX_GPIO_Init+0x118>)
 80034d2:	f001 fcf5 	bl	8004ec0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, DS_Pin|Beep_Pin, GPIO_PIN_RESET);
 80034d6:	2200      	movs	r2, #0
 80034d8:	2182      	movs	r1, #130	; 0x82
 80034da:	481a      	ldr	r0, [pc, #104]	; (8003544 <MX_GPIO_Init+0x11c>)
 80034dc:	f001 fcf0 	bl	8004ec0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : SR0E_Pin SRL_Pin RF_SRL_Pin RF_SRE_Pin */
  GPIO_InitStruct.Pin = SR0E_Pin|SRL_Pin|RF_SRL_Pin|RF_SRE_Pin;
 80034e0:	f242 0332 	movw	r3, #8242	; 0x2032
 80034e4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80034e6:	2301      	movs	r3, #1
 80034e8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034ea:	2300      	movs	r3, #0
 80034ec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80034ee:	2300      	movs	r3, #0
 80034f0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80034f2:	f107 0314 	add.w	r3, r7, #20
 80034f6:	4619      	mov	r1, r3
 80034f8:	4811      	ldr	r0, [pc, #68]	; (8003540 <MX_GPIO_Init+0x118>)
 80034fa:	f001 fb45 	bl	8004b88 <HAL_GPIO_Init>

  /*Configure GPIO pins : DS_Pin Beep_Pin */
  GPIO_InitStruct.Pin = DS_Pin|Beep_Pin;
 80034fe:	2382      	movs	r3, #130	; 0x82
 8003500:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003502:	2301      	movs	r3, #1
 8003504:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003506:	2300      	movs	r3, #0
 8003508:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800350a:	2300      	movs	r3, #0
 800350c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800350e:	f107 0314 	add.w	r3, r7, #20
 8003512:	4619      	mov	r1, r3
 8003514:	480b      	ldr	r0, [pc, #44]	; (8003544 <MX_GPIO_Init+0x11c>)
 8003516:	f001 fb37 	bl	8004b88 <HAL_GPIO_Init>

  /*Configure GPIO pin : SD_Insert_Pin */
  GPIO_InitStruct.Pin = SD_Insert_Pin;
 800351a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800351e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003520:	2300      	movs	r3, #0
 8003522:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003524:	2300      	movs	r3, #0
 8003526:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SD_Insert_GPIO_Port, &GPIO_InitStruct);
 8003528:	f107 0314 	add.w	r3, r7, #20
 800352c:	4619      	mov	r1, r3
 800352e:	4805      	ldr	r0, [pc, #20]	; (8003544 <MX_GPIO_Init+0x11c>)
 8003530:	f001 fb2a 	bl	8004b88 <HAL_GPIO_Init>

}
 8003534:	bf00      	nop
 8003536:	3728      	adds	r7, #40	; 0x28
 8003538:	46bd      	mov	sp, r7
 800353a:	bd80      	pop	{r7, pc}
 800353c:	40023800 	.word	0x40023800
 8003540:	40020800 	.word	0x40020800
 8003544:	40020000 	.word	0x40020000

08003548 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003548:	b480      	push	{r7}
 800354a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800354c:	b672      	cpsid	i
}
 800354e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003550:	e7fe      	b.n	8003550 <Error_Handler+0x8>
	...

08003554 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003554:	b480      	push	{r7}
 8003556:	b083      	sub	sp, #12
 8003558:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800355a:	2300      	movs	r3, #0
 800355c:	607b      	str	r3, [r7, #4]
 800355e:	4b10      	ldr	r3, [pc, #64]	; (80035a0 <HAL_MspInit+0x4c>)
 8003560:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003562:	4a0f      	ldr	r2, [pc, #60]	; (80035a0 <HAL_MspInit+0x4c>)
 8003564:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003568:	6453      	str	r3, [r2, #68]	; 0x44
 800356a:	4b0d      	ldr	r3, [pc, #52]	; (80035a0 <HAL_MspInit+0x4c>)
 800356c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800356e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003572:	607b      	str	r3, [r7, #4]
 8003574:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003576:	2300      	movs	r3, #0
 8003578:	603b      	str	r3, [r7, #0]
 800357a:	4b09      	ldr	r3, [pc, #36]	; (80035a0 <HAL_MspInit+0x4c>)
 800357c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800357e:	4a08      	ldr	r2, [pc, #32]	; (80035a0 <HAL_MspInit+0x4c>)
 8003580:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003584:	6413      	str	r3, [r2, #64]	; 0x40
 8003586:	4b06      	ldr	r3, [pc, #24]	; (80035a0 <HAL_MspInit+0x4c>)
 8003588:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800358a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800358e:	603b      	str	r3, [r7, #0]
 8003590:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003592:	bf00      	nop
 8003594:	370c      	adds	r7, #12
 8003596:	46bd      	mov	sp, r7
 8003598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800359c:	4770      	bx	lr
 800359e:	bf00      	nop
 80035a0:	40023800 	.word	0x40023800

080035a4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80035a4:	b580      	push	{r7, lr}
 80035a6:	b08a      	sub	sp, #40	; 0x28
 80035a8:	af00      	add	r7, sp, #0
 80035aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80035ac:	f107 0314 	add.w	r3, r7, #20
 80035b0:	2200      	movs	r2, #0
 80035b2:	601a      	str	r2, [r3, #0]
 80035b4:	605a      	str	r2, [r3, #4]
 80035b6:	609a      	str	r2, [r3, #8]
 80035b8:	60da      	str	r2, [r3, #12]
 80035ba:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	4a1b      	ldr	r2, [pc, #108]	; (8003630 <HAL_ADC_MspInit+0x8c>)
 80035c2:	4293      	cmp	r3, r2
 80035c4:	d12f      	bne.n	8003626 <HAL_ADC_MspInit+0x82>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80035c6:	2300      	movs	r3, #0
 80035c8:	613b      	str	r3, [r7, #16]
 80035ca:	4b1a      	ldr	r3, [pc, #104]	; (8003634 <HAL_ADC_MspInit+0x90>)
 80035cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035ce:	4a19      	ldr	r2, [pc, #100]	; (8003634 <HAL_ADC_MspInit+0x90>)
 80035d0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80035d4:	6453      	str	r3, [r2, #68]	; 0x44
 80035d6:	4b17      	ldr	r3, [pc, #92]	; (8003634 <HAL_ADC_MspInit+0x90>)
 80035d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035de:	613b      	str	r3, [r7, #16]
 80035e0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80035e2:	2300      	movs	r3, #0
 80035e4:	60fb      	str	r3, [r7, #12]
 80035e6:	4b13      	ldr	r3, [pc, #76]	; (8003634 <HAL_ADC_MspInit+0x90>)
 80035e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035ea:	4a12      	ldr	r2, [pc, #72]	; (8003634 <HAL_ADC_MspInit+0x90>)
 80035ec:	f043 0301 	orr.w	r3, r3, #1
 80035f0:	6313      	str	r3, [r2, #48]	; 0x30
 80035f2:	4b10      	ldr	r3, [pc, #64]	; (8003634 <HAL_ADC_MspInit+0x90>)
 80035f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035f6:	f003 0301 	and.w	r3, r3, #1
 80035fa:	60fb      	str	r3, [r7, #12]
 80035fc:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA4     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80035fe:	2310      	movs	r3, #16
 8003600:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003602:	2303      	movs	r3, #3
 8003604:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003606:	2300      	movs	r3, #0
 8003608:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800360a:	f107 0314 	add.w	r3, r7, #20
 800360e:	4619      	mov	r1, r3
 8003610:	4809      	ldr	r0, [pc, #36]	; (8003638 <HAL_ADC_MspInit+0x94>)
 8003612:	f001 fab9 	bl	8004b88 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8003616:	2200      	movs	r2, #0
 8003618:	2100      	movs	r1, #0
 800361a:	2012      	movs	r0, #18
 800361c:	f001 fa7d 	bl	8004b1a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8003620:	2012      	movs	r0, #18
 8003622:	f001 fa96 	bl	8004b52 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8003626:	bf00      	nop
 8003628:	3728      	adds	r7, #40	; 0x28
 800362a:	46bd      	mov	sp, r7
 800362c:	bd80      	pop	{r7, pc}
 800362e:	bf00      	nop
 8003630:	40012000 	.word	0x40012000
 8003634:	40023800 	.word	0x40023800
 8003638:	40020000 	.word	0x40020000

0800363c <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 800363c:	b580      	push	{r7, lr}
 800363e:	b08a      	sub	sp, #40	; 0x28
 8003640:	af00      	add	r7, sp, #0
 8003642:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003644:	f107 0314 	add.w	r3, r7, #20
 8003648:	2200      	movs	r2, #0
 800364a:	601a      	str	r2, [r3, #0]
 800364c:	605a      	str	r2, [r3, #4]
 800364e:	609a      	str	r2, [r3, #8]
 8003650:	60da      	str	r2, [r3, #12]
 8003652:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDIO)
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	4a28      	ldr	r2, [pc, #160]	; (80036fc <HAL_SD_MspInit+0xc0>)
 800365a:	4293      	cmp	r3, r2
 800365c:	d14a      	bne.n	80036f4 <HAL_SD_MspInit+0xb8>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 800365e:	2300      	movs	r3, #0
 8003660:	613b      	str	r3, [r7, #16]
 8003662:	4b27      	ldr	r3, [pc, #156]	; (8003700 <HAL_SD_MspInit+0xc4>)
 8003664:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003666:	4a26      	ldr	r2, [pc, #152]	; (8003700 <HAL_SD_MspInit+0xc4>)
 8003668:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800366c:	6453      	str	r3, [r2, #68]	; 0x44
 800366e:	4b24      	ldr	r3, [pc, #144]	; (8003700 <HAL_SD_MspInit+0xc4>)
 8003670:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003672:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003676:	613b      	str	r3, [r7, #16]
 8003678:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800367a:	2300      	movs	r3, #0
 800367c:	60fb      	str	r3, [r7, #12]
 800367e:	4b20      	ldr	r3, [pc, #128]	; (8003700 <HAL_SD_MspInit+0xc4>)
 8003680:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003682:	4a1f      	ldr	r2, [pc, #124]	; (8003700 <HAL_SD_MspInit+0xc4>)
 8003684:	f043 0304 	orr.w	r3, r3, #4
 8003688:	6313      	str	r3, [r2, #48]	; 0x30
 800368a:	4b1d      	ldr	r3, [pc, #116]	; (8003700 <HAL_SD_MspInit+0xc4>)
 800368c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800368e:	f003 0304 	and.w	r3, r3, #4
 8003692:	60fb      	str	r3, [r7, #12]
 8003694:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003696:	2300      	movs	r3, #0
 8003698:	60bb      	str	r3, [r7, #8]
 800369a:	4b19      	ldr	r3, [pc, #100]	; (8003700 <HAL_SD_MspInit+0xc4>)
 800369c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800369e:	4a18      	ldr	r2, [pc, #96]	; (8003700 <HAL_SD_MspInit+0xc4>)
 80036a0:	f043 0308 	orr.w	r3, r3, #8
 80036a4:	6313      	str	r3, [r2, #48]	; 0x30
 80036a6:	4b16      	ldr	r3, [pc, #88]	; (8003700 <HAL_SD_MspInit+0xc4>)
 80036a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036aa:	f003 0308 	and.w	r3, r3, #8
 80036ae:	60bb      	str	r3, [r7, #8]
 80036b0:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDIO_D2
    PC11     ------> SDIO_D3
    PC12     ------> SDIO_CK
    PD2     ------> SDIO_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 80036b2:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 80036b6:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80036b8:	2302      	movs	r3, #2
 80036ba:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036bc:	2300      	movs	r3, #0
 80036be:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80036c0:	2303      	movs	r3, #3
 80036c2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 80036c4:	230c      	movs	r3, #12
 80036c6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80036c8:	f107 0314 	add.w	r3, r7, #20
 80036cc:	4619      	mov	r1, r3
 80036ce:	480d      	ldr	r0, [pc, #52]	; (8003704 <HAL_SD_MspInit+0xc8>)
 80036d0:	f001 fa5a 	bl	8004b88 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80036d4:	2304      	movs	r3, #4
 80036d6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80036d8:	2302      	movs	r3, #2
 80036da:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036dc:	2300      	movs	r3, #0
 80036de:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80036e0:	2303      	movs	r3, #3
 80036e2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 80036e4:	230c      	movs	r3, #12
 80036e6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80036e8:	f107 0314 	add.w	r3, r7, #20
 80036ec:	4619      	mov	r1, r3
 80036ee:	4806      	ldr	r0, [pc, #24]	; (8003708 <HAL_SD_MspInit+0xcc>)
 80036f0:	f001 fa4a 	bl	8004b88 <HAL_GPIO_Init>
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }

}
 80036f4:	bf00      	nop
 80036f6:	3728      	adds	r7, #40	; 0x28
 80036f8:	46bd      	mov	sp, r7
 80036fa:	bd80      	pop	{r7, pc}
 80036fc:	40012c00 	.word	0x40012c00
 8003700:	40023800 	.word	0x40023800
 8003704:	40020800 	.word	0x40020800
 8003708:	40020c00 	.word	0x40020c00

0800370c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800370c:	b580      	push	{r7, lr}
 800370e:	b08a      	sub	sp, #40	; 0x28
 8003710:	af00      	add	r7, sp, #0
 8003712:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003714:	f107 0314 	add.w	r3, r7, #20
 8003718:	2200      	movs	r2, #0
 800371a:	601a      	str	r2, [r3, #0]
 800371c:	605a      	str	r2, [r3, #4]
 800371e:	609a      	str	r2, [r3, #8]
 8003720:	60da      	str	r2, [r3, #12]
 8003722:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	4a19      	ldr	r2, [pc, #100]	; (8003790 <HAL_SPI_MspInit+0x84>)
 800372a:	4293      	cmp	r3, r2
 800372c:	d12c      	bne.n	8003788 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800372e:	2300      	movs	r3, #0
 8003730:	613b      	str	r3, [r7, #16]
 8003732:	4b18      	ldr	r3, [pc, #96]	; (8003794 <HAL_SPI_MspInit+0x88>)
 8003734:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003736:	4a17      	ldr	r2, [pc, #92]	; (8003794 <HAL_SPI_MspInit+0x88>)
 8003738:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800373c:	6413      	str	r3, [r2, #64]	; 0x40
 800373e:	4b15      	ldr	r3, [pc, #84]	; (8003794 <HAL_SPI_MspInit+0x88>)
 8003740:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003742:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003746:	613b      	str	r3, [r7, #16]
 8003748:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800374a:	2300      	movs	r3, #0
 800374c:	60fb      	str	r3, [r7, #12]
 800374e:	4b11      	ldr	r3, [pc, #68]	; (8003794 <HAL_SPI_MspInit+0x88>)
 8003750:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003752:	4a10      	ldr	r2, [pc, #64]	; (8003794 <HAL_SPI_MspInit+0x88>)
 8003754:	f043 0302 	orr.w	r3, r3, #2
 8003758:	6313      	str	r3, [r2, #48]	; 0x30
 800375a:	4b0e      	ldr	r3, [pc, #56]	; (8003794 <HAL_SPI_MspInit+0x88>)
 800375c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800375e:	f003 0302 	and.w	r3, r3, #2
 8003762:	60fb      	str	r3, [r7, #12]
 8003764:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8003766:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 800376a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800376c:	2302      	movs	r3, #2
 800376e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003770:	2300      	movs	r3, #0
 8003772:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003774:	2303      	movs	r3, #3
 8003776:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8003778:	2305      	movs	r3, #5
 800377a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800377c:	f107 0314 	add.w	r3, r7, #20
 8003780:	4619      	mov	r1, r3
 8003782:	4805      	ldr	r0, [pc, #20]	; (8003798 <HAL_SPI_MspInit+0x8c>)
 8003784:	f001 fa00 	bl	8004b88 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8003788:	bf00      	nop
 800378a:	3728      	adds	r7, #40	; 0x28
 800378c:	46bd      	mov	sp, r7
 800378e:	bd80      	pop	{r7, pc}
 8003790:	40003800 	.word	0x40003800
 8003794:	40023800 	.word	0x40023800
 8003798:	40020400 	.word	0x40020400

0800379c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800379c:	b580      	push	{r7, lr}
 800379e:	b084      	sub	sp, #16
 80037a0:	af00      	add	r7, sp, #0
 80037a2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	4a1c      	ldr	r2, [pc, #112]	; (800381c <HAL_TIM_Base_MspInit+0x80>)
 80037aa:	4293      	cmp	r3, r2
 80037ac:	d116      	bne.n	80037dc <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80037ae:	2300      	movs	r3, #0
 80037b0:	60fb      	str	r3, [r7, #12]
 80037b2:	4b1b      	ldr	r3, [pc, #108]	; (8003820 <HAL_TIM_Base_MspInit+0x84>)
 80037b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037b6:	4a1a      	ldr	r2, [pc, #104]	; (8003820 <HAL_TIM_Base_MspInit+0x84>)
 80037b8:	f043 0302 	orr.w	r3, r3, #2
 80037bc:	6413      	str	r3, [r2, #64]	; 0x40
 80037be:	4b18      	ldr	r3, [pc, #96]	; (8003820 <HAL_TIM_Base_MspInit+0x84>)
 80037c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037c2:	f003 0302 	and.w	r3, r3, #2
 80037c6:	60fb      	str	r3, [r7, #12]
 80037c8:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80037ca:	2200      	movs	r2, #0
 80037cc:	2100      	movs	r1, #0
 80037ce:	201d      	movs	r0, #29
 80037d0:	f001 f9a3 	bl	8004b1a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80037d4:	201d      	movs	r0, #29
 80037d6:	f001 f9bc 	bl	8004b52 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 80037da:	e01a      	b.n	8003812 <HAL_TIM_Base_MspInit+0x76>
  else if(htim_base->Instance==TIM4)
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	4a10      	ldr	r2, [pc, #64]	; (8003824 <HAL_TIM_Base_MspInit+0x88>)
 80037e2:	4293      	cmp	r3, r2
 80037e4:	d115      	bne.n	8003812 <HAL_TIM_Base_MspInit+0x76>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80037e6:	2300      	movs	r3, #0
 80037e8:	60bb      	str	r3, [r7, #8]
 80037ea:	4b0d      	ldr	r3, [pc, #52]	; (8003820 <HAL_TIM_Base_MspInit+0x84>)
 80037ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037ee:	4a0c      	ldr	r2, [pc, #48]	; (8003820 <HAL_TIM_Base_MspInit+0x84>)
 80037f0:	f043 0304 	orr.w	r3, r3, #4
 80037f4:	6413      	str	r3, [r2, #64]	; 0x40
 80037f6:	4b0a      	ldr	r3, [pc, #40]	; (8003820 <HAL_TIM_Base_MspInit+0x84>)
 80037f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037fa:	f003 0304 	and.w	r3, r3, #4
 80037fe:	60bb      	str	r3, [r7, #8]
 8003800:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8003802:	2200      	movs	r2, #0
 8003804:	2100      	movs	r1, #0
 8003806:	201e      	movs	r0, #30
 8003808:	f001 f987 	bl	8004b1a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 800380c:	201e      	movs	r0, #30
 800380e:	f001 f9a0 	bl	8004b52 <HAL_NVIC_EnableIRQ>
}
 8003812:	bf00      	nop
 8003814:	3710      	adds	r7, #16
 8003816:	46bd      	mov	sp, r7
 8003818:	bd80      	pop	{r7, pc}
 800381a:	bf00      	nop
 800381c:	40000400 	.word	0x40000400
 8003820:	40023800 	.word	0x40023800
 8003824:	40000800 	.word	0x40000800

08003828 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003828:	b580      	push	{r7, lr}
 800382a:	b08a      	sub	sp, #40	; 0x28
 800382c:	af00      	add	r7, sp, #0
 800382e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003830:	f107 0314 	add.w	r3, r7, #20
 8003834:	2200      	movs	r2, #0
 8003836:	601a      	str	r2, [r3, #0]
 8003838:	605a      	str	r2, [r3, #4]
 800383a:	609a      	str	r2, [r3, #8]
 800383c:	60da      	str	r2, [r3, #12]
 800383e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	4a19      	ldr	r2, [pc, #100]	; (80038ac <HAL_UART_MspInit+0x84>)
 8003846:	4293      	cmp	r3, r2
 8003848:	d12b      	bne.n	80038a2 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800384a:	2300      	movs	r3, #0
 800384c:	613b      	str	r3, [r7, #16]
 800384e:	4b18      	ldr	r3, [pc, #96]	; (80038b0 <HAL_UART_MspInit+0x88>)
 8003850:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003852:	4a17      	ldr	r2, [pc, #92]	; (80038b0 <HAL_UART_MspInit+0x88>)
 8003854:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003858:	6413      	str	r3, [r2, #64]	; 0x40
 800385a:	4b15      	ldr	r3, [pc, #84]	; (80038b0 <HAL_UART_MspInit+0x88>)
 800385c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800385e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003862:	613b      	str	r3, [r7, #16]
 8003864:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003866:	2300      	movs	r3, #0
 8003868:	60fb      	str	r3, [r7, #12]
 800386a:	4b11      	ldr	r3, [pc, #68]	; (80038b0 <HAL_UART_MspInit+0x88>)
 800386c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800386e:	4a10      	ldr	r2, [pc, #64]	; (80038b0 <HAL_UART_MspInit+0x88>)
 8003870:	f043 0301 	orr.w	r3, r3, #1
 8003874:	6313      	str	r3, [r2, #48]	; 0x30
 8003876:	4b0e      	ldr	r3, [pc, #56]	; (80038b0 <HAL_UART_MspInit+0x88>)
 8003878:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800387a:	f003 0301 	and.w	r3, r3, #1
 800387e:	60fb      	str	r3, [r7, #12]
 8003880:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8003882:	230c      	movs	r3, #12
 8003884:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003886:	2302      	movs	r3, #2
 8003888:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800388a:	2300      	movs	r3, #0
 800388c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800388e:	2303      	movs	r3, #3
 8003890:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003892:	2307      	movs	r3, #7
 8003894:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003896:	f107 0314 	add.w	r3, r7, #20
 800389a:	4619      	mov	r1, r3
 800389c:	4805      	ldr	r0, [pc, #20]	; (80038b4 <HAL_UART_MspInit+0x8c>)
 800389e:	f001 f973 	bl	8004b88 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80038a2:	bf00      	nop
 80038a4:	3728      	adds	r7, #40	; 0x28
 80038a6:	46bd      	mov	sp, r7
 80038a8:	bd80      	pop	{r7, pc}
 80038aa:	bf00      	nop
 80038ac:	40004400 	.word	0x40004400
 80038b0:	40023800 	.word	0x40023800
 80038b4:	40020000 	.word	0x40020000

080038b8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80038b8:	b480      	push	{r7}
 80038ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80038bc:	e7fe      	b.n	80038bc <NMI_Handler+0x4>

080038be <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80038be:	b480      	push	{r7}
 80038c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80038c2:	e7fe      	b.n	80038c2 <HardFault_Handler+0x4>

080038c4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80038c4:	b480      	push	{r7}
 80038c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80038c8:	e7fe      	b.n	80038c8 <MemManage_Handler+0x4>

080038ca <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80038ca:	b480      	push	{r7}
 80038cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80038ce:	e7fe      	b.n	80038ce <BusFault_Handler+0x4>

080038d0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80038d0:	b480      	push	{r7}
 80038d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80038d4:	e7fe      	b.n	80038d4 <UsageFault_Handler+0x4>

080038d6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80038d6:	b480      	push	{r7}
 80038d8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80038da:	bf00      	nop
 80038dc:	46bd      	mov	sp, r7
 80038de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038e2:	4770      	bx	lr

080038e4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80038e4:	b480      	push	{r7}
 80038e6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80038e8:	bf00      	nop
 80038ea:	46bd      	mov	sp, r7
 80038ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038f0:	4770      	bx	lr

080038f2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80038f2:	b480      	push	{r7}
 80038f4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80038f6:	bf00      	nop
 80038f8:	46bd      	mov	sp, r7
 80038fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038fe:	4770      	bx	lr

08003900 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003900:	b580      	push	{r7, lr}
 8003902:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003904:	f000 fb8e 	bl	8004024 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003908:	bf00      	nop
 800390a:	bd80      	pop	{r7, pc}

0800390c <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC_IRQHandler(void)
{
 800390c:	b580      	push	{r7, lr}
 800390e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8003910:	4802      	ldr	r0, [pc, #8]	; (800391c <ADC_IRQHandler+0x10>)
 8003912:	f000 fccd 	bl	80042b0 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8003916:	bf00      	nop
 8003918:	bd80      	pop	{r7, pc}
 800391a:	bf00      	nop
 800391c:	2000021c 	.word	0x2000021c

08003920 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8003920:	b580      	push	{r7, lr}
 8003922:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8003924:	4802      	ldr	r0, [pc, #8]	; (8003930 <TIM3_IRQHandler+0x10>)
 8003926:	f003 ff6c 	bl	8007802 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800392a:	bf00      	nop
 800392c:	bd80      	pop	{r7, pc}
 800392e:	bf00      	nop
 8003930:	20000340 	.word	0x20000340

08003934 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8003934:	b580      	push	{r7, lr}
 8003936:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8003938:	4802      	ldr	r0, [pc, #8]	; (8003944 <TIM4_IRQHandler+0x10>)
 800393a:	f003 ff62 	bl	8007802 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 800393e:	bf00      	nop
 8003940:	bd80      	pop	{r7, pc}
 8003942:	bf00      	nop
 8003944:	20000388 	.word	0x20000388

08003948 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003948:	b480      	push	{r7}
 800394a:	af00      	add	r7, sp, #0
	return 1;
 800394c:	2301      	movs	r3, #1
}
 800394e:	4618      	mov	r0, r3
 8003950:	46bd      	mov	sp, r7
 8003952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003956:	4770      	bx	lr

08003958 <_kill>:

int _kill(int pid, int sig)
{
 8003958:	b580      	push	{r7, lr}
 800395a:	b082      	sub	sp, #8
 800395c:	af00      	add	r7, sp, #0
 800395e:	6078      	str	r0, [r7, #4]
 8003960:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8003962:	f008 f957 	bl	800bc14 <__errno>
 8003966:	4603      	mov	r3, r0
 8003968:	2216      	movs	r2, #22
 800396a:	601a      	str	r2, [r3, #0]
	return -1;
 800396c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003970:	4618      	mov	r0, r3
 8003972:	3708      	adds	r7, #8
 8003974:	46bd      	mov	sp, r7
 8003976:	bd80      	pop	{r7, pc}

08003978 <_exit>:

void _exit (int status)
{
 8003978:	b580      	push	{r7, lr}
 800397a:	b082      	sub	sp, #8
 800397c:	af00      	add	r7, sp, #0
 800397e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8003980:	f04f 31ff 	mov.w	r1, #4294967295
 8003984:	6878      	ldr	r0, [r7, #4]
 8003986:	f7ff ffe7 	bl	8003958 <_kill>
	while (1) {}		/* Make sure we hang here */
 800398a:	e7fe      	b.n	800398a <_exit+0x12>

0800398c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800398c:	b580      	push	{r7, lr}
 800398e:	b086      	sub	sp, #24
 8003990:	af00      	add	r7, sp, #0
 8003992:	60f8      	str	r0, [r7, #12]
 8003994:	60b9      	str	r1, [r7, #8]
 8003996:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003998:	2300      	movs	r3, #0
 800399a:	617b      	str	r3, [r7, #20]
 800399c:	e00a      	b.n	80039b4 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800399e:	f3af 8000 	nop.w
 80039a2:	4601      	mov	r1, r0
 80039a4:	68bb      	ldr	r3, [r7, #8]
 80039a6:	1c5a      	adds	r2, r3, #1
 80039a8:	60ba      	str	r2, [r7, #8]
 80039aa:	b2ca      	uxtb	r2, r1
 80039ac:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80039ae:	697b      	ldr	r3, [r7, #20]
 80039b0:	3301      	adds	r3, #1
 80039b2:	617b      	str	r3, [r7, #20]
 80039b4:	697a      	ldr	r2, [r7, #20]
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	429a      	cmp	r2, r3
 80039ba:	dbf0      	blt.n	800399e <_read+0x12>
	}

return len;
 80039bc:	687b      	ldr	r3, [r7, #4]
}
 80039be:	4618      	mov	r0, r3
 80039c0:	3718      	adds	r7, #24
 80039c2:	46bd      	mov	sp, r7
 80039c4:	bd80      	pop	{r7, pc}

080039c6 <_close>:
	}
	return len;
}

int _close(int file)
{
 80039c6:	b480      	push	{r7}
 80039c8:	b083      	sub	sp, #12
 80039ca:	af00      	add	r7, sp, #0
 80039cc:	6078      	str	r0, [r7, #4]
	return -1;
 80039ce:	f04f 33ff 	mov.w	r3, #4294967295
}
 80039d2:	4618      	mov	r0, r3
 80039d4:	370c      	adds	r7, #12
 80039d6:	46bd      	mov	sp, r7
 80039d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039dc:	4770      	bx	lr

080039de <_fstat>:


int _fstat(int file, struct stat *st)
{
 80039de:	b480      	push	{r7}
 80039e0:	b083      	sub	sp, #12
 80039e2:	af00      	add	r7, sp, #0
 80039e4:	6078      	str	r0, [r7, #4]
 80039e6:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80039e8:	683b      	ldr	r3, [r7, #0]
 80039ea:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80039ee:	605a      	str	r2, [r3, #4]
	return 0;
 80039f0:	2300      	movs	r3, #0
}
 80039f2:	4618      	mov	r0, r3
 80039f4:	370c      	adds	r7, #12
 80039f6:	46bd      	mov	sp, r7
 80039f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039fc:	4770      	bx	lr

080039fe <_isatty>:

int _isatty(int file)
{
 80039fe:	b480      	push	{r7}
 8003a00:	b083      	sub	sp, #12
 8003a02:	af00      	add	r7, sp, #0
 8003a04:	6078      	str	r0, [r7, #4]
	return 1;
 8003a06:	2301      	movs	r3, #1
}
 8003a08:	4618      	mov	r0, r3
 8003a0a:	370c      	adds	r7, #12
 8003a0c:	46bd      	mov	sp, r7
 8003a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a12:	4770      	bx	lr

08003a14 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003a14:	b480      	push	{r7}
 8003a16:	b085      	sub	sp, #20
 8003a18:	af00      	add	r7, sp, #0
 8003a1a:	60f8      	str	r0, [r7, #12]
 8003a1c:	60b9      	str	r1, [r7, #8]
 8003a1e:	607a      	str	r2, [r7, #4]
	return 0;
 8003a20:	2300      	movs	r3, #0
}
 8003a22:	4618      	mov	r0, r3
 8003a24:	3714      	adds	r7, #20
 8003a26:	46bd      	mov	sp, r7
 8003a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a2c:	4770      	bx	lr
	...

08003a30 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003a30:	b580      	push	{r7, lr}
 8003a32:	b086      	sub	sp, #24
 8003a34:	af00      	add	r7, sp, #0
 8003a36:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003a38:	4a14      	ldr	r2, [pc, #80]	; (8003a8c <_sbrk+0x5c>)
 8003a3a:	4b15      	ldr	r3, [pc, #84]	; (8003a90 <_sbrk+0x60>)
 8003a3c:	1ad3      	subs	r3, r2, r3
 8003a3e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003a40:	697b      	ldr	r3, [r7, #20]
 8003a42:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003a44:	4b13      	ldr	r3, [pc, #76]	; (8003a94 <_sbrk+0x64>)
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d102      	bne.n	8003a52 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003a4c:	4b11      	ldr	r3, [pc, #68]	; (8003a94 <_sbrk+0x64>)
 8003a4e:	4a12      	ldr	r2, [pc, #72]	; (8003a98 <_sbrk+0x68>)
 8003a50:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003a52:	4b10      	ldr	r3, [pc, #64]	; (8003a94 <_sbrk+0x64>)
 8003a54:	681a      	ldr	r2, [r3, #0]
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	4413      	add	r3, r2
 8003a5a:	693a      	ldr	r2, [r7, #16]
 8003a5c:	429a      	cmp	r2, r3
 8003a5e:	d207      	bcs.n	8003a70 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003a60:	f008 f8d8 	bl	800bc14 <__errno>
 8003a64:	4603      	mov	r3, r0
 8003a66:	220c      	movs	r2, #12
 8003a68:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003a6a:	f04f 33ff 	mov.w	r3, #4294967295
 8003a6e:	e009      	b.n	8003a84 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003a70:	4b08      	ldr	r3, [pc, #32]	; (8003a94 <_sbrk+0x64>)
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003a76:	4b07      	ldr	r3, [pc, #28]	; (8003a94 <_sbrk+0x64>)
 8003a78:	681a      	ldr	r2, [r3, #0]
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	4413      	add	r3, r2
 8003a7e:	4a05      	ldr	r2, [pc, #20]	; (8003a94 <_sbrk+0x64>)
 8003a80:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003a82:	68fb      	ldr	r3, [r7, #12]
}
 8003a84:	4618      	mov	r0, r3
 8003a86:	3718      	adds	r7, #24
 8003a88:	46bd      	mov	sp, r7
 8003a8a:	bd80      	pop	{r7, pc}
 8003a8c:	20010000 	.word	0x20010000
 8003a90:	00000400 	.word	0x00000400
 8003a94:	20006524 	.word	0x20006524
 8003a98:	200075b0 	.word	0x200075b0

08003a9c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003a9c:	b480      	push	{r7}
 8003a9e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003aa0:	4b06      	ldr	r3, [pc, #24]	; (8003abc <SystemInit+0x20>)
 8003aa2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003aa6:	4a05      	ldr	r2, [pc, #20]	; (8003abc <SystemInit+0x20>)
 8003aa8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003aac:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003ab0:	bf00      	nop
 8003ab2:	46bd      	mov	sp, r7
 8003ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ab8:	4770      	bx	lr
 8003aba:	bf00      	nop
 8003abc:	e000ed00 	.word	0xe000ed00

08003ac0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8003ac0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003af8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003ac4:	480d      	ldr	r0, [pc, #52]	; (8003afc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8003ac6:	490e      	ldr	r1, [pc, #56]	; (8003b00 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8003ac8:	4a0e      	ldr	r2, [pc, #56]	; (8003b04 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8003aca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003acc:	e002      	b.n	8003ad4 <LoopCopyDataInit>

08003ace <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003ace:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003ad0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003ad2:	3304      	adds	r3, #4

08003ad4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003ad4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003ad6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003ad8:	d3f9      	bcc.n	8003ace <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003ada:	4a0b      	ldr	r2, [pc, #44]	; (8003b08 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8003adc:	4c0b      	ldr	r4, [pc, #44]	; (8003b0c <LoopFillZerobss+0x26>)
  movs r3, #0
 8003ade:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003ae0:	e001      	b.n	8003ae6 <LoopFillZerobss>

08003ae2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003ae2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003ae4:	3204      	adds	r2, #4

08003ae6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003ae6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003ae8:	d3fb      	bcc.n	8003ae2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8003aea:	f7ff ffd7 	bl	8003a9c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003aee:	f008 f897 	bl	800bc20 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003af2:	f7ff fa07 	bl	8002f04 <main>
  bx  lr    
 8003af6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8003af8:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8003afc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003b00:	20000200 	.word	0x20000200
  ldr r2, =_sidata
 8003b04:	0800ed74 	.word	0x0800ed74
  ldr r2, =_sbss
 8003b08:	20000200 	.word	0x20000200
  ldr r4, =_ebss
 8003b0c:	200075ac 	.word	0x200075ac

08003b10 <DMA1_Stream0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003b10:	e7fe      	b.n	8003b10 <DMA1_Stream0_IRQHandler>
	...

08003b14 <NRF_Send_reg>:

	return receive;
}

void NRF_Send_reg(uint8_t reg, uint8_t data)
{
 8003b14:	b580      	push	{r7, lr}
 8003b16:	b086      	sub	sp, #24
 8003b18:	af02      	add	r7, sp, #8
 8003b1a:	4603      	mov	r3, r0
 8003b1c:	460a      	mov	r2, r1
 8003b1e:	71fb      	strb	r3, [r7, #7]
 8003b20:	4613      	mov	r3, r2
 8003b22:	71bb      	strb	r3, [r7, #6]
	 * На вход надо подать адрес регистра и потом значение для записи
	 * Данная функция ничего не возвращает
	 */

	//reg &= 0b00111111;
	reg |= 0x20;
 8003b24:	79fb      	ldrb	r3, [r7, #7]
 8003b26:	f043 0320 	orr.w	r3, r3, #32
 8003b2a:	b2db      	uxtb	r3, r3
 8003b2c:	71fb      	strb	r3, [r7, #7]
	uint8_t buf;

	NRF_cs(0);
 8003b2e:	2000      	movs	r0, #0
 8003b30:	f000 f9e6 	bl	8003f00 <NRF_cs>
	HAL_SPI_TransmitReceive(&hspi2, &reg, &buf, 1, 500);
 8003b34:	f107 020f 	add.w	r2, r7, #15
 8003b38:	1df9      	adds	r1, r7, #7
 8003b3a:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8003b3e:	9300      	str	r3, [sp, #0]
 8003b40:	2301      	movs	r3, #1
 8003b42:	480a      	ldr	r0, [pc, #40]	; (8003b6c <NRF_Send_reg+0x58>)
 8003b44:	f003 faa9 	bl	800709a <HAL_SPI_TransmitReceive>
	HAL_SPI_TransmitReceive(&hspi2, &data, &buf, 1, 500);
 8003b48:	f107 020f 	add.w	r2, r7, #15
 8003b4c:	1db9      	adds	r1, r7, #6
 8003b4e:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8003b52:	9300      	str	r3, [sp, #0]
 8003b54:	2301      	movs	r3, #1
 8003b56:	4805      	ldr	r0, [pc, #20]	; (8003b6c <NRF_Send_reg+0x58>)
 8003b58:	f003 fa9f 	bl	800709a <HAL_SPI_TransmitReceive>
	NRF_cs(1);
 8003b5c:	2001      	movs	r0, #1
 8003b5e:	f000 f9cf 	bl	8003f00 <NRF_cs>

}
 8003b62:	bf00      	nop
 8003b64:	3710      	adds	r7, #16
 8003b66:	46bd      	mov	sp, r7
 8003b68:	bd80      	pop	{r7, pc}
 8003b6a:	bf00      	nop
 8003b6c:	200002e8 	.word	0x200002e8

08003b70 <NRF_Send_data>:

void NRF_Send_data(uint8_t* data, int n)
{
 8003b70:	b580      	push	{r7, lr}
 8003b72:	b086      	sub	sp, #24
 8003b74:	af00      	add	r7, sp, #0
 8003b76:	6078      	str	r0, [r7, #4]
 8003b78:	6039      	str	r1, [r7, #0]
	/*
	 * Данная функция нужна для отправки данных в буфер отправки
	 * На вход подаётся адрес масива с данными и количество элементов в массиве
	 */
	uint8_t transmit[1];
	transmit[0]=W_TX_PAYLOAD;
 8003b7a:	23a0      	movs	r3, #160	; 0xa0
 8003b7c:	733b      	strb	r3, [r7, #12]
	NRF_cs(0);
 8003b7e:	2000      	movs	r0, #0
 8003b80:	f000 f9be 	bl	8003f00 <NRF_cs>
	HAL_SPI_Transmit(&hspi2, (uint8_t*)transmit, 1, 5000);
 8003b84:	f107 010c 	add.w	r1, r7, #12
 8003b88:	f241 3388 	movw	r3, #5000	; 0x1388
 8003b8c:	2201      	movs	r2, #1
 8003b8e:	481a      	ldr	r0, [pc, #104]	; (8003bf8 <NRF_Send_data+0x88>)
 8003b90:	f003 f836 	bl	8006c00 <HAL_SPI_Transmit>
	for(int i=0;i<n;i++)
 8003b94:	2300      	movs	r3, #0
 8003b96:	617b      	str	r3, [r7, #20]
 8003b98:	e00f      	b.n	8003bba <NRF_Send_data+0x4a>
	{
		transmit[0]=data[i];
 8003b9a:	697b      	ldr	r3, [r7, #20]
 8003b9c:	687a      	ldr	r2, [r7, #4]
 8003b9e:	4413      	add	r3, r2
 8003ba0:	781b      	ldrb	r3, [r3, #0]
 8003ba2:	733b      	strb	r3, [r7, #12]
		HAL_SPI_Transmit(&hspi2, (uint8_t*)transmit, 1, 5000);
 8003ba4:	f107 010c 	add.w	r1, r7, #12
 8003ba8:	f241 3388 	movw	r3, #5000	; 0x1388
 8003bac:	2201      	movs	r2, #1
 8003bae:	4812      	ldr	r0, [pc, #72]	; (8003bf8 <NRF_Send_data+0x88>)
 8003bb0:	f003 f826 	bl	8006c00 <HAL_SPI_Transmit>
	for(int i=0;i<n;i++)
 8003bb4:	697b      	ldr	r3, [r7, #20]
 8003bb6:	3301      	adds	r3, #1
 8003bb8:	617b      	str	r3, [r7, #20]
 8003bba:	697a      	ldr	r2, [r7, #20]
 8003bbc:	683b      	ldr	r3, [r7, #0]
 8003bbe:	429a      	cmp	r2, r3
 8003bc0:	dbeb      	blt.n	8003b9a <NRF_Send_data+0x2a>
	}
	NRF_cs(1);
 8003bc2:	2001      	movs	r0, #1
 8003bc4:	f000 f99c 	bl	8003f00 <NRF_cs>
	NRF_ce(0);
 8003bc8:	2000      	movs	r0, #0
 8003bca:	f000 f9b9 	bl	8003f40 <NRF_ce>
	for(int i=0;i<10;i++)
 8003bce:	2300      	movs	r3, #0
 8003bd0:	613b      	str	r3, [r7, #16]
 8003bd2:	e007      	b.n	8003be4 <NRF_Send_data+0x74>
	{
		HAL_GPIO_WritePin(RF_SRE_GPIO_Port, RF_SRE_Pin, 0);
 8003bd4:	2200      	movs	r2, #0
 8003bd6:	2120      	movs	r1, #32
 8003bd8:	4808      	ldr	r0, [pc, #32]	; (8003bfc <NRF_Send_data+0x8c>)
 8003bda:	f001 f971 	bl	8004ec0 <HAL_GPIO_WritePin>
	for(int i=0;i<10;i++)
 8003bde:	693b      	ldr	r3, [r7, #16]
 8003be0:	3301      	adds	r3, #1
 8003be2:	613b      	str	r3, [r7, #16]
 8003be4:	693b      	ldr	r3, [r7, #16]
 8003be6:	2b09      	cmp	r3, #9
 8003be8:	ddf4      	ble.n	8003bd4 <NRF_Send_data+0x64>
	}
	NRF_ce(1);
 8003bea:	2001      	movs	r0, #1
 8003bec:	f000 f9a8 	bl	8003f40 <NRF_ce>
}
 8003bf0:	bf00      	nop
 8003bf2:	3718      	adds	r7, #24
 8003bf4:	46bd      	mov	sp, r7
 8003bf6:	bd80      	pop	{r7, pc}
 8003bf8:	200002e8 	.word	0x200002e8
 8003bfc:	40020800 	.word	0x40020800

08003c00 <NRF_Set_RX_addres>:

void NRF_Set_RX_addres(uint8_t addr)
{
 8003c00:	b580      	push	{r7, lr}
 8003c02:	b084      	sub	sp, #16
 8003c04:	af00      	add	r7, sp, #0
 8003c06:	4603      	mov	r3, r0
 8003c08:	71fb      	strb	r3, [r7, #7]
	/*
	 * Данная функция нужна для установки RX адреса NRF
	 * На вход подаётся адрес трубы, в которую будем записывать адрес
	 */
	uint8_t transmit[6]={addr|W_REGISTER,rx_addr[0],rx_addr[1],rx_addr[2],rx_addr[3],rx_addr[4]};
 8003c0a:	79fb      	ldrb	r3, [r7, #7]
 8003c0c:	f043 0320 	orr.w	r3, r3, #32
 8003c10:	b2db      	uxtb	r3, r3
 8003c12:	723b      	strb	r3, [r7, #8]
 8003c14:	4b10      	ldr	r3, [pc, #64]	; (8003c58 <NRF_Set_RX_addres+0x58>)
 8003c16:	781b      	ldrb	r3, [r3, #0]
 8003c18:	727b      	strb	r3, [r7, #9]
 8003c1a:	4b0f      	ldr	r3, [pc, #60]	; (8003c58 <NRF_Set_RX_addres+0x58>)
 8003c1c:	785b      	ldrb	r3, [r3, #1]
 8003c1e:	72bb      	strb	r3, [r7, #10]
 8003c20:	4b0d      	ldr	r3, [pc, #52]	; (8003c58 <NRF_Set_RX_addres+0x58>)
 8003c22:	789b      	ldrb	r3, [r3, #2]
 8003c24:	72fb      	strb	r3, [r7, #11]
 8003c26:	4b0c      	ldr	r3, [pc, #48]	; (8003c58 <NRF_Set_RX_addres+0x58>)
 8003c28:	78db      	ldrb	r3, [r3, #3]
 8003c2a:	733b      	strb	r3, [r7, #12]
 8003c2c:	4b0a      	ldr	r3, [pc, #40]	; (8003c58 <NRF_Set_RX_addres+0x58>)
 8003c2e:	791b      	ldrb	r3, [r3, #4]
 8003c30:	737b      	strb	r3, [r7, #13]
	NRF_cs(0);
 8003c32:	2000      	movs	r0, #0
 8003c34:	f000 f964 	bl	8003f00 <NRF_cs>
	HAL_SPI_Transmit(&hspi2, (uint8_t*)transmit, 6, 5000);
 8003c38:	f107 0108 	add.w	r1, r7, #8
 8003c3c:	f241 3388 	movw	r3, #5000	; 0x1388
 8003c40:	2206      	movs	r2, #6
 8003c42:	4806      	ldr	r0, [pc, #24]	; (8003c5c <NRF_Set_RX_addres+0x5c>)
 8003c44:	f002 ffdc 	bl	8006c00 <HAL_SPI_Transmit>
	NRF_cs(1);
 8003c48:	2001      	movs	r0, #1
 8003c4a:	f000 f959 	bl	8003f00 <NRF_cs>
}
 8003c4e:	bf00      	nop
 8003c50:	3710      	adds	r7, #16
 8003c52:	46bd      	mov	sp, r7
 8003c54:	bd80      	pop	{r7, pc}
 8003c56:	bf00      	nop
 8003c58:	20000014 	.word	0x20000014
 8003c5c:	200002e8 	.word	0x200002e8

08003c60 <NRF_Set_TX_addres>:

void NRF_Set_TX_addres(uint8_t addr)
{
 8003c60:	b580      	push	{r7, lr}
 8003c62:	b084      	sub	sp, #16
 8003c64:	af00      	add	r7, sp, #0
 8003c66:	4603      	mov	r3, r0
 8003c68:	71fb      	strb	r3, [r7, #7]
	/*
	 * Данная функция нужна для установки TX адреса NRF
	 * На вход подаётся адрес трубы, в которую будем записывать адрес
	 */
	uint8_t transmit[6]={addr|W_REGISTER,tx_addr[0],tx_addr[1],tx_addr[2],tx_addr[3],tx_addr[4]};
 8003c6a:	79fb      	ldrb	r3, [r7, #7]
 8003c6c:	f043 0320 	orr.w	r3, r3, #32
 8003c70:	b2db      	uxtb	r3, r3
 8003c72:	723b      	strb	r3, [r7, #8]
 8003c74:	4b10      	ldr	r3, [pc, #64]	; (8003cb8 <NRF_Set_TX_addres+0x58>)
 8003c76:	781b      	ldrb	r3, [r3, #0]
 8003c78:	727b      	strb	r3, [r7, #9]
 8003c7a:	4b0f      	ldr	r3, [pc, #60]	; (8003cb8 <NRF_Set_TX_addres+0x58>)
 8003c7c:	785b      	ldrb	r3, [r3, #1]
 8003c7e:	72bb      	strb	r3, [r7, #10]
 8003c80:	4b0d      	ldr	r3, [pc, #52]	; (8003cb8 <NRF_Set_TX_addres+0x58>)
 8003c82:	789b      	ldrb	r3, [r3, #2]
 8003c84:	72fb      	strb	r3, [r7, #11]
 8003c86:	4b0c      	ldr	r3, [pc, #48]	; (8003cb8 <NRF_Set_TX_addres+0x58>)
 8003c88:	78db      	ldrb	r3, [r3, #3]
 8003c8a:	733b      	strb	r3, [r7, #12]
 8003c8c:	4b0a      	ldr	r3, [pc, #40]	; (8003cb8 <NRF_Set_TX_addres+0x58>)
 8003c8e:	791b      	ldrb	r3, [r3, #4]
 8003c90:	737b      	strb	r3, [r7, #13]
	NRF_cs(0);
 8003c92:	2000      	movs	r0, #0
 8003c94:	f000 f934 	bl	8003f00 <NRF_cs>
	HAL_SPI_Transmit(&hspi2, (uint8_t*)transmit, 6, 5000);
 8003c98:	f107 0108 	add.w	r1, r7, #8
 8003c9c:	f241 3388 	movw	r3, #5000	; 0x1388
 8003ca0:	2206      	movs	r2, #6
 8003ca2:	4806      	ldr	r0, [pc, #24]	; (8003cbc <NRF_Set_TX_addres+0x5c>)
 8003ca4:	f002 ffac 	bl	8006c00 <HAL_SPI_Transmit>
	NRF_cs(1);
 8003ca8:	2001      	movs	r0, #1
 8003caa:	f000 f929 	bl	8003f00 <NRF_cs>
}
 8003cae:	bf00      	nop
 8003cb0:	3710      	adds	r7, #16
 8003cb2:	46bd      	mov	sp, r7
 8003cb4:	bd80      	pop	{r7, pc}
 8003cb6:	bf00      	nop
 8003cb8:	2000001c 	.word	0x2000001c
 8003cbc:	200002e8 	.word	0x200002e8

08003cc0 <NRF_Set_TX>:
	HAL_Delay(135);  //делаем обязательную паузу для настройки модуля на прием

}

void NRF_Set_TX()  //переводим модуль в режим standby-2. В этом режиме мы можем постоянно писать в него данные для отправки
{
 8003cc0:	b580      	push	{r7, lr}
 8003cc2:	af00      	add	r7, sp, #0
	NRF_ce(0);  //опускаем ножку CE
 8003cc4:	2000      	movs	r0, #0
 8003cc6:	f000 f93b 	bl	8003f40 <NRF_ce>

	NRF_Set_TX_addres(TX_ADDR);  //настраиваем адрес удаленного датчика
 8003cca:	2010      	movs	r0, #16
 8003ccc:	f7ff ffc8 	bl	8003c60 <NRF_Set_TX_addres>
	NRF_Set_RX_addres(RX_ADDR_P0);  //настраиваем наш адрес
 8003cd0:	200a      	movs	r0, #10
 8003cd2:	f7ff ff95 	bl	8003c00 <NRF_Set_RX_addres>

	NRF_Send_reg(CONFIG, 0b01001110);//((1<<MASK_RX_DR)|(0<<MASK_TX_DS)|(0<<MASK_MAX_RT)|(1<<EN_CRC)|(1<<CRCO)|(1<<PWR_UP)|(0<<PRIM_RX)));
 8003cd6:	214e      	movs	r1, #78	; 0x4e
 8003cd8:	2000      	movs	r0, #0
 8003cda:	f7ff ff1b 	bl	8003b14 <NRF_Send_reg>
	EN_CRC - включаем рассчет контрольной суммы;
	CRCO - выставляем контрольную сумму в 2 байта (если поставить 0, то будет 1 байт);
	PWR_UP - включаем модуль на работу, переходим в Standby-1;
	PRIM_RX - говорим nrf, что он сейчас работает на передачу. Он не переходит в TX Mode, пока мы не поднимем ножку CE;
	*/
	NRF_ce(1);  //подтягиваем ножку CE к питанию, для того чтобы модуль перешел в Standby-2 и не отпускаем. Если надо вернуться в Standby-1, то просто ее подтягиваем к земле
 8003cde:	2001      	movs	r0, #1
 8003ce0:	f000 f92e 	bl	8003f40 <NRF_ce>

}
 8003ce4:	bf00      	nop
 8003ce6:	bd80      	pop	{r7, pc}

08003ce8 <NRF_Init>:

void NRF_Init ()  //инициализация NRF, установка регистров
{
 8003ce8:	b580      	push	{r7, lr}
 8003cea:	af00      	add	r7, sp, #0

	NRF_Send_reg(RF_CH, chanel);  //настраиваем канал, на котором будут передаваться данные
 8003cec:	216f      	movs	r1, #111	; 0x6f
 8003cee:	2005      	movs	r0, #5
 8003cf0:	f7ff ff10 	bl	8003b14 <NRF_Send_reg>
	NRF_Send_reg(EN_AA, pipes);  //настраиваем какие трубы будут работать с автоподтверждением
 8003cf4:	2100      	movs	r1, #0
 8003cf6:	2001      	movs	r0, #1
 8003cf8:	f7ff ff0c 	bl	8003b14 <NRF_Send_reg>
	NRF_Send_reg(EN_RXADDR, RXpipes);  //настраиваем какие трубы будут принимать данные, если nrf будет работать на прием
 8003cfc:	2103      	movs	r1, #3
 8003cfe:	2002      	movs	r0, #2
 8003d00:	f7ff ff08 	bl	8003b14 <NRF_Send_reg>
	NRF_Send_reg(SETUP_AW, 0b00000011); //задаем длину поля для адреса
 8003d04:	2103      	movs	r1, #3
 8003d06:	2003      	movs	r0, #3
 8003d08:	f7ff ff04 	bl	8003b14 <NRF_Send_reg>
	NRF_Send_reg(SETUP_RETR, retr);  //настраиваем автоповтор отправки
 8003d0c:	2100      	movs	r1, #0
 8003d0e:	2004      	movs	r0, #4
 8003d10:	f7ff ff00 	bl	8003b14 <NRF_Send_reg>
	NRF_Send_reg(RF_SETUP, setup);  //настраиваем скорость и мощность
 8003d14:	2126      	movs	r1, #38	; 0x26
 8003d16:	2006      	movs	r0, #6
 8003d18:	f7ff fefc 	bl	8003b14 <NRF_Send_reg>
	NRF_Send_reg(FEATURE, 0b00000001);  //разрешаем команду W_TX_PAYLOAD_NOACK
 8003d1c:	2101      	movs	r1, #1
 8003d1e:	201d      	movs	r0, #29
 8003d20:	f7ff fef8 	bl	8003b14 <NRF_Send_reg>
	NRF_Send_reg(RX_PW_P0, data_length);  //устанавливаем длину пакета данных
 8003d24:	211d      	movs	r1, #29
 8003d26:	2011      	movs	r0, #17
 8003d28:	f7ff fef4 	bl	8003b14 <NRF_Send_reg>

}
 8003d2c:	bf00      	nop
 8003d2e:	bd80      	pop	{r7, pc}

08003d30 <ShiftRegs_init>:
	 * 5 и 6 биты отвечают за пины RF2_1 и RF2_2 (они не используются нами)
	 * 7-ой бит отвечает за светодиод
	 */

void ShiftRegs_init(void)
{
 8003d30:	b580      	push	{r7, lr}
 8003d32:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(RF_SRE_GPIO_Port, RF_SRE_Pin, 0);  //устанавливаем логический ноль на 13-ых ножках сдвиговых регистров тем самым включаем их выходы
 8003d34:	2200      	movs	r2, #0
 8003d36:	2120      	movs	r1, #32
 8003d38:	4807      	ldr	r0, [pc, #28]	; (8003d58 <ShiftRegs_init+0x28>)
 8003d3a:	f001 f8c1 	bl	8004ec0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SR0E_GPIO_Port, SR0E_Pin, 0);  //устанавливаем логический ноль на 13-ых ножках сдвиговых регистров тем самым включаем их выходы
 8003d3e:	2200      	movs	r2, #0
 8003d40:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003d44:	4804      	ldr	r0, [pc, #16]	; (8003d58 <ShiftRegs_init+0x28>)
 8003d46:	f001 f8bb 	bl	8004ec0 <HAL_GPIO_WritePin>
	ShiftRegs();
 8003d4a:	f000 f807 	bl	8003d5c <ShiftRegs>
	RF_ShiftRegs();
 8003d4e:	f000 f8ab 	bl	8003ea8 <RF_ShiftRegs>
}
 8003d52:	bf00      	nop
 8003d54:	bd80      	pop	{r7, pc}
 8003d56:	bf00      	nop
 8003d58:	40020800 	.word	0x40020800

08003d5c <ShiftRegs>:

void ShiftRegs(void)  //функция для записи в сдвиговые регистры
{
 8003d5c:	b580      	push	{r7, lr}
 8003d5e:	b082      	sub	sp, #8
 8003d60:	af00      	add	r7, sp, #0

	uint8_t buf = 0;
 8003d62:	2300      	movs	r3, #0
 8003d64:	71fb      	strb	r3, [r7, #7]

	HAL_GPIO_WritePin(SRL_GPIO_Port, SRL_Pin, 0);  //отключаем защёлку
 8003d66:	2200      	movs	r2, #0
 8003d68:	2102      	movs	r1, #2
 8003d6a:	481c      	ldr	r0, [pc, #112]	; (8003ddc <ShiftRegs+0x80>)
 8003d6c:	f001 f8a8 	bl	8004ec0 <HAL_GPIO_WritePin>

	buf = shift_regs_data[1];
 8003d70:	4b1b      	ldr	r3, [pc, #108]	; (8003de0 <ShiftRegs+0x84>)
 8003d72:	785b      	ldrb	r3, [r3, #1]
 8003d74:	71fb      	strb	r3, [r7, #7]
	HAL_SPI_Transmit(&hspi2, &buf, 1, 5000);  //отправляем данные для сдвигового регистра со светодиодами
 8003d76:	1df9      	adds	r1, r7, #7
 8003d78:	f241 3388 	movw	r3, #5000	; 0x1388
 8003d7c:	2201      	movs	r2, #1
 8003d7e:	4819      	ldr	r0, [pc, #100]	; (8003de4 <ShiftRegs+0x88>)
 8003d80:	f002 ff3e 	bl	8006c00 <HAL_SPI_Transmit>
	//передёргиваем 13-ую ножку
	HAL_GPIO_WritePin(SR0E_GPIO_Port, SR0E_Pin, 1);
 8003d84:	2201      	movs	r2, #1
 8003d86:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003d8a:	4814      	ldr	r0, [pc, #80]	; (8003ddc <ShiftRegs+0x80>)
 8003d8c:	f001 f898 	bl	8004ec0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SR0E_GPIO_Port, SR0E_Pin, 0);
 8003d90:	2200      	movs	r2, #0
 8003d92:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003d96:	4811      	ldr	r0, [pc, #68]	; (8003ddc <ShiftRegs+0x80>)
 8003d98:	f001 f892 	bl	8004ec0 <HAL_GPIO_WritePin>

	buf = shift_regs_data[0];
 8003d9c:	4b10      	ldr	r3, [pc, #64]	; (8003de0 <ShiftRegs+0x84>)
 8003d9e:	781b      	ldrb	r3, [r3, #0]
 8003da0:	71fb      	strb	r3, [r7, #7]
	HAL_SPI_Transmit(&hspi2, &buf, 1, 5000);  //отправляем данные для сдвигового регистра с датчиками
 8003da2:	1df9      	adds	r1, r7, #7
 8003da4:	f241 3388 	movw	r3, #5000	; 0x1388
 8003da8:	2201      	movs	r2, #1
 8003daa:	480e      	ldr	r0, [pc, #56]	; (8003de4 <ShiftRegs+0x88>)
 8003dac:	f002 ff28 	bl	8006c00 <HAL_SPI_Transmit>
	//передёргиваем 13-ую ножку
	HAL_GPIO_WritePin(SR0E_GPIO_Port, SR0E_Pin, 1);
 8003db0:	2201      	movs	r2, #1
 8003db2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003db6:	4809      	ldr	r0, [pc, #36]	; (8003ddc <ShiftRegs+0x80>)
 8003db8:	f001 f882 	bl	8004ec0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SR0E_GPIO_Port, SR0E_Pin, 0);
 8003dbc:	2200      	movs	r2, #0
 8003dbe:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003dc2:	4806      	ldr	r0, [pc, #24]	; (8003ddc <ShiftRegs+0x80>)
 8003dc4:	f001 f87c 	bl	8004ec0 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(SRL_GPIO_Port, SRL_Pin, 1);  //включаем защёлку
 8003dc8:	2201      	movs	r2, #1
 8003dca:	2102      	movs	r1, #2
 8003dcc:	4803      	ldr	r0, [pc, #12]	; (8003ddc <ShiftRegs+0x80>)
 8003dce:	f001 f877 	bl	8004ec0 <HAL_GPIO_WritePin>

}
 8003dd2:	bf00      	nop
 8003dd4:	3708      	adds	r7, #8
 8003dd6:	46bd      	mov	sp, r7
 8003dd8:	bd80      	pop	{r7, pc}
 8003dda:	bf00      	nop
 8003ddc:	40020800 	.word	0x40020800
 8003de0:	20000024 	.word	0x20000024
 8003de4:	200002e8 	.word	0x200002e8

08003de8 <bmp_cs>:
		shift_regs_data[1] |= 1<<4;
	ShiftRegs();
}

void bmp_cs(uint8_t flag)  //управление ножкой CS датчика BMP280
{
 8003de8:	b580      	push	{r7, lr}
 8003dea:	b082      	sub	sp, #8
 8003dec:	af00      	add	r7, sp, #0
 8003dee:	4603      	mov	r3, r0
 8003df0:	71fb      	strb	r3, [r7, #7]
	/*
	 * Данная функция нужна для управления ножкой CS датчика BMP280
	 * Если на вход подаётся 0, то на ножке появляется ноль, если другое число, то единица
	 */

	if(flag==0)
 8003df2:	79fb      	ldrb	r3, [r7, #7]
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d107      	bne.n	8003e08 <bmp_cs+0x20>
		shift_regs_data[0] &=~(1<<2);
 8003df8:	4b0a      	ldr	r3, [pc, #40]	; (8003e24 <bmp_cs+0x3c>)
 8003dfa:	781b      	ldrb	r3, [r3, #0]
 8003dfc:	f023 0304 	bic.w	r3, r3, #4
 8003e00:	b2da      	uxtb	r2, r3
 8003e02:	4b08      	ldr	r3, [pc, #32]	; (8003e24 <bmp_cs+0x3c>)
 8003e04:	701a      	strb	r2, [r3, #0]
 8003e06:	e006      	b.n	8003e16 <bmp_cs+0x2e>
	else
		shift_regs_data[0] |= 1<<2;
 8003e08:	4b06      	ldr	r3, [pc, #24]	; (8003e24 <bmp_cs+0x3c>)
 8003e0a:	781b      	ldrb	r3, [r3, #0]
 8003e0c:	f043 0304 	orr.w	r3, r3, #4
 8003e10:	b2da      	uxtb	r2, r3
 8003e12:	4b04      	ldr	r3, [pc, #16]	; (8003e24 <bmp_cs+0x3c>)
 8003e14:	701a      	strb	r2, [r3, #0]
	ShiftRegs();
 8003e16:	f7ff ffa1 	bl	8003d5c <ShiftRegs>
}
 8003e1a:	bf00      	nop
 8003e1c:	3708      	adds	r7, #8
 8003e1e:	46bd      	mov	sp, r7
 8003e20:	bd80      	pop	{r7, pc}
 8003e22:	bf00      	nop
 8003e24:	20000024 	.word	0x20000024

08003e28 <lis3mdl_cs>:

void lis3mdl_cs(uint8_t flag)  //управление ножкой CS датчика LIS3MDL
{
 8003e28:	b580      	push	{r7, lr}
 8003e2a:	b082      	sub	sp, #8
 8003e2c:	af00      	add	r7, sp, #0
 8003e2e:	4603      	mov	r3, r0
 8003e30:	71fb      	strb	r3, [r7, #7]
	/*
	 * Данная функция нужна для управления ножкой CS датчика LIS3MDL
	 * Если на вход подаётся 0, то на ножке появляется ноль, если другое число, то единица
	 */

	if(flag==0)
 8003e32:	79fb      	ldrb	r3, [r7, #7]
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d107      	bne.n	8003e48 <lis3mdl_cs+0x20>
		shift_regs_data[0] &=~(1<<3);
 8003e38:	4b0a      	ldr	r3, [pc, #40]	; (8003e64 <lis3mdl_cs+0x3c>)
 8003e3a:	781b      	ldrb	r3, [r3, #0]
 8003e3c:	f023 0308 	bic.w	r3, r3, #8
 8003e40:	b2da      	uxtb	r2, r3
 8003e42:	4b08      	ldr	r3, [pc, #32]	; (8003e64 <lis3mdl_cs+0x3c>)
 8003e44:	701a      	strb	r2, [r3, #0]
 8003e46:	e006      	b.n	8003e56 <lis3mdl_cs+0x2e>
	else
		shift_regs_data[0] |= 1<<3;
 8003e48:	4b06      	ldr	r3, [pc, #24]	; (8003e64 <lis3mdl_cs+0x3c>)
 8003e4a:	781b      	ldrb	r3, [r3, #0]
 8003e4c:	f043 0308 	orr.w	r3, r3, #8
 8003e50:	b2da      	uxtb	r2, r3
 8003e52:	4b04      	ldr	r3, [pc, #16]	; (8003e64 <lis3mdl_cs+0x3c>)
 8003e54:	701a      	strb	r2, [r3, #0]
	ShiftRegs();
 8003e56:	f7ff ff81 	bl	8003d5c <ShiftRegs>
}
 8003e5a:	bf00      	nop
 8003e5c:	3708      	adds	r7, #8
 8003e5e:	46bd      	mov	sp, r7
 8003e60:	bd80      	pop	{r7, pc}
 8003e62:	bf00      	nop
 8003e64:	20000024 	.word	0x20000024

08003e68 <lsm6ds_cs>:

void lsm6ds_cs(uint8_t flag)  //управление ножкой CS датчика lsm6ds
{
 8003e68:	b580      	push	{r7, lr}
 8003e6a:	b082      	sub	sp, #8
 8003e6c:	af00      	add	r7, sp, #0
 8003e6e:	4603      	mov	r3, r0
 8003e70:	71fb      	strb	r3, [r7, #7]
	/*
	 * Данная функция нужна для управления ножкой CS датчика lsm6ds
	 * Если на вход подаётся 0, то на ножке появляется ноль, если другое число, то единица
	 */

	if(flag==0)
 8003e72:	79fb      	ldrb	r3, [r7, #7]
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d107      	bne.n	8003e88 <lsm6ds_cs+0x20>
		shift_regs_data[0] &=~(1<<4);
 8003e78:	4b0a      	ldr	r3, [pc, #40]	; (8003ea4 <lsm6ds_cs+0x3c>)
 8003e7a:	781b      	ldrb	r3, [r3, #0]
 8003e7c:	f023 0310 	bic.w	r3, r3, #16
 8003e80:	b2da      	uxtb	r2, r3
 8003e82:	4b08      	ldr	r3, [pc, #32]	; (8003ea4 <lsm6ds_cs+0x3c>)
 8003e84:	701a      	strb	r2, [r3, #0]
 8003e86:	e006      	b.n	8003e96 <lsm6ds_cs+0x2e>
	else
		shift_regs_data[0] |= 1<<4;
 8003e88:	4b06      	ldr	r3, [pc, #24]	; (8003ea4 <lsm6ds_cs+0x3c>)
 8003e8a:	781b      	ldrb	r3, [r3, #0]
 8003e8c:	f043 0310 	orr.w	r3, r3, #16
 8003e90:	b2da      	uxtb	r2, r3
 8003e92:	4b04      	ldr	r3, [pc, #16]	; (8003ea4 <lsm6ds_cs+0x3c>)
 8003e94:	701a      	strb	r2, [r3, #0]
	ShiftRegs();
 8003e96:	f7ff ff61 	bl	8003d5c <ShiftRegs>
}
 8003e9a:	bf00      	nop
 8003e9c:	3708      	adds	r7, #8
 8003e9e:	46bd      	mov	sp, r7
 8003ea0:	bd80      	pop	{r7, pc}
 8003ea2:	bf00      	nop
 8003ea4:	20000024 	.word	0x20000024

08003ea8 <RF_ShiftRegs>:



void RF_ShiftRegs(void)  //функция для записи в сдвиговые регистры платы RF
{
 8003ea8:	b580      	push	{r7, lr}
 8003eaa:	b082      	sub	sp, #8
 8003eac:	af00      	add	r7, sp, #0

		HAL_GPIO_WritePin(RF_SRE_GPIO_Port, RF_SRE_Pin, 1);  //переводим выходы сдвигового регистра в высокоомное состояние, чтобы не влиять передачей данных на nrf
 8003eae:	2201      	movs	r2, #1
 8003eb0:	2120      	movs	r1, #32
 8003eb2:	4810      	ldr	r0, [pc, #64]	; (8003ef4 <RF_ShiftRegs+0x4c>)
 8003eb4:	f001 f804 	bl	8004ec0 <HAL_GPIO_WritePin>
		uint8_t buf;
		HAL_GPIO_WritePin(RF_SRL_GPIO_Port, RF_SRL_Pin, 0);  //отключаем защёлку
 8003eb8:	2200      	movs	r2, #0
 8003eba:	2110      	movs	r1, #16
 8003ebc:	480d      	ldr	r0, [pc, #52]	; (8003ef4 <RF_ShiftRegs+0x4c>)
 8003ebe:	f000 ffff 	bl	8004ec0 <HAL_GPIO_WritePin>

		buf = shift_regs_data[2];
 8003ec2:	4b0d      	ldr	r3, [pc, #52]	; (8003ef8 <RF_ShiftRegs+0x50>)
 8003ec4:	789b      	ldrb	r3, [r3, #2]
 8003ec6:	71fb      	strb	r3, [r7, #7]

		HAL_SPI_Transmit(&hspi2, &buf, 1, 5000);  //отправляем данные для сдвигового регистра со светодиодами
 8003ec8:	1df9      	adds	r1, r7, #7
 8003eca:	f241 3388 	movw	r3, #5000	; 0x1388
 8003ece:	2201      	movs	r2, #1
 8003ed0:	480a      	ldr	r0, [pc, #40]	; (8003efc <RF_ShiftRegs+0x54>)
 8003ed2:	f002 fe95 	bl	8006c00 <HAL_SPI_Transmit>

		HAL_GPIO_WritePin(RF_SRL_GPIO_Port, RF_SRL_Pin, 1);  //включаем защёлку
 8003ed6:	2201      	movs	r2, #1
 8003ed8:	2110      	movs	r1, #16
 8003eda:	4806      	ldr	r0, [pc, #24]	; (8003ef4 <RF_ShiftRegs+0x4c>)
 8003edc:	f000 fff0 	bl	8004ec0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(RF_SRE_GPIO_Port, RF_SRE_Pin, 0);  //переводим выходы сдвигового регистра в рабочее состояние
 8003ee0:	2200      	movs	r2, #0
 8003ee2:	2120      	movs	r1, #32
 8003ee4:	4803      	ldr	r0, [pc, #12]	; (8003ef4 <RF_ShiftRegs+0x4c>)
 8003ee6:	f000 ffeb 	bl	8004ec0 <HAL_GPIO_WritePin>

}
 8003eea:	bf00      	nop
 8003eec:	3708      	adds	r7, #8
 8003eee:	46bd      	mov	sp, r7
 8003ef0:	bd80      	pop	{r7, pc}
 8003ef2:	bf00      	nop
 8003ef4:	40020800 	.word	0x40020800
 8003ef8:	20000024 	.word	0x20000024
 8003efc:	200002e8 	.word	0x200002e8

08003f00 <NRF_cs>:


void NRF_cs(uint8_t flag)  //управление ножкой CS радиомодуля NRF24L01
{
 8003f00:	b580      	push	{r7, lr}
 8003f02:	b082      	sub	sp, #8
 8003f04:	af00      	add	r7, sp, #0
 8003f06:	4603      	mov	r3, r0
 8003f08:	71fb      	strb	r3, [r7, #7]
	/*
	 * Данная функция нужна для управления ножкой CS радиомодуля NRF24L01
	 * Если на вход подаётся 0, то на ножке появляется ноль, если другое число, то единица
	 */

	if(flag==0)
 8003f0a:	79fb      	ldrb	r3, [r7, #7]
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d107      	bne.n	8003f20 <NRF_cs+0x20>
		{
		shift_regs_data[2] &=~(1<<1);
 8003f10:	4b0a      	ldr	r3, [pc, #40]	; (8003f3c <NRF_cs+0x3c>)
 8003f12:	789b      	ldrb	r3, [r3, #2]
 8003f14:	f023 0302 	bic.w	r3, r3, #2
 8003f18:	b2da      	uxtb	r2, r3
 8003f1a:	4b08      	ldr	r3, [pc, #32]	; (8003f3c <NRF_cs+0x3c>)
 8003f1c:	709a      	strb	r2, [r3, #2]
 8003f1e:	e006      	b.n	8003f2e <NRF_cs+0x2e>
		}
	else
		{
		shift_regs_data[2] |= 1<<1;
 8003f20:	4b06      	ldr	r3, [pc, #24]	; (8003f3c <NRF_cs+0x3c>)
 8003f22:	789b      	ldrb	r3, [r3, #2]
 8003f24:	f043 0302 	orr.w	r3, r3, #2
 8003f28:	b2da      	uxtb	r2, r3
 8003f2a:	4b04      	ldr	r3, [pc, #16]	; (8003f3c <NRF_cs+0x3c>)
 8003f2c:	709a      	strb	r2, [r3, #2]
		}
	RF_ShiftRegs();
 8003f2e:	f7ff ffbb 	bl	8003ea8 <RF_ShiftRegs>
}
 8003f32:	bf00      	nop
 8003f34:	3708      	adds	r7, #8
 8003f36:	46bd      	mov	sp, r7
 8003f38:	bd80      	pop	{r7, pc}
 8003f3a:	bf00      	nop
 8003f3c:	20000024 	.word	0x20000024

08003f40 <NRF_ce>:

void NRF_ce(uint8_t flag)  //управление ножкой CE радиомодуля NRF24L01
{
 8003f40:	b580      	push	{r7, lr}
 8003f42:	b082      	sub	sp, #8
 8003f44:	af00      	add	r7, sp, #0
 8003f46:	4603      	mov	r3, r0
 8003f48:	71fb      	strb	r3, [r7, #7]
	/*
	 * Данная функция нужна для управления ножкой CE радиомодуля NRF24L01
	 * Если на вход подаётся 0, то на ножке появляется ноль, если другое число, то единица
	 */

	if(flag==0)
 8003f4a:	79fb      	ldrb	r3, [r7, #7]
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d107      	bne.n	8003f60 <NRF_ce+0x20>
	{
		shift_regs_data[2] &=~(1<<0);
 8003f50:	4b0a      	ldr	r3, [pc, #40]	; (8003f7c <NRF_ce+0x3c>)
 8003f52:	789b      	ldrb	r3, [r3, #2]
 8003f54:	f023 0301 	bic.w	r3, r3, #1
 8003f58:	b2da      	uxtb	r2, r3
 8003f5a:	4b08      	ldr	r3, [pc, #32]	; (8003f7c <NRF_ce+0x3c>)
 8003f5c:	709a      	strb	r2, [r3, #2]
 8003f5e:	e006      	b.n	8003f6e <NRF_ce+0x2e>
	}

	else
		{
		shift_regs_data[2] |= 1<<0;
 8003f60:	4b06      	ldr	r3, [pc, #24]	; (8003f7c <NRF_ce+0x3c>)
 8003f62:	789b      	ldrb	r3, [r3, #2]
 8003f64:	f043 0301 	orr.w	r3, r3, #1
 8003f68:	b2da      	uxtb	r2, r3
 8003f6a:	4b04      	ldr	r3, [pc, #16]	; (8003f7c <NRF_ce+0x3c>)
 8003f6c:	709a      	strb	r2, [r3, #2]
		}
	RF_ShiftRegs();
 8003f6e:	f7ff ff9b 	bl	8003ea8 <RF_ShiftRegs>
}
 8003f72:	bf00      	nop
 8003f74:	3708      	adds	r7, #8
 8003f76:	46bd      	mov	sp, r7
 8003f78:	bd80      	pop	{r7, pc}
 8003f7a:	bf00      	nop
 8003f7c:	20000024 	.word	0x20000024

08003f80 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003f80:	b580      	push	{r7, lr}
 8003f82:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003f84:	4b0e      	ldr	r3, [pc, #56]	; (8003fc0 <HAL_Init+0x40>)
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	4a0d      	ldr	r2, [pc, #52]	; (8003fc0 <HAL_Init+0x40>)
 8003f8a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003f8e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003f90:	4b0b      	ldr	r3, [pc, #44]	; (8003fc0 <HAL_Init+0x40>)
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	4a0a      	ldr	r2, [pc, #40]	; (8003fc0 <HAL_Init+0x40>)
 8003f96:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003f9a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003f9c:	4b08      	ldr	r3, [pc, #32]	; (8003fc0 <HAL_Init+0x40>)
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	4a07      	ldr	r2, [pc, #28]	; (8003fc0 <HAL_Init+0x40>)
 8003fa2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003fa6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003fa8:	2003      	movs	r0, #3
 8003faa:	f000 fdab 	bl	8004b04 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003fae:	200f      	movs	r0, #15
 8003fb0:	f000 f808 	bl	8003fc4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003fb4:	f7ff face 	bl	8003554 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003fb8:	2300      	movs	r3, #0
}
 8003fba:	4618      	mov	r0, r3
 8003fbc:	bd80      	pop	{r7, pc}
 8003fbe:	bf00      	nop
 8003fc0:	40023c00 	.word	0x40023c00

08003fc4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003fc4:	b580      	push	{r7, lr}
 8003fc6:	b082      	sub	sp, #8
 8003fc8:	af00      	add	r7, sp, #0
 8003fca:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003fcc:	4b12      	ldr	r3, [pc, #72]	; (8004018 <HAL_InitTick+0x54>)
 8003fce:	681a      	ldr	r2, [r3, #0]
 8003fd0:	4b12      	ldr	r3, [pc, #72]	; (800401c <HAL_InitTick+0x58>)
 8003fd2:	781b      	ldrb	r3, [r3, #0]
 8003fd4:	4619      	mov	r1, r3
 8003fd6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003fda:	fbb3 f3f1 	udiv	r3, r3, r1
 8003fde:	fbb2 f3f3 	udiv	r3, r2, r3
 8003fe2:	4618      	mov	r0, r3
 8003fe4:	f000 fdc3 	bl	8004b6e <HAL_SYSTICK_Config>
 8003fe8:	4603      	mov	r3, r0
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d001      	beq.n	8003ff2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003fee:	2301      	movs	r3, #1
 8003ff0:	e00e      	b.n	8004010 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	2b0f      	cmp	r3, #15
 8003ff6:	d80a      	bhi.n	800400e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003ff8:	2200      	movs	r2, #0
 8003ffa:	6879      	ldr	r1, [r7, #4]
 8003ffc:	f04f 30ff 	mov.w	r0, #4294967295
 8004000:	f000 fd8b 	bl	8004b1a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004004:	4a06      	ldr	r2, [pc, #24]	; (8004020 <HAL_InitTick+0x5c>)
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800400a:	2300      	movs	r3, #0
 800400c:	e000      	b.n	8004010 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800400e:	2301      	movs	r3, #1
}
 8004010:	4618      	mov	r0, r3
 8004012:	3708      	adds	r7, #8
 8004014:	46bd      	mov	sp, r7
 8004016:	bd80      	pop	{r7, pc}
 8004018:	20000010 	.word	0x20000010
 800401c:	2000002c 	.word	0x2000002c
 8004020:	20000028 	.word	0x20000028

08004024 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004024:	b480      	push	{r7}
 8004026:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004028:	4b06      	ldr	r3, [pc, #24]	; (8004044 <HAL_IncTick+0x20>)
 800402a:	781b      	ldrb	r3, [r3, #0]
 800402c:	461a      	mov	r2, r3
 800402e:	4b06      	ldr	r3, [pc, #24]	; (8004048 <HAL_IncTick+0x24>)
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	4413      	add	r3, r2
 8004034:	4a04      	ldr	r2, [pc, #16]	; (8004048 <HAL_IncTick+0x24>)
 8004036:	6013      	str	r3, [r2, #0]
}
 8004038:	bf00      	nop
 800403a:	46bd      	mov	sp, r7
 800403c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004040:	4770      	bx	lr
 8004042:	bf00      	nop
 8004044:	2000002c 	.word	0x2000002c
 8004048:	20006528 	.word	0x20006528

0800404c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800404c:	b480      	push	{r7}
 800404e:	af00      	add	r7, sp, #0
  return uwTick;
 8004050:	4b03      	ldr	r3, [pc, #12]	; (8004060 <HAL_GetTick+0x14>)
 8004052:	681b      	ldr	r3, [r3, #0]
}
 8004054:	4618      	mov	r0, r3
 8004056:	46bd      	mov	sp, r7
 8004058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800405c:	4770      	bx	lr
 800405e:	bf00      	nop
 8004060:	20006528 	.word	0x20006528

08004064 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004064:	b580      	push	{r7, lr}
 8004066:	b084      	sub	sp, #16
 8004068:	af00      	add	r7, sp, #0
 800406a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800406c:	f7ff ffee 	bl	800404c <HAL_GetTick>
 8004070:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	f1b3 3fff 	cmp.w	r3, #4294967295
 800407c:	d005      	beq.n	800408a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800407e:	4b0a      	ldr	r3, [pc, #40]	; (80040a8 <HAL_Delay+0x44>)
 8004080:	781b      	ldrb	r3, [r3, #0]
 8004082:	461a      	mov	r2, r3
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	4413      	add	r3, r2
 8004088:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800408a:	bf00      	nop
 800408c:	f7ff ffde 	bl	800404c <HAL_GetTick>
 8004090:	4602      	mov	r2, r0
 8004092:	68bb      	ldr	r3, [r7, #8]
 8004094:	1ad3      	subs	r3, r2, r3
 8004096:	68fa      	ldr	r2, [r7, #12]
 8004098:	429a      	cmp	r2, r3
 800409a:	d8f7      	bhi.n	800408c <HAL_Delay+0x28>
  {
  }
}
 800409c:	bf00      	nop
 800409e:	bf00      	nop
 80040a0:	3710      	adds	r7, #16
 80040a2:	46bd      	mov	sp, r7
 80040a4:	bd80      	pop	{r7, pc}
 80040a6:	bf00      	nop
 80040a8:	2000002c 	.word	0x2000002c

080040ac <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80040ac:	b580      	push	{r7, lr}
 80040ae:	b084      	sub	sp, #16
 80040b0:	af00      	add	r7, sp, #0
 80040b2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80040b4:	2300      	movs	r3, #0
 80040b6:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d101      	bne.n	80040c2 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80040be:	2301      	movs	r3, #1
 80040c0:	e033      	b.n	800412a <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d109      	bne.n	80040de <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80040ca:	6878      	ldr	r0, [r7, #4]
 80040cc:	f7ff fa6a 	bl	80035a4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	2200      	movs	r2, #0
 80040d4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	2200      	movs	r2, #0
 80040da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040e2:	f003 0310 	and.w	r3, r3, #16
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d118      	bne.n	800411c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040ee:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80040f2:	f023 0302 	bic.w	r3, r3, #2
 80040f6:	f043 0202 	orr.w	r2, r3, #2
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80040fe:	6878      	ldr	r0, [r7, #4]
 8004100:	f000 fb2a 	bl	8004758 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	2200      	movs	r2, #0
 8004108:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800410e:	f023 0303 	bic.w	r3, r3, #3
 8004112:	f043 0201 	orr.w	r2, r3, #1
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	641a      	str	r2, [r3, #64]	; 0x40
 800411a:	e001      	b.n	8004120 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800411c:	2301      	movs	r3, #1
 800411e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	2200      	movs	r2, #0
 8004124:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8004128:	7bfb      	ldrb	r3, [r7, #15]
}
 800412a:	4618      	mov	r0, r3
 800412c:	3710      	adds	r7, #16
 800412e:	46bd      	mov	sp, r7
 8004130:	bd80      	pop	{r7, pc}
	...

08004134 <HAL_ADC_Start_IT>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef* hadc)
{
 8004134:	b480      	push	{r7}
 8004136:	b085      	sub	sp, #20
 8004138:	af00      	add	r7, sp, #0
 800413a:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 800413c:	2300      	movs	r3, #0
 800413e:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004146:	2b01      	cmp	r3, #1
 8004148:	d101      	bne.n	800414e <HAL_ADC_Start_IT+0x1a>
 800414a:	2302      	movs	r3, #2
 800414c:	e0a1      	b.n	8004292 <HAL_ADC_Start_IT+0x15e>
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	2201      	movs	r2, #1
 8004152:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	689b      	ldr	r3, [r3, #8]
 800415c:	f003 0301 	and.w	r3, r3, #1
 8004160:	2b01      	cmp	r3, #1
 8004162:	d018      	beq.n	8004196 <HAL_ADC_Start_IT+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	689a      	ldr	r2, [r3, #8]
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	f042 0201 	orr.w	r2, r2, #1
 8004172:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8004174:	4b4a      	ldr	r3, [pc, #296]	; (80042a0 <HAL_ADC_Start_IT+0x16c>)
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	4a4a      	ldr	r2, [pc, #296]	; (80042a4 <HAL_ADC_Start_IT+0x170>)
 800417a:	fba2 2303 	umull	r2, r3, r2, r3
 800417e:	0c9a      	lsrs	r2, r3, #18
 8004180:	4613      	mov	r3, r2
 8004182:	005b      	lsls	r3, r3, #1
 8004184:	4413      	add	r3, r2
 8004186:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8004188:	e002      	b.n	8004190 <HAL_ADC_Start_IT+0x5c>
    {
      counter--;
 800418a:	68bb      	ldr	r3, [r7, #8]
 800418c:	3b01      	subs	r3, #1
 800418e:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8004190:	68bb      	ldr	r3, [r7, #8]
 8004192:	2b00      	cmp	r3, #0
 8004194:	d1f9      	bne.n	800418a <HAL_ADC_Start_IT+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	689b      	ldr	r3, [r3, #8]
 800419c:	f003 0301 	and.w	r3, r3, #1
 80041a0:	2b01      	cmp	r3, #1
 80041a2:	d169      	bne.n	8004278 <HAL_ADC_Start_IT+0x144>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041a8:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80041ac:	f023 0301 	bic.w	r3, r3, #1
 80041b0:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	685b      	ldr	r3, [r3, #4]
 80041be:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d007      	beq.n	80041d6 <HAL_ADC_Start_IT+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041ca:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80041ce:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041da:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80041de:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80041e2:	d106      	bne.n	80041f2 <HAL_ADC_Start_IT+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041e8:	f023 0206 	bic.w	r2, r3, #6
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	645a      	str	r2, [r3, #68]	; 0x44
 80041f0:	e002      	b.n	80041f8 <HAL_ADC_Start_IT+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	2200      	movs	r2, #0
 80041f6:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	2200      	movs	r2, #0
 80041fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004200:	4b29      	ldr	r3, [pc, #164]	; (80042a8 <HAL_ADC_Start_IT+0x174>)
 8004202:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	f06f 0222 	mvn.w	r2, #34	; 0x22
 800420c:	601a      	str	r2, [r3, #0]
    
    /* Enable end of conversion interrupt for regular group */
    __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_OVR));
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	685b      	ldr	r3, [r3, #4]
 8004214:	687a      	ldr	r2, [r7, #4]
 8004216:	6812      	ldr	r2, [r2, #0]
 8004218:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800421c:	f043 0320 	orr.w	r3, r3, #32
 8004220:	6053      	str	r3, [r2, #4]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	685b      	ldr	r3, [r3, #4]
 8004226:	f003 031f 	and.w	r3, r3, #31
 800422a:	2b00      	cmp	r3, #0
 800422c:	d10f      	bne.n	800424e <HAL_ADC_Start_IT+0x11a>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	689b      	ldr	r3, [r3, #8]
 8004234:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004238:	2b00      	cmp	r3, #0
 800423a:	d129      	bne.n	8004290 <HAL_ADC_Start_IT+0x15c>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	689a      	ldr	r2, [r3, #8]
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800424a:	609a      	str	r2, [r3, #8]
 800424c:	e020      	b.n	8004290 <HAL_ADC_Start_IT+0x15c>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	4a16      	ldr	r2, [pc, #88]	; (80042ac <HAL_ADC_Start_IT+0x178>)
 8004254:	4293      	cmp	r3, r2
 8004256:	d11b      	bne.n	8004290 <HAL_ADC_Start_IT+0x15c>
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	689b      	ldr	r3, [r3, #8]
 800425e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004262:	2b00      	cmp	r3, #0
 8004264:	d114      	bne.n	8004290 <HAL_ADC_Start_IT+0x15c>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	689a      	ldr	r2, [r3, #8]
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8004274:	609a      	str	r2, [r3, #8]
 8004276:	e00b      	b.n	8004290 <HAL_ADC_Start_IT+0x15c>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800427c:	f043 0210 	orr.w	r2, r3, #16
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004288:	f043 0201 	orr.w	r2, r3, #1
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8004290:	2300      	movs	r3, #0
}
 8004292:	4618      	mov	r0, r3
 8004294:	3714      	adds	r7, #20
 8004296:	46bd      	mov	sp, r7
 8004298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800429c:	4770      	bx	lr
 800429e:	bf00      	nop
 80042a0:	20000010 	.word	0x20000010
 80042a4:	431bde83 	.word	0x431bde83
 80042a8:	40012300 	.word	0x40012300
 80042ac:	40012000 	.word	0x40012000

080042b0 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 80042b0:	b580      	push	{r7, lr}
 80042b2:	b086      	sub	sp, #24
 80042b4:	af00      	add	r7, sp, #0
 80042b6:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 80042b8:	2300      	movs	r3, #0
 80042ba:	617b      	str	r3, [r7, #20]
 80042bc:	2300      	movs	r3, #0
 80042be:	613b      	str	r3, [r7, #16]
  
  uint32_t tmp_sr = hadc->Instance->SR;
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	685b      	ldr	r3, [r3, #4]
 80042ce:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = tmp_sr & ADC_FLAG_EOC;
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	f003 0302 	and.w	r3, r3, #2
 80042d6:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 80042d8:	68bb      	ldr	r3, [r7, #8]
 80042da:	f003 0320 	and.w	r3, r3, #32
 80042de:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 80042e0:	697b      	ldr	r3, [r7, #20]
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d049      	beq.n	800437a <HAL_ADC_IRQHandler+0xca>
 80042e6:	693b      	ldr	r3, [r7, #16]
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d046      	beq.n	800437a <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042f0:	f003 0310 	and.w	r3, r3, #16
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d105      	bne.n	8004304 <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042fc:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	689b      	ldr	r3, [r3, #8]
 800430a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800430e:	2b00      	cmp	r3, #0
 8004310:	d12b      	bne.n	800436a <HAL_ADC_IRQHandler+0xba>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8004316:	2b00      	cmp	r3, #0
 8004318:	d127      	bne.n	800436a <HAL_ADC_IRQHandler+0xba>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004320:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8004324:	2b00      	cmp	r3, #0
 8004326:	d006      	beq.n	8004336 <HAL_ADC_IRQHandler+0x86>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	689b      	ldr	r3, [r3, #8]
 800432e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8004332:	2b00      	cmp	r3, #0
 8004334:	d119      	bne.n	800436a <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	685a      	ldr	r2, [r3, #4]
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	f022 0220 	bic.w	r2, r2, #32
 8004344:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800434a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004356:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800435a:	2b00      	cmp	r3, #0
 800435c:	d105      	bne.n	800436a <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004362:	f043 0201 	orr.w	r2, r3, #1
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800436a:	6878      	ldr	r0, [r7, #4]
 800436c:	f7fe fcbe 	bl	8002cec <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	f06f 0212 	mvn.w	r2, #18
 8004378:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	f003 0304 	and.w	r3, r3, #4
 8004380:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 8004382:	68bb      	ldr	r3, [r7, #8]
 8004384:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004388:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 800438a:	697b      	ldr	r3, [r7, #20]
 800438c:	2b00      	cmp	r3, #0
 800438e:	d057      	beq.n	8004440 <HAL_ADC_IRQHandler+0x190>
 8004390:	693b      	ldr	r3, [r7, #16]
 8004392:	2b00      	cmp	r3, #0
 8004394:	d054      	beq.n	8004440 <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800439a:	f003 0310 	and.w	r3, r3, #16
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d105      	bne.n	80043ae <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043a6:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	689b      	ldr	r3, [r3, #8]
 80043b4:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d139      	bne.n	8004430 <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043c2:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d006      	beq.n	80043d8 <HAL_ADC_IRQHandler+0x128>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	689b      	ldr	r3, [r3, #8]
 80043d0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d12b      	bne.n	8004430 <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	685b      	ldr	r3, [r3, #4]
 80043de:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d124      	bne.n	8004430 <HAL_ADC_IRQHandler+0x180>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	689b      	ldr	r3, [r3, #8]
 80043ec:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d11d      	bne.n	8004430 <HAL_ADC_IRQHandler+0x180>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	7e1b      	ldrb	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d119      	bne.n	8004430 <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	685a      	ldr	r2, [r3, #4]
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800440a:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004410:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800441c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004420:	2b00      	cmp	r3, #0
 8004422:	d105      	bne.n	8004430 <HAL_ADC_IRQHandler+0x180>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004428:	f043 0201 	orr.w	r2, r3, #1
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	641a      	str	r2, [r3, #64]	; 0x40
    /* Conversion complete callback */ 
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8004430:	6878      	ldr	r0, [r7, #4]
 8004432:	f000 fa8d 	bl	8004950 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	f06f 020c 	mvn.w	r2, #12
 800443e:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_AWD;
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	f003 0301 	and.w	r3, r3, #1
 8004446:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 8004448:	68bb      	ldr	r3, [r7, #8]
 800444a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800444e:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 8004450:	697b      	ldr	r3, [r7, #20]
 8004452:	2b00      	cmp	r3, #0
 8004454:	d017      	beq.n	8004486 <HAL_ADC_IRQHandler+0x1d6>
 8004456:	693b      	ldr	r3, [r7, #16]
 8004458:	2b00      	cmp	r3, #0
 800445a:	d014      	beq.n	8004486 <HAL_ADC_IRQHandler+0x1d6>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	f003 0301 	and.w	r3, r3, #1
 8004466:	2b01      	cmp	r3, #1
 8004468:	d10d      	bne.n	8004486 <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800446e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8004476:	6878      	ldr	r0, [r7, #4]
 8004478:	f000 f837 	bl	80044ea <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	f06f 0201 	mvn.w	r2, #1
 8004484:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = tmp_sr & ADC_FLAG_OVR;
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	f003 0320 	and.w	r3, r3, #32
 800448c:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 800448e:	68bb      	ldr	r3, [r7, #8]
 8004490:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004494:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 8004496:	697b      	ldr	r3, [r7, #20]
 8004498:	2b00      	cmp	r3, #0
 800449a:	d015      	beq.n	80044c8 <HAL_ADC_IRQHandler+0x218>
 800449c:	693b      	ldr	r3, [r7, #16]
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d012      	beq.n	80044c8 <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80044a6:	f043 0202 	orr.w	r2, r3, #2
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	f06f 0220 	mvn.w	r2, #32
 80044b6:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 80044b8:	6878      	ldr	r0, [r7, #4]
 80044ba:	f000 f820 	bl	80044fe <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	f06f 0220 	mvn.w	r2, #32
 80044c6:	601a      	str	r2, [r3, #0]
  }
}
 80044c8:	bf00      	nop
 80044ca:	3718      	adds	r7, #24
 80044cc:	46bd      	mov	sp, r7
 80044ce:	bd80      	pop	{r7, pc}

080044d0 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 80044d0:	b480      	push	{r7}
 80044d2:	b083      	sub	sp, #12
 80044d4:	af00      	add	r7, sp, #0
 80044d6:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 80044de:	4618      	mov	r0, r3
 80044e0:	370c      	adds	r7, #12
 80044e2:	46bd      	mov	sp, r7
 80044e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044e8:	4770      	bx	lr

080044ea <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 80044ea:	b480      	push	{r7}
 80044ec:	b083      	sub	sp, #12
 80044ee:	af00      	add	r7, sp, #0
 80044f0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 80044f2:	bf00      	nop
 80044f4:	370c      	adds	r7, #12
 80044f6:	46bd      	mov	sp, r7
 80044f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044fc:	4770      	bx	lr

080044fe <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80044fe:	b480      	push	{r7}
 8004500:	b083      	sub	sp, #12
 8004502:	af00      	add	r7, sp, #0
 8004504:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8004506:	bf00      	nop
 8004508:	370c      	adds	r7, #12
 800450a:	46bd      	mov	sp, r7
 800450c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004510:	4770      	bx	lr
	...

08004514 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8004514:	b480      	push	{r7}
 8004516:	b085      	sub	sp, #20
 8004518:	af00      	add	r7, sp, #0
 800451a:	6078      	str	r0, [r7, #4]
 800451c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800451e:	2300      	movs	r3, #0
 8004520:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004528:	2b01      	cmp	r3, #1
 800452a:	d101      	bne.n	8004530 <HAL_ADC_ConfigChannel+0x1c>
 800452c:	2302      	movs	r3, #2
 800452e:	e105      	b.n	800473c <HAL_ADC_ConfigChannel+0x228>
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	2201      	movs	r2, #1
 8004534:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8004538:	683b      	ldr	r3, [r7, #0]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	2b09      	cmp	r3, #9
 800453e:	d925      	bls.n	800458c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	68d9      	ldr	r1, [r3, #12]
 8004546:	683b      	ldr	r3, [r7, #0]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	b29b      	uxth	r3, r3
 800454c:	461a      	mov	r2, r3
 800454e:	4613      	mov	r3, r2
 8004550:	005b      	lsls	r3, r3, #1
 8004552:	4413      	add	r3, r2
 8004554:	3b1e      	subs	r3, #30
 8004556:	2207      	movs	r2, #7
 8004558:	fa02 f303 	lsl.w	r3, r2, r3
 800455c:	43da      	mvns	r2, r3
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	400a      	ands	r2, r1
 8004564:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	68d9      	ldr	r1, [r3, #12]
 800456c:	683b      	ldr	r3, [r7, #0]
 800456e:	689a      	ldr	r2, [r3, #8]
 8004570:	683b      	ldr	r3, [r7, #0]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	b29b      	uxth	r3, r3
 8004576:	4618      	mov	r0, r3
 8004578:	4603      	mov	r3, r0
 800457a:	005b      	lsls	r3, r3, #1
 800457c:	4403      	add	r3, r0
 800457e:	3b1e      	subs	r3, #30
 8004580:	409a      	lsls	r2, r3
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	430a      	orrs	r2, r1
 8004588:	60da      	str	r2, [r3, #12]
 800458a:	e022      	b.n	80045d2 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	6919      	ldr	r1, [r3, #16]
 8004592:	683b      	ldr	r3, [r7, #0]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	b29b      	uxth	r3, r3
 8004598:	461a      	mov	r2, r3
 800459a:	4613      	mov	r3, r2
 800459c:	005b      	lsls	r3, r3, #1
 800459e:	4413      	add	r3, r2
 80045a0:	2207      	movs	r2, #7
 80045a2:	fa02 f303 	lsl.w	r3, r2, r3
 80045a6:	43da      	mvns	r2, r3
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	400a      	ands	r2, r1
 80045ae:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	6919      	ldr	r1, [r3, #16]
 80045b6:	683b      	ldr	r3, [r7, #0]
 80045b8:	689a      	ldr	r2, [r3, #8]
 80045ba:	683b      	ldr	r3, [r7, #0]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	b29b      	uxth	r3, r3
 80045c0:	4618      	mov	r0, r3
 80045c2:	4603      	mov	r3, r0
 80045c4:	005b      	lsls	r3, r3, #1
 80045c6:	4403      	add	r3, r0
 80045c8:	409a      	lsls	r2, r3
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	430a      	orrs	r2, r1
 80045d0:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80045d2:	683b      	ldr	r3, [r7, #0]
 80045d4:	685b      	ldr	r3, [r3, #4]
 80045d6:	2b06      	cmp	r3, #6
 80045d8:	d824      	bhi.n	8004624 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80045e0:	683b      	ldr	r3, [r7, #0]
 80045e2:	685a      	ldr	r2, [r3, #4]
 80045e4:	4613      	mov	r3, r2
 80045e6:	009b      	lsls	r3, r3, #2
 80045e8:	4413      	add	r3, r2
 80045ea:	3b05      	subs	r3, #5
 80045ec:	221f      	movs	r2, #31
 80045ee:	fa02 f303 	lsl.w	r3, r2, r3
 80045f2:	43da      	mvns	r2, r3
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	400a      	ands	r2, r1
 80045fa:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8004602:	683b      	ldr	r3, [r7, #0]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	b29b      	uxth	r3, r3
 8004608:	4618      	mov	r0, r3
 800460a:	683b      	ldr	r3, [r7, #0]
 800460c:	685a      	ldr	r2, [r3, #4]
 800460e:	4613      	mov	r3, r2
 8004610:	009b      	lsls	r3, r3, #2
 8004612:	4413      	add	r3, r2
 8004614:	3b05      	subs	r3, #5
 8004616:	fa00 f203 	lsl.w	r2, r0, r3
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	430a      	orrs	r2, r1
 8004620:	635a      	str	r2, [r3, #52]	; 0x34
 8004622:	e04c      	b.n	80046be <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8004624:	683b      	ldr	r3, [r7, #0]
 8004626:	685b      	ldr	r3, [r3, #4]
 8004628:	2b0c      	cmp	r3, #12
 800462a:	d824      	bhi.n	8004676 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004632:	683b      	ldr	r3, [r7, #0]
 8004634:	685a      	ldr	r2, [r3, #4]
 8004636:	4613      	mov	r3, r2
 8004638:	009b      	lsls	r3, r3, #2
 800463a:	4413      	add	r3, r2
 800463c:	3b23      	subs	r3, #35	; 0x23
 800463e:	221f      	movs	r2, #31
 8004640:	fa02 f303 	lsl.w	r3, r2, r3
 8004644:	43da      	mvns	r2, r3
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	400a      	ands	r2, r1
 800464c:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004654:	683b      	ldr	r3, [r7, #0]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	b29b      	uxth	r3, r3
 800465a:	4618      	mov	r0, r3
 800465c:	683b      	ldr	r3, [r7, #0]
 800465e:	685a      	ldr	r2, [r3, #4]
 8004660:	4613      	mov	r3, r2
 8004662:	009b      	lsls	r3, r3, #2
 8004664:	4413      	add	r3, r2
 8004666:	3b23      	subs	r3, #35	; 0x23
 8004668:	fa00 f203 	lsl.w	r2, r0, r3
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	430a      	orrs	r2, r1
 8004672:	631a      	str	r2, [r3, #48]	; 0x30
 8004674:	e023      	b.n	80046be <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800467c:	683b      	ldr	r3, [r7, #0]
 800467e:	685a      	ldr	r2, [r3, #4]
 8004680:	4613      	mov	r3, r2
 8004682:	009b      	lsls	r3, r3, #2
 8004684:	4413      	add	r3, r2
 8004686:	3b41      	subs	r3, #65	; 0x41
 8004688:	221f      	movs	r2, #31
 800468a:	fa02 f303 	lsl.w	r3, r2, r3
 800468e:	43da      	mvns	r2, r3
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	400a      	ands	r2, r1
 8004696:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800469e:	683b      	ldr	r3, [r7, #0]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	b29b      	uxth	r3, r3
 80046a4:	4618      	mov	r0, r3
 80046a6:	683b      	ldr	r3, [r7, #0]
 80046a8:	685a      	ldr	r2, [r3, #4]
 80046aa:	4613      	mov	r3, r2
 80046ac:	009b      	lsls	r3, r3, #2
 80046ae:	4413      	add	r3, r2
 80046b0:	3b41      	subs	r3, #65	; 0x41
 80046b2:	fa00 f203 	lsl.w	r2, r0, r3
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	430a      	orrs	r2, r1
 80046bc:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80046be:	4b22      	ldr	r3, [pc, #136]	; (8004748 <HAL_ADC_ConfigChannel+0x234>)
 80046c0:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	4a21      	ldr	r2, [pc, #132]	; (800474c <HAL_ADC_ConfigChannel+0x238>)
 80046c8:	4293      	cmp	r3, r2
 80046ca:	d109      	bne.n	80046e0 <HAL_ADC_ConfigChannel+0x1cc>
 80046cc:	683b      	ldr	r3, [r7, #0]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	2b12      	cmp	r3, #18
 80046d2:	d105      	bne.n	80046e0 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	685b      	ldr	r3, [r3, #4]
 80046d8:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	4a19      	ldr	r2, [pc, #100]	; (800474c <HAL_ADC_ConfigChannel+0x238>)
 80046e6:	4293      	cmp	r3, r2
 80046e8:	d123      	bne.n	8004732 <HAL_ADC_ConfigChannel+0x21e>
 80046ea:	683b      	ldr	r3, [r7, #0]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	2b10      	cmp	r3, #16
 80046f0:	d003      	beq.n	80046fa <HAL_ADC_ConfigChannel+0x1e6>
 80046f2:	683b      	ldr	r3, [r7, #0]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	2b11      	cmp	r3, #17
 80046f8:	d11b      	bne.n	8004732 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	685b      	ldr	r3, [r3, #4]
 80046fe:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004706:	683b      	ldr	r3, [r7, #0]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	2b10      	cmp	r3, #16
 800470c:	d111      	bne.n	8004732 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800470e:	4b10      	ldr	r3, [pc, #64]	; (8004750 <HAL_ADC_ConfigChannel+0x23c>)
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	4a10      	ldr	r2, [pc, #64]	; (8004754 <HAL_ADC_ConfigChannel+0x240>)
 8004714:	fba2 2303 	umull	r2, r3, r2, r3
 8004718:	0c9a      	lsrs	r2, r3, #18
 800471a:	4613      	mov	r3, r2
 800471c:	009b      	lsls	r3, r3, #2
 800471e:	4413      	add	r3, r2
 8004720:	005b      	lsls	r3, r3, #1
 8004722:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8004724:	e002      	b.n	800472c <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8004726:	68bb      	ldr	r3, [r7, #8]
 8004728:	3b01      	subs	r3, #1
 800472a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800472c:	68bb      	ldr	r3, [r7, #8]
 800472e:	2b00      	cmp	r3, #0
 8004730:	d1f9      	bne.n	8004726 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	2200      	movs	r2, #0
 8004736:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800473a:	2300      	movs	r3, #0
}
 800473c:	4618      	mov	r0, r3
 800473e:	3714      	adds	r7, #20
 8004740:	46bd      	mov	sp, r7
 8004742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004746:	4770      	bx	lr
 8004748:	40012300 	.word	0x40012300
 800474c:	40012000 	.word	0x40012000
 8004750:	20000010 	.word	0x20000010
 8004754:	431bde83 	.word	0x431bde83

08004758 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8004758:	b480      	push	{r7}
 800475a:	b085      	sub	sp, #20
 800475c:	af00      	add	r7, sp, #0
 800475e:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004760:	4b79      	ldr	r3, [pc, #484]	; (8004948 <ADC_Init+0x1f0>)
 8004762:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	685b      	ldr	r3, [r3, #4]
 8004768:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	685a      	ldr	r2, [r3, #4]
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	685b      	ldr	r3, [r3, #4]
 8004778:	431a      	orrs	r2, r3
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	685a      	ldr	r2, [r3, #4]
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800478c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	6859      	ldr	r1, [r3, #4]
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	691b      	ldr	r3, [r3, #16]
 8004798:	021a      	lsls	r2, r3, #8
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	430a      	orrs	r2, r1
 80047a0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	685a      	ldr	r2, [r3, #4]
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80047b0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	6859      	ldr	r1, [r3, #4]
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	689a      	ldr	r2, [r3, #8]
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	430a      	orrs	r2, r1
 80047c2:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	689a      	ldr	r2, [r3, #8]
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80047d2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	6899      	ldr	r1, [r3, #8]
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	68da      	ldr	r2, [r3, #12]
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	430a      	orrs	r2, r1
 80047e4:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047ea:	4a58      	ldr	r2, [pc, #352]	; (800494c <ADC_Init+0x1f4>)
 80047ec:	4293      	cmp	r3, r2
 80047ee:	d022      	beq.n	8004836 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	689a      	ldr	r2, [r3, #8]
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80047fe:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	6899      	ldr	r1, [r3, #8]
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	430a      	orrs	r2, r1
 8004810:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	689a      	ldr	r2, [r3, #8]
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8004820:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	6899      	ldr	r1, [r3, #8]
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	430a      	orrs	r2, r1
 8004832:	609a      	str	r2, [r3, #8]
 8004834:	e00f      	b.n	8004856 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	689a      	ldr	r2, [r3, #8]
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004844:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	689a      	ldr	r2, [r3, #8]
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8004854:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	689a      	ldr	r2, [r3, #8]
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	f022 0202 	bic.w	r2, r2, #2
 8004864:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	6899      	ldr	r1, [r3, #8]
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	7e1b      	ldrb	r3, [r3, #24]
 8004870:	005a      	lsls	r2, r3, #1
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	430a      	orrs	r2, r1
 8004878:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004880:	2b00      	cmp	r3, #0
 8004882:	d01b      	beq.n	80048bc <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	685a      	ldr	r2, [r3, #4]
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004892:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	685a      	ldr	r2, [r3, #4]
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80048a2:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	6859      	ldr	r1, [r3, #4]
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048ae:	3b01      	subs	r3, #1
 80048b0:	035a      	lsls	r2, r3, #13
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	430a      	orrs	r2, r1
 80048b8:	605a      	str	r2, [r3, #4]
 80048ba:	e007      	b.n	80048cc <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	685a      	ldr	r2, [r3, #4]
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80048ca:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80048da:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	69db      	ldr	r3, [r3, #28]
 80048e6:	3b01      	subs	r3, #1
 80048e8:	051a      	lsls	r2, r3, #20
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	430a      	orrs	r2, r1
 80048f0:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	689a      	ldr	r2, [r3, #8]
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8004900:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	6899      	ldr	r1, [r3, #8]
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800490e:	025a      	lsls	r2, r3, #9
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	430a      	orrs	r2, r1
 8004916:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	689a      	ldr	r2, [r3, #8]
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004926:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	6899      	ldr	r1, [r3, #8]
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	695b      	ldr	r3, [r3, #20]
 8004932:	029a      	lsls	r2, r3, #10
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	430a      	orrs	r2, r1
 800493a:	609a      	str	r2, [r3, #8]
}
 800493c:	bf00      	nop
 800493e:	3714      	adds	r7, #20
 8004940:	46bd      	mov	sp, r7
 8004942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004946:	4770      	bx	lr
 8004948:	40012300 	.word	0x40012300
 800494c:	0f000001 	.word	0x0f000001

08004950 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8004950:	b480      	push	{r7}
 8004952:	b083      	sub	sp, #12
 8004954:	af00      	add	r7, sp, #0
 8004956:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8004958:	bf00      	nop
 800495a:	370c      	adds	r7, #12
 800495c:	46bd      	mov	sp, r7
 800495e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004962:	4770      	bx	lr

08004964 <__NVIC_SetPriorityGrouping>:
{
 8004964:	b480      	push	{r7}
 8004966:	b085      	sub	sp, #20
 8004968:	af00      	add	r7, sp, #0
 800496a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	f003 0307 	and.w	r3, r3, #7
 8004972:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004974:	4b0c      	ldr	r3, [pc, #48]	; (80049a8 <__NVIC_SetPriorityGrouping+0x44>)
 8004976:	68db      	ldr	r3, [r3, #12]
 8004978:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800497a:	68ba      	ldr	r2, [r7, #8]
 800497c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004980:	4013      	ands	r3, r2
 8004982:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004988:	68bb      	ldr	r3, [r7, #8]
 800498a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800498c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004990:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004994:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004996:	4a04      	ldr	r2, [pc, #16]	; (80049a8 <__NVIC_SetPriorityGrouping+0x44>)
 8004998:	68bb      	ldr	r3, [r7, #8]
 800499a:	60d3      	str	r3, [r2, #12]
}
 800499c:	bf00      	nop
 800499e:	3714      	adds	r7, #20
 80049a0:	46bd      	mov	sp, r7
 80049a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049a6:	4770      	bx	lr
 80049a8:	e000ed00 	.word	0xe000ed00

080049ac <__NVIC_GetPriorityGrouping>:
{
 80049ac:	b480      	push	{r7}
 80049ae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80049b0:	4b04      	ldr	r3, [pc, #16]	; (80049c4 <__NVIC_GetPriorityGrouping+0x18>)
 80049b2:	68db      	ldr	r3, [r3, #12]
 80049b4:	0a1b      	lsrs	r3, r3, #8
 80049b6:	f003 0307 	and.w	r3, r3, #7
}
 80049ba:	4618      	mov	r0, r3
 80049bc:	46bd      	mov	sp, r7
 80049be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049c2:	4770      	bx	lr
 80049c4:	e000ed00 	.word	0xe000ed00

080049c8 <__NVIC_EnableIRQ>:
{
 80049c8:	b480      	push	{r7}
 80049ca:	b083      	sub	sp, #12
 80049cc:	af00      	add	r7, sp, #0
 80049ce:	4603      	mov	r3, r0
 80049d0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80049d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	db0b      	blt.n	80049f2 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80049da:	79fb      	ldrb	r3, [r7, #7]
 80049dc:	f003 021f 	and.w	r2, r3, #31
 80049e0:	4907      	ldr	r1, [pc, #28]	; (8004a00 <__NVIC_EnableIRQ+0x38>)
 80049e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80049e6:	095b      	lsrs	r3, r3, #5
 80049e8:	2001      	movs	r0, #1
 80049ea:	fa00 f202 	lsl.w	r2, r0, r2
 80049ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80049f2:	bf00      	nop
 80049f4:	370c      	adds	r7, #12
 80049f6:	46bd      	mov	sp, r7
 80049f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049fc:	4770      	bx	lr
 80049fe:	bf00      	nop
 8004a00:	e000e100 	.word	0xe000e100

08004a04 <__NVIC_SetPriority>:
{
 8004a04:	b480      	push	{r7}
 8004a06:	b083      	sub	sp, #12
 8004a08:	af00      	add	r7, sp, #0
 8004a0a:	4603      	mov	r3, r0
 8004a0c:	6039      	str	r1, [r7, #0]
 8004a0e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004a10:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	db0a      	blt.n	8004a2e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004a18:	683b      	ldr	r3, [r7, #0]
 8004a1a:	b2da      	uxtb	r2, r3
 8004a1c:	490c      	ldr	r1, [pc, #48]	; (8004a50 <__NVIC_SetPriority+0x4c>)
 8004a1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004a22:	0112      	lsls	r2, r2, #4
 8004a24:	b2d2      	uxtb	r2, r2
 8004a26:	440b      	add	r3, r1
 8004a28:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8004a2c:	e00a      	b.n	8004a44 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004a2e:	683b      	ldr	r3, [r7, #0]
 8004a30:	b2da      	uxtb	r2, r3
 8004a32:	4908      	ldr	r1, [pc, #32]	; (8004a54 <__NVIC_SetPriority+0x50>)
 8004a34:	79fb      	ldrb	r3, [r7, #7]
 8004a36:	f003 030f 	and.w	r3, r3, #15
 8004a3a:	3b04      	subs	r3, #4
 8004a3c:	0112      	lsls	r2, r2, #4
 8004a3e:	b2d2      	uxtb	r2, r2
 8004a40:	440b      	add	r3, r1
 8004a42:	761a      	strb	r2, [r3, #24]
}
 8004a44:	bf00      	nop
 8004a46:	370c      	adds	r7, #12
 8004a48:	46bd      	mov	sp, r7
 8004a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a4e:	4770      	bx	lr
 8004a50:	e000e100 	.word	0xe000e100
 8004a54:	e000ed00 	.word	0xe000ed00

08004a58 <NVIC_EncodePriority>:
{
 8004a58:	b480      	push	{r7}
 8004a5a:	b089      	sub	sp, #36	; 0x24
 8004a5c:	af00      	add	r7, sp, #0
 8004a5e:	60f8      	str	r0, [r7, #12]
 8004a60:	60b9      	str	r1, [r7, #8]
 8004a62:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	f003 0307 	and.w	r3, r3, #7
 8004a6a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004a6c:	69fb      	ldr	r3, [r7, #28]
 8004a6e:	f1c3 0307 	rsb	r3, r3, #7
 8004a72:	2b04      	cmp	r3, #4
 8004a74:	bf28      	it	cs
 8004a76:	2304      	movcs	r3, #4
 8004a78:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004a7a:	69fb      	ldr	r3, [r7, #28]
 8004a7c:	3304      	adds	r3, #4
 8004a7e:	2b06      	cmp	r3, #6
 8004a80:	d902      	bls.n	8004a88 <NVIC_EncodePriority+0x30>
 8004a82:	69fb      	ldr	r3, [r7, #28]
 8004a84:	3b03      	subs	r3, #3
 8004a86:	e000      	b.n	8004a8a <NVIC_EncodePriority+0x32>
 8004a88:	2300      	movs	r3, #0
 8004a8a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004a8c:	f04f 32ff 	mov.w	r2, #4294967295
 8004a90:	69bb      	ldr	r3, [r7, #24]
 8004a92:	fa02 f303 	lsl.w	r3, r2, r3
 8004a96:	43da      	mvns	r2, r3
 8004a98:	68bb      	ldr	r3, [r7, #8]
 8004a9a:	401a      	ands	r2, r3
 8004a9c:	697b      	ldr	r3, [r7, #20]
 8004a9e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004aa0:	f04f 31ff 	mov.w	r1, #4294967295
 8004aa4:	697b      	ldr	r3, [r7, #20]
 8004aa6:	fa01 f303 	lsl.w	r3, r1, r3
 8004aaa:	43d9      	mvns	r1, r3
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004ab0:	4313      	orrs	r3, r2
}
 8004ab2:	4618      	mov	r0, r3
 8004ab4:	3724      	adds	r7, #36	; 0x24
 8004ab6:	46bd      	mov	sp, r7
 8004ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004abc:	4770      	bx	lr
	...

08004ac0 <SysTick_Config>:
{
 8004ac0:	b580      	push	{r7, lr}
 8004ac2:	b082      	sub	sp, #8
 8004ac4:	af00      	add	r7, sp, #0
 8004ac6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	3b01      	subs	r3, #1
 8004acc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004ad0:	d301      	bcc.n	8004ad6 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8004ad2:	2301      	movs	r3, #1
 8004ad4:	e00f      	b.n	8004af6 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004ad6:	4a0a      	ldr	r2, [pc, #40]	; (8004b00 <SysTick_Config+0x40>)
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	3b01      	subs	r3, #1
 8004adc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004ade:	210f      	movs	r1, #15
 8004ae0:	f04f 30ff 	mov.w	r0, #4294967295
 8004ae4:	f7ff ff8e 	bl	8004a04 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004ae8:	4b05      	ldr	r3, [pc, #20]	; (8004b00 <SysTick_Config+0x40>)
 8004aea:	2200      	movs	r2, #0
 8004aec:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004aee:	4b04      	ldr	r3, [pc, #16]	; (8004b00 <SysTick_Config+0x40>)
 8004af0:	2207      	movs	r2, #7
 8004af2:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8004af4:	2300      	movs	r3, #0
}
 8004af6:	4618      	mov	r0, r3
 8004af8:	3708      	adds	r7, #8
 8004afa:	46bd      	mov	sp, r7
 8004afc:	bd80      	pop	{r7, pc}
 8004afe:	bf00      	nop
 8004b00:	e000e010 	.word	0xe000e010

08004b04 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004b04:	b580      	push	{r7, lr}
 8004b06:	b082      	sub	sp, #8
 8004b08:	af00      	add	r7, sp, #0
 8004b0a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004b0c:	6878      	ldr	r0, [r7, #4]
 8004b0e:	f7ff ff29 	bl	8004964 <__NVIC_SetPriorityGrouping>
}
 8004b12:	bf00      	nop
 8004b14:	3708      	adds	r7, #8
 8004b16:	46bd      	mov	sp, r7
 8004b18:	bd80      	pop	{r7, pc}

08004b1a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004b1a:	b580      	push	{r7, lr}
 8004b1c:	b086      	sub	sp, #24
 8004b1e:	af00      	add	r7, sp, #0
 8004b20:	4603      	mov	r3, r0
 8004b22:	60b9      	str	r1, [r7, #8]
 8004b24:	607a      	str	r2, [r7, #4]
 8004b26:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004b28:	2300      	movs	r3, #0
 8004b2a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004b2c:	f7ff ff3e 	bl	80049ac <__NVIC_GetPriorityGrouping>
 8004b30:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004b32:	687a      	ldr	r2, [r7, #4]
 8004b34:	68b9      	ldr	r1, [r7, #8]
 8004b36:	6978      	ldr	r0, [r7, #20]
 8004b38:	f7ff ff8e 	bl	8004a58 <NVIC_EncodePriority>
 8004b3c:	4602      	mov	r2, r0
 8004b3e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004b42:	4611      	mov	r1, r2
 8004b44:	4618      	mov	r0, r3
 8004b46:	f7ff ff5d 	bl	8004a04 <__NVIC_SetPriority>
}
 8004b4a:	bf00      	nop
 8004b4c:	3718      	adds	r7, #24
 8004b4e:	46bd      	mov	sp, r7
 8004b50:	bd80      	pop	{r7, pc}

08004b52 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004b52:	b580      	push	{r7, lr}
 8004b54:	b082      	sub	sp, #8
 8004b56:	af00      	add	r7, sp, #0
 8004b58:	4603      	mov	r3, r0
 8004b5a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004b5c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004b60:	4618      	mov	r0, r3
 8004b62:	f7ff ff31 	bl	80049c8 <__NVIC_EnableIRQ>
}
 8004b66:	bf00      	nop
 8004b68:	3708      	adds	r7, #8
 8004b6a:	46bd      	mov	sp, r7
 8004b6c:	bd80      	pop	{r7, pc}

08004b6e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004b6e:	b580      	push	{r7, lr}
 8004b70:	b082      	sub	sp, #8
 8004b72:	af00      	add	r7, sp, #0
 8004b74:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004b76:	6878      	ldr	r0, [r7, #4]
 8004b78:	f7ff ffa2 	bl	8004ac0 <SysTick_Config>
 8004b7c:	4603      	mov	r3, r0
}
 8004b7e:	4618      	mov	r0, r3
 8004b80:	3708      	adds	r7, #8
 8004b82:	46bd      	mov	sp, r7
 8004b84:	bd80      	pop	{r7, pc}
	...

08004b88 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004b88:	b480      	push	{r7}
 8004b8a:	b089      	sub	sp, #36	; 0x24
 8004b8c:	af00      	add	r7, sp, #0
 8004b8e:	6078      	str	r0, [r7, #4]
 8004b90:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004b92:	2300      	movs	r3, #0
 8004b94:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004b96:	2300      	movs	r3, #0
 8004b98:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004b9a:	2300      	movs	r3, #0
 8004b9c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004b9e:	2300      	movs	r3, #0
 8004ba0:	61fb      	str	r3, [r7, #28]
 8004ba2:	e159      	b.n	8004e58 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004ba4:	2201      	movs	r2, #1
 8004ba6:	69fb      	ldr	r3, [r7, #28]
 8004ba8:	fa02 f303 	lsl.w	r3, r2, r3
 8004bac:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004bae:	683b      	ldr	r3, [r7, #0]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	697a      	ldr	r2, [r7, #20]
 8004bb4:	4013      	ands	r3, r2
 8004bb6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004bb8:	693a      	ldr	r2, [r7, #16]
 8004bba:	697b      	ldr	r3, [r7, #20]
 8004bbc:	429a      	cmp	r2, r3
 8004bbe:	f040 8148 	bne.w	8004e52 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004bc2:	683b      	ldr	r3, [r7, #0]
 8004bc4:	685b      	ldr	r3, [r3, #4]
 8004bc6:	f003 0303 	and.w	r3, r3, #3
 8004bca:	2b01      	cmp	r3, #1
 8004bcc:	d005      	beq.n	8004bda <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004bce:	683b      	ldr	r3, [r7, #0]
 8004bd0:	685b      	ldr	r3, [r3, #4]
 8004bd2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004bd6:	2b02      	cmp	r3, #2
 8004bd8:	d130      	bne.n	8004c3c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	689b      	ldr	r3, [r3, #8]
 8004bde:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004be0:	69fb      	ldr	r3, [r7, #28]
 8004be2:	005b      	lsls	r3, r3, #1
 8004be4:	2203      	movs	r2, #3
 8004be6:	fa02 f303 	lsl.w	r3, r2, r3
 8004bea:	43db      	mvns	r3, r3
 8004bec:	69ba      	ldr	r2, [r7, #24]
 8004bee:	4013      	ands	r3, r2
 8004bf0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004bf2:	683b      	ldr	r3, [r7, #0]
 8004bf4:	68da      	ldr	r2, [r3, #12]
 8004bf6:	69fb      	ldr	r3, [r7, #28]
 8004bf8:	005b      	lsls	r3, r3, #1
 8004bfa:	fa02 f303 	lsl.w	r3, r2, r3
 8004bfe:	69ba      	ldr	r2, [r7, #24]
 8004c00:	4313      	orrs	r3, r2
 8004c02:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	69ba      	ldr	r2, [r7, #24]
 8004c08:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	685b      	ldr	r3, [r3, #4]
 8004c0e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004c10:	2201      	movs	r2, #1
 8004c12:	69fb      	ldr	r3, [r7, #28]
 8004c14:	fa02 f303 	lsl.w	r3, r2, r3
 8004c18:	43db      	mvns	r3, r3
 8004c1a:	69ba      	ldr	r2, [r7, #24]
 8004c1c:	4013      	ands	r3, r2
 8004c1e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004c20:	683b      	ldr	r3, [r7, #0]
 8004c22:	685b      	ldr	r3, [r3, #4]
 8004c24:	091b      	lsrs	r3, r3, #4
 8004c26:	f003 0201 	and.w	r2, r3, #1
 8004c2a:	69fb      	ldr	r3, [r7, #28]
 8004c2c:	fa02 f303 	lsl.w	r3, r2, r3
 8004c30:	69ba      	ldr	r2, [r7, #24]
 8004c32:	4313      	orrs	r3, r2
 8004c34:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	69ba      	ldr	r2, [r7, #24]
 8004c3a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004c3c:	683b      	ldr	r3, [r7, #0]
 8004c3e:	685b      	ldr	r3, [r3, #4]
 8004c40:	f003 0303 	and.w	r3, r3, #3
 8004c44:	2b03      	cmp	r3, #3
 8004c46:	d017      	beq.n	8004c78 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	68db      	ldr	r3, [r3, #12]
 8004c4c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004c4e:	69fb      	ldr	r3, [r7, #28]
 8004c50:	005b      	lsls	r3, r3, #1
 8004c52:	2203      	movs	r2, #3
 8004c54:	fa02 f303 	lsl.w	r3, r2, r3
 8004c58:	43db      	mvns	r3, r3
 8004c5a:	69ba      	ldr	r2, [r7, #24]
 8004c5c:	4013      	ands	r3, r2
 8004c5e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004c60:	683b      	ldr	r3, [r7, #0]
 8004c62:	689a      	ldr	r2, [r3, #8]
 8004c64:	69fb      	ldr	r3, [r7, #28]
 8004c66:	005b      	lsls	r3, r3, #1
 8004c68:	fa02 f303 	lsl.w	r3, r2, r3
 8004c6c:	69ba      	ldr	r2, [r7, #24]
 8004c6e:	4313      	orrs	r3, r2
 8004c70:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	69ba      	ldr	r2, [r7, #24]
 8004c76:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004c78:	683b      	ldr	r3, [r7, #0]
 8004c7a:	685b      	ldr	r3, [r3, #4]
 8004c7c:	f003 0303 	and.w	r3, r3, #3
 8004c80:	2b02      	cmp	r3, #2
 8004c82:	d123      	bne.n	8004ccc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004c84:	69fb      	ldr	r3, [r7, #28]
 8004c86:	08da      	lsrs	r2, r3, #3
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	3208      	adds	r2, #8
 8004c8c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004c90:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004c92:	69fb      	ldr	r3, [r7, #28]
 8004c94:	f003 0307 	and.w	r3, r3, #7
 8004c98:	009b      	lsls	r3, r3, #2
 8004c9a:	220f      	movs	r2, #15
 8004c9c:	fa02 f303 	lsl.w	r3, r2, r3
 8004ca0:	43db      	mvns	r3, r3
 8004ca2:	69ba      	ldr	r2, [r7, #24]
 8004ca4:	4013      	ands	r3, r2
 8004ca6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004ca8:	683b      	ldr	r3, [r7, #0]
 8004caa:	691a      	ldr	r2, [r3, #16]
 8004cac:	69fb      	ldr	r3, [r7, #28]
 8004cae:	f003 0307 	and.w	r3, r3, #7
 8004cb2:	009b      	lsls	r3, r3, #2
 8004cb4:	fa02 f303 	lsl.w	r3, r2, r3
 8004cb8:	69ba      	ldr	r2, [r7, #24]
 8004cba:	4313      	orrs	r3, r2
 8004cbc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004cbe:	69fb      	ldr	r3, [r7, #28]
 8004cc0:	08da      	lsrs	r2, r3, #3
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	3208      	adds	r2, #8
 8004cc6:	69b9      	ldr	r1, [r7, #24]
 8004cc8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004cd2:	69fb      	ldr	r3, [r7, #28]
 8004cd4:	005b      	lsls	r3, r3, #1
 8004cd6:	2203      	movs	r2, #3
 8004cd8:	fa02 f303 	lsl.w	r3, r2, r3
 8004cdc:	43db      	mvns	r3, r3
 8004cde:	69ba      	ldr	r2, [r7, #24]
 8004ce0:	4013      	ands	r3, r2
 8004ce2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004ce4:	683b      	ldr	r3, [r7, #0]
 8004ce6:	685b      	ldr	r3, [r3, #4]
 8004ce8:	f003 0203 	and.w	r2, r3, #3
 8004cec:	69fb      	ldr	r3, [r7, #28]
 8004cee:	005b      	lsls	r3, r3, #1
 8004cf0:	fa02 f303 	lsl.w	r3, r2, r3
 8004cf4:	69ba      	ldr	r2, [r7, #24]
 8004cf6:	4313      	orrs	r3, r2
 8004cf8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	69ba      	ldr	r2, [r7, #24]
 8004cfe:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004d00:	683b      	ldr	r3, [r7, #0]
 8004d02:	685b      	ldr	r3, [r3, #4]
 8004d04:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	f000 80a2 	beq.w	8004e52 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004d0e:	2300      	movs	r3, #0
 8004d10:	60fb      	str	r3, [r7, #12]
 8004d12:	4b57      	ldr	r3, [pc, #348]	; (8004e70 <HAL_GPIO_Init+0x2e8>)
 8004d14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d16:	4a56      	ldr	r2, [pc, #344]	; (8004e70 <HAL_GPIO_Init+0x2e8>)
 8004d18:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004d1c:	6453      	str	r3, [r2, #68]	; 0x44
 8004d1e:	4b54      	ldr	r3, [pc, #336]	; (8004e70 <HAL_GPIO_Init+0x2e8>)
 8004d20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d22:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004d26:	60fb      	str	r3, [r7, #12]
 8004d28:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004d2a:	4a52      	ldr	r2, [pc, #328]	; (8004e74 <HAL_GPIO_Init+0x2ec>)
 8004d2c:	69fb      	ldr	r3, [r7, #28]
 8004d2e:	089b      	lsrs	r3, r3, #2
 8004d30:	3302      	adds	r3, #2
 8004d32:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004d36:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004d38:	69fb      	ldr	r3, [r7, #28]
 8004d3a:	f003 0303 	and.w	r3, r3, #3
 8004d3e:	009b      	lsls	r3, r3, #2
 8004d40:	220f      	movs	r2, #15
 8004d42:	fa02 f303 	lsl.w	r3, r2, r3
 8004d46:	43db      	mvns	r3, r3
 8004d48:	69ba      	ldr	r2, [r7, #24]
 8004d4a:	4013      	ands	r3, r2
 8004d4c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	4a49      	ldr	r2, [pc, #292]	; (8004e78 <HAL_GPIO_Init+0x2f0>)
 8004d52:	4293      	cmp	r3, r2
 8004d54:	d019      	beq.n	8004d8a <HAL_GPIO_Init+0x202>
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	4a48      	ldr	r2, [pc, #288]	; (8004e7c <HAL_GPIO_Init+0x2f4>)
 8004d5a:	4293      	cmp	r3, r2
 8004d5c:	d013      	beq.n	8004d86 <HAL_GPIO_Init+0x1fe>
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	4a47      	ldr	r2, [pc, #284]	; (8004e80 <HAL_GPIO_Init+0x2f8>)
 8004d62:	4293      	cmp	r3, r2
 8004d64:	d00d      	beq.n	8004d82 <HAL_GPIO_Init+0x1fa>
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	4a46      	ldr	r2, [pc, #280]	; (8004e84 <HAL_GPIO_Init+0x2fc>)
 8004d6a:	4293      	cmp	r3, r2
 8004d6c:	d007      	beq.n	8004d7e <HAL_GPIO_Init+0x1f6>
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	4a45      	ldr	r2, [pc, #276]	; (8004e88 <HAL_GPIO_Init+0x300>)
 8004d72:	4293      	cmp	r3, r2
 8004d74:	d101      	bne.n	8004d7a <HAL_GPIO_Init+0x1f2>
 8004d76:	2304      	movs	r3, #4
 8004d78:	e008      	b.n	8004d8c <HAL_GPIO_Init+0x204>
 8004d7a:	2307      	movs	r3, #7
 8004d7c:	e006      	b.n	8004d8c <HAL_GPIO_Init+0x204>
 8004d7e:	2303      	movs	r3, #3
 8004d80:	e004      	b.n	8004d8c <HAL_GPIO_Init+0x204>
 8004d82:	2302      	movs	r3, #2
 8004d84:	e002      	b.n	8004d8c <HAL_GPIO_Init+0x204>
 8004d86:	2301      	movs	r3, #1
 8004d88:	e000      	b.n	8004d8c <HAL_GPIO_Init+0x204>
 8004d8a:	2300      	movs	r3, #0
 8004d8c:	69fa      	ldr	r2, [r7, #28]
 8004d8e:	f002 0203 	and.w	r2, r2, #3
 8004d92:	0092      	lsls	r2, r2, #2
 8004d94:	4093      	lsls	r3, r2
 8004d96:	69ba      	ldr	r2, [r7, #24]
 8004d98:	4313      	orrs	r3, r2
 8004d9a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004d9c:	4935      	ldr	r1, [pc, #212]	; (8004e74 <HAL_GPIO_Init+0x2ec>)
 8004d9e:	69fb      	ldr	r3, [r7, #28]
 8004da0:	089b      	lsrs	r3, r3, #2
 8004da2:	3302      	adds	r3, #2
 8004da4:	69ba      	ldr	r2, [r7, #24]
 8004da6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004daa:	4b38      	ldr	r3, [pc, #224]	; (8004e8c <HAL_GPIO_Init+0x304>)
 8004dac:	689b      	ldr	r3, [r3, #8]
 8004dae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004db0:	693b      	ldr	r3, [r7, #16]
 8004db2:	43db      	mvns	r3, r3
 8004db4:	69ba      	ldr	r2, [r7, #24]
 8004db6:	4013      	ands	r3, r2
 8004db8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004dba:	683b      	ldr	r3, [r7, #0]
 8004dbc:	685b      	ldr	r3, [r3, #4]
 8004dbe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d003      	beq.n	8004dce <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8004dc6:	69ba      	ldr	r2, [r7, #24]
 8004dc8:	693b      	ldr	r3, [r7, #16]
 8004dca:	4313      	orrs	r3, r2
 8004dcc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004dce:	4a2f      	ldr	r2, [pc, #188]	; (8004e8c <HAL_GPIO_Init+0x304>)
 8004dd0:	69bb      	ldr	r3, [r7, #24]
 8004dd2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004dd4:	4b2d      	ldr	r3, [pc, #180]	; (8004e8c <HAL_GPIO_Init+0x304>)
 8004dd6:	68db      	ldr	r3, [r3, #12]
 8004dd8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004dda:	693b      	ldr	r3, [r7, #16]
 8004ddc:	43db      	mvns	r3, r3
 8004dde:	69ba      	ldr	r2, [r7, #24]
 8004de0:	4013      	ands	r3, r2
 8004de2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004de4:	683b      	ldr	r3, [r7, #0]
 8004de6:	685b      	ldr	r3, [r3, #4]
 8004de8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d003      	beq.n	8004df8 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8004df0:	69ba      	ldr	r2, [r7, #24]
 8004df2:	693b      	ldr	r3, [r7, #16]
 8004df4:	4313      	orrs	r3, r2
 8004df6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004df8:	4a24      	ldr	r2, [pc, #144]	; (8004e8c <HAL_GPIO_Init+0x304>)
 8004dfa:	69bb      	ldr	r3, [r7, #24]
 8004dfc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8004dfe:	4b23      	ldr	r3, [pc, #140]	; (8004e8c <HAL_GPIO_Init+0x304>)
 8004e00:	685b      	ldr	r3, [r3, #4]
 8004e02:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004e04:	693b      	ldr	r3, [r7, #16]
 8004e06:	43db      	mvns	r3, r3
 8004e08:	69ba      	ldr	r2, [r7, #24]
 8004e0a:	4013      	ands	r3, r2
 8004e0c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004e0e:	683b      	ldr	r3, [r7, #0]
 8004e10:	685b      	ldr	r3, [r3, #4]
 8004e12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d003      	beq.n	8004e22 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8004e1a:	69ba      	ldr	r2, [r7, #24]
 8004e1c:	693b      	ldr	r3, [r7, #16]
 8004e1e:	4313      	orrs	r3, r2
 8004e20:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004e22:	4a1a      	ldr	r2, [pc, #104]	; (8004e8c <HAL_GPIO_Init+0x304>)
 8004e24:	69bb      	ldr	r3, [r7, #24]
 8004e26:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004e28:	4b18      	ldr	r3, [pc, #96]	; (8004e8c <HAL_GPIO_Init+0x304>)
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004e2e:	693b      	ldr	r3, [r7, #16]
 8004e30:	43db      	mvns	r3, r3
 8004e32:	69ba      	ldr	r2, [r7, #24]
 8004e34:	4013      	ands	r3, r2
 8004e36:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004e38:	683b      	ldr	r3, [r7, #0]
 8004e3a:	685b      	ldr	r3, [r3, #4]
 8004e3c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d003      	beq.n	8004e4c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8004e44:	69ba      	ldr	r2, [r7, #24]
 8004e46:	693b      	ldr	r3, [r7, #16]
 8004e48:	4313      	orrs	r3, r2
 8004e4a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004e4c:	4a0f      	ldr	r2, [pc, #60]	; (8004e8c <HAL_GPIO_Init+0x304>)
 8004e4e:	69bb      	ldr	r3, [r7, #24]
 8004e50:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004e52:	69fb      	ldr	r3, [r7, #28]
 8004e54:	3301      	adds	r3, #1
 8004e56:	61fb      	str	r3, [r7, #28]
 8004e58:	69fb      	ldr	r3, [r7, #28]
 8004e5a:	2b0f      	cmp	r3, #15
 8004e5c:	f67f aea2 	bls.w	8004ba4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004e60:	bf00      	nop
 8004e62:	bf00      	nop
 8004e64:	3724      	adds	r7, #36	; 0x24
 8004e66:	46bd      	mov	sp, r7
 8004e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e6c:	4770      	bx	lr
 8004e6e:	bf00      	nop
 8004e70:	40023800 	.word	0x40023800
 8004e74:	40013800 	.word	0x40013800
 8004e78:	40020000 	.word	0x40020000
 8004e7c:	40020400 	.word	0x40020400
 8004e80:	40020800 	.word	0x40020800
 8004e84:	40020c00 	.word	0x40020c00
 8004e88:	40021000 	.word	0x40021000
 8004e8c:	40013c00 	.word	0x40013c00

08004e90 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004e90:	b480      	push	{r7}
 8004e92:	b085      	sub	sp, #20
 8004e94:	af00      	add	r7, sp, #0
 8004e96:	6078      	str	r0, [r7, #4]
 8004e98:	460b      	mov	r3, r1
 8004e9a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	691a      	ldr	r2, [r3, #16]
 8004ea0:	887b      	ldrh	r3, [r7, #2]
 8004ea2:	4013      	ands	r3, r2
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d002      	beq.n	8004eae <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004ea8:	2301      	movs	r3, #1
 8004eaa:	73fb      	strb	r3, [r7, #15]
 8004eac:	e001      	b.n	8004eb2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004eae:	2300      	movs	r3, #0
 8004eb0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004eb2:	7bfb      	ldrb	r3, [r7, #15]
}
 8004eb4:	4618      	mov	r0, r3
 8004eb6:	3714      	adds	r7, #20
 8004eb8:	46bd      	mov	sp, r7
 8004eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ebe:	4770      	bx	lr

08004ec0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004ec0:	b480      	push	{r7}
 8004ec2:	b083      	sub	sp, #12
 8004ec4:	af00      	add	r7, sp, #0
 8004ec6:	6078      	str	r0, [r7, #4]
 8004ec8:	460b      	mov	r3, r1
 8004eca:	807b      	strh	r3, [r7, #2]
 8004ecc:	4613      	mov	r3, r2
 8004ece:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004ed0:	787b      	ldrb	r3, [r7, #1]
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d003      	beq.n	8004ede <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004ed6:	887a      	ldrh	r2, [r7, #2]
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004edc:	e003      	b.n	8004ee6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004ede:	887b      	ldrh	r3, [r7, #2]
 8004ee0:	041a      	lsls	r2, r3, #16
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	619a      	str	r2, [r3, #24]
}
 8004ee6:	bf00      	nop
 8004ee8:	370c      	adds	r7, #12
 8004eea:	46bd      	mov	sp, r7
 8004eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ef0:	4770      	bx	lr

08004ef2 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004ef2:	b480      	push	{r7}
 8004ef4:	b085      	sub	sp, #20
 8004ef6:	af00      	add	r7, sp, #0
 8004ef8:	6078      	str	r0, [r7, #4]
 8004efa:	460b      	mov	r3, r1
 8004efc:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	695b      	ldr	r3, [r3, #20]
 8004f02:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004f04:	887a      	ldrh	r2, [r7, #2]
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	4013      	ands	r3, r2
 8004f0a:	041a      	lsls	r2, r3, #16
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	43d9      	mvns	r1, r3
 8004f10:	887b      	ldrh	r3, [r7, #2]
 8004f12:	400b      	ands	r3, r1
 8004f14:	431a      	orrs	r2, r3
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	619a      	str	r2, [r3, #24]
}
 8004f1a:	bf00      	nop
 8004f1c:	3714      	adds	r7, #20
 8004f1e:	46bd      	mov	sp, r7
 8004f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f24:	4770      	bx	lr
	...

08004f28 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004f28:	b580      	push	{r7, lr}
 8004f2a:	b086      	sub	sp, #24
 8004f2c:	af00      	add	r7, sp, #0
 8004f2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d101      	bne.n	8004f3a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004f36:	2301      	movs	r3, #1
 8004f38:	e267      	b.n	800540a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	f003 0301 	and.w	r3, r3, #1
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d075      	beq.n	8005032 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004f46:	4b88      	ldr	r3, [pc, #544]	; (8005168 <HAL_RCC_OscConfig+0x240>)
 8004f48:	689b      	ldr	r3, [r3, #8]
 8004f4a:	f003 030c 	and.w	r3, r3, #12
 8004f4e:	2b04      	cmp	r3, #4
 8004f50:	d00c      	beq.n	8004f6c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004f52:	4b85      	ldr	r3, [pc, #532]	; (8005168 <HAL_RCC_OscConfig+0x240>)
 8004f54:	689b      	ldr	r3, [r3, #8]
 8004f56:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004f5a:	2b08      	cmp	r3, #8
 8004f5c:	d112      	bne.n	8004f84 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004f5e:	4b82      	ldr	r3, [pc, #520]	; (8005168 <HAL_RCC_OscConfig+0x240>)
 8004f60:	685b      	ldr	r3, [r3, #4]
 8004f62:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004f66:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004f6a:	d10b      	bne.n	8004f84 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004f6c:	4b7e      	ldr	r3, [pc, #504]	; (8005168 <HAL_RCC_OscConfig+0x240>)
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	d05b      	beq.n	8005030 <HAL_RCC_OscConfig+0x108>
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	685b      	ldr	r3, [r3, #4]
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d157      	bne.n	8005030 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004f80:	2301      	movs	r3, #1
 8004f82:	e242      	b.n	800540a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	685b      	ldr	r3, [r3, #4]
 8004f88:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004f8c:	d106      	bne.n	8004f9c <HAL_RCC_OscConfig+0x74>
 8004f8e:	4b76      	ldr	r3, [pc, #472]	; (8005168 <HAL_RCC_OscConfig+0x240>)
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	4a75      	ldr	r2, [pc, #468]	; (8005168 <HAL_RCC_OscConfig+0x240>)
 8004f94:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004f98:	6013      	str	r3, [r2, #0]
 8004f9a:	e01d      	b.n	8004fd8 <HAL_RCC_OscConfig+0xb0>
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	685b      	ldr	r3, [r3, #4]
 8004fa0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004fa4:	d10c      	bne.n	8004fc0 <HAL_RCC_OscConfig+0x98>
 8004fa6:	4b70      	ldr	r3, [pc, #448]	; (8005168 <HAL_RCC_OscConfig+0x240>)
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	4a6f      	ldr	r2, [pc, #444]	; (8005168 <HAL_RCC_OscConfig+0x240>)
 8004fac:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004fb0:	6013      	str	r3, [r2, #0]
 8004fb2:	4b6d      	ldr	r3, [pc, #436]	; (8005168 <HAL_RCC_OscConfig+0x240>)
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	4a6c      	ldr	r2, [pc, #432]	; (8005168 <HAL_RCC_OscConfig+0x240>)
 8004fb8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004fbc:	6013      	str	r3, [r2, #0]
 8004fbe:	e00b      	b.n	8004fd8 <HAL_RCC_OscConfig+0xb0>
 8004fc0:	4b69      	ldr	r3, [pc, #420]	; (8005168 <HAL_RCC_OscConfig+0x240>)
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	4a68      	ldr	r2, [pc, #416]	; (8005168 <HAL_RCC_OscConfig+0x240>)
 8004fc6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004fca:	6013      	str	r3, [r2, #0]
 8004fcc:	4b66      	ldr	r3, [pc, #408]	; (8005168 <HAL_RCC_OscConfig+0x240>)
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	4a65      	ldr	r2, [pc, #404]	; (8005168 <HAL_RCC_OscConfig+0x240>)
 8004fd2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004fd6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	685b      	ldr	r3, [r3, #4]
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	d013      	beq.n	8005008 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004fe0:	f7ff f834 	bl	800404c <HAL_GetTick>
 8004fe4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004fe6:	e008      	b.n	8004ffa <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004fe8:	f7ff f830 	bl	800404c <HAL_GetTick>
 8004fec:	4602      	mov	r2, r0
 8004fee:	693b      	ldr	r3, [r7, #16]
 8004ff0:	1ad3      	subs	r3, r2, r3
 8004ff2:	2b64      	cmp	r3, #100	; 0x64
 8004ff4:	d901      	bls.n	8004ffa <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004ff6:	2303      	movs	r3, #3
 8004ff8:	e207      	b.n	800540a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004ffa:	4b5b      	ldr	r3, [pc, #364]	; (8005168 <HAL_RCC_OscConfig+0x240>)
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005002:	2b00      	cmp	r3, #0
 8005004:	d0f0      	beq.n	8004fe8 <HAL_RCC_OscConfig+0xc0>
 8005006:	e014      	b.n	8005032 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005008:	f7ff f820 	bl	800404c <HAL_GetTick>
 800500c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800500e:	e008      	b.n	8005022 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005010:	f7ff f81c 	bl	800404c <HAL_GetTick>
 8005014:	4602      	mov	r2, r0
 8005016:	693b      	ldr	r3, [r7, #16]
 8005018:	1ad3      	subs	r3, r2, r3
 800501a:	2b64      	cmp	r3, #100	; 0x64
 800501c:	d901      	bls.n	8005022 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800501e:	2303      	movs	r3, #3
 8005020:	e1f3      	b.n	800540a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005022:	4b51      	ldr	r3, [pc, #324]	; (8005168 <HAL_RCC_OscConfig+0x240>)
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800502a:	2b00      	cmp	r3, #0
 800502c:	d1f0      	bne.n	8005010 <HAL_RCC_OscConfig+0xe8>
 800502e:	e000      	b.n	8005032 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005030:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	f003 0302 	and.w	r3, r3, #2
 800503a:	2b00      	cmp	r3, #0
 800503c:	d063      	beq.n	8005106 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800503e:	4b4a      	ldr	r3, [pc, #296]	; (8005168 <HAL_RCC_OscConfig+0x240>)
 8005040:	689b      	ldr	r3, [r3, #8]
 8005042:	f003 030c 	and.w	r3, r3, #12
 8005046:	2b00      	cmp	r3, #0
 8005048:	d00b      	beq.n	8005062 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800504a:	4b47      	ldr	r3, [pc, #284]	; (8005168 <HAL_RCC_OscConfig+0x240>)
 800504c:	689b      	ldr	r3, [r3, #8]
 800504e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005052:	2b08      	cmp	r3, #8
 8005054:	d11c      	bne.n	8005090 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005056:	4b44      	ldr	r3, [pc, #272]	; (8005168 <HAL_RCC_OscConfig+0x240>)
 8005058:	685b      	ldr	r3, [r3, #4]
 800505a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800505e:	2b00      	cmp	r3, #0
 8005060:	d116      	bne.n	8005090 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005062:	4b41      	ldr	r3, [pc, #260]	; (8005168 <HAL_RCC_OscConfig+0x240>)
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	f003 0302 	and.w	r3, r3, #2
 800506a:	2b00      	cmp	r3, #0
 800506c:	d005      	beq.n	800507a <HAL_RCC_OscConfig+0x152>
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	68db      	ldr	r3, [r3, #12]
 8005072:	2b01      	cmp	r3, #1
 8005074:	d001      	beq.n	800507a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8005076:	2301      	movs	r3, #1
 8005078:	e1c7      	b.n	800540a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800507a:	4b3b      	ldr	r3, [pc, #236]	; (8005168 <HAL_RCC_OscConfig+0x240>)
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	691b      	ldr	r3, [r3, #16]
 8005086:	00db      	lsls	r3, r3, #3
 8005088:	4937      	ldr	r1, [pc, #220]	; (8005168 <HAL_RCC_OscConfig+0x240>)
 800508a:	4313      	orrs	r3, r2
 800508c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800508e:	e03a      	b.n	8005106 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	68db      	ldr	r3, [r3, #12]
 8005094:	2b00      	cmp	r3, #0
 8005096:	d020      	beq.n	80050da <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005098:	4b34      	ldr	r3, [pc, #208]	; (800516c <HAL_RCC_OscConfig+0x244>)
 800509a:	2201      	movs	r2, #1
 800509c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800509e:	f7fe ffd5 	bl	800404c <HAL_GetTick>
 80050a2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80050a4:	e008      	b.n	80050b8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80050a6:	f7fe ffd1 	bl	800404c <HAL_GetTick>
 80050aa:	4602      	mov	r2, r0
 80050ac:	693b      	ldr	r3, [r7, #16]
 80050ae:	1ad3      	subs	r3, r2, r3
 80050b0:	2b02      	cmp	r3, #2
 80050b2:	d901      	bls.n	80050b8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80050b4:	2303      	movs	r3, #3
 80050b6:	e1a8      	b.n	800540a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80050b8:	4b2b      	ldr	r3, [pc, #172]	; (8005168 <HAL_RCC_OscConfig+0x240>)
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	f003 0302 	and.w	r3, r3, #2
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	d0f0      	beq.n	80050a6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80050c4:	4b28      	ldr	r3, [pc, #160]	; (8005168 <HAL_RCC_OscConfig+0x240>)
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	691b      	ldr	r3, [r3, #16]
 80050d0:	00db      	lsls	r3, r3, #3
 80050d2:	4925      	ldr	r1, [pc, #148]	; (8005168 <HAL_RCC_OscConfig+0x240>)
 80050d4:	4313      	orrs	r3, r2
 80050d6:	600b      	str	r3, [r1, #0]
 80050d8:	e015      	b.n	8005106 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80050da:	4b24      	ldr	r3, [pc, #144]	; (800516c <HAL_RCC_OscConfig+0x244>)
 80050dc:	2200      	movs	r2, #0
 80050de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80050e0:	f7fe ffb4 	bl	800404c <HAL_GetTick>
 80050e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80050e6:	e008      	b.n	80050fa <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80050e8:	f7fe ffb0 	bl	800404c <HAL_GetTick>
 80050ec:	4602      	mov	r2, r0
 80050ee:	693b      	ldr	r3, [r7, #16]
 80050f0:	1ad3      	subs	r3, r2, r3
 80050f2:	2b02      	cmp	r3, #2
 80050f4:	d901      	bls.n	80050fa <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80050f6:	2303      	movs	r3, #3
 80050f8:	e187      	b.n	800540a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80050fa:	4b1b      	ldr	r3, [pc, #108]	; (8005168 <HAL_RCC_OscConfig+0x240>)
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	f003 0302 	and.w	r3, r3, #2
 8005102:	2b00      	cmp	r3, #0
 8005104:	d1f0      	bne.n	80050e8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	f003 0308 	and.w	r3, r3, #8
 800510e:	2b00      	cmp	r3, #0
 8005110:	d036      	beq.n	8005180 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	695b      	ldr	r3, [r3, #20]
 8005116:	2b00      	cmp	r3, #0
 8005118:	d016      	beq.n	8005148 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800511a:	4b15      	ldr	r3, [pc, #84]	; (8005170 <HAL_RCC_OscConfig+0x248>)
 800511c:	2201      	movs	r2, #1
 800511e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005120:	f7fe ff94 	bl	800404c <HAL_GetTick>
 8005124:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005126:	e008      	b.n	800513a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005128:	f7fe ff90 	bl	800404c <HAL_GetTick>
 800512c:	4602      	mov	r2, r0
 800512e:	693b      	ldr	r3, [r7, #16]
 8005130:	1ad3      	subs	r3, r2, r3
 8005132:	2b02      	cmp	r3, #2
 8005134:	d901      	bls.n	800513a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005136:	2303      	movs	r3, #3
 8005138:	e167      	b.n	800540a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800513a:	4b0b      	ldr	r3, [pc, #44]	; (8005168 <HAL_RCC_OscConfig+0x240>)
 800513c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800513e:	f003 0302 	and.w	r3, r3, #2
 8005142:	2b00      	cmp	r3, #0
 8005144:	d0f0      	beq.n	8005128 <HAL_RCC_OscConfig+0x200>
 8005146:	e01b      	b.n	8005180 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005148:	4b09      	ldr	r3, [pc, #36]	; (8005170 <HAL_RCC_OscConfig+0x248>)
 800514a:	2200      	movs	r2, #0
 800514c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800514e:	f7fe ff7d 	bl	800404c <HAL_GetTick>
 8005152:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005154:	e00e      	b.n	8005174 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005156:	f7fe ff79 	bl	800404c <HAL_GetTick>
 800515a:	4602      	mov	r2, r0
 800515c:	693b      	ldr	r3, [r7, #16]
 800515e:	1ad3      	subs	r3, r2, r3
 8005160:	2b02      	cmp	r3, #2
 8005162:	d907      	bls.n	8005174 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005164:	2303      	movs	r3, #3
 8005166:	e150      	b.n	800540a <HAL_RCC_OscConfig+0x4e2>
 8005168:	40023800 	.word	0x40023800
 800516c:	42470000 	.word	0x42470000
 8005170:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005174:	4b88      	ldr	r3, [pc, #544]	; (8005398 <HAL_RCC_OscConfig+0x470>)
 8005176:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005178:	f003 0302 	and.w	r3, r3, #2
 800517c:	2b00      	cmp	r3, #0
 800517e:	d1ea      	bne.n	8005156 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	f003 0304 	and.w	r3, r3, #4
 8005188:	2b00      	cmp	r3, #0
 800518a:	f000 8097 	beq.w	80052bc <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800518e:	2300      	movs	r3, #0
 8005190:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005192:	4b81      	ldr	r3, [pc, #516]	; (8005398 <HAL_RCC_OscConfig+0x470>)
 8005194:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005196:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800519a:	2b00      	cmp	r3, #0
 800519c:	d10f      	bne.n	80051be <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800519e:	2300      	movs	r3, #0
 80051a0:	60bb      	str	r3, [r7, #8]
 80051a2:	4b7d      	ldr	r3, [pc, #500]	; (8005398 <HAL_RCC_OscConfig+0x470>)
 80051a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051a6:	4a7c      	ldr	r2, [pc, #496]	; (8005398 <HAL_RCC_OscConfig+0x470>)
 80051a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80051ac:	6413      	str	r3, [r2, #64]	; 0x40
 80051ae:	4b7a      	ldr	r3, [pc, #488]	; (8005398 <HAL_RCC_OscConfig+0x470>)
 80051b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80051b6:	60bb      	str	r3, [r7, #8]
 80051b8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80051ba:	2301      	movs	r3, #1
 80051bc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80051be:	4b77      	ldr	r3, [pc, #476]	; (800539c <HAL_RCC_OscConfig+0x474>)
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d118      	bne.n	80051fc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80051ca:	4b74      	ldr	r3, [pc, #464]	; (800539c <HAL_RCC_OscConfig+0x474>)
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	4a73      	ldr	r2, [pc, #460]	; (800539c <HAL_RCC_OscConfig+0x474>)
 80051d0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80051d4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80051d6:	f7fe ff39 	bl	800404c <HAL_GetTick>
 80051da:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80051dc:	e008      	b.n	80051f0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80051de:	f7fe ff35 	bl	800404c <HAL_GetTick>
 80051e2:	4602      	mov	r2, r0
 80051e4:	693b      	ldr	r3, [r7, #16]
 80051e6:	1ad3      	subs	r3, r2, r3
 80051e8:	2b02      	cmp	r3, #2
 80051ea:	d901      	bls.n	80051f0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80051ec:	2303      	movs	r3, #3
 80051ee:	e10c      	b.n	800540a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80051f0:	4b6a      	ldr	r3, [pc, #424]	; (800539c <HAL_RCC_OscConfig+0x474>)
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d0f0      	beq.n	80051de <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	689b      	ldr	r3, [r3, #8]
 8005200:	2b01      	cmp	r3, #1
 8005202:	d106      	bne.n	8005212 <HAL_RCC_OscConfig+0x2ea>
 8005204:	4b64      	ldr	r3, [pc, #400]	; (8005398 <HAL_RCC_OscConfig+0x470>)
 8005206:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005208:	4a63      	ldr	r2, [pc, #396]	; (8005398 <HAL_RCC_OscConfig+0x470>)
 800520a:	f043 0301 	orr.w	r3, r3, #1
 800520e:	6713      	str	r3, [r2, #112]	; 0x70
 8005210:	e01c      	b.n	800524c <HAL_RCC_OscConfig+0x324>
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	689b      	ldr	r3, [r3, #8]
 8005216:	2b05      	cmp	r3, #5
 8005218:	d10c      	bne.n	8005234 <HAL_RCC_OscConfig+0x30c>
 800521a:	4b5f      	ldr	r3, [pc, #380]	; (8005398 <HAL_RCC_OscConfig+0x470>)
 800521c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800521e:	4a5e      	ldr	r2, [pc, #376]	; (8005398 <HAL_RCC_OscConfig+0x470>)
 8005220:	f043 0304 	orr.w	r3, r3, #4
 8005224:	6713      	str	r3, [r2, #112]	; 0x70
 8005226:	4b5c      	ldr	r3, [pc, #368]	; (8005398 <HAL_RCC_OscConfig+0x470>)
 8005228:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800522a:	4a5b      	ldr	r2, [pc, #364]	; (8005398 <HAL_RCC_OscConfig+0x470>)
 800522c:	f043 0301 	orr.w	r3, r3, #1
 8005230:	6713      	str	r3, [r2, #112]	; 0x70
 8005232:	e00b      	b.n	800524c <HAL_RCC_OscConfig+0x324>
 8005234:	4b58      	ldr	r3, [pc, #352]	; (8005398 <HAL_RCC_OscConfig+0x470>)
 8005236:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005238:	4a57      	ldr	r2, [pc, #348]	; (8005398 <HAL_RCC_OscConfig+0x470>)
 800523a:	f023 0301 	bic.w	r3, r3, #1
 800523e:	6713      	str	r3, [r2, #112]	; 0x70
 8005240:	4b55      	ldr	r3, [pc, #340]	; (8005398 <HAL_RCC_OscConfig+0x470>)
 8005242:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005244:	4a54      	ldr	r2, [pc, #336]	; (8005398 <HAL_RCC_OscConfig+0x470>)
 8005246:	f023 0304 	bic.w	r3, r3, #4
 800524a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	689b      	ldr	r3, [r3, #8]
 8005250:	2b00      	cmp	r3, #0
 8005252:	d015      	beq.n	8005280 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005254:	f7fe fefa 	bl	800404c <HAL_GetTick>
 8005258:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800525a:	e00a      	b.n	8005272 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800525c:	f7fe fef6 	bl	800404c <HAL_GetTick>
 8005260:	4602      	mov	r2, r0
 8005262:	693b      	ldr	r3, [r7, #16]
 8005264:	1ad3      	subs	r3, r2, r3
 8005266:	f241 3288 	movw	r2, #5000	; 0x1388
 800526a:	4293      	cmp	r3, r2
 800526c:	d901      	bls.n	8005272 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800526e:	2303      	movs	r3, #3
 8005270:	e0cb      	b.n	800540a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005272:	4b49      	ldr	r3, [pc, #292]	; (8005398 <HAL_RCC_OscConfig+0x470>)
 8005274:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005276:	f003 0302 	and.w	r3, r3, #2
 800527a:	2b00      	cmp	r3, #0
 800527c:	d0ee      	beq.n	800525c <HAL_RCC_OscConfig+0x334>
 800527e:	e014      	b.n	80052aa <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005280:	f7fe fee4 	bl	800404c <HAL_GetTick>
 8005284:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005286:	e00a      	b.n	800529e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005288:	f7fe fee0 	bl	800404c <HAL_GetTick>
 800528c:	4602      	mov	r2, r0
 800528e:	693b      	ldr	r3, [r7, #16]
 8005290:	1ad3      	subs	r3, r2, r3
 8005292:	f241 3288 	movw	r2, #5000	; 0x1388
 8005296:	4293      	cmp	r3, r2
 8005298:	d901      	bls.n	800529e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800529a:	2303      	movs	r3, #3
 800529c:	e0b5      	b.n	800540a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800529e:	4b3e      	ldr	r3, [pc, #248]	; (8005398 <HAL_RCC_OscConfig+0x470>)
 80052a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80052a2:	f003 0302 	and.w	r3, r3, #2
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d1ee      	bne.n	8005288 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80052aa:	7dfb      	ldrb	r3, [r7, #23]
 80052ac:	2b01      	cmp	r3, #1
 80052ae:	d105      	bne.n	80052bc <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80052b0:	4b39      	ldr	r3, [pc, #228]	; (8005398 <HAL_RCC_OscConfig+0x470>)
 80052b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052b4:	4a38      	ldr	r2, [pc, #224]	; (8005398 <HAL_RCC_OscConfig+0x470>)
 80052b6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80052ba:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	699b      	ldr	r3, [r3, #24]
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	f000 80a1 	beq.w	8005408 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80052c6:	4b34      	ldr	r3, [pc, #208]	; (8005398 <HAL_RCC_OscConfig+0x470>)
 80052c8:	689b      	ldr	r3, [r3, #8]
 80052ca:	f003 030c 	and.w	r3, r3, #12
 80052ce:	2b08      	cmp	r3, #8
 80052d0:	d05c      	beq.n	800538c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	699b      	ldr	r3, [r3, #24]
 80052d6:	2b02      	cmp	r3, #2
 80052d8:	d141      	bne.n	800535e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80052da:	4b31      	ldr	r3, [pc, #196]	; (80053a0 <HAL_RCC_OscConfig+0x478>)
 80052dc:	2200      	movs	r2, #0
 80052de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80052e0:	f7fe feb4 	bl	800404c <HAL_GetTick>
 80052e4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80052e6:	e008      	b.n	80052fa <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80052e8:	f7fe feb0 	bl	800404c <HAL_GetTick>
 80052ec:	4602      	mov	r2, r0
 80052ee:	693b      	ldr	r3, [r7, #16]
 80052f0:	1ad3      	subs	r3, r2, r3
 80052f2:	2b02      	cmp	r3, #2
 80052f4:	d901      	bls.n	80052fa <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80052f6:	2303      	movs	r3, #3
 80052f8:	e087      	b.n	800540a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80052fa:	4b27      	ldr	r3, [pc, #156]	; (8005398 <HAL_RCC_OscConfig+0x470>)
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005302:	2b00      	cmp	r3, #0
 8005304:	d1f0      	bne.n	80052e8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	69da      	ldr	r2, [r3, #28]
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	6a1b      	ldr	r3, [r3, #32]
 800530e:	431a      	orrs	r2, r3
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005314:	019b      	lsls	r3, r3, #6
 8005316:	431a      	orrs	r2, r3
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800531c:	085b      	lsrs	r3, r3, #1
 800531e:	3b01      	subs	r3, #1
 8005320:	041b      	lsls	r3, r3, #16
 8005322:	431a      	orrs	r2, r3
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005328:	061b      	lsls	r3, r3, #24
 800532a:	491b      	ldr	r1, [pc, #108]	; (8005398 <HAL_RCC_OscConfig+0x470>)
 800532c:	4313      	orrs	r3, r2
 800532e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005330:	4b1b      	ldr	r3, [pc, #108]	; (80053a0 <HAL_RCC_OscConfig+0x478>)
 8005332:	2201      	movs	r2, #1
 8005334:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005336:	f7fe fe89 	bl	800404c <HAL_GetTick>
 800533a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800533c:	e008      	b.n	8005350 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800533e:	f7fe fe85 	bl	800404c <HAL_GetTick>
 8005342:	4602      	mov	r2, r0
 8005344:	693b      	ldr	r3, [r7, #16]
 8005346:	1ad3      	subs	r3, r2, r3
 8005348:	2b02      	cmp	r3, #2
 800534a:	d901      	bls.n	8005350 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800534c:	2303      	movs	r3, #3
 800534e:	e05c      	b.n	800540a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005350:	4b11      	ldr	r3, [pc, #68]	; (8005398 <HAL_RCC_OscConfig+0x470>)
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005358:	2b00      	cmp	r3, #0
 800535a:	d0f0      	beq.n	800533e <HAL_RCC_OscConfig+0x416>
 800535c:	e054      	b.n	8005408 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800535e:	4b10      	ldr	r3, [pc, #64]	; (80053a0 <HAL_RCC_OscConfig+0x478>)
 8005360:	2200      	movs	r2, #0
 8005362:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005364:	f7fe fe72 	bl	800404c <HAL_GetTick>
 8005368:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800536a:	e008      	b.n	800537e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800536c:	f7fe fe6e 	bl	800404c <HAL_GetTick>
 8005370:	4602      	mov	r2, r0
 8005372:	693b      	ldr	r3, [r7, #16]
 8005374:	1ad3      	subs	r3, r2, r3
 8005376:	2b02      	cmp	r3, #2
 8005378:	d901      	bls.n	800537e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800537a:	2303      	movs	r3, #3
 800537c:	e045      	b.n	800540a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800537e:	4b06      	ldr	r3, [pc, #24]	; (8005398 <HAL_RCC_OscConfig+0x470>)
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005386:	2b00      	cmp	r3, #0
 8005388:	d1f0      	bne.n	800536c <HAL_RCC_OscConfig+0x444>
 800538a:	e03d      	b.n	8005408 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	699b      	ldr	r3, [r3, #24]
 8005390:	2b01      	cmp	r3, #1
 8005392:	d107      	bne.n	80053a4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8005394:	2301      	movs	r3, #1
 8005396:	e038      	b.n	800540a <HAL_RCC_OscConfig+0x4e2>
 8005398:	40023800 	.word	0x40023800
 800539c:	40007000 	.word	0x40007000
 80053a0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80053a4:	4b1b      	ldr	r3, [pc, #108]	; (8005414 <HAL_RCC_OscConfig+0x4ec>)
 80053a6:	685b      	ldr	r3, [r3, #4]
 80053a8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	699b      	ldr	r3, [r3, #24]
 80053ae:	2b01      	cmp	r3, #1
 80053b0:	d028      	beq.n	8005404 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80053bc:	429a      	cmp	r2, r3
 80053be:	d121      	bne.n	8005404 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80053ca:	429a      	cmp	r2, r3
 80053cc:	d11a      	bne.n	8005404 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80053ce:	68fa      	ldr	r2, [r7, #12]
 80053d0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80053d4:	4013      	ands	r3, r2
 80053d6:	687a      	ldr	r2, [r7, #4]
 80053d8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80053da:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80053dc:	4293      	cmp	r3, r2
 80053de:	d111      	bne.n	8005404 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053ea:	085b      	lsrs	r3, r3, #1
 80053ec:	3b01      	subs	r3, #1
 80053ee:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80053f0:	429a      	cmp	r2, r3
 80053f2:	d107      	bne.n	8005404 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053fe:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005400:	429a      	cmp	r2, r3
 8005402:	d001      	beq.n	8005408 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8005404:	2301      	movs	r3, #1
 8005406:	e000      	b.n	800540a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8005408:	2300      	movs	r3, #0
}
 800540a:	4618      	mov	r0, r3
 800540c:	3718      	adds	r7, #24
 800540e:	46bd      	mov	sp, r7
 8005410:	bd80      	pop	{r7, pc}
 8005412:	bf00      	nop
 8005414:	40023800 	.word	0x40023800

08005418 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005418:	b580      	push	{r7, lr}
 800541a:	b084      	sub	sp, #16
 800541c:	af00      	add	r7, sp, #0
 800541e:	6078      	str	r0, [r7, #4]
 8005420:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	2b00      	cmp	r3, #0
 8005426:	d101      	bne.n	800542c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005428:	2301      	movs	r3, #1
 800542a:	e0cc      	b.n	80055c6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800542c:	4b68      	ldr	r3, [pc, #416]	; (80055d0 <HAL_RCC_ClockConfig+0x1b8>)
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	f003 0307 	and.w	r3, r3, #7
 8005434:	683a      	ldr	r2, [r7, #0]
 8005436:	429a      	cmp	r2, r3
 8005438:	d90c      	bls.n	8005454 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800543a:	4b65      	ldr	r3, [pc, #404]	; (80055d0 <HAL_RCC_ClockConfig+0x1b8>)
 800543c:	683a      	ldr	r2, [r7, #0]
 800543e:	b2d2      	uxtb	r2, r2
 8005440:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005442:	4b63      	ldr	r3, [pc, #396]	; (80055d0 <HAL_RCC_ClockConfig+0x1b8>)
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	f003 0307 	and.w	r3, r3, #7
 800544a:	683a      	ldr	r2, [r7, #0]
 800544c:	429a      	cmp	r2, r3
 800544e:	d001      	beq.n	8005454 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005450:	2301      	movs	r3, #1
 8005452:	e0b8      	b.n	80055c6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	f003 0302 	and.w	r3, r3, #2
 800545c:	2b00      	cmp	r3, #0
 800545e:	d020      	beq.n	80054a2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	f003 0304 	and.w	r3, r3, #4
 8005468:	2b00      	cmp	r3, #0
 800546a:	d005      	beq.n	8005478 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800546c:	4b59      	ldr	r3, [pc, #356]	; (80055d4 <HAL_RCC_ClockConfig+0x1bc>)
 800546e:	689b      	ldr	r3, [r3, #8]
 8005470:	4a58      	ldr	r2, [pc, #352]	; (80055d4 <HAL_RCC_ClockConfig+0x1bc>)
 8005472:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005476:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	f003 0308 	and.w	r3, r3, #8
 8005480:	2b00      	cmp	r3, #0
 8005482:	d005      	beq.n	8005490 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005484:	4b53      	ldr	r3, [pc, #332]	; (80055d4 <HAL_RCC_ClockConfig+0x1bc>)
 8005486:	689b      	ldr	r3, [r3, #8]
 8005488:	4a52      	ldr	r2, [pc, #328]	; (80055d4 <HAL_RCC_ClockConfig+0x1bc>)
 800548a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800548e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005490:	4b50      	ldr	r3, [pc, #320]	; (80055d4 <HAL_RCC_ClockConfig+0x1bc>)
 8005492:	689b      	ldr	r3, [r3, #8]
 8005494:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	689b      	ldr	r3, [r3, #8]
 800549c:	494d      	ldr	r1, [pc, #308]	; (80055d4 <HAL_RCC_ClockConfig+0x1bc>)
 800549e:	4313      	orrs	r3, r2
 80054a0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	f003 0301 	and.w	r3, r3, #1
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d044      	beq.n	8005538 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	685b      	ldr	r3, [r3, #4]
 80054b2:	2b01      	cmp	r3, #1
 80054b4:	d107      	bne.n	80054c6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80054b6:	4b47      	ldr	r3, [pc, #284]	; (80055d4 <HAL_RCC_ClockConfig+0x1bc>)
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d119      	bne.n	80054f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80054c2:	2301      	movs	r3, #1
 80054c4:	e07f      	b.n	80055c6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	685b      	ldr	r3, [r3, #4]
 80054ca:	2b02      	cmp	r3, #2
 80054cc:	d003      	beq.n	80054d6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80054d2:	2b03      	cmp	r3, #3
 80054d4:	d107      	bne.n	80054e6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80054d6:	4b3f      	ldr	r3, [pc, #252]	; (80055d4 <HAL_RCC_ClockConfig+0x1bc>)
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d109      	bne.n	80054f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80054e2:	2301      	movs	r3, #1
 80054e4:	e06f      	b.n	80055c6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80054e6:	4b3b      	ldr	r3, [pc, #236]	; (80055d4 <HAL_RCC_ClockConfig+0x1bc>)
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	f003 0302 	and.w	r3, r3, #2
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d101      	bne.n	80054f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80054f2:	2301      	movs	r3, #1
 80054f4:	e067      	b.n	80055c6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80054f6:	4b37      	ldr	r3, [pc, #220]	; (80055d4 <HAL_RCC_ClockConfig+0x1bc>)
 80054f8:	689b      	ldr	r3, [r3, #8]
 80054fa:	f023 0203 	bic.w	r2, r3, #3
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	685b      	ldr	r3, [r3, #4]
 8005502:	4934      	ldr	r1, [pc, #208]	; (80055d4 <HAL_RCC_ClockConfig+0x1bc>)
 8005504:	4313      	orrs	r3, r2
 8005506:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005508:	f7fe fda0 	bl	800404c <HAL_GetTick>
 800550c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800550e:	e00a      	b.n	8005526 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005510:	f7fe fd9c 	bl	800404c <HAL_GetTick>
 8005514:	4602      	mov	r2, r0
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	1ad3      	subs	r3, r2, r3
 800551a:	f241 3288 	movw	r2, #5000	; 0x1388
 800551e:	4293      	cmp	r3, r2
 8005520:	d901      	bls.n	8005526 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005522:	2303      	movs	r3, #3
 8005524:	e04f      	b.n	80055c6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005526:	4b2b      	ldr	r3, [pc, #172]	; (80055d4 <HAL_RCC_ClockConfig+0x1bc>)
 8005528:	689b      	ldr	r3, [r3, #8]
 800552a:	f003 020c 	and.w	r2, r3, #12
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	685b      	ldr	r3, [r3, #4]
 8005532:	009b      	lsls	r3, r3, #2
 8005534:	429a      	cmp	r2, r3
 8005536:	d1eb      	bne.n	8005510 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005538:	4b25      	ldr	r3, [pc, #148]	; (80055d0 <HAL_RCC_ClockConfig+0x1b8>)
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	f003 0307 	and.w	r3, r3, #7
 8005540:	683a      	ldr	r2, [r7, #0]
 8005542:	429a      	cmp	r2, r3
 8005544:	d20c      	bcs.n	8005560 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005546:	4b22      	ldr	r3, [pc, #136]	; (80055d0 <HAL_RCC_ClockConfig+0x1b8>)
 8005548:	683a      	ldr	r2, [r7, #0]
 800554a:	b2d2      	uxtb	r2, r2
 800554c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800554e:	4b20      	ldr	r3, [pc, #128]	; (80055d0 <HAL_RCC_ClockConfig+0x1b8>)
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	f003 0307 	and.w	r3, r3, #7
 8005556:	683a      	ldr	r2, [r7, #0]
 8005558:	429a      	cmp	r2, r3
 800555a:	d001      	beq.n	8005560 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800555c:	2301      	movs	r3, #1
 800555e:	e032      	b.n	80055c6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	f003 0304 	and.w	r3, r3, #4
 8005568:	2b00      	cmp	r3, #0
 800556a:	d008      	beq.n	800557e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800556c:	4b19      	ldr	r3, [pc, #100]	; (80055d4 <HAL_RCC_ClockConfig+0x1bc>)
 800556e:	689b      	ldr	r3, [r3, #8]
 8005570:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	68db      	ldr	r3, [r3, #12]
 8005578:	4916      	ldr	r1, [pc, #88]	; (80055d4 <HAL_RCC_ClockConfig+0x1bc>)
 800557a:	4313      	orrs	r3, r2
 800557c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	f003 0308 	and.w	r3, r3, #8
 8005586:	2b00      	cmp	r3, #0
 8005588:	d009      	beq.n	800559e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800558a:	4b12      	ldr	r3, [pc, #72]	; (80055d4 <HAL_RCC_ClockConfig+0x1bc>)
 800558c:	689b      	ldr	r3, [r3, #8]
 800558e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	691b      	ldr	r3, [r3, #16]
 8005596:	00db      	lsls	r3, r3, #3
 8005598:	490e      	ldr	r1, [pc, #56]	; (80055d4 <HAL_RCC_ClockConfig+0x1bc>)
 800559a:	4313      	orrs	r3, r2
 800559c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800559e:	f000 f821 	bl	80055e4 <HAL_RCC_GetSysClockFreq>
 80055a2:	4602      	mov	r2, r0
 80055a4:	4b0b      	ldr	r3, [pc, #44]	; (80055d4 <HAL_RCC_ClockConfig+0x1bc>)
 80055a6:	689b      	ldr	r3, [r3, #8]
 80055a8:	091b      	lsrs	r3, r3, #4
 80055aa:	f003 030f 	and.w	r3, r3, #15
 80055ae:	490a      	ldr	r1, [pc, #40]	; (80055d8 <HAL_RCC_ClockConfig+0x1c0>)
 80055b0:	5ccb      	ldrb	r3, [r1, r3]
 80055b2:	fa22 f303 	lsr.w	r3, r2, r3
 80055b6:	4a09      	ldr	r2, [pc, #36]	; (80055dc <HAL_RCC_ClockConfig+0x1c4>)
 80055b8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80055ba:	4b09      	ldr	r3, [pc, #36]	; (80055e0 <HAL_RCC_ClockConfig+0x1c8>)
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	4618      	mov	r0, r3
 80055c0:	f7fe fd00 	bl	8003fc4 <HAL_InitTick>

  return HAL_OK;
 80055c4:	2300      	movs	r3, #0
}
 80055c6:	4618      	mov	r0, r3
 80055c8:	3710      	adds	r7, #16
 80055ca:	46bd      	mov	sp, r7
 80055cc:	bd80      	pop	{r7, pc}
 80055ce:	bf00      	nop
 80055d0:	40023c00 	.word	0x40023c00
 80055d4:	40023800 	.word	0x40023800
 80055d8:	0800e8dc 	.word	0x0800e8dc
 80055dc:	20000010 	.word	0x20000010
 80055e0:	20000028 	.word	0x20000028

080055e4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80055e4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80055e8:	b090      	sub	sp, #64	; 0x40
 80055ea:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80055ec:	2300      	movs	r3, #0
 80055ee:	637b      	str	r3, [r7, #52]	; 0x34
 80055f0:	2300      	movs	r3, #0
 80055f2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80055f4:	2300      	movs	r3, #0
 80055f6:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 80055f8:	2300      	movs	r3, #0
 80055fa:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80055fc:	4b59      	ldr	r3, [pc, #356]	; (8005764 <HAL_RCC_GetSysClockFreq+0x180>)
 80055fe:	689b      	ldr	r3, [r3, #8]
 8005600:	f003 030c 	and.w	r3, r3, #12
 8005604:	2b08      	cmp	r3, #8
 8005606:	d00d      	beq.n	8005624 <HAL_RCC_GetSysClockFreq+0x40>
 8005608:	2b08      	cmp	r3, #8
 800560a:	f200 80a1 	bhi.w	8005750 <HAL_RCC_GetSysClockFreq+0x16c>
 800560e:	2b00      	cmp	r3, #0
 8005610:	d002      	beq.n	8005618 <HAL_RCC_GetSysClockFreq+0x34>
 8005612:	2b04      	cmp	r3, #4
 8005614:	d003      	beq.n	800561e <HAL_RCC_GetSysClockFreq+0x3a>
 8005616:	e09b      	b.n	8005750 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005618:	4b53      	ldr	r3, [pc, #332]	; (8005768 <HAL_RCC_GetSysClockFreq+0x184>)
 800561a:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 800561c:	e09b      	b.n	8005756 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800561e:	4b53      	ldr	r3, [pc, #332]	; (800576c <HAL_RCC_GetSysClockFreq+0x188>)
 8005620:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8005622:	e098      	b.n	8005756 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005624:	4b4f      	ldr	r3, [pc, #316]	; (8005764 <HAL_RCC_GetSysClockFreq+0x180>)
 8005626:	685b      	ldr	r3, [r3, #4]
 8005628:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800562c:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800562e:	4b4d      	ldr	r3, [pc, #308]	; (8005764 <HAL_RCC_GetSysClockFreq+0x180>)
 8005630:	685b      	ldr	r3, [r3, #4]
 8005632:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005636:	2b00      	cmp	r3, #0
 8005638:	d028      	beq.n	800568c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800563a:	4b4a      	ldr	r3, [pc, #296]	; (8005764 <HAL_RCC_GetSysClockFreq+0x180>)
 800563c:	685b      	ldr	r3, [r3, #4]
 800563e:	099b      	lsrs	r3, r3, #6
 8005640:	2200      	movs	r2, #0
 8005642:	623b      	str	r3, [r7, #32]
 8005644:	627a      	str	r2, [r7, #36]	; 0x24
 8005646:	6a3b      	ldr	r3, [r7, #32]
 8005648:	f3c3 0008 	ubfx	r0, r3, #0, #9
 800564c:	2100      	movs	r1, #0
 800564e:	4b47      	ldr	r3, [pc, #284]	; (800576c <HAL_RCC_GetSysClockFreq+0x188>)
 8005650:	fb03 f201 	mul.w	r2, r3, r1
 8005654:	2300      	movs	r3, #0
 8005656:	fb00 f303 	mul.w	r3, r0, r3
 800565a:	4413      	add	r3, r2
 800565c:	4a43      	ldr	r2, [pc, #268]	; (800576c <HAL_RCC_GetSysClockFreq+0x188>)
 800565e:	fba0 1202 	umull	r1, r2, r0, r2
 8005662:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005664:	460a      	mov	r2, r1
 8005666:	62ba      	str	r2, [r7, #40]	; 0x28
 8005668:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800566a:	4413      	add	r3, r2
 800566c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800566e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005670:	2200      	movs	r2, #0
 8005672:	61bb      	str	r3, [r7, #24]
 8005674:	61fa      	str	r2, [r7, #28]
 8005676:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800567a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800567e:	f7fb fb3b 	bl	8000cf8 <__aeabi_uldivmod>
 8005682:	4602      	mov	r2, r0
 8005684:	460b      	mov	r3, r1
 8005686:	4613      	mov	r3, r2
 8005688:	63fb      	str	r3, [r7, #60]	; 0x3c
 800568a:	e053      	b.n	8005734 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800568c:	4b35      	ldr	r3, [pc, #212]	; (8005764 <HAL_RCC_GetSysClockFreq+0x180>)
 800568e:	685b      	ldr	r3, [r3, #4]
 8005690:	099b      	lsrs	r3, r3, #6
 8005692:	2200      	movs	r2, #0
 8005694:	613b      	str	r3, [r7, #16]
 8005696:	617a      	str	r2, [r7, #20]
 8005698:	693b      	ldr	r3, [r7, #16]
 800569a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800569e:	f04f 0b00 	mov.w	fp, #0
 80056a2:	4652      	mov	r2, sl
 80056a4:	465b      	mov	r3, fp
 80056a6:	f04f 0000 	mov.w	r0, #0
 80056aa:	f04f 0100 	mov.w	r1, #0
 80056ae:	0159      	lsls	r1, r3, #5
 80056b0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80056b4:	0150      	lsls	r0, r2, #5
 80056b6:	4602      	mov	r2, r0
 80056b8:	460b      	mov	r3, r1
 80056ba:	ebb2 080a 	subs.w	r8, r2, sl
 80056be:	eb63 090b 	sbc.w	r9, r3, fp
 80056c2:	f04f 0200 	mov.w	r2, #0
 80056c6:	f04f 0300 	mov.w	r3, #0
 80056ca:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80056ce:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80056d2:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80056d6:	ebb2 0408 	subs.w	r4, r2, r8
 80056da:	eb63 0509 	sbc.w	r5, r3, r9
 80056de:	f04f 0200 	mov.w	r2, #0
 80056e2:	f04f 0300 	mov.w	r3, #0
 80056e6:	00eb      	lsls	r3, r5, #3
 80056e8:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80056ec:	00e2      	lsls	r2, r4, #3
 80056ee:	4614      	mov	r4, r2
 80056f0:	461d      	mov	r5, r3
 80056f2:	eb14 030a 	adds.w	r3, r4, sl
 80056f6:	603b      	str	r3, [r7, #0]
 80056f8:	eb45 030b 	adc.w	r3, r5, fp
 80056fc:	607b      	str	r3, [r7, #4]
 80056fe:	f04f 0200 	mov.w	r2, #0
 8005702:	f04f 0300 	mov.w	r3, #0
 8005706:	e9d7 4500 	ldrd	r4, r5, [r7]
 800570a:	4629      	mov	r1, r5
 800570c:	028b      	lsls	r3, r1, #10
 800570e:	4621      	mov	r1, r4
 8005710:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005714:	4621      	mov	r1, r4
 8005716:	028a      	lsls	r2, r1, #10
 8005718:	4610      	mov	r0, r2
 800571a:	4619      	mov	r1, r3
 800571c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800571e:	2200      	movs	r2, #0
 8005720:	60bb      	str	r3, [r7, #8]
 8005722:	60fa      	str	r2, [r7, #12]
 8005724:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005728:	f7fb fae6 	bl	8000cf8 <__aeabi_uldivmod>
 800572c:	4602      	mov	r2, r0
 800572e:	460b      	mov	r3, r1
 8005730:	4613      	mov	r3, r2
 8005732:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005734:	4b0b      	ldr	r3, [pc, #44]	; (8005764 <HAL_RCC_GetSysClockFreq+0x180>)
 8005736:	685b      	ldr	r3, [r3, #4]
 8005738:	0c1b      	lsrs	r3, r3, #16
 800573a:	f003 0303 	and.w	r3, r3, #3
 800573e:	3301      	adds	r3, #1
 8005740:	005b      	lsls	r3, r3, #1
 8005742:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8005744:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005746:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005748:	fbb2 f3f3 	udiv	r3, r2, r3
 800574c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800574e:	e002      	b.n	8005756 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005750:	4b05      	ldr	r3, [pc, #20]	; (8005768 <HAL_RCC_GetSysClockFreq+0x184>)
 8005752:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8005754:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005756:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8005758:	4618      	mov	r0, r3
 800575a:	3740      	adds	r7, #64	; 0x40
 800575c:	46bd      	mov	sp, r7
 800575e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005762:	bf00      	nop
 8005764:	40023800 	.word	0x40023800
 8005768:	00f42400 	.word	0x00f42400
 800576c:	00b71b00 	.word	0x00b71b00

08005770 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005770:	b480      	push	{r7}
 8005772:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005774:	4b03      	ldr	r3, [pc, #12]	; (8005784 <HAL_RCC_GetHCLKFreq+0x14>)
 8005776:	681b      	ldr	r3, [r3, #0]
}
 8005778:	4618      	mov	r0, r3
 800577a:	46bd      	mov	sp, r7
 800577c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005780:	4770      	bx	lr
 8005782:	bf00      	nop
 8005784:	20000010 	.word	0x20000010

08005788 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005788:	b580      	push	{r7, lr}
 800578a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800578c:	f7ff fff0 	bl	8005770 <HAL_RCC_GetHCLKFreq>
 8005790:	4602      	mov	r2, r0
 8005792:	4b05      	ldr	r3, [pc, #20]	; (80057a8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005794:	689b      	ldr	r3, [r3, #8]
 8005796:	0a9b      	lsrs	r3, r3, #10
 8005798:	f003 0307 	and.w	r3, r3, #7
 800579c:	4903      	ldr	r1, [pc, #12]	; (80057ac <HAL_RCC_GetPCLK1Freq+0x24>)
 800579e:	5ccb      	ldrb	r3, [r1, r3]
 80057a0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80057a4:	4618      	mov	r0, r3
 80057a6:	bd80      	pop	{r7, pc}
 80057a8:	40023800 	.word	0x40023800
 80057ac:	0800e8ec 	.word	0x0800e8ec

080057b0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80057b0:	b580      	push	{r7, lr}
 80057b2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80057b4:	f7ff ffdc 	bl	8005770 <HAL_RCC_GetHCLKFreq>
 80057b8:	4602      	mov	r2, r0
 80057ba:	4b05      	ldr	r3, [pc, #20]	; (80057d0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80057bc:	689b      	ldr	r3, [r3, #8]
 80057be:	0b5b      	lsrs	r3, r3, #13
 80057c0:	f003 0307 	and.w	r3, r3, #7
 80057c4:	4903      	ldr	r1, [pc, #12]	; (80057d4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80057c6:	5ccb      	ldrb	r3, [r1, r3]
 80057c8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80057cc:	4618      	mov	r0, r3
 80057ce:	bd80      	pop	{r7, pc}
 80057d0:	40023800 	.word	0x40023800
 80057d4:	0800e8ec 	.word	0x0800e8ec

080057d8 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 80057d8:	b580      	push	{r7, lr}
 80057da:	b082      	sub	sp, #8
 80057dc:	af00      	add	r7, sp, #0
 80057de:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	d101      	bne.n	80057ea <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 80057e6:	2301      	movs	r3, #1
 80057e8:	e022      	b.n	8005830 <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80057f0:	b2db      	uxtb	r3, r3
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d105      	bne.n	8005802 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	2200      	movs	r2, #0
 80057fa:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 80057fc:	6878      	ldr	r0, [r7, #4]
 80057fe:	f7fd ff1d 	bl	800363c <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	2203      	movs	r2, #3
 8005806:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 800580a:	6878      	ldr	r0, [r7, #4]
 800580c:	f000 f814 	bl	8005838 <HAL_SD_InitCard>
 8005810:	4603      	mov	r3, r0
 8005812:	2b00      	cmp	r3, #0
 8005814:	d001      	beq.n	800581a <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8005816:	2301      	movs	r3, #1
 8005818:	e00a      	b.n	8005830 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	2200      	movs	r2, #0
 800581e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	2200      	movs	r2, #0
 8005824:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	2201      	movs	r2, #1
 800582a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800582e:	2300      	movs	r3, #0
}
 8005830:	4618      	mov	r0, r3
 8005832:	3708      	adds	r7, #8
 8005834:	46bd      	mov	sp, r7
 8005836:	bd80      	pop	{r7, pc}

08005838 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8005838:	b5b0      	push	{r4, r5, r7, lr}
 800583a:	b08e      	sub	sp, #56	; 0x38
 800583c:	af04      	add	r7, sp, #16
 800583e:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 8005840:	2300      	movs	r3, #0
 8005842:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 8005844:	2300      	movs	r3, #0
 8005846:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8005848:	2300      	movs	r3, #0
 800584a:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 800584c:	2300      	movs	r3, #0
 800584e:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8005850:	2300      	movs	r3, #0
 8005852:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 8005854:	2376      	movs	r3, #118	; 0x76
 8005856:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	681d      	ldr	r5, [r3, #0]
 800585c:	466c      	mov	r4, sp
 800585e:	f107 0314 	add.w	r3, r7, #20
 8005862:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8005866:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800586a:	f107 0308 	add.w	r3, r7, #8
 800586e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005870:	4628      	mov	r0, r5
 8005872:	f002 ff1b 	bl	80086ac <SDIO_Init>
 8005876:	4603      	mov	r3, r0
 8005878:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 800587c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005880:	2b00      	cmp	r3, #0
 8005882:	d001      	beq.n	8005888 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 8005884:	2301      	movs	r3, #1
 8005886:	e04f      	b.n	8005928 <HAL_SD_InitCard+0xf0>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 8005888:	4b29      	ldr	r3, [pc, #164]	; (8005930 <HAL_SD_InitCard+0xf8>)
 800588a:	2200      	movs	r2, #0
 800588c:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	4618      	mov	r0, r3
 8005894:	f002 ff53 	bl	800873e <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 8005898:	4b25      	ldr	r3, [pc, #148]	; (8005930 <HAL_SD_InitCard+0xf8>)
 800589a:	2201      	movs	r2, #1
 800589c:	601a      	str	r2, [r3, #0]

  /* Required power up waiting time before starting the SD initialization  sequence */
  HAL_Delay(2);
 800589e:	2002      	movs	r0, #2
 80058a0:	f7fe fbe0 	bl	8004064 <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 80058a4:	6878      	ldr	r0, [r7, #4]
 80058a6:	f000 ff03 	bl	80066b0 <SD_PowerON>
 80058aa:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80058ac:	6a3b      	ldr	r3, [r7, #32]
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d00b      	beq.n	80058ca <HAL_SD_InitCard+0x92>
  {
    hsd->State = HAL_SD_STATE_READY;
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	2201      	movs	r2, #1
 80058b6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80058be:	6a3b      	ldr	r3, [r7, #32]
 80058c0:	431a      	orrs	r2, r3
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80058c6:	2301      	movs	r3, #1
 80058c8:	e02e      	b.n	8005928 <HAL_SD_InitCard+0xf0>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 80058ca:	6878      	ldr	r0, [r7, #4]
 80058cc:	f000 fe22 	bl	8006514 <SD_InitCard>
 80058d0:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80058d2:	6a3b      	ldr	r3, [r7, #32]
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	d00b      	beq.n	80058f0 <HAL_SD_InitCard+0xb8>
  {
    hsd->State = HAL_SD_STATE_READY;
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	2201      	movs	r2, #1
 80058dc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80058e4:	6a3b      	ldr	r3, [r7, #32]
 80058e6:	431a      	orrs	r2, r3
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80058ec:	2301      	movs	r3, #1
 80058ee:	e01b      	b.n	8005928 <HAL_SD_InitCard+0xf0>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80058f8:	4618      	mov	r0, r3
 80058fa:	f002 ffb2 	bl	8008862 <SDMMC_CmdBlockLength>
 80058fe:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8005900:	6a3b      	ldr	r3, [r7, #32]
 8005902:	2b00      	cmp	r3, #0
 8005904:	d00f      	beq.n	8005926 <HAL_SD_InitCard+0xee>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	4a0a      	ldr	r2, [pc, #40]	; (8005934 <HAL_SD_InitCard+0xfc>)
 800590c:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005912:	6a3b      	ldr	r3, [r7, #32]
 8005914:	431a      	orrs	r2, r3
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	2201      	movs	r2, #1
 800591e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8005922:	2301      	movs	r3, #1
 8005924:	e000      	b.n	8005928 <HAL_SD_InitCard+0xf0>
  }

  return HAL_OK;
 8005926:	2300      	movs	r3, #0
}
 8005928:	4618      	mov	r0, r3
 800592a:	3728      	adds	r7, #40	; 0x28
 800592c:	46bd      	mov	sp, r7
 800592e:	bdb0      	pop	{r4, r5, r7, pc}
 8005930:	422580a0 	.word	0x422580a0
 8005934:	004005ff 	.word	0x004005ff

08005938 <HAL_SD_ReadBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to read
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 8005938:	b580      	push	{r7, lr}
 800593a:	b092      	sub	sp, #72	; 0x48
 800593c:	af00      	add	r7, sp, #0
 800593e:	60f8      	str	r0, [r7, #12]
 8005940:	60b9      	str	r1, [r7, #8]
 8005942:	607a      	str	r2, [r7, #4]
 8005944:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8005946:	f7fe fb81 	bl	800404c <HAL_GetTick>
 800594a:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 8005950:	68bb      	ldr	r3, [r7, #8]
 8005952:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 8005954:	68bb      	ldr	r3, [r7, #8]
 8005956:	2b00      	cmp	r3, #0
 8005958:	d107      	bne.n	800596a <HAL_SD_ReadBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800595e:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8005966:	2301      	movs	r3, #1
 8005968:	e1bd      	b.n	8005ce6 <HAL_SD_ReadBlocks+0x3ae>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8005970:	b2db      	uxtb	r3, r3
 8005972:	2b01      	cmp	r3, #1
 8005974:	f040 81b0 	bne.w	8005cd8 <HAL_SD_ReadBlocks+0x3a0>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	2200      	movs	r2, #0
 800597c:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800597e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005980:	683b      	ldr	r3, [r7, #0]
 8005982:	441a      	add	r2, r3
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005988:	429a      	cmp	r2, r3
 800598a:	d907      	bls.n	800599c <HAL_SD_ReadBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005990:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8005998:	2301      	movs	r3, #1
 800599a:	e1a4      	b.n	8005ce6 <HAL_SD_ReadBlocks+0x3ae>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	2203      	movs	r2, #3
 80059a0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	2200      	movs	r2, #0
 80059aa:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80059b0:	2b01      	cmp	r3, #1
 80059b2:	d002      	beq.n	80059ba <HAL_SD_ReadBlocks+0x82>
    {
      add *= 512U;
 80059b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059b6:	025b      	lsls	r3, r3, #9
 80059b8:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80059ba:	f04f 33ff 	mov.w	r3, #4294967295
 80059be:	617b      	str	r3, [r7, #20]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 80059c0:	683b      	ldr	r3, [r7, #0]
 80059c2:	025b      	lsls	r3, r3, #9
 80059c4:	61bb      	str	r3, [r7, #24]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 80059c6:	2390      	movs	r3, #144	; 0x90
 80059c8:	61fb      	str	r3, [r7, #28]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 80059ca:	2302      	movs	r3, #2
 80059cc:	623b      	str	r3, [r7, #32]
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 80059ce:	2300      	movs	r3, #0
 80059d0:	627b      	str	r3, [r7, #36]	; 0x24
    config.DPSM          = SDIO_DPSM_ENABLE;
 80059d2:	2301      	movs	r3, #1
 80059d4:	62bb      	str	r3, [r7, #40]	; 0x28
    (void)SDIO_ConfigData(hsd->Instance, &config);
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	f107 0214 	add.w	r2, r7, #20
 80059de:	4611      	mov	r1, r2
 80059e0:	4618      	mov	r0, r3
 80059e2:	f002 ff12 	bl	800880a <SDIO_ConfigData>

    /* Read block(s) in polling mode */
    if(NumberOfBlocks > 1U)
 80059e6:	683b      	ldr	r3, [r7, #0]
 80059e8:	2b01      	cmp	r3, #1
 80059ea:	d90a      	bls.n	8005a02 <HAL_SD_ReadBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	2202      	movs	r2, #2
 80059f0:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80059f8:	4618      	mov	r0, r3
 80059fa:	f002 ff76 	bl	80088ea <SDMMC_CmdReadMultiBlock>
 80059fe:	6478      	str	r0, [r7, #68]	; 0x44
 8005a00:	e009      	b.n	8005a16 <HAL_SD_ReadBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	2201      	movs	r2, #1
 8005a06:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005a0e:	4618      	mov	r0, r3
 8005a10:	f002 ff49 	bl	80088a6 <SDMMC_CmdReadSingleBlock>
 8005a14:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8005a16:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	d012      	beq.n	8005a42 <HAL_SD_ReadBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	4a7a      	ldr	r2, [pc, #488]	; (8005c0c <HAL_SD_ReadBlocks+0x2d4>)
 8005a22:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005a28:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005a2a:	431a      	orrs	r2, r3
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	2201      	movs	r2, #1
 8005a34:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	2200      	movs	r2, #0
 8005a3c:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8005a3e:	2301      	movs	r3, #1
 8005a40:	e151      	b.n	8005ce6 <HAL_SD_ReadBlocks+0x3ae>
    }

    /* Poll on SDIO flags */
    dataremaining = config.DataLength;
 8005a42:	69bb      	ldr	r3, [r7, #24]
 8005a44:	63fb      	str	r3, [r7, #60]	; 0x3c
#if defined(SDIO_STA_STBITERR)
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 8005a46:	e061      	b.n	8005b0c <HAL_SD_ReadBlocks+0x1d4>
#else /* SDIO_STA_STBITERR not defined */
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
#endif /* SDIO_STA_STBITERR */
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) && (dataremaining > 0U))
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a4e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d03c      	beq.n	8005ad0 <HAL_SD_ReadBlocks+0x198>
 8005a56:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	d039      	beq.n	8005ad0 <HAL_SD_ReadBlocks+0x198>
      {
        /* Read data from SDIO Rx FIFO */
        for(count = 0U; count < 8U; count++)
 8005a5c:	2300      	movs	r3, #0
 8005a5e:	643b      	str	r3, [r7, #64]	; 0x40
 8005a60:	e033      	b.n	8005aca <HAL_SD_ReadBlocks+0x192>
        {
          data = SDIO_ReadFIFO(hsd->Instance);
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	4618      	mov	r0, r3
 8005a68:	f002 fe4b 	bl	8008702 <SDIO_ReadFIFO>
 8005a6c:	62f8      	str	r0, [r7, #44]	; 0x2c
          *tempbuff = (uint8_t)(data & 0xFFU);
 8005a6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a70:	b2da      	uxtb	r2, r3
 8005a72:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a74:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8005a76:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a78:	3301      	adds	r3, #1
 8005a7a:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8005a7c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005a7e:	3b01      	subs	r3, #1
 8005a80:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 8005a82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a84:	0a1b      	lsrs	r3, r3, #8
 8005a86:	b2da      	uxtb	r2, r3
 8005a88:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a8a:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8005a8c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a8e:	3301      	adds	r3, #1
 8005a90:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8005a92:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005a94:	3b01      	subs	r3, #1
 8005a96:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 8005a98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a9a:	0c1b      	lsrs	r3, r3, #16
 8005a9c:	b2da      	uxtb	r2, r3
 8005a9e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005aa0:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8005aa2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005aa4:	3301      	adds	r3, #1
 8005aa6:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8005aa8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005aaa:	3b01      	subs	r3, #1
 8005aac:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 8005aae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ab0:	0e1b      	lsrs	r3, r3, #24
 8005ab2:	b2da      	uxtb	r2, r3
 8005ab4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005ab6:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8005ab8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005aba:	3301      	adds	r3, #1
 8005abc:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8005abe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005ac0:	3b01      	subs	r3, #1
 8005ac2:	63fb      	str	r3, [r7, #60]	; 0x3c
        for(count = 0U; count < 8U; count++)
 8005ac4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005ac6:	3301      	adds	r3, #1
 8005ac8:	643b      	str	r3, [r7, #64]	; 0x40
 8005aca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005acc:	2b07      	cmp	r3, #7
 8005ace:	d9c8      	bls.n	8005a62 <HAL_SD_ReadBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8005ad0:	f7fe fabc 	bl	800404c <HAL_GetTick>
 8005ad4:	4602      	mov	r2, r0
 8005ad6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ad8:	1ad3      	subs	r3, r2, r3
 8005ada:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8005adc:	429a      	cmp	r2, r3
 8005ade:	d902      	bls.n	8005ae6 <HAL_SD_ReadBlocks+0x1ae>
 8005ae0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	d112      	bne.n	8005b0c <HAL_SD_ReadBlocks+0x1d4>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	4a48      	ldr	r2, [pc, #288]	; (8005c0c <HAL_SD_ReadBlocks+0x2d4>)
 8005aec:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005af2:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	2201      	movs	r2, #1
 8005afe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	2200      	movs	r2, #0
 8005b06:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 8005b08:	2303      	movs	r3, #3
 8005b0a:	e0ec      	b.n	8005ce6 <HAL_SD_ReadBlocks+0x3ae>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005b12:	f240 332a 	movw	r3, #810	; 0x32a
 8005b16:	4013      	ands	r3, r2
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	d095      	beq.n	8005a48 <HAL_SD_ReadBlocks+0x110>
      }
    }
    
    /* Send stop transmission command in case of multiblock read */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005b22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d022      	beq.n	8005b70 <HAL_SD_ReadBlocks+0x238>
 8005b2a:	683b      	ldr	r3, [r7, #0]
 8005b2c:	2b01      	cmp	r3, #1
 8005b2e:	d91f      	bls.n	8005b70 <HAL_SD_ReadBlocks+0x238>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005b34:	2b03      	cmp	r3, #3
 8005b36:	d01b      	beq.n	8005b70 <HAL_SD_ReadBlocks+0x238>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	4618      	mov	r0, r3
 8005b3e:	f002 ff3b 	bl	80089b8 <SDMMC_CmdStopTransfer>
 8005b42:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 8005b44:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	d012      	beq.n	8005b70 <HAL_SD_ReadBlocks+0x238>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	4a2f      	ldr	r2, [pc, #188]	; (8005c0c <HAL_SD_ReadBlocks+0x2d4>)
 8005b50:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005b56:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005b58:	431a      	orrs	r2, r3
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	2201      	movs	r2, #1
 8005b62:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	2200      	movs	r2, #0
 8005b6a:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 8005b6c:	2301      	movs	r3, #1
 8005b6e:	e0ba      	b.n	8005ce6 <HAL_SD_ReadBlocks+0x3ae>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005b76:	f003 0308 	and.w	r3, r3, #8
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	d012      	beq.n	8005ba4 <HAL_SD_ReadBlocks+0x26c>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	4a22      	ldr	r2, [pc, #136]	; (8005c0c <HAL_SD_ReadBlocks+0x2d4>)
 8005b84:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b8a:	f043 0208 	orr.w	r2, r3, #8
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	2201      	movs	r2, #1
 8005b96:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	2200      	movs	r2, #0
 8005b9e:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8005ba0:	2301      	movs	r3, #1
 8005ba2:	e0a0      	b.n	8005ce6 <HAL_SD_ReadBlocks+0x3ae>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005baa:	f003 0302 	and.w	r3, r3, #2
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	d012      	beq.n	8005bd8 <HAL_SD_ReadBlocks+0x2a0>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	4a15      	ldr	r2, [pc, #84]	; (8005c0c <HAL_SD_ReadBlocks+0x2d4>)
 8005bb8:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bbe:	f043 0202 	orr.w	r2, r3, #2
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	2201      	movs	r2, #1
 8005bca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	2200      	movs	r2, #0
 8005bd2:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8005bd4:	2301      	movs	r3, #1
 8005bd6:	e086      	b.n	8005ce6 <HAL_SD_ReadBlocks+0x3ae>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005bde:	f003 0320 	and.w	r3, r3, #32
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	d063      	beq.n	8005cae <HAL_SD_ReadBlocks+0x376>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	4a08      	ldr	r2, [pc, #32]	; (8005c0c <HAL_SD_ReadBlocks+0x2d4>)
 8005bec:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bf2:	f043 0220 	orr.w	r2, r3, #32
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	2201      	movs	r2, #1
 8005bfe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	2200      	movs	r2, #0
 8005c06:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8005c08:	2301      	movs	r3, #1
 8005c0a:	e06c      	b.n	8005ce6 <HAL_SD_ReadBlocks+0x3ae>
 8005c0c:	004005ff 	.word	0x004005ff
    }

    /* Empty FIFO if there is still any data */
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	4618      	mov	r0, r3
 8005c16:	f002 fd74 	bl	8008702 <SDIO_ReadFIFO>
 8005c1a:	62f8      	str	r0, [r7, #44]	; 0x2c
      *tempbuff = (uint8_t)(data & 0xFFU);
 8005c1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c1e:	b2da      	uxtb	r2, r3
 8005c20:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c22:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8005c24:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c26:	3301      	adds	r3, #1
 8005c28:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 8005c2a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005c2c:	3b01      	subs	r3, #1
 8005c2e:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 8005c30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c32:	0a1b      	lsrs	r3, r3, #8
 8005c34:	b2da      	uxtb	r2, r3
 8005c36:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c38:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8005c3a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c3c:	3301      	adds	r3, #1
 8005c3e:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 8005c40:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005c42:	3b01      	subs	r3, #1
 8005c44:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 8005c46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c48:	0c1b      	lsrs	r3, r3, #16
 8005c4a:	b2da      	uxtb	r2, r3
 8005c4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c4e:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8005c50:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c52:	3301      	adds	r3, #1
 8005c54:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 8005c56:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005c58:	3b01      	subs	r3, #1
 8005c5a:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 8005c5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c5e:	0e1b      	lsrs	r3, r3, #24
 8005c60:	b2da      	uxtb	r2, r3
 8005c62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c64:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8005c66:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c68:	3301      	adds	r3, #1
 8005c6a:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 8005c6c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005c6e:	3b01      	subs	r3, #1
 8005c70:	63fb      	str	r3, [r7, #60]	; 0x3c

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8005c72:	f7fe f9eb 	bl	800404c <HAL_GetTick>
 8005c76:	4602      	mov	r2, r0
 8005c78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c7a:	1ad3      	subs	r3, r2, r3
 8005c7c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8005c7e:	429a      	cmp	r2, r3
 8005c80:	d902      	bls.n	8005c88 <HAL_SD_ReadBlocks+0x350>
 8005c82:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	d112      	bne.n	8005cae <HAL_SD_ReadBlocks+0x376>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	4a18      	ldr	r2, [pc, #96]	; (8005cf0 <HAL_SD_ReadBlocks+0x3b8>)
 8005c8e:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c94:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	2201      	movs	r2, #1
 8005ca0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	2200      	movs	r2, #0
 8005ca8:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 8005caa:	2301      	movs	r3, #1
 8005cac:	e01b      	b.n	8005ce6 <HAL_SD_ReadBlocks+0x3ae>
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005cb4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	d002      	beq.n	8005cc2 <HAL_SD_ReadBlocks+0x38a>
 8005cbc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d1a6      	bne.n	8005c10 <HAL_SD_ReadBlocks+0x2d8>
      }
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	f240 523a 	movw	r2, #1338	; 0x53a
 8005cca:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	2201      	movs	r2, #1
 8005cd0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 8005cd4:	2300      	movs	r3, #0
 8005cd6:	e006      	b.n	8005ce6 <HAL_SD_ReadBlocks+0x3ae>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005cdc:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8005ce4:	2301      	movs	r3, #1
  }
}
 8005ce6:	4618      	mov	r0, r3
 8005ce8:	3748      	adds	r7, #72	; 0x48
 8005cea:	46bd      	mov	sp, r7
 8005cec:	bd80      	pop	{r7, pc}
 8005cee:	bf00      	nop
 8005cf0:	004005ff 	.word	0x004005ff

08005cf4 <HAL_SD_WriteBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to write
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 8005cf4:	b580      	push	{r7, lr}
 8005cf6:	b092      	sub	sp, #72	; 0x48
 8005cf8:	af00      	add	r7, sp, #0
 8005cfa:	60f8      	str	r0, [r7, #12]
 8005cfc:	60b9      	str	r1, [r7, #8]
 8005cfe:	607a      	str	r2, [r7, #4]
 8005d00:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8005d02:	f7fe f9a3 	bl	800404c <HAL_GetTick>
 8005d06:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 8005d0c:	68bb      	ldr	r3, [r7, #8]
 8005d0e:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 8005d10:	68bb      	ldr	r3, [r7, #8]
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d107      	bne.n	8005d26 <HAL_SD_WriteBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d1a:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8005d22:	2301      	movs	r3, #1
 8005d24:	e166      	b.n	8005ff4 <HAL_SD_WriteBlocks+0x300>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8005d2c:	b2db      	uxtb	r3, r3
 8005d2e:	2b01      	cmp	r3, #1
 8005d30:	f040 8159 	bne.w	8005fe6 <HAL_SD_WriteBlocks+0x2f2>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	2200      	movs	r2, #0
 8005d38:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8005d3a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005d3c:	683b      	ldr	r3, [r7, #0]
 8005d3e:	441a      	add	r2, r3
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005d44:	429a      	cmp	r2, r3
 8005d46:	d907      	bls.n	8005d58 <HAL_SD_WriteBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d4c:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8005d54:	2301      	movs	r3, #1
 8005d56:	e14d      	b.n	8005ff4 <HAL_SD_WriteBlocks+0x300>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	2203      	movs	r2, #3
 8005d5c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	2200      	movs	r2, #0
 8005d66:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d6c:	2b01      	cmp	r3, #1
 8005d6e:	d002      	beq.n	8005d76 <HAL_SD_WriteBlocks+0x82>
    {
      add *= 512U;
 8005d70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d72:	025b      	lsls	r3, r3, #9
 8005d74:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8005d76:	f04f 33ff 	mov.w	r3, #4294967295
 8005d7a:	61bb      	str	r3, [r7, #24]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8005d7c:	683b      	ldr	r3, [r7, #0]
 8005d7e:	025b      	lsls	r3, r3, #9
 8005d80:	61fb      	str	r3, [r7, #28]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8005d82:	2390      	movs	r3, #144	; 0x90
 8005d84:	623b      	str	r3, [r7, #32]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 8005d86:	2300      	movs	r3, #0
 8005d88:	627b      	str	r3, [r7, #36]	; 0x24
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8005d8a:	2300      	movs	r3, #0
 8005d8c:	62bb      	str	r3, [r7, #40]	; 0x28
    config.DPSM          = SDIO_DPSM_ENABLE;
 8005d8e:	2301      	movs	r3, #1
 8005d90:	62fb      	str	r3, [r7, #44]	; 0x2c
    (void)SDIO_ConfigData(hsd->Instance, &config);
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	f107 0218 	add.w	r2, r7, #24
 8005d9a:	4611      	mov	r1, r2
 8005d9c:	4618      	mov	r0, r3
 8005d9e:	f002 fd34 	bl	800880a <SDIO_ConfigData>

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 8005da2:	683b      	ldr	r3, [r7, #0]
 8005da4:	2b01      	cmp	r3, #1
 8005da6:	d90a      	bls.n	8005dbe <HAL_SD_WriteBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	2220      	movs	r2, #32
 8005dac:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005db4:	4618      	mov	r0, r3
 8005db6:	f002 fddc 	bl	8008972 <SDMMC_CmdWriteMultiBlock>
 8005dba:	6478      	str	r0, [r7, #68]	; 0x44
 8005dbc:	e009      	b.n	8005dd2 <HAL_SD_WriteBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	2210      	movs	r2, #16
 8005dc2:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005dca:	4618      	mov	r0, r3
 8005dcc:	f002 fdaf 	bl	800892e <SDMMC_CmdWriteSingleBlock>
 8005dd0:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8005dd2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	d012      	beq.n	8005dfe <HAL_SD_WriteBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	4a87      	ldr	r2, [pc, #540]	; (8005ffc <HAL_SD_WriteBlocks+0x308>)
 8005dde:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005de4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005de6:	431a      	orrs	r2, r3
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	2201      	movs	r2, #1
 8005df0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	2200      	movs	r2, #0
 8005df8:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8005dfa:	2301      	movs	r3, #1
 8005dfc:	e0fa      	b.n	8005ff4 <HAL_SD_WriteBlocks+0x300>
    }

    /* Write block(s) in polling mode */
    dataremaining = config.DataLength;
 8005dfe:	69fb      	ldr	r3, [r7, #28]
 8005e00:	63fb      	str	r3, [r7, #60]	; 0x3c
#if defined(SDIO_STA_STBITERR)
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 8005e02:	e065      	b.n	8005ed0 <HAL_SD_WriteBlocks+0x1dc>
#else /* SDIO_STA_STBITERR not defined */
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
#endif /* SDIO_STA_STBITERR */
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) && (dataremaining > 0U))
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005e0a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005e0e:	2b00      	cmp	r3, #0
 8005e10:	d040      	beq.n	8005e94 <HAL_SD_WriteBlocks+0x1a0>
 8005e12:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	d03d      	beq.n	8005e94 <HAL_SD_WriteBlocks+0x1a0>
      {
        /* Write data to SDIO Tx FIFO */
        for(count = 0U; count < 8U; count++)
 8005e18:	2300      	movs	r3, #0
 8005e1a:	643b      	str	r3, [r7, #64]	; 0x40
 8005e1c:	e037      	b.n	8005e8e <HAL_SD_WriteBlocks+0x19a>
        {
          data = (uint32_t)(*tempbuff);
 8005e1e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e20:	781b      	ldrb	r3, [r3, #0]
 8005e22:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8005e24:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e26:	3301      	adds	r3, #1
 8005e28:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8005e2a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005e2c:	3b01      	subs	r3, #1
 8005e2e:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 8U);
 8005e30:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e32:	781b      	ldrb	r3, [r3, #0]
 8005e34:	021a      	lsls	r2, r3, #8
 8005e36:	697b      	ldr	r3, [r7, #20]
 8005e38:	4313      	orrs	r3, r2
 8005e3a:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8005e3c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e3e:	3301      	adds	r3, #1
 8005e40:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8005e42:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005e44:	3b01      	subs	r3, #1
 8005e46:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 16U);
 8005e48:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e4a:	781b      	ldrb	r3, [r3, #0]
 8005e4c:	041a      	lsls	r2, r3, #16
 8005e4e:	697b      	ldr	r3, [r7, #20]
 8005e50:	4313      	orrs	r3, r2
 8005e52:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8005e54:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e56:	3301      	adds	r3, #1
 8005e58:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8005e5a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005e5c:	3b01      	subs	r3, #1
 8005e5e:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 24U);
 8005e60:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e62:	781b      	ldrb	r3, [r3, #0]
 8005e64:	061a      	lsls	r2, r3, #24
 8005e66:	697b      	ldr	r3, [r7, #20]
 8005e68:	4313      	orrs	r3, r2
 8005e6a:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8005e6c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e6e:	3301      	adds	r3, #1
 8005e70:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8005e72:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005e74:	3b01      	subs	r3, #1
 8005e76:	63fb      	str	r3, [r7, #60]	; 0x3c
          (void)SDIO_WriteFIFO(hsd->Instance, &data);
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	f107 0214 	add.w	r2, r7, #20
 8005e80:	4611      	mov	r1, r2
 8005e82:	4618      	mov	r0, r3
 8005e84:	f002 fc4a 	bl	800871c <SDIO_WriteFIFO>
        for(count = 0U; count < 8U; count++)
 8005e88:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005e8a:	3301      	adds	r3, #1
 8005e8c:	643b      	str	r3, [r7, #64]	; 0x40
 8005e8e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005e90:	2b07      	cmp	r3, #7
 8005e92:	d9c4      	bls.n	8005e1e <HAL_SD_WriteBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8005e94:	f7fe f8da 	bl	800404c <HAL_GetTick>
 8005e98:	4602      	mov	r2, r0
 8005e9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e9c:	1ad3      	subs	r3, r2, r3
 8005e9e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8005ea0:	429a      	cmp	r2, r3
 8005ea2:	d902      	bls.n	8005eaa <HAL_SD_WriteBlocks+0x1b6>
 8005ea4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	d112      	bne.n	8005ed0 <HAL_SD_WriteBlocks+0x1dc>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	4a53      	ldr	r2, [pc, #332]	; (8005ffc <HAL_SD_WriteBlocks+0x308>)
 8005eb0:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005eb6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005eb8:	431a      	orrs	r2, r3
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	2201      	movs	r2, #1
 8005ec2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	2200      	movs	r2, #0
 8005eca:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 8005ecc:	2303      	movs	r3, #3
 8005ece:	e091      	b.n	8005ff4 <HAL_SD_WriteBlocks+0x300>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005ed6:	f240 331a 	movw	r3, #794	; 0x31a
 8005eda:	4013      	ands	r3, r2
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	d091      	beq.n	8005e04 <HAL_SD_WriteBlocks+0x110>
      }
    }

    /* Send stop transmission command in case of multiblock write */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ee6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	d022      	beq.n	8005f34 <HAL_SD_WriteBlocks+0x240>
 8005eee:	683b      	ldr	r3, [r7, #0]
 8005ef0:	2b01      	cmp	r3, #1
 8005ef2:	d91f      	bls.n	8005f34 <HAL_SD_WriteBlocks+0x240>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005ef8:	2b03      	cmp	r3, #3
 8005efa:	d01b      	beq.n	8005f34 <HAL_SD_WriteBlocks+0x240>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	4618      	mov	r0, r3
 8005f02:	f002 fd59 	bl	80089b8 <SDMMC_CmdStopTransfer>
 8005f06:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 8005f08:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	d012      	beq.n	8005f34 <HAL_SD_WriteBlocks+0x240>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	4a3a      	ldr	r2, [pc, #232]	; (8005ffc <HAL_SD_WriteBlocks+0x308>)
 8005f14:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005f1a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005f1c:	431a      	orrs	r2, r3
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	2201      	movs	r2, #1
 8005f26:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	2200      	movs	r2, #0
 8005f2e:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 8005f30:	2301      	movs	r3, #1
 8005f32:	e05f      	b.n	8005ff4 <HAL_SD_WriteBlocks+0x300>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005f3a:	f003 0308 	and.w	r3, r3, #8
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	d012      	beq.n	8005f68 <HAL_SD_WriteBlocks+0x274>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	4a2d      	ldr	r2, [pc, #180]	; (8005ffc <HAL_SD_WriteBlocks+0x308>)
 8005f48:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f4e:	f043 0208 	orr.w	r2, r3, #8
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	2201      	movs	r2, #1
 8005f5a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	2200      	movs	r2, #0
 8005f62:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8005f64:	2301      	movs	r3, #1
 8005f66:	e045      	b.n	8005ff4 <HAL_SD_WriteBlocks+0x300>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005f6e:	f003 0302 	and.w	r3, r3, #2
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	d012      	beq.n	8005f9c <HAL_SD_WriteBlocks+0x2a8>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	4a20      	ldr	r2, [pc, #128]	; (8005ffc <HAL_SD_WriteBlocks+0x308>)
 8005f7c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f82:	f043 0202 	orr.w	r2, r3, #2
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	2201      	movs	r2, #1
 8005f8e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	2200      	movs	r2, #0
 8005f96:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8005f98:	2301      	movs	r3, #1
 8005f9a:	e02b      	b.n	8005ff4 <HAL_SD_WriteBlocks+0x300>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR))
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005fa2:	f003 0310 	and.w	r3, r3, #16
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	d012      	beq.n	8005fd0 <HAL_SD_WriteBlocks+0x2dc>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	4a13      	ldr	r2, [pc, #76]	; (8005ffc <HAL_SD_WriteBlocks+0x308>)
 8005fb0:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fb6:	f043 0210 	orr.w	r2, r3, #16
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	2201      	movs	r2, #1
 8005fc2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	2200      	movs	r2, #0
 8005fca:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8005fcc:	2301      	movs	r3, #1
 8005fce:	e011      	b.n	8005ff4 <HAL_SD_WriteBlocks+0x300>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	f240 523a 	movw	r2, #1338	; 0x53a
 8005fd8:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	2201      	movs	r2, #1
 8005fde:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 8005fe2:	2300      	movs	r3, #0
 8005fe4:	e006      	b.n	8005ff4 <HAL_SD_WriteBlocks+0x300>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fea:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8005ff2:	2301      	movs	r3, #1
  }
}
 8005ff4:	4618      	mov	r0, r3
 8005ff6:	3748      	adds	r7, #72	; 0x48
 8005ff8:	46bd      	mov	sp, r7
 8005ffa:	bd80      	pop	{r7, pc}
 8005ffc:	004005ff 	.word	0x004005ff

08006000 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8006000:	b480      	push	{r7}
 8006002:	b083      	sub	sp, #12
 8006004:	af00      	add	r7, sp, #0
 8006006:	6078      	str	r0, [r7, #4]
 8006008:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800600e:	0f9b      	lsrs	r3, r3, #30
 8006010:	b2da      	uxtb	r2, r3
 8006012:	683b      	ldr	r3, [r7, #0]
 8006014:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800601a:	0e9b      	lsrs	r3, r3, #26
 800601c:	b2db      	uxtb	r3, r3
 800601e:	f003 030f 	and.w	r3, r3, #15
 8006022:	b2da      	uxtb	r2, r3
 8006024:	683b      	ldr	r3, [r7, #0]
 8006026:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800602c:	0e1b      	lsrs	r3, r3, #24
 800602e:	b2db      	uxtb	r3, r3
 8006030:	f003 0303 	and.w	r3, r3, #3
 8006034:	b2da      	uxtb	r2, r3
 8006036:	683b      	ldr	r3, [r7, #0]
 8006038:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800603e:	0c1b      	lsrs	r3, r3, #16
 8006040:	b2da      	uxtb	r2, r3
 8006042:	683b      	ldr	r3, [r7, #0]
 8006044:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800604a:	0a1b      	lsrs	r3, r3, #8
 800604c:	b2da      	uxtb	r2, r3
 800604e:	683b      	ldr	r3, [r7, #0]
 8006050:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006056:	b2da      	uxtb	r2, r3
 8006058:	683b      	ldr	r3, [r7, #0]
 800605a:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006060:	0d1b      	lsrs	r3, r3, #20
 8006062:	b29a      	uxth	r2, r3
 8006064:	683b      	ldr	r3, [r7, #0]
 8006066:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800606c:	0c1b      	lsrs	r3, r3, #16
 800606e:	b2db      	uxtb	r3, r3
 8006070:	f003 030f 	and.w	r3, r3, #15
 8006074:	b2da      	uxtb	r2, r3
 8006076:	683b      	ldr	r3, [r7, #0]
 8006078:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800607e:	0bdb      	lsrs	r3, r3, #15
 8006080:	b2db      	uxtb	r3, r3
 8006082:	f003 0301 	and.w	r3, r3, #1
 8006086:	b2da      	uxtb	r2, r3
 8006088:	683b      	ldr	r3, [r7, #0]
 800608a:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006090:	0b9b      	lsrs	r3, r3, #14
 8006092:	b2db      	uxtb	r3, r3
 8006094:	f003 0301 	and.w	r3, r3, #1
 8006098:	b2da      	uxtb	r2, r3
 800609a:	683b      	ldr	r3, [r7, #0]
 800609c:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80060a2:	0b5b      	lsrs	r3, r3, #13
 80060a4:	b2db      	uxtb	r3, r3
 80060a6:	f003 0301 	and.w	r3, r3, #1
 80060aa:	b2da      	uxtb	r2, r3
 80060ac:	683b      	ldr	r3, [r7, #0]
 80060ae:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80060b4:	0b1b      	lsrs	r3, r3, #12
 80060b6:	b2db      	uxtb	r3, r3
 80060b8:	f003 0301 	and.w	r3, r3, #1
 80060bc:	b2da      	uxtb	r2, r3
 80060be:	683b      	ldr	r3, [r7, #0]
 80060c0:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 80060c2:	683b      	ldr	r3, [r7, #0]
 80060c4:	2200      	movs	r2, #0
 80060c6:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80060cc:	2b00      	cmp	r3, #0
 80060ce:	d163      	bne.n	8006198 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80060d4:	009a      	lsls	r2, r3, #2
 80060d6:	f640 73fc 	movw	r3, #4092	; 0xffc
 80060da:	4013      	ands	r3, r2
 80060dc:	687a      	ldr	r2, [r7, #4]
 80060de:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 80060e0:	0f92      	lsrs	r2, r2, #30
 80060e2:	431a      	orrs	r2, r3
 80060e4:	683b      	ldr	r3, [r7, #0]
 80060e6:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80060ec:	0edb      	lsrs	r3, r3, #27
 80060ee:	b2db      	uxtb	r3, r3
 80060f0:	f003 0307 	and.w	r3, r3, #7
 80060f4:	b2da      	uxtb	r2, r3
 80060f6:	683b      	ldr	r3, [r7, #0]
 80060f8:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80060fe:	0e1b      	lsrs	r3, r3, #24
 8006100:	b2db      	uxtb	r3, r3
 8006102:	f003 0307 	and.w	r3, r3, #7
 8006106:	b2da      	uxtb	r2, r3
 8006108:	683b      	ldr	r3, [r7, #0]
 800610a:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006110:	0d5b      	lsrs	r3, r3, #21
 8006112:	b2db      	uxtb	r3, r3
 8006114:	f003 0307 	and.w	r3, r3, #7
 8006118:	b2da      	uxtb	r2, r3
 800611a:	683b      	ldr	r3, [r7, #0]
 800611c:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006122:	0c9b      	lsrs	r3, r3, #18
 8006124:	b2db      	uxtb	r3, r3
 8006126:	f003 0307 	and.w	r3, r3, #7
 800612a:	b2da      	uxtb	r2, r3
 800612c:	683b      	ldr	r3, [r7, #0]
 800612e:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006134:	0bdb      	lsrs	r3, r3, #15
 8006136:	b2db      	uxtb	r3, r3
 8006138:	f003 0307 	and.w	r3, r3, #7
 800613c:	b2da      	uxtb	r2, r3
 800613e:	683b      	ldr	r3, [r7, #0]
 8006140:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8006142:	683b      	ldr	r3, [r7, #0]
 8006144:	691b      	ldr	r3, [r3, #16]
 8006146:	1c5a      	adds	r2, r3, #1
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 800614c:	683b      	ldr	r3, [r7, #0]
 800614e:	7e1b      	ldrb	r3, [r3, #24]
 8006150:	b2db      	uxtb	r3, r3
 8006152:	f003 0307 	and.w	r3, r3, #7
 8006156:	3302      	adds	r3, #2
 8006158:	2201      	movs	r2, #1
 800615a:	fa02 f303 	lsl.w	r3, r2, r3
 800615e:	687a      	ldr	r2, [r7, #4]
 8006160:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8006162:	fb03 f202 	mul.w	r2, r3, r2
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800616a:	683b      	ldr	r3, [r7, #0]
 800616c:	7a1b      	ldrb	r3, [r3, #8]
 800616e:	b2db      	uxtb	r3, r3
 8006170:	f003 030f 	and.w	r3, r3, #15
 8006174:	2201      	movs	r2, #1
 8006176:	409a      	lsls	r2, r3
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006180:	687a      	ldr	r2, [r7, #4]
 8006182:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8006184:	0a52      	lsrs	r2, r2, #9
 8006186:	fb03 f202 	mul.w	r2, r3, r2
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006194:	661a      	str	r2, [r3, #96]	; 0x60
 8006196:	e031      	b.n	80061fc <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800619c:	2b01      	cmp	r3, #1
 800619e:	d11d      	bne.n	80061dc <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80061a4:	041b      	lsls	r3, r3, #16
 80061a6:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80061ae:	0c1b      	lsrs	r3, r3, #16
 80061b0:	431a      	orrs	r2, r3
 80061b2:	683b      	ldr	r3, [r7, #0]
 80061b4:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 80061b6:	683b      	ldr	r3, [r7, #0]
 80061b8:	691b      	ldr	r3, [r3, #16]
 80061ba:	3301      	adds	r3, #1
 80061bc:	029a      	lsls	r2, r3, #10
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80061d0:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	661a      	str	r2, [r3, #96]	; 0x60
 80061da:	e00f      	b.n	80061fc <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	4a58      	ldr	r2, [pc, #352]	; (8006344 <HAL_SD_GetCardCSD+0x344>)
 80061e2:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061e8:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	2201      	movs	r2, #1
 80061f4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 80061f8:	2301      	movs	r3, #1
 80061fa:	e09d      	b.n	8006338 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006200:	0b9b      	lsrs	r3, r3, #14
 8006202:	b2db      	uxtb	r3, r3
 8006204:	f003 0301 	and.w	r3, r3, #1
 8006208:	b2da      	uxtb	r2, r3
 800620a:	683b      	ldr	r3, [r7, #0]
 800620c:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006212:	09db      	lsrs	r3, r3, #7
 8006214:	b2db      	uxtb	r3, r3
 8006216:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800621a:	b2da      	uxtb	r2, r3
 800621c:	683b      	ldr	r3, [r7, #0]
 800621e:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006224:	b2db      	uxtb	r3, r3
 8006226:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800622a:	b2da      	uxtb	r2, r3
 800622c:	683b      	ldr	r3, [r7, #0]
 800622e:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006234:	0fdb      	lsrs	r3, r3, #31
 8006236:	b2da      	uxtb	r2, r3
 8006238:	683b      	ldr	r3, [r7, #0]
 800623a:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006240:	0f5b      	lsrs	r3, r3, #29
 8006242:	b2db      	uxtb	r3, r3
 8006244:	f003 0303 	and.w	r3, r3, #3
 8006248:	b2da      	uxtb	r2, r3
 800624a:	683b      	ldr	r3, [r7, #0]
 800624c:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006252:	0e9b      	lsrs	r3, r3, #26
 8006254:	b2db      	uxtb	r3, r3
 8006256:	f003 0307 	and.w	r3, r3, #7
 800625a:	b2da      	uxtb	r2, r3
 800625c:	683b      	ldr	r3, [r7, #0]
 800625e:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006264:	0d9b      	lsrs	r3, r3, #22
 8006266:	b2db      	uxtb	r3, r3
 8006268:	f003 030f 	and.w	r3, r3, #15
 800626c:	b2da      	uxtb	r2, r3
 800626e:	683b      	ldr	r3, [r7, #0]
 8006270:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006276:	0d5b      	lsrs	r3, r3, #21
 8006278:	b2db      	uxtb	r3, r3
 800627a:	f003 0301 	and.w	r3, r3, #1
 800627e:	b2da      	uxtb	r2, r3
 8006280:	683b      	ldr	r3, [r7, #0]
 8006282:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8006286:	683b      	ldr	r3, [r7, #0]
 8006288:	2200      	movs	r2, #0
 800628a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006292:	0c1b      	lsrs	r3, r3, #16
 8006294:	b2db      	uxtb	r3, r3
 8006296:	f003 0301 	and.w	r3, r3, #1
 800629a:	b2da      	uxtb	r2, r3
 800629c:	683b      	ldr	r3, [r7, #0]
 800629e:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80062a6:	0bdb      	lsrs	r3, r3, #15
 80062a8:	b2db      	uxtb	r3, r3
 80062aa:	f003 0301 	and.w	r3, r3, #1
 80062ae:	b2da      	uxtb	r2, r3
 80062b0:	683b      	ldr	r3, [r7, #0]
 80062b2:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80062ba:	0b9b      	lsrs	r3, r3, #14
 80062bc:	b2db      	uxtb	r3, r3
 80062be:	f003 0301 	and.w	r3, r3, #1
 80062c2:	b2da      	uxtb	r2, r3
 80062c4:	683b      	ldr	r3, [r7, #0]
 80062c6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80062ce:	0b5b      	lsrs	r3, r3, #13
 80062d0:	b2db      	uxtb	r3, r3
 80062d2:	f003 0301 	and.w	r3, r3, #1
 80062d6:	b2da      	uxtb	r2, r3
 80062d8:	683b      	ldr	r3, [r7, #0]
 80062da:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80062e2:	0b1b      	lsrs	r3, r3, #12
 80062e4:	b2db      	uxtb	r3, r3
 80062e6:	f003 0301 	and.w	r3, r3, #1
 80062ea:	b2da      	uxtb	r2, r3
 80062ec:	683b      	ldr	r3, [r7, #0]
 80062ee:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80062f6:	0a9b      	lsrs	r3, r3, #10
 80062f8:	b2db      	uxtb	r3, r3
 80062fa:	f003 0303 	and.w	r3, r3, #3
 80062fe:	b2da      	uxtb	r2, r3
 8006300:	683b      	ldr	r3, [r7, #0]
 8006302:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800630a:	0a1b      	lsrs	r3, r3, #8
 800630c:	b2db      	uxtb	r3, r3
 800630e:	f003 0303 	and.w	r3, r3, #3
 8006312:	b2da      	uxtb	r2, r3
 8006314:	683b      	ldr	r3, [r7, #0]
 8006316:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800631e:	085b      	lsrs	r3, r3, #1
 8006320:	b2db      	uxtb	r3, r3
 8006322:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006326:	b2da      	uxtb	r2, r3
 8006328:	683b      	ldr	r3, [r7, #0]
 800632a:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 800632e:	683b      	ldr	r3, [r7, #0]
 8006330:	2201      	movs	r2, #1
 8006332:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 8006336:	2300      	movs	r3, #0
}
 8006338:	4618      	mov	r0, r3
 800633a:	370c      	adds	r7, #12
 800633c:	46bd      	mov	sp, r7
 800633e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006342:	4770      	bx	lr
 8006344:	004005ff 	.word	0x004005ff

08006348 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8006348:	b480      	push	{r7}
 800634a:	b083      	sub	sp, #12
 800634c:	af00      	add	r7, sp, #0
 800634e:	6078      	str	r0, [r7, #4]
 8006350:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006356:	683b      	ldr	r3, [r7, #0]
 8006358:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800635e:	683b      	ldr	r3, [r7, #0]
 8006360:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006366:	683b      	ldr	r3, [r7, #0]
 8006368:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800636e:	683b      	ldr	r3, [r7, #0]
 8006370:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006376:	683b      	ldr	r3, [r7, #0]
 8006378:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800637e:	683b      	ldr	r3, [r7, #0]
 8006380:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8006386:	683b      	ldr	r3, [r7, #0]
 8006388:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800638e:	683b      	ldr	r3, [r7, #0]
 8006390:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 8006392:	2300      	movs	r3, #0
}
 8006394:	4618      	mov	r0, r3
 8006396:	370c      	adds	r7, #12
 8006398:	46bd      	mov	sp, r7
 800639a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800639e:	4770      	bx	lr

080063a0 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDIO_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDIO_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 80063a0:	b5b0      	push	{r4, r5, r7, lr}
 80063a2:	b08e      	sub	sp, #56	; 0x38
 80063a4:	af04      	add	r7, sp, #16
 80063a6:	6078      	str	r0, [r7, #4]
 80063a8:	6039      	str	r1, [r7, #0]
  SDIO_InitTypeDef Init;
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 80063aa:	2300      	movs	r3, #0
 80063ac:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Check the parameters */
  assert_param(IS_SDIO_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	2203      	movs	r2, #3
 80063b4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80063bc:	2b03      	cmp	r3, #3
 80063be:	d02e      	beq.n	800641e <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if(WideMode == SDIO_BUS_WIDE_8B)
 80063c0:	683b      	ldr	r3, [r7, #0]
 80063c2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80063c6:	d106      	bne.n	80063d6 <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063cc:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	639a      	str	r2, [r3, #56]	; 0x38
 80063d4:	e029      	b.n	800642a <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDIO_BUS_WIDE_4B)
 80063d6:	683b      	ldr	r3, [r7, #0]
 80063d8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80063dc:	d10a      	bne.n	80063f4 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 80063de:	6878      	ldr	r0, [r7, #4]
 80063e0:	f000 fa1c 	bl	800681c <SD_WideBus_Enable>
 80063e4:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80063ea:	6a3b      	ldr	r3, [r7, #32]
 80063ec:	431a      	orrs	r2, r3
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	639a      	str	r2, [r3, #56]	; 0x38
 80063f2:	e01a      	b.n	800642a <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDIO_BUS_WIDE_1B)
 80063f4:	683b      	ldr	r3, [r7, #0]
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	d10a      	bne.n	8006410 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 80063fa:	6878      	ldr	r0, [r7, #4]
 80063fc:	f000 fa59 	bl	80068b2 <SD_WideBus_Disable>
 8006400:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006406:	6a3b      	ldr	r3, [r7, #32]
 8006408:	431a      	orrs	r2, r3
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	639a      	str	r2, [r3, #56]	; 0x38
 800640e:	e00c      	b.n	800642a <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006414:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	639a      	str	r2, [r3, #56]	; 0x38
 800641c:	e005      	b.n	800642a <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006422:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800642e:	2b00      	cmp	r3, #0
 8006430:	d00b      	beq.n	800644a <HAL_SD_ConfigWideBusOperation+0xaa>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	4a26      	ldr	r2, [pc, #152]	; (80064d0 <HAL_SD_ConfigWideBusOperation+0x130>)
 8006438:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	2201      	movs	r2, #1
 800643e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 8006442:	2301      	movs	r3, #1
 8006444:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8006448:	e01f      	b.n	800648a <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDIO peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	685b      	ldr	r3, [r3, #4]
 800644e:	60bb      	str	r3, [r7, #8]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	689b      	ldr	r3, [r3, #8]
 8006454:	60fb      	str	r3, [r7, #12]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	68db      	ldr	r3, [r3, #12]
 800645a:	613b      	str	r3, [r7, #16]
    Init.BusWide             = WideMode;
 800645c:	683b      	ldr	r3, [r7, #0]
 800645e:	617b      	str	r3, [r7, #20]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	695b      	ldr	r3, [r3, #20]
 8006464:	61bb      	str	r3, [r7, #24]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	699b      	ldr	r3, [r3, #24]
 800646a:	61fb      	str	r3, [r7, #28]
    (void)SDIO_Init(hsd->Instance, Init);
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	681d      	ldr	r5, [r3, #0]
 8006470:	466c      	mov	r4, sp
 8006472:	f107 0314 	add.w	r3, r7, #20
 8006476:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800647a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800647e:	f107 0308 	add.w	r3, r7, #8
 8006482:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006484:	4628      	mov	r0, r5
 8006486:	f002 f911 	bl	80086ac <SDIO_Init>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8006492:	4618      	mov	r0, r3
 8006494:	f002 f9e5 	bl	8008862 <SDMMC_CmdBlockLength>
 8006498:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800649a:	6a3b      	ldr	r3, [r7, #32]
 800649c:	2b00      	cmp	r3, #0
 800649e:	d00c      	beq.n	80064ba <HAL_SD_ConfigWideBusOperation+0x11a>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	4a0a      	ldr	r2, [pc, #40]	; (80064d0 <HAL_SD_ConfigWideBusOperation+0x130>)
 80064a6:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80064ac:	6a3b      	ldr	r3, [r7, #32]
 80064ae:	431a      	orrs	r2, r3
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 80064b4:	2301      	movs	r3, #1
 80064b6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	2201      	movs	r2, #1
 80064be:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return status;
 80064c2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80064c6:	4618      	mov	r0, r3
 80064c8:	3728      	adds	r7, #40	; 0x28
 80064ca:	46bd      	mov	sp, r7
 80064cc:	bdb0      	pop	{r4, r5, r7, pc}
 80064ce:	bf00      	nop
 80064d0:	004005ff 	.word	0x004005ff

080064d4 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 80064d4:	b580      	push	{r7, lr}
 80064d6:	b086      	sub	sp, #24
 80064d8:	af00      	add	r7, sp, #0
 80064da:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 80064dc:	2300      	movs	r3, #0
 80064de:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 80064e0:	f107 030c 	add.w	r3, r7, #12
 80064e4:	4619      	mov	r1, r3
 80064e6:	6878      	ldr	r0, [r7, #4]
 80064e8:	f000 f970 	bl	80067cc <SD_SendStatus>
 80064ec:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 80064ee:	697b      	ldr	r3, [r7, #20]
 80064f0:	2b00      	cmp	r3, #0
 80064f2:	d005      	beq.n	8006500 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80064f8:	697b      	ldr	r3, [r7, #20]
 80064fa:	431a      	orrs	r2, r3
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	0a5b      	lsrs	r3, r3, #9
 8006504:	f003 030f 	and.w	r3, r3, #15
 8006508:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 800650a:	693b      	ldr	r3, [r7, #16]
}
 800650c:	4618      	mov	r0, r3
 800650e:	3718      	adds	r7, #24
 8006510:	46bd      	mov	sp, r7
 8006512:	bd80      	pop	{r7, pc}

08006514 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8006514:	b5b0      	push	{r4, r5, r7, lr}
 8006516:	b094      	sub	sp, #80	; 0x50
 8006518:	af04      	add	r7, sp, #16
 800651a:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 800651c:	2301      	movs	r3, #1
 800651e:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	4618      	mov	r0, r3
 8006526:	f002 f918 	bl	800875a <SDIO_GetPowerState>
 800652a:	4603      	mov	r3, r0
 800652c:	2b00      	cmp	r3, #0
 800652e:	d102      	bne.n	8006536 <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8006530:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8006534:	e0b8      	b.n	80066a8 <SD_InitCard+0x194>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800653a:	2b03      	cmp	r3, #3
 800653c:	d02f      	beq.n	800659e <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	4618      	mov	r0, r3
 8006544:	f002 fb42 	bl	8008bcc <SDMMC_CmdSendCID>
 8006548:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800654a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800654c:	2b00      	cmp	r3, #0
 800654e:	d001      	beq.n	8006554 <SD_InitCard+0x40>
    {
      return errorstate;
 8006550:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006552:	e0a9      	b.n	80066a8 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	2100      	movs	r1, #0
 800655a:	4618      	mov	r0, r3
 800655c:	f002 f942 	bl	80087e4 <SDIO_GetResponse>
 8006560:	4602      	mov	r2, r0
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	2104      	movs	r1, #4
 800656c:	4618      	mov	r0, r3
 800656e:	f002 f939 	bl	80087e4 <SDIO_GetResponse>
 8006572:	4602      	mov	r2, r0
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	2108      	movs	r1, #8
 800657e:	4618      	mov	r0, r3
 8006580:	f002 f930 	bl	80087e4 <SDIO_GetResponse>
 8006584:	4602      	mov	r2, r0
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	210c      	movs	r1, #12
 8006590:	4618      	mov	r0, r3
 8006592:	f002 f927 	bl	80087e4 <SDIO_GetResponse>
 8006596:	4602      	mov	r2, r0
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80065a2:	2b03      	cmp	r3, #3
 80065a4:	d00d      	beq.n	80065c2 <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	f107 020e 	add.w	r2, r7, #14
 80065ae:	4611      	mov	r1, r2
 80065b0:	4618      	mov	r0, r3
 80065b2:	f002 fb48 	bl	8008c46 <SDMMC_CmdSetRelAdd>
 80065b6:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80065b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80065ba:	2b00      	cmp	r3, #0
 80065bc:	d001      	beq.n	80065c2 <SD_InitCard+0xae>
    {
      return errorstate;
 80065be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80065c0:	e072      	b.n	80066a8 <SD_InitCard+0x194>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80065c6:	2b03      	cmp	r3, #3
 80065c8:	d036      	beq.n	8006638 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 80065ca:	89fb      	ldrh	r3, [r7, #14]
 80065cc:	461a      	mov	r2, r3
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	681a      	ldr	r2, [r3, #0]
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80065da:	041b      	lsls	r3, r3, #16
 80065dc:	4619      	mov	r1, r3
 80065de:	4610      	mov	r0, r2
 80065e0:	f002 fb12 	bl	8008c08 <SDMMC_CmdSendCSD>
 80065e4:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80065e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80065e8:	2b00      	cmp	r3, #0
 80065ea:	d001      	beq.n	80065f0 <SD_InitCard+0xdc>
    {
      return errorstate;
 80065ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80065ee:	e05b      	b.n	80066a8 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	2100      	movs	r1, #0
 80065f6:	4618      	mov	r0, r3
 80065f8:	f002 f8f4 	bl	80087e4 <SDIO_GetResponse>
 80065fc:	4602      	mov	r2, r0
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	2104      	movs	r1, #4
 8006608:	4618      	mov	r0, r3
 800660a:	f002 f8eb 	bl	80087e4 <SDIO_GetResponse>
 800660e:	4602      	mov	r2, r0
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	2108      	movs	r1, #8
 800661a:	4618      	mov	r0, r3
 800661c:	f002 f8e2 	bl	80087e4 <SDIO_GetResponse>
 8006620:	4602      	mov	r2, r0
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	210c      	movs	r1, #12
 800662c:	4618      	mov	r0, r3
 800662e:	f002 f8d9 	bl	80087e4 <SDIO_GetResponse>
 8006632:	4602      	mov	r2, r0
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	2104      	movs	r1, #4
 800663e:	4618      	mov	r0, r3
 8006640:	f002 f8d0 	bl	80087e4 <SDIO_GetResponse>
 8006644:	4603      	mov	r3, r0
 8006646:	0d1a      	lsrs	r2, r3, #20
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 800664c:	f107 0310 	add.w	r3, r7, #16
 8006650:	4619      	mov	r1, r3
 8006652:	6878      	ldr	r0, [r7, #4]
 8006654:	f7ff fcd4 	bl	8006000 <HAL_SD_GetCardCSD>
 8006658:	4603      	mov	r3, r0
 800665a:	2b00      	cmp	r3, #0
 800665c:	d002      	beq.n	8006664 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800665e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8006662:	e021      	b.n	80066a8 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	6819      	ldr	r1, [r3, #0]
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800666c:	041b      	lsls	r3, r3, #16
 800666e:	2200      	movs	r2, #0
 8006670:	461c      	mov	r4, r3
 8006672:	4615      	mov	r5, r2
 8006674:	4622      	mov	r2, r4
 8006676:	462b      	mov	r3, r5
 8006678:	4608      	mov	r0, r1
 800667a:	f002 f9bf 	bl	80089fc <SDMMC_CmdSelDesel>
 800667e:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8006680:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006682:	2b00      	cmp	r3, #0
 8006684:	d001      	beq.n	800668a <SD_InitCard+0x176>
  {
    return errorstate;
 8006686:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006688:	e00e      	b.n	80066a8 <SD_InitCard+0x194>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	681d      	ldr	r5, [r3, #0]
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	466c      	mov	r4, sp
 8006692:	f103 0210 	add.w	r2, r3, #16
 8006696:	ca07      	ldmia	r2, {r0, r1, r2}
 8006698:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800669c:	3304      	adds	r3, #4
 800669e:	cb0e      	ldmia	r3, {r1, r2, r3}
 80066a0:	4628      	mov	r0, r5
 80066a2:	f002 f803 	bl	80086ac <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 80066a6:	2300      	movs	r3, #0
}
 80066a8:	4618      	mov	r0, r3
 80066aa:	3740      	adds	r7, #64	; 0x40
 80066ac:	46bd      	mov	sp, r7
 80066ae:	bdb0      	pop	{r4, r5, r7, pc}

080066b0 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 80066b0:	b580      	push	{r7, lr}
 80066b2:	b086      	sub	sp, #24
 80066b4:	af00      	add	r7, sp, #0
 80066b6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80066b8:	2300      	movs	r3, #0
 80066ba:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 80066bc:	2300      	movs	r3, #0
 80066be:	617b      	str	r3, [r7, #20]
 80066c0:	2300      	movs	r3, #0
 80066c2:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	4618      	mov	r0, r3
 80066ca:	f002 f9ba 	bl	8008a42 <SDMMC_CmdGoIdleState>
 80066ce:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	2b00      	cmp	r3, #0
 80066d4:	d001      	beq.n	80066da <SD_PowerON+0x2a>
  {
    return errorstate;
 80066d6:	68fb      	ldr	r3, [r7, #12]
 80066d8:	e072      	b.n	80067c0 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	4618      	mov	r0, r3
 80066e0:	f002 f9cd 	bl	8008a7e <SDMMC_CmdOperCond>
 80066e4:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	2b00      	cmp	r3, #0
 80066ea:	d00d      	beq.n	8006708 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	2200      	movs	r2, #0
 80066f0:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	4618      	mov	r0, r3
 80066f8:	f002 f9a3 	bl	8008a42 <SDMMC_CmdGoIdleState>
 80066fc:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80066fe:	68fb      	ldr	r3, [r7, #12]
 8006700:	2b00      	cmp	r3, #0
 8006702:	d004      	beq.n	800670e <SD_PowerON+0x5e>
    {
      return errorstate;
 8006704:	68fb      	ldr	r3, [r7, #12]
 8006706:	e05b      	b.n	80067c0 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	2201      	movs	r2, #1
 800670c:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006712:	2b01      	cmp	r3, #1
 8006714:	d137      	bne.n	8006786 <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	2100      	movs	r1, #0
 800671c:	4618      	mov	r0, r3
 800671e:	f002 f9cd 	bl	8008abc <SDMMC_CmdAppCommand>
 8006722:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	2b00      	cmp	r3, #0
 8006728:	d02d      	beq.n	8006786 <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800672a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800672e:	e047      	b.n	80067c0 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	2100      	movs	r1, #0
 8006736:	4618      	mov	r0, r3
 8006738:	f002 f9c0 	bl	8008abc <SDMMC_CmdAppCommand>
 800673c:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800673e:	68fb      	ldr	r3, [r7, #12]
 8006740:	2b00      	cmp	r3, #0
 8006742:	d001      	beq.n	8006748 <SD_PowerON+0x98>
    {
      return errorstate;
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	e03b      	b.n	80067c0 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	491e      	ldr	r1, [pc, #120]	; (80067c8 <SD_PowerON+0x118>)
 800674e:	4618      	mov	r0, r3
 8006750:	f002 f9d6 	bl	8008b00 <SDMMC_CmdAppOperCommand>
 8006754:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8006756:	68fb      	ldr	r3, [r7, #12]
 8006758:	2b00      	cmp	r3, #0
 800675a:	d002      	beq.n	8006762 <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800675c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8006760:	e02e      	b.n	80067c0 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	2100      	movs	r1, #0
 8006768:	4618      	mov	r0, r3
 800676a:	f002 f83b 	bl	80087e4 <SDIO_GetResponse>
 800676e:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8006770:	697b      	ldr	r3, [r7, #20]
 8006772:	0fdb      	lsrs	r3, r3, #31
 8006774:	2b01      	cmp	r3, #1
 8006776:	d101      	bne.n	800677c <SD_PowerON+0xcc>
 8006778:	2301      	movs	r3, #1
 800677a:	e000      	b.n	800677e <SD_PowerON+0xce>
 800677c:	2300      	movs	r3, #0
 800677e:	613b      	str	r3, [r7, #16]

    count++;
 8006780:	68bb      	ldr	r3, [r7, #8]
 8006782:	3301      	adds	r3, #1
 8006784:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8006786:	68bb      	ldr	r3, [r7, #8]
 8006788:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800678c:	4293      	cmp	r3, r2
 800678e:	d802      	bhi.n	8006796 <SD_PowerON+0xe6>
 8006790:	693b      	ldr	r3, [r7, #16]
 8006792:	2b00      	cmp	r3, #0
 8006794:	d0cc      	beq.n	8006730 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 8006796:	68bb      	ldr	r3, [r7, #8]
 8006798:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800679c:	4293      	cmp	r3, r2
 800679e:	d902      	bls.n	80067a6 <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 80067a0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80067a4:	e00c      	b.n	80067c0 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 80067a6:	697b      	ldr	r3, [r7, #20]
 80067a8:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80067ac:	2b00      	cmp	r3, #0
 80067ae:	d003      	beq.n	80067b8 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	2201      	movs	r2, #1
 80067b4:	645a      	str	r2, [r3, #68]	; 0x44
 80067b6:	e002      	b.n	80067be <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	2200      	movs	r2, #0
 80067bc:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 80067be:	2300      	movs	r3, #0
}
 80067c0:	4618      	mov	r0, r3
 80067c2:	3718      	adds	r7, #24
 80067c4:	46bd      	mov	sp, r7
 80067c6:	bd80      	pop	{r7, pc}
 80067c8:	c1100000 	.word	0xc1100000

080067cc <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 80067cc:	b580      	push	{r7, lr}
 80067ce:	b084      	sub	sp, #16
 80067d0:	af00      	add	r7, sp, #0
 80067d2:	6078      	str	r0, [r7, #4]
 80067d4:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 80067d6:	683b      	ldr	r3, [r7, #0]
 80067d8:	2b00      	cmp	r3, #0
 80067da:	d102      	bne.n	80067e2 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 80067dc:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80067e0:	e018      	b.n	8006814 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	681a      	ldr	r2, [r3, #0]
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80067ea:	041b      	lsls	r3, r3, #16
 80067ec:	4619      	mov	r1, r3
 80067ee:	4610      	mov	r0, r2
 80067f0:	f002 fa4a 	bl	8008c88 <SDMMC_CmdSendStatus>
 80067f4:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	2b00      	cmp	r3, #0
 80067fa:	d001      	beq.n	8006800 <SD_SendStatus+0x34>
  {
    return errorstate;
 80067fc:	68fb      	ldr	r3, [r7, #12]
 80067fe:	e009      	b.n	8006814 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	2100      	movs	r1, #0
 8006806:	4618      	mov	r0, r3
 8006808:	f001 ffec 	bl	80087e4 <SDIO_GetResponse>
 800680c:	4602      	mov	r2, r0
 800680e:	683b      	ldr	r3, [r7, #0]
 8006810:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 8006812:	2300      	movs	r3, #0
}
 8006814:	4618      	mov	r0, r3
 8006816:	3710      	adds	r7, #16
 8006818:	46bd      	mov	sp, r7
 800681a:	bd80      	pop	{r7, pc}

0800681c <SD_WideBus_Enable>:
  * @brief  Enables the SDIO wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 800681c:	b580      	push	{r7, lr}
 800681e:	b086      	sub	sp, #24
 8006820:	af00      	add	r7, sp, #0
 8006822:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8006824:	2300      	movs	r3, #0
 8006826:	60fb      	str	r3, [r7, #12]
 8006828:	2300      	movs	r3, #0
 800682a:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	2100      	movs	r1, #0
 8006832:	4618      	mov	r0, r3
 8006834:	f001 ffd6 	bl	80087e4 <SDIO_GetResponse>
 8006838:	4603      	mov	r3, r0
 800683a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800683e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006842:	d102      	bne.n	800684a <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8006844:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8006848:	e02f      	b.n	80068aa <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800684a:	f107 030c 	add.w	r3, r7, #12
 800684e:	4619      	mov	r1, r3
 8006850:	6878      	ldr	r0, [r7, #4]
 8006852:	f000 f879 	bl	8006948 <SD_FindSCR>
 8006856:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8006858:	697b      	ldr	r3, [r7, #20]
 800685a:	2b00      	cmp	r3, #0
 800685c:	d001      	beq.n	8006862 <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 800685e:	697b      	ldr	r3, [r7, #20]
 8006860:	e023      	b.n	80068aa <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8006862:	693b      	ldr	r3, [r7, #16]
 8006864:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006868:	2b00      	cmp	r3, #0
 800686a:	d01c      	beq.n	80068a6 <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	681a      	ldr	r2, [r3, #0]
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006874:	041b      	lsls	r3, r3, #16
 8006876:	4619      	mov	r1, r3
 8006878:	4610      	mov	r0, r2
 800687a:	f002 f91f 	bl	8008abc <SDMMC_CmdAppCommand>
 800687e:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8006880:	697b      	ldr	r3, [r7, #20]
 8006882:	2b00      	cmp	r3, #0
 8006884:	d001      	beq.n	800688a <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 8006886:	697b      	ldr	r3, [r7, #20]
 8006888:	e00f      	b.n	80068aa <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	2102      	movs	r1, #2
 8006890:	4618      	mov	r0, r3
 8006892:	f002 f958 	bl	8008b46 <SDMMC_CmdBusWidth>
 8006896:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8006898:	697b      	ldr	r3, [r7, #20]
 800689a:	2b00      	cmp	r3, #0
 800689c:	d001      	beq.n	80068a2 <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 800689e:	697b      	ldr	r3, [r7, #20]
 80068a0:	e003      	b.n	80068aa <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 80068a2:	2300      	movs	r3, #0
 80068a4:	e001      	b.n	80068aa <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80068a6:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 80068aa:	4618      	mov	r0, r3
 80068ac:	3718      	adds	r7, #24
 80068ae:	46bd      	mov	sp, r7
 80068b0:	bd80      	pop	{r7, pc}

080068b2 <SD_WideBus_Disable>:
  * @brief  Disables the SDIO wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 80068b2:	b580      	push	{r7, lr}
 80068b4:	b086      	sub	sp, #24
 80068b6:	af00      	add	r7, sp, #0
 80068b8:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 80068ba:	2300      	movs	r3, #0
 80068bc:	60fb      	str	r3, [r7, #12]
 80068be:	2300      	movs	r3, #0
 80068c0:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	2100      	movs	r1, #0
 80068c8:	4618      	mov	r0, r3
 80068ca:	f001 ff8b 	bl	80087e4 <SDIO_GetResponse>
 80068ce:	4603      	mov	r3, r0
 80068d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80068d4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80068d8:	d102      	bne.n	80068e0 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 80068da:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80068de:	e02f      	b.n	8006940 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 80068e0:	f107 030c 	add.w	r3, r7, #12
 80068e4:	4619      	mov	r1, r3
 80068e6:	6878      	ldr	r0, [r7, #4]
 80068e8:	f000 f82e 	bl	8006948 <SD_FindSCR>
 80068ec:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 80068ee:	697b      	ldr	r3, [r7, #20]
 80068f0:	2b00      	cmp	r3, #0
 80068f2:	d001      	beq.n	80068f8 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 80068f4:	697b      	ldr	r3, [r7, #20]
 80068f6:	e023      	b.n	8006940 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 80068f8:	693b      	ldr	r3, [r7, #16]
 80068fa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80068fe:	2b00      	cmp	r3, #0
 8006900:	d01c      	beq.n	800693c <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	681a      	ldr	r2, [r3, #0]
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800690a:	041b      	lsls	r3, r3, #16
 800690c:	4619      	mov	r1, r3
 800690e:	4610      	mov	r0, r2
 8006910:	f002 f8d4 	bl	8008abc <SDMMC_CmdAppCommand>
 8006914:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8006916:	697b      	ldr	r3, [r7, #20]
 8006918:	2b00      	cmp	r3, #0
 800691a:	d001      	beq.n	8006920 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 800691c:	697b      	ldr	r3, [r7, #20]
 800691e:	e00f      	b.n	8006940 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	2100      	movs	r1, #0
 8006926:	4618      	mov	r0, r3
 8006928:	f002 f90d 	bl	8008b46 <SDMMC_CmdBusWidth>
 800692c:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800692e:	697b      	ldr	r3, [r7, #20]
 8006930:	2b00      	cmp	r3, #0
 8006932:	d001      	beq.n	8006938 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 8006934:	697b      	ldr	r3, [r7, #20]
 8006936:	e003      	b.n	8006940 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8006938:	2300      	movs	r3, #0
 800693a:	e001      	b.n	8006940 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800693c:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8006940:	4618      	mov	r0, r3
 8006942:	3718      	adds	r7, #24
 8006944:	46bd      	mov	sp, r7
 8006946:	bd80      	pop	{r7, pc}

08006948 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8006948:	b590      	push	{r4, r7, lr}
 800694a:	b08f      	sub	sp, #60	; 0x3c
 800694c:	af00      	add	r7, sp, #0
 800694e:	6078      	str	r0, [r7, #4]
 8006950:	6039      	str	r1, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8006952:	f7fd fb7b 	bl	800404c <HAL_GetTick>
 8006956:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 8006958:	2300      	movs	r3, #0
 800695a:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 800695c:	2300      	movs	r3, #0
 800695e:	60bb      	str	r3, [r7, #8]
 8006960:	2300      	movs	r3, #0
 8006962:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 8006964:	683b      	ldr	r3, [r7, #0]
 8006966:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	2108      	movs	r1, #8
 800696e:	4618      	mov	r0, r3
 8006970:	f001 ff77 	bl	8008862 <SDMMC_CmdBlockLength>
 8006974:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8006976:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006978:	2b00      	cmp	r3, #0
 800697a:	d001      	beq.n	8006980 <SD_FindSCR+0x38>
  {
    return errorstate;
 800697c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800697e:	e0b2      	b.n	8006ae6 <SD_FindSCR+0x19e>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	681a      	ldr	r2, [r3, #0]
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006988:	041b      	lsls	r3, r3, #16
 800698a:	4619      	mov	r1, r3
 800698c:	4610      	mov	r0, r2
 800698e:	f002 f895 	bl	8008abc <SDMMC_CmdAppCommand>
 8006992:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8006994:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006996:	2b00      	cmp	r3, #0
 8006998:	d001      	beq.n	800699e <SD_FindSCR+0x56>
  {
    return errorstate;
 800699a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800699c:	e0a3      	b.n	8006ae6 <SD_FindSCR+0x19e>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800699e:	f04f 33ff 	mov.w	r3, #4294967295
 80069a2:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 80069a4:	2308      	movs	r3, #8
 80069a6:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDIO_DATABLOCK_SIZE_8B;
 80069a8:	2330      	movs	r3, #48	; 0x30
 80069aa:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 80069ac:	2302      	movs	r3, #2
 80069ae:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 80069b0:	2300      	movs	r3, #0
 80069b2:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDIO_DPSM_ENABLE;
 80069b4:	2301      	movs	r3, #1
 80069b6:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDIO_ConfigData(hsd->Instance, &config);
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	f107 0210 	add.w	r2, r7, #16
 80069c0:	4611      	mov	r1, r2
 80069c2:	4618      	mov	r0, r3
 80069c4:	f001 ff21 	bl	800880a <SDIO_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	4618      	mov	r0, r3
 80069ce:	f002 f8dc 	bl	8008b8a <SDMMC_CmdSendSCR>
 80069d2:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 80069d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069d6:	2b00      	cmp	r3, #0
 80069d8:	d02a      	beq.n	8006a30 <SD_FindSCR+0xe8>
  {
    return errorstate;
 80069da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069dc:	e083      	b.n	8006ae6 <SD_FindSCR+0x19e>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL))
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80069e4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80069e8:	2b00      	cmp	r3, #0
 80069ea:	d00f      	beq.n	8006a0c <SD_FindSCR+0xc4>
    {
      *(tempscr + index) = SDIO_ReadFIFO(hsd->Instance);
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	6819      	ldr	r1, [r3, #0]
 80069f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80069f2:	009b      	lsls	r3, r3, #2
 80069f4:	f107 0208 	add.w	r2, r7, #8
 80069f8:	18d4      	adds	r4, r2, r3
 80069fa:	4608      	mov	r0, r1
 80069fc:	f001 fe81 	bl	8008702 <SDIO_ReadFIFO>
 8006a00:	4603      	mov	r3, r0
 8006a02:	6023      	str	r3, [r4, #0]
      index++;
 8006a04:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006a06:	3301      	adds	r3, #1
 8006a08:	637b      	str	r3, [r7, #52]	; 0x34
 8006a0a:	e006      	b.n	8006a1a <SD_FindSCR+0xd2>
    }
    else if(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXACT))
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006a12:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006a16:	2b00      	cmp	r3, #0
 8006a18:	d012      	beq.n	8006a40 <SD_FindSCR+0xf8>
    {
      break;
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8006a1a:	f7fd fb17 	bl	800404c <HAL_GetTick>
 8006a1e:	4602      	mov	r2, r0
 8006a20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a22:	1ad3      	subs	r3, r2, r3
 8006a24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a28:	d102      	bne.n	8006a30 <SD_FindSCR+0xe8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8006a2a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8006a2e:	e05a      	b.n	8006ae6 <SD_FindSCR+0x19e>
  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT))
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006a36:	f003 032a 	and.w	r3, r3, #42	; 0x2a
 8006a3a:	2b00      	cmp	r3, #0
 8006a3c:	d0cf      	beq.n	80069de <SD_FindSCR+0x96>
 8006a3e:	e000      	b.n	8006a42 <SD_FindSCR+0xfa>
      break;
 8006a40:	bf00      	nop
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006a48:	f003 0308 	and.w	r3, r3, #8
 8006a4c:	2b00      	cmp	r3, #0
 8006a4e:	d005      	beq.n	8006a5c <SD_FindSCR+0x114>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DTIMEOUT);
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	2208      	movs	r2, #8
 8006a56:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 8006a58:	2308      	movs	r3, #8
 8006a5a:	e044      	b.n	8006ae6 <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006a62:	f003 0302 	and.w	r3, r3, #2
 8006a66:	2b00      	cmp	r3, #0
 8006a68:	d005      	beq.n	8006a76 <SD_FindSCR+0x12e>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DCRCFAIL);
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	2202      	movs	r2, #2
 8006a70:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8006a72:	2302      	movs	r3, #2
 8006a74:	e037      	b.n	8006ae6 <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006a7c:	f003 0320 	and.w	r3, r3, #32
 8006a80:	2b00      	cmp	r3, #0
 8006a82:	d005      	beq.n	8006a90 <SD_FindSCR+0x148>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_RXOVERR);
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	2220      	movs	r2, #32
 8006a8a:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 8006a8c:	2320      	movs	r3, #32
 8006a8e:	e02a      	b.n	8006ae6 <SD_FindSCR+0x19e>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	f240 523a 	movw	r2, #1338	; 0x53a
 8006a98:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8006a9a:	68fb      	ldr	r3, [r7, #12]
 8006a9c:	061a      	lsls	r2, r3, #24
 8006a9e:	68fb      	ldr	r3, [r7, #12]
 8006aa0:	021b      	lsls	r3, r3, #8
 8006aa2:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8006aa6:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8006aa8:	68fb      	ldr	r3, [r7, #12]
 8006aaa:	0a1b      	lsrs	r3, r3, #8
 8006aac:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8006ab0:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8006ab2:	68fb      	ldr	r3, [r7, #12]
 8006ab4:	0e1b      	lsrs	r3, r3, #24
 8006ab6:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8006ab8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006aba:	601a      	str	r2, [r3, #0]
    scr++;
 8006abc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006abe:	3304      	adds	r3, #4
 8006ac0:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8006ac2:	68bb      	ldr	r3, [r7, #8]
 8006ac4:	061a      	lsls	r2, r3, #24
 8006ac6:	68bb      	ldr	r3, [r7, #8]
 8006ac8:	021b      	lsls	r3, r3, #8
 8006aca:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8006ace:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8006ad0:	68bb      	ldr	r3, [r7, #8]
 8006ad2:	0a1b      	lsrs	r3, r3, #8
 8006ad4:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8006ad8:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8006ada:	68bb      	ldr	r3, [r7, #8]
 8006adc:	0e1b      	lsrs	r3, r3, #24
 8006ade:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8006ae0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ae2:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 8006ae4:	2300      	movs	r3, #0
}
 8006ae6:	4618      	mov	r0, r3
 8006ae8:	373c      	adds	r7, #60	; 0x3c
 8006aea:	46bd      	mov	sp, r7
 8006aec:	bd90      	pop	{r4, r7, pc}

08006aee <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006aee:	b580      	push	{r7, lr}
 8006af0:	b082      	sub	sp, #8
 8006af2:	af00      	add	r7, sp, #0
 8006af4:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	2b00      	cmp	r3, #0
 8006afa:	d101      	bne.n	8006b00 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006afc:	2301      	movs	r3, #1
 8006afe:	e07b      	b.n	8006bf8 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b04:	2b00      	cmp	r3, #0
 8006b06:	d108      	bne.n	8006b1a <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	685b      	ldr	r3, [r3, #4]
 8006b0c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006b10:	d009      	beq.n	8006b26 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	2200      	movs	r2, #0
 8006b16:	61da      	str	r2, [r3, #28]
 8006b18:	e005      	b.n	8006b26 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	2200      	movs	r2, #0
 8006b1e:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	2200      	movs	r2, #0
 8006b24:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	2200      	movs	r2, #0
 8006b2a:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006b32:	b2db      	uxtb	r3, r3
 8006b34:	2b00      	cmp	r3, #0
 8006b36:	d106      	bne.n	8006b46 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	2200      	movs	r2, #0
 8006b3c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006b40:	6878      	ldr	r0, [r7, #4]
 8006b42:	f7fc fde3 	bl	800370c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	2202      	movs	r2, #2
 8006b4a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	681a      	ldr	r2, [r3, #0]
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006b5c:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	685b      	ldr	r3, [r3, #4]
 8006b62:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	689b      	ldr	r3, [r3, #8]
 8006b6a:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8006b6e:	431a      	orrs	r2, r3
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	68db      	ldr	r3, [r3, #12]
 8006b74:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006b78:	431a      	orrs	r2, r3
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	691b      	ldr	r3, [r3, #16]
 8006b7e:	f003 0302 	and.w	r3, r3, #2
 8006b82:	431a      	orrs	r2, r3
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	695b      	ldr	r3, [r3, #20]
 8006b88:	f003 0301 	and.w	r3, r3, #1
 8006b8c:	431a      	orrs	r2, r3
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	699b      	ldr	r3, [r3, #24]
 8006b92:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006b96:	431a      	orrs	r2, r3
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	69db      	ldr	r3, [r3, #28]
 8006b9c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006ba0:	431a      	orrs	r2, r3
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	6a1b      	ldr	r3, [r3, #32]
 8006ba6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006baa:	ea42 0103 	orr.w	r1, r2, r3
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006bb2:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	430a      	orrs	r2, r1
 8006bbc:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	699b      	ldr	r3, [r3, #24]
 8006bc2:	0c1b      	lsrs	r3, r3, #16
 8006bc4:	f003 0104 	and.w	r1, r3, #4
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bcc:	f003 0210 	and.w	r2, r3, #16
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	430a      	orrs	r2, r1
 8006bd6:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	69da      	ldr	r2, [r3, #28]
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006be6:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	2200      	movs	r2, #0
 8006bec:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	2201      	movs	r2, #1
 8006bf2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8006bf6:	2300      	movs	r3, #0
}
 8006bf8:	4618      	mov	r0, r3
 8006bfa:	3708      	adds	r7, #8
 8006bfc:	46bd      	mov	sp, r7
 8006bfe:	bd80      	pop	{r7, pc}

08006c00 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006c00:	b580      	push	{r7, lr}
 8006c02:	b088      	sub	sp, #32
 8006c04:	af00      	add	r7, sp, #0
 8006c06:	60f8      	str	r0, [r7, #12]
 8006c08:	60b9      	str	r1, [r7, #8]
 8006c0a:	603b      	str	r3, [r7, #0]
 8006c0c:	4613      	mov	r3, r2
 8006c0e:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006c10:	2300      	movs	r3, #0
 8006c12:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006c14:	68fb      	ldr	r3, [r7, #12]
 8006c16:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006c1a:	2b01      	cmp	r3, #1
 8006c1c:	d101      	bne.n	8006c22 <HAL_SPI_Transmit+0x22>
 8006c1e:	2302      	movs	r3, #2
 8006c20:	e126      	b.n	8006e70 <HAL_SPI_Transmit+0x270>
 8006c22:	68fb      	ldr	r3, [r7, #12]
 8006c24:	2201      	movs	r2, #1
 8006c26:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006c2a:	f7fd fa0f 	bl	800404c <HAL_GetTick>
 8006c2e:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8006c30:	88fb      	ldrh	r3, [r7, #6]
 8006c32:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006c34:	68fb      	ldr	r3, [r7, #12]
 8006c36:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006c3a:	b2db      	uxtb	r3, r3
 8006c3c:	2b01      	cmp	r3, #1
 8006c3e:	d002      	beq.n	8006c46 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8006c40:	2302      	movs	r3, #2
 8006c42:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006c44:	e10b      	b.n	8006e5e <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8006c46:	68bb      	ldr	r3, [r7, #8]
 8006c48:	2b00      	cmp	r3, #0
 8006c4a:	d002      	beq.n	8006c52 <HAL_SPI_Transmit+0x52>
 8006c4c:	88fb      	ldrh	r3, [r7, #6]
 8006c4e:	2b00      	cmp	r3, #0
 8006c50:	d102      	bne.n	8006c58 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8006c52:	2301      	movs	r3, #1
 8006c54:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006c56:	e102      	b.n	8006e5e <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8006c58:	68fb      	ldr	r3, [r7, #12]
 8006c5a:	2203      	movs	r2, #3
 8006c5c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006c60:	68fb      	ldr	r3, [r7, #12]
 8006c62:	2200      	movs	r2, #0
 8006c64:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8006c66:	68fb      	ldr	r3, [r7, #12]
 8006c68:	68ba      	ldr	r2, [r7, #8]
 8006c6a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8006c6c:	68fb      	ldr	r3, [r7, #12]
 8006c6e:	88fa      	ldrh	r2, [r7, #6]
 8006c70:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8006c72:	68fb      	ldr	r3, [r7, #12]
 8006c74:	88fa      	ldrh	r2, [r7, #6]
 8006c76:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8006c78:	68fb      	ldr	r3, [r7, #12]
 8006c7a:	2200      	movs	r2, #0
 8006c7c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8006c7e:	68fb      	ldr	r3, [r7, #12]
 8006c80:	2200      	movs	r2, #0
 8006c82:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8006c84:	68fb      	ldr	r3, [r7, #12]
 8006c86:	2200      	movs	r2, #0
 8006c88:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8006c8a:	68fb      	ldr	r3, [r7, #12]
 8006c8c:	2200      	movs	r2, #0
 8006c8e:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8006c90:	68fb      	ldr	r3, [r7, #12]
 8006c92:	2200      	movs	r2, #0
 8006c94:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006c96:	68fb      	ldr	r3, [r7, #12]
 8006c98:	689b      	ldr	r3, [r3, #8]
 8006c9a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006c9e:	d10f      	bne.n	8006cc0 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006ca0:	68fb      	ldr	r3, [r7, #12]
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	681a      	ldr	r2, [r3, #0]
 8006ca6:	68fb      	ldr	r3, [r7, #12]
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006cae:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8006cb0:	68fb      	ldr	r3, [r7, #12]
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	681a      	ldr	r2, [r3, #0]
 8006cb6:	68fb      	ldr	r3, [r7, #12]
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006cbe:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006cc0:	68fb      	ldr	r3, [r7, #12]
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006cca:	2b40      	cmp	r3, #64	; 0x40
 8006ccc:	d007      	beq.n	8006cde <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006cce:	68fb      	ldr	r3, [r7, #12]
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	681a      	ldr	r2, [r3, #0]
 8006cd4:	68fb      	ldr	r3, [r7, #12]
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006cdc:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8006cde:	68fb      	ldr	r3, [r7, #12]
 8006ce0:	68db      	ldr	r3, [r3, #12]
 8006ce2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006ce6:	d14b      	bne.n	8006d80 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006ce8:	68fb      	ldr	r3, [r7, #12]
 8006cea:	685b      	ldr	r3, [r3, #4]
 8006cec:	2b00      	cmp	r3, #0
 8006cee:	d002      	beq.n	8006cf6 <HAL_SPI_Transmit+0xf6>
 8006cf0:	8afb      	ldrh	r3, [r7, #22]
 8006cf2:	2b01      	cmp	r3, #1
 8006cf4:	d13e      	bne.n	8006d74 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006cf6:	68fb      	ldr	r3, [r7, #12]
 8006cf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006cfa:	881a      	ldrh	r2, [r3, #0]
 8006cfc:	68fb      	ldr	r3, [r7, #12]
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006d02:	68fb      	ldr	r3, [r7, #12]
 8006d04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d06:	1c9a      	adds	r2, r3, #2
 8006d08:	68fb      	ldr	r3, [r7, #12]
 8006d0a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006d0c:	68fb      	ldr	r3, [r7, #12]
 8006d0e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006d10:	b29b      	uxth	r3, r3
 8006d12:	3b01      	subs	r3, #1
 8006d14:	b29a      	uxth	r2, r3
 8006d16:	68fb      	ldr	r3, [r7, #12]
 8006d18:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8006d1a:	e02b      	b.n	8006d74 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006d1c:	68fb      	ldr	r3, [r7, #12]
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	689b      	ldr	r3, [r3, #8]
 8006d22:	f003 0302 	and.w	r3, r3, #2
 8006d26:	2b02      	cmp	r3, #2
 8006d28:	d112      	bne.n	8006d50 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006d2a:	68fb      	ldr	r3, [r7, #12]
 8006d2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d2e:	881a      	ldrh	r2, [r3, #0]
 8006d30:	68fb      	ldr	r3, [r7, #12]
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006d36:	68fb      	ldr	r3, [r7, #12]
 8006d38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d3a:	1c9a      	adds	r2, r3, #2
 8006d3c:	68fb      	ldr	r3, [r7, #12]
 8006d3e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006d40:	68fb      	ldr	r3, [r7, #12]
 8006d42:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006d44:	b29b      	uxth	r3, r3
 8006d46:	3b01      	subs	r3, #1
 8006d48:	b29a      	uxth	r2, r3
 8006d4a:	68fb      	ldr	r3, [r7, #12]
 8006d4c:	86da      	strh	r2, [r3, #54]	; 0x36
 8006d4e:	e011      	b.n	8006d74 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006d50:	f7fd f97c 	bl	800404c <HAL_GetTick>
 8006d54:	4602      	mov	r2, r0
 8006d56:	69bb      	ldr	r3, [r7, #24]
 8006d58:	1ad3      	subs	r3, r2, r3
 8006d5a:	683a      	ldr	r2, [r7, #0]
 8006d5c:	429a      	cmp	r2, r3
 8006d5e:	d803      	bhi.n	8006d68 <HAL_SPI_Transmit+0x168>
 8006d60:	683b      	ldr	r3, [r7, #0]
 8006d62:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d66:	d102      	bne.n	8006d6e <HAL_SPI_Transmit+0x16e>
 8006d68:	683b      	ldr	r3, [r7, #0]
 8006d6a:	2b00      	cmp	r3, #0
 8006d6c:	d102      	bne.n	8006d74 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8006d6e:	2303      	movs	r3, #3
 8006d70:	77fb      	strb	r3, [r7, #31]
          goto error;
 8006d72:	e074      	b.n	8006e5e <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8006d74:	68fb      	ldr	r3, [r7, #12]
 8006d76:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006d78:	b29b      	uxth	r3, r3
 8006d7a:	2b00      	cmp	r3, #0
 8006d7c:	d1ce      	bne.n	8006d1c <HAL_SPI_Transmit+0x11c>
 8006d7e:	e04c      	b.n	8006e1a <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006d80:	68fb      	ldr	r3, [r7, #12]
 8006d82:	685b      	ldr	r3, [r3, #4]
 8006d84:	2b00      	cmp	r3, #0
 8006d86:	d002      	beq.n	8006d8e <HAL_SPI_Transmit+0x18e>
 8006d88:	8afb      	ldrh	r3, [r7, #22]
 8006d8a:	2b01      	cmp	r3, #1
 8006d8c:	d140      	bne.n	8006e10 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006d8e:	68fb      	ldr	r3, [r7, #12]
 8006d90:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006d92:	68fb      	ldr	r3, [r7, #12]
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	330c      	adds	r3, #12
 8006d98:	7812      	ldrb	r2, [r2, #0]
 8006d9a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006d9c:	68fb      	ldr	r3, [r7, #12]
 8006d9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006da0:	1c5a      	adds	r2, r3, #1
 8006da2:	68fb      	ldr	r3, [r7, #12]
 8006da4:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006da6:	68fb      	ldr	r3, [r7, #12]
 8006da8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006daa:	b29b      	uxth	r3, r3
 8006dac:	3b01      	subs	r3, #1
 8006dae:	b29a      	uxth	r2, r3
 8006db0:	68fb      	ldr	r3, [r7, #12]
 8006db2:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8006db4:	e02c      	b.n	8006e10 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006db6:	68fb      	ldr	r3, [r7, #12]
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	689b      	ldr	r3, [r3, #8]
 8006dbc:	f003 0302 	and.w	r3, r3, #2
 8006dc0:	2b02      	cmp	r3, #2
 8006dc2:	d113      	bne.n	8006dec <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006dc4:	68fb      	ldr	r3, [r7, #12]
 8006dc6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006dc8:	68fb      	ldr	r3, [r7, #12]
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	330c      	adds	r3, #12
 8006dce:	7812      	ldrb	r2, [r2, #0]
 8006dd0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8006dd2:	68fb      	ldr	r3, [r7, #12]
 8006dd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006dd6:	1c5a      	adds	r2, r3, #1
 8006dd8:	68fb      	ldr	r3, [r7, #12]
 8006dda:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006ddc:	68fb      	ldr	r3, [r7, #12]
 8006dde:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006de0:	b29b      	uxth	r3, r3
 8006de2:	3b01      	subs	r3, #1
 8006de4:	b29a      	uxth	r2, r3
 8006de6:	68fb      	ldr	r3, [r7, #12]
 8006de8:	86da      	strh	r2, [r3, #54]	; 0x36
 8006dea:	e011      	b.n	8006e10 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006dec:	f7fd f92e 	bl	800404c <HAL_GetTick>
 8006df0:	4602      	mov	r2, r0
 8006df2:	69bb      	ldr	r3, [r7, #24]
 8006df4:	1ad3      	subs	r3, r2, r3
 8006df6:	683a      	ldr	r2, [r7, #0]
 8006df8:	429a      	cmp	r2, r3
 8006dfa:	d803      	bhi.n	8006e04 <HAL_SPI_Transmit+0x204>
 8006dfc:	683b      	ldr	r3, [r7, #0]
 8006dfe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e02:	d102      	bne.n	8006e0a <HAL_SPI_Transmit+0x20a>
 8006e04:	683b      	ldr	r3, [r7, #0]
 8006e06:	2b00      	cmp	r3, #0
 8006e08:	d102      	bne.n	8006e10 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8006e0a:	2303      	movs	r3, #3
 8006e0c:	77fb      	strb	r3, [r7, #31]
          goto error;
 8006e0e:	e026      	b.n	8006e5e <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8006e10:	68fb      	ldr	r3, [r7, #12]
 8006e12:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006e14:	b29b      	uxth	r3, r3
 8006e16:	2b00      	cmp	r3, #0
 8006e18:	d1cd      	bne.n	8006db6 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006e1a:	69ba      	ldr	r2, [r7, #24]
 8006e1c:	6839      	ldr	r1, [r7, #0]
 8006e1e:	68f8      	ldr	r0, [r7, #12]
 8006e20:	f000 fbcc 	bl	80075bc <SPI_EndRxTxTransaction>
 8006e24:	4603      	mov	r3, r0
 8006e26:	2b00      	cmp	r3, #0
 8006e28:	d002      	beq.n	8006e30 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006e2a:	68fb      	ldr	r3, [r7, #12]
 8006e2c:	2220      	movs	r2, #32
 8006e2e:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006e30:	68fb      	ldr	r3, [r7, #12]
 8006e32:	689b      	ldr	r3, [r3, #8]
 8006e34:	2b00      	cmp	r3, #0
 8006e36:	d10a      	bne.n	8006e4e <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006e38:	2300      	movs	r3, #0
 8006e3a:	613b      	str	r3, [r7, #16]
 8006e3c:	68fb      	ldr	r3, [r7, #12]
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	68db      	ldr	r3, [r3, #12]
 8006e42:	613b      	str	r3, [r7, #16]
 8006e44:	68fb      	ldr	r3, [r7, #12]
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	689b      	ldr	r3, [r3, #8]
 8006e4a:	613b      	str	r3, [r7, #16]
 8006e4c:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006e4e:	68fb      	ldr	r3, [r7, #12]
 8006e50:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006e52:	2b00      	cmp	r3, #0
 8006e54:	d002      	beq.n	8006e5c <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8006e56:	2301      	movs	r3, #1
 8006e58:	77fb      	strb	r3, [r7, #31]
 8006e5a:	e000      	b.n	8006e5e <HAL_SPI_Transmit+0x25e>
  }

error:
 8006e5c:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006e5e:	68fb      	ldr	r3, [r7, #12]
 8006e60:	2201      	movs	r2, #1
 8006e62:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006e66:	68fb      	ldr	r3, [r7, #12]
 8006e68:	2200      	movs	r2, #0
 8006e6a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8006e6e:	7ffb      	ldrb	r3, [r7, #31]
}
 8006e70:	4618      	mov	r0, r3
 8006e72:	3720      	adds	r7, #32
 8006e74:	46bd      	mov	sp, r7
 8006e76:	bd80      	pop	{r7, pc}

08006e78 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006e78:	b580      	push	{r7, lr}
 8006e7a:	b088      	sub	sp, #32
 8006e7c:	af02      	add	r7, sp, #8
 8006e7e:	60f8      	str	r0, [r7, #12]
 8006e80:	60b9      	str	r1, [r7, #8]
 8006e82:	603b      	str	r3, [r7, #0]
 8006e84:	4613      	mov	r3, r2
 8006e86:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006e88:	2300      	movs	r3, #0
 8006e8a:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8006e8c:	68fb      	ldr	r3, [r7, #12]
 8006e8e:	685b      	ldr	r3, [r3, #4]
 8006e90:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006e94:	d112      	bne.n	8006ebc <HAL_SPI_Receive+0x44>
 8006e96:	68fb      	ldr	r3, [r7, #12]
 8006e98:	689b      	ldr	r3, [r3, #8]
 8006e9a:	2b00      	cmp	r3, #0
 8006e9c:	d10e      	bne.n	8006ebc <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8006e9e:	68fb      	ldr	r3, [r7, #12]
 8006ea0:	2204      	movs	r2, #4
 8006ea2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8006ea6:	88fa      	ldrh	r2, [r7, #6]
 8006ea8:	683b      	ldr	r3, [r7, #0]
 8006eaa:	9300      	str	r3, [sp, #0]
 8006eac:	4613      	mov	r3, r2
 8006eae:	68ba      	ldr	r2, [r7, #8]
 8006eb0:	68b9      	ldr	r1, [r7, #8]
 8006eb2:	68f8      	ldr	r0, [r7, #12]
 8006eb4:	f000 f8f1 	bl	800709a <HAL_SPI_TransmitReceive>
 8006eb8:	4603      	mov	r3, r0
 8006eba:	e0ea      	b.n	8007092 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006ebc:	68fb      	ldr	r3, [r7, #12]
 8006ebe:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006ec2:	2b01      	cmp	r3, #1
 8006ec4:	d101      	bne.n	8006eca <HAL_SPI_Receive+0x52>
 8006ec6:	2302      	movs	r3, #2
 8006ec8:	e0e3      	b.n	8007092 <HAL_SPI_Receive+0x21a>
 8006eca:	68fb      	ldr	r3, [r7, #12]
 8006ecc:	2201      	movs	r2, #1
 8006ece:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006ed2:	f7fd f8bb 	bl	800404c <HAL_GetTick>
 8006ed6:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006ed8:	68fb      	ldr	r3, [r7, #12]
 8006eda:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006ede:	b2db      	uxtb	r3, r3
 8006ee0:	2b01      	cmp	r3, #1
 8006ee2:	d002      	beq.n	8006eea <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8006ee4:	2302      	movs	r3, #2
 8006ee6:	75fb      	strb	r3, [r7, #23]
    goto error;
 8006ee8:	e0ca      	b.n	8007080 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8006eea:	68bb      	ldr	r3, [r7, #8]
 8006eec:	2b00      	cmp	r3, #0
 8006eee:	d002      	beq.n	8006ef6 <HAL_SPI_Receive+0x7e>
 8006ef0:	88fb      	ldrh	r3, [r7, #6]
 8006ef2:	2b00      	cmp	r3, #0
 8006ef4:	d102      	bne.n	8006efc <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8006ef6:	2301      	movs	r3, #1
 8006ef8:	75fb      	strb	r3, [r7, #23]
    goto error;
 8006efa:	e0c1      	b.n	8007080 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8006efc:	68fb      	ldr	r3, [r7, #12]
 8006efe:	2204      	movs	r2, #4
 8006f00:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006f04:	68fb      	ldr	r3, [r7, #12]
 8006f06:	2200      	movs	r2, #0
 8006f08:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8006f0a:	68fb      	ldr	r3, [r7, #12]
 8006f0c:	68ba      	ldr	r2, [r7, #8]
 8006f0e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8006f10:	68fb      	ldr	r3, [r7, #12]
 8006f12:	88fa      	ldrh	r2, [r7, #6]
 8006f14:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8006f16:	68fb      	ldr	r3, [r7, #12]
 8006f18:	88fa      	ldrh	r2, [r7, #6]
 8006f1a:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8006f1c:	68fb      	ldr	r3, [r7, #12]
 8006f1e:	2200      	movs	r2, #0
 8006f20:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8006f22:	68fb      	ldr	r3, [r7, #12]
 8006f24:	2200      	movs	r2, #0
 8006f26:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8006f28:	68fb      	ldr	r3, [r7, #12]
 8006f2a:	2200      	movs	r2, #0
 8006f2c:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8006f2e:	68fb      	ldr	r3, [r7, #12]
 8006f30:	2200      	movs	r2, #0
 8006f32:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8006f34:	68fb      	ldr	r3, [r7, #12]
 8006f36:	2200      	movs	r2, #0
 8006f38:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006f3a:	68fb      	ldr	r3, [r7, #12]
 8006f3c:	689b      	ldr	r3, [r3, #8]
 8006f3e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006f42:	d10f      	bne.n	8006f64 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006f44:	68fb      	ldr	r3, [r7, #12]
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	681a      	ldr	r2, [r3, #0]
 8006f4a:	68fb      	ldr	r3, [r7, #12]
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006f52:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8006f54:	68fb      	ldr	r3, [r7, #12]
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	681a      	ldr	r2, [r3, #0]
 8006f5a:	68fb      	ldr	r3, [r7, #12]
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8006f62:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006f64:	68fb      	ldr	r3, [r7, #12]
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f6e:	2b40      	cmp	r3, #64	; 0x40
 8006f70:	d007      	beq.n	8006f82 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006f72:	68fb      	ldr	r3, [r7, #12]
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	681a      	ldr	r2, [r3, #0]
 8006f78:	68fb      	ldr	r3, [r7, #12]
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006f80:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8006f82:	68fb      	ldr	r3, [r7, #12]
 8006f84:	68db      	ldr	r3, [r3, #12]
 8006f86:	2b00      	cmp	r3, #0
 8006f88:	d162      	bne.n	8007050 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8006f8a:	e02e      	b.n	8006fea <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8006f8c:	68fb      	ldr	r3, [r7, #12]
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	689b      	ldr	r3, [r3, #8]
 8006f92:	f003 0301 	and.w	r3, r3, #1
 8006f96:	2b01      	cmp	r3, #1
 8006f98:	d115      	bne.n	8006fc6 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8006f9a:	68fb      	ldr	r3, [r7, #12]
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	f103 020c 	add.w	r2, r3, #12
 8006fa2:	68fb      	ldr	r3, [r7, #12]
 8006fa4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006fa6:	7812      	ldrb	r2, [r2, #0]
 8006fa8:	b2d2      	uxtb	r2, r2
 8006faa:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8006fac:	68fb      	ldr	r3, [r7, #12]
 8006fae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006fb0:	1c5a      	adds	r2, r3, #1
 8006fb2:	68fb      	ldr	r3, [r7, #12]
 8006fb4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8006fb6:	68fb      	ldr	r3, [r7, #12]
 8006fb8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006fba:	b29b      	uxth	r3, r3
 8006fbc:	3b01      	subs	r3, #1
 8006fbe:	b29a      	uxth	r2, r3
 8006fc0:	68fb      	ldr	r3, [r7, #12]
 8006fc2:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006fc4:	e011      	b.n	8006fea <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006fc6:	f7fd f841 	bl	800404c <HAL_GetTick>
 8006fca:	4602      	mov	r2, r0
 8006fcc:	693b      	ldr	r3, [r7, #16]
 8006fce:	1ad3      	subs	r3, r2, r3
 8006fd0:	683a      	ldr	r2, [r7, #0]
 8006fd2:	429a      	cmp	r2, r3
 8006fd4:	d803      	bhi.n	8006fde <HAL_SPI_Receive+0x166>
 8006fd6:	683b      	ldr	r3, [r7, #0]
 8006fd8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006fdc:	d102      	bne.n	8006fe4 <HAL_SPI_Receive+0x16c>
 8006fde:	683b      	ldr	r3, [r7, #0]
 8006fe0:	2b00      	cmp	r3, #0
 8006fe2:	d102      	bne.n	8006fea <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8006fe4:	2303      	movs	r3, #3
 8006fe6:	75fb      	strb	r3, [r7, #23]
          goto error;
 8006fe8:	e04a      	b.n	8007080 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8006fea:	68fb      	ldr	r3, [r7, #12]
 8006fec:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006fee:	b29b      	uxth	r3, r3
 8006ff0:	2b00      	cmp	r3, #0
 8006ff2:	d1cb      	bne.n	8006f8c <HAL_SPI_Receive+0x114>
 8006ff4:	e031      	b.n	800705a <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8006ff6:	68fb      	ldr	r3, [r7, #12]
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	689b      	ldr	r3, [r3, #8]
 8006ffc:	f003 0301 	and.w	r3, r3, #1
 8007000:	2b01      	cmp	r3, #1
 8007002:	d113      	bne.n	800702c <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007004:	68fb      	ldr	r3, [r7, #12]
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	68da      	ldr	r2, [r3, #12]
 800700a:	68fb      	ldr	r3, [r7, #12]
 800700c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800700e:	b292      	uxth	r2, r2
 8007010:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007012:	68fb      	ldr	r3, [r7, #12]
 8007014:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007016:	1c9a      	adds	r2, r3, #2
 8007018:	68fb      	ldr	r3, [r7, #12]
 800701a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800701c:	68fb      	ldr	r3, [r7, #12]
 800701e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007020:	b29b      	uxth	r3, r3
 8007022:	3b01      	subs	r3, #1
 8007024:	b29a      	uxth	r2, r3
 8007026:	68fb      	ldr	r3, [r7, #12]
 8007028:	87da      	strh	r2, [r3, #62]	; 0x3e
 800702a:	e011      	b.n	8007050 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800702c:	f7fd f80e 	bl	800404c <HAL_GetTick>
 8007030:	4602      	mov	r2, r0
 8007032:	693b      	ldr	r3, [r7, #16]
 8007034:	1ad3      	subs	r3, r2, r3
 8007036:	683a      	ldr	r2, [r7, #0]
 8007038:	429a      	cmp	r2, r3
 800703a:	d803      	bhi.n	8007044 <HAL_SPI_Receive+0x1cc>
 800703c:	683b      	ldr	r3, [r7, #0]
 800703e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007042:	d102      	bne.n	800704a <HAL_SPI_Receive+0x1d2>
 8007044:	683b      	ldr	r3, [r7, #0]
 8007046:	2b00      	cmp	r3, #0
 8007048:	d102      	bne.n	8007050 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 800704a:	2303      	movs	r3, #3
 800704c:	75fb      	strb	r3, [r7, #23]
          goto error;
 800704e:	e017      	b.n	8007080 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8007050:	68fb      	ldr	r3, [r7, #12]
 8007052:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007054:	b29b      	uxth	r3, r3
 8007056:	2b00      	cmp	r3, #0
 8007058:	d1cd      	bne.n	8006ff6 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800705a:	693a      	ldr	r2, [r7, #16]
 800705c:	6839      	ldr	r1, [r7, #0]
 800705e:	68f8      	ldr	r0, [r7, #12]
 8007060:	f000 fa46 	bl	80074f0 <SPI_EndRxTransaction>
 8007064:	4603      	mov	r3, r0
 8007066:	2b00      	cmp	r3, #0
 8007068:	d002      	beq.n	8007070 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800706a:	68fb      	ldr	r3, [r7, #12]
 800706c:	2220      	movs	r2, #32
 800706e:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007070:	68fb      	ldr	r3, [r7, #12]
 8007072:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007074:	2b00      	cmp	r3, #0
 8007076:	d002      	beq.n	800707e <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8007078:	2301      	movs	r3, #1
 800707a:	75fb      	strb	r3, [r7, #23]
 800707c:	e000      	b.n	8007080 <HAL_SPI_Receive+0x208>
  }

error :
 800707e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8007080:	68fb      	ldr	r3, [r7, #12]
 8007082:	2201      	movs	r2, #1
 8007084:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8007088:	68fb      	ldr	r3, [r7, #12]
 800708a:	2200      	movs	r2, #0
 800708c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8007090:	7dfb      	ldrb	r3, [r7, #23]
}
 8007092:	4618      	mov	r0, r3
 8007094:	3718      	adds	r7, #24
 8007096:	46bd      	mov	sp, r7
 8007098:	bd80      	pop	{r7, pc}

0800709a <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800709a:	b580      	push	{r7, lr}
 800709c:	b08c      	sub	sp, #48	; 0x30
 800709e:	af00      	add	r7, sp, #0
 80070a0:	60f8      	str	r0, [r7, #12]
 80070a2:	60b9      	str	r1, [r7, #8]
 80070a4:	607a      	str	r2, [r7, #4]
 80070a6:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80070a8:	2301      	movs	r3, #1
 80070aa:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80070ac:	2300      	movs	r3, #0
 80070ae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80070b2:	68fb      	ldr	r3, [r7, #12]
 80070b4:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80070b8:	2b01      	cmp	r3, #1
 80070ba:	d101      	bne.n	80070c0 <HAL_SPI_TransmitReceive+0x26>
 80070bc:	2302      	movs	r3, #2
 80070be:	e18a      	b.n	80073d6 <HAL_SPI_TransmitReceive+0x33c>
 80070c0:	68fb      	ldr	r3, [r7, #12]
 80070c2:	2201      	movs	r2, #1
 80070c4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80070c8:	f7fc ffc0 	bl	800404c <HAL_GetTick>
 80070cc:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80070ce:	68fb      	ldr	r3, [r7, #12]
 80070d0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80070d4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80070d8:	68fb      	ldr	r3, [r7, #12]
 80070da:	685b      	ldr	r3, [r3, #4]
 80070dc:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80070de:	887b      	ldrh	r3, [r7, #2]
 80070e0:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80070e2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80070e6:	2b01      	cmp	r3, #1
 80070e8:	d00f      	beq.n	800710a <HAL_SPI_TransmitReceive+0x70>
 80070ea:	69fb      	ldr	r3, [r7, #28]
 80070ec:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80070f0:	d107      	bne.n	8007102 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80070f2:	68fb      	ldr	r3, [r7, #12]
 80070f4:	689b      	ldr	r3, [r3, #8]
 80070f6:	2b00      	cmp	r3, #0
 80070f8:	d103      	bne.n	8007102 <HAL_SPI_TransmitReceive+0x68>
 80070fa:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80070fe:	2b04      	cmp	r3, #4
 8007100:	d003      	beq.n	800710a <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8007102:	2302      	movs	r3, #2
 8007104:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8007108:	e15b      	b.n	80073c2 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800710a:	68bb      	ldr	r3, [r7, #8]
 800710c:	2b00      	cmp	r3, #0
 800710e:	d005      	beq.n	800711c <HAL_SPI_TransmitReceive+0x82>
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	2b00      	cmp	r3, #0
 8007114:	d002      	beq.n	800711c <HAL_SPI_TransmitReceive+0x82>
 8007116:	887b      	ldrh	r3, [r7, #2]
 8007118:	2b00      	cmp	r3, #0
 800711a:	d103      	bne.n	8007124 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800711c:	2301      	movs	r3, #1
 800711e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8007122:	e14e      	b.n	80073c2 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8007124:	68fb      	ldr	r3, [r7, #12]
 8007126:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800712a:	b2db      	uxtb	r3, r3
 800712c:	2b04      	cmp	r3, #4
 800712e:	d003      	beq.n	8007138 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8007130:	68fb      	ldr	r3, [r7, #12]
 8007132:	2205      	movs	r2, #5
 8007134:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007138:	68fb      	ldr	r3, [r7, #12]
 800713a:	2200      	movs	r2, #0
 800713c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800713e:	68fb      	ldr	r3, [r7, #12]
 8007140:	687a      	ldr	r2, [r7, #4]
 8007142:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8007144:	68fb      	ldr	r3, [r7, #12]
 8007146:	887a      	ldrh	r2, [r7, #2]
 8007148:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800714a:	68fb      	ldr	r3, [r7, #12]
 800714c:	887a      	ldrh	r2, [r7, #2]
 800714e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8007150:	68fb      	ldr	r3, [r7, #12]
 8007152:	68ba      	ldr	r2, [r7, #8]
 8007154:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8007156:	68fb      	ldr	r3, [r7, #12]
 8007158:	887a      	ldrh	r2, [r7, #2]
 800715a:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800715c:	68fb      	ldr	r3, [r7, #12]
 800715e:	887a      	ldrh	r2, [r7, #2]
 8007160:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8007162:	68fb      	ldr	r3, [r7, #12]
 8007164:	2200      	movs	r2, #0
 8007166:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8007168:	68fb      	ldr	r3, [r7, #12]
 800716a:	2200      	movs	r2, #0
 800716c:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800716e:	68fb      	ldr	r3, [r7, #12]
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007178:	2b40      	cmp	r3, #64	; 0x40
 800717a:	d007      	beq.n	800718c <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800717c:	68fb      	ldr	r3, [r7, #12]
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	681a      	ldr	r2, [r3, #0]
 8007182:	68fb      	ldr	r3, [r7, #12]
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800718a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800718c:	68fb      	ldr	r3, [r7, #12]
 800718e:	68db      	ldr	r3, [r3, #12]
 8007190:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007194:	d178      	bne.n	8007288 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007196:	68fb      	ldr	r3, [r7, #12]
 8007198:	685b      	ldr	r3, [r3, #4]
 800719a:	2b00      	cmp	r3, #0
 800719c:	d002      	beq.n	80071a4 <HAL_SPI_TransmitReceive+0x10a>
 800719e:	8b7b      	ldrh	r3, [r7, #26]
 80071a0:	2b01      	cmp	r3, #1
 80071a2:	d166      	bne.n	8007272 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80071a4:	68fb      	ldr	r3, [r7, #12]
 80071a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80071a8:	881a      	ldrh	r2, [r3, #0]
 80071aa:	68fb      	ldr	r3, [r7, #12]
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80071b0:	68fb      	ldr	r3, [r7, #12]
 80071b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80071b4:	1c9a      	adds	r2, r3, #2
 80071b6:	68fb      	ldr	r3, [r7, #12]
 80071b8:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80071ba:	68fb      	ldr	r3, [r7, #12]
 80071bc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80071be:	b29b      	uxth	r3, r3
 80071c0:	3b01      	subs	r3, #1
 80071c2:	b29a      	uxth	r2, r3
 80071c4:	68fb      	ldr	r3, [r7, #12]
 80071c6:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80071c8:	e053      	b.n	8007272 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80071ca:	68fb      	ldr	r3, [r7, #12]
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	689b      	ldr	r3, [r3, #8]
 80071d0:	f003 0302 	and.w	r3, r3, #2
 80071d4:	2b02      	cmp	r3, #2
 80071d6:	d11b      	bne.n	8007210 <HAL_SPI_TransmitReceive+0x176>
 80071d8:	68fb      	ldr	r3, [r7, #12]
 80071da:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80071dc:	b29b      	uxth	r3, r3
 80071de:	2b00      	cmp	r3, #0
 80071e0:	d016      	beq.n	8007210 <HAL_SPI_TransmitReceive+0x176>
 80071e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80071e4:	2b01      	cmp	r3, #1
 80071e6:	d113      	bne.n	8007210 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80071e8:	68fb      	ldr	r3, [r7, #12]
 80071ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80071ec:	881a      	ldrh	r2, [r3, #0]
 80071ee:	68fb      	ldr	r3, [r7, #12]
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80071f4:	68fb      	ldr	r3, [r7, #12]
 80071f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80071f8:	1c9a      	adds	r2, r3, #2
 80071fa:	68fb      	ldr	r3, [r7, #12]
 80071fc:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80071fe:	68fb      	ldr	r3, [r7, #12]
 8007200:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007202:	b29b      	uxth	r3, r3
 8007204:	3b01      	subs	r3, #1
 8007206:	b29a      	uxth	r2, r3
 8007208:	68fb      	ldr	r3, [r7, #12]
 800720a:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800720c:	2300      	movs	r3, #0
 800720e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007210:	68fb      	ldr	r3, [r7, #12]
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	689b      	ldr	r3, [r3, #8]
 8007216:	f003 0301 	and.w	r3, r3, #1
 800721a:	2b01      	cmp	r3, #1
 800721c:	d119      	bne.n	8007252 <HAL_SPI_TransmitReceive+0x1b8>
 800721e:	68fb      	ldr	r3, [r7, #12]
 8007220:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007222:	b29b      	uxth	r3, r3
 8007224:	2b00      	cmp	r3, #0
 8007226:	d014      	beq.n	8007252 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007228:	68fb      	ldr	r3, [r7, #12]
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	68da      	ldr	r2, [r3, #12]
 800722e:	68fb      	ldr	r3, [r7, #12]
 8007230:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007232:	b292      	uxth	r2, r2
 8007234:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007236:	68fb      	ldr	r3, [r7, #12]
 8007238:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800723a:	1c9a      	adds	r2, r3, #2
 800723c:	68fb      	ldr	r3, [r7, #12]
 800723e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8007240:	68fb      	ldr	r3, [r7, #12]
 8007242:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007244:	b29b      	uxth	r3, r3
 8007246:	3b01      	subs	r3, #1
 8007248:	b29a      	uxth	r2, r3
 800724a:	68fb      	ldr	r3, [r7, #12]
 800724c:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800724e:	2301      	movs	r3, #1
 8007250:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8007252:	f7fc fefb 	bl	800404c <HAL_GetTick>
 8007256:	4602      	mov	r2, r0
 8007258:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800725a:	1ad3      	subs	r3, r2, r3
 800725c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800725e:	429a      	cmp	r2, r3
 8007260:	d807      	bhi.n	8007272 <HAL_SPI_TransmitReceive+0x1d8>
 8007262:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007264:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007268:	d003      	beq.n	8007272 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800726a:	2303      	movs	r3, #3
 800726c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8007270:	e0a7      	b.n	80073c2 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007272:	68fb      	ldr	r3, [r7, #12]
 8007274:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007276:	b29b      	uxth	r3, r3
 8007278:	2b00      	cmp	r3, #0
 800727a:	d1a6      	bne.n	80071ca <HAL_SPI_TransmitReceive+0x130>
 800727c:	68fb      	ldr	r3, [r7, #12]
 800727e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007280:	b29b      	uxth	r3, r3
 8007282:	2b00      	cmp	r3, #0
 8007284:	d1a1      	bne.n	80071ca <HAL_SPI_TransmitReceive+0x130>
 8007286:	e07c      	b.n	8007382 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007288:	68fb      	ldr	r3, [r7, #12]
 800728a:	685b      	ldr	r3, [r3, #4]
 800728c:	2b00      	cmp	r3, #0
 800728e:	d002      	beq.n	8007296 <HAL_SPI_TransmitReceive+0x1fc>
 8007290:	8b7b      	ldrh	r3, [r7, #26]
 8007292:	2b01      	cmp	r3, #1
 8007294:	d16b      	bne.n	800736e <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007296:	68fb      	ldr	r3, [r7, #12]
 8007298:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800729a:	68fb      	ldr	r3, [r7, #12]
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	330c      	adds	r3, #12
 80072a0:	7812      	ldrb	r2, [r2, #0]
 80072a2:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80072a4:	68fb      	ldr	r3, [r7, #12]
 80072a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80072a8:	1c5a      	adds	r2, r3, #1
 80072aa:	68fb      	ldr	r3, [r7, #12]
 80072ac:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80072ae:	68fb      	ldr	r3, [r7, #12]
 80072b0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80072b2:	b29b      	uxth	r3, r3
 80072b4:	3b01      	subs	r3, #1
 80072b6:	b29a      	uxth	r2, r3
 80072b8:	68fb      	ldr	r3, [r7, #12]
 80072ba:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80072bc:	e057      	b.n	800736e <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80072be:	68fb      	ldr	r3, [r7, #12]
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	689b      	ldr	r3, [r3, #8]
 80072c4:	f003 0302 	and.w	r3, r3, #2
 80072c8:	2b02      	cmp	r3, #2
 80072ca:	d11c      	bne.n	8007306 <HAL_SPI_TransmitReceive+0x26c>
 80072cc:	68fb      	ldr	r3, [r7, #12]
 80072ce:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80072d0:	b29b      	uxth	r3, r3
 80072d2:	2b00      	cmp	r3, #0
 80072d4:	d017      	beq.n	8007306 <HAL_SPI_TransmitReceive+0x26c>
 80072d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80072d8:	2b01      	cmp	r3, #1
 80072da:	d114      	bne.n	8007306 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80072dc:	68fb      	ldr	r3, [r7, #12]
 80072de:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80072e0:	68fb      	ldr	r3, [r7, #12]
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	330c      	adds	r3, #12
 80072e6:	7812      	ldrb	r2, [r2, #0]
 80072e8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80072ea:	68fb      	ldr	r3, [r7, #12]
 80072ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80072ee:	1c5a      	adds	r2, r3, #1
 80072f0:	68fb      	ldr	r3, [r7, #12]
 80072f2:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80072f4:	68fb      	ldr	r3, [r7, #12]
 80072f6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80072f8:	b29b      	uxth	r3, r3
 80072fa:	3b01      	subs	r3, #1
 80072fc:	b29a      	uxth	r2, r3
 80072fe:	68fb      	ldr	r3, [r7, #12]
 8007300:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007302:	2300      	movs	r3, #0
 8007304:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007306:	68fb      	ldr	r3, [r7, #12]
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	689b      	ldr	r3, [r3, #8]
 800730c:	f003 0301 	and.w	r3, r3, #1
 8007310:	2b01      	cmp	r3, #1
 8007312:	d119      	bne.n	8007348 <HAL_SPI_TransmitReceive+0x2ae>
 8007314:	68fb      	ldr	r3, [r7, #12]
 8007316:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007318:	b29b      	uxth	r3, r3
 800731a:	2b00      	cmp	r3, #0
 800731c:	d014      	beq.n	8007348 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800731e:	68fb      	ldr	r3, [r7, #12]
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	68da      	ldr	r2, [r3, #12]
 8007324:	68fb      	ldr	r3, [r7, #12]
 8007326:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007328:	b2d2      	uxtb	r2, r2
 800732a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800732c:	68fb      	ldr	r3, [r7, #12]
 800732e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007330:	1c5a      	adds	r2, r3, #1
 8007332:	68fb      	ldr	r3, [r7, #12]
 8007334:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8007336:	68fb      	ldr	r3, [r7, #12]
 8007338:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800733a:	b29b      	uxth	r3, r3
 800733c:	3b01      	subs	r3, #1
 800733e:	b29a      	uxth	r2, r3
 8007340:	68fb      	ldr	r3, [r7, #12]
 8007342:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007344:	2301      	movs	r3, #1
 8007346:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8007348:	f7fc fe80 	bl	800404c <HAL_GetTick>
 800734c:	4602      	mov	r2, r0
 800734e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007350:	1ad3      	subs	r3, r2, r3
 8007352:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007354:	429a      	cmp	r2, r3
 8007356:	d803      	bhi.n	8007360 <HAL_SPI_TransmitReceive+0x2c6>
 8007358:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800735a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800735e:	d102      	bne.n	8007366 <HAL_SPI_TransmitReceive+0x2cc>
 8007360:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007362:	2b00      	cmp	r3, #0
 8007364:	d103      	bne.n	800736e <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8007366:	2303      	movs	r3, #3
 8007368:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800736c:	e029      	b.n	80073c2 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800736e:	68fb      	ldr	r3, [r7, #12]
 8007370:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007372:	b29b      	uxth	r3, r3
 8007374:	2b00      	cmp	r3, #0
 8007376:	d1a2      	bne.n	80072be <HAL_SPI_TransmitReceive+0x224>
 8007378:	68fb      	ldr	r3, [r7, #12]
 800737a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800737c:	b29b      	uxth	r3, r3
 800737e:	2b00      	cmp	r3, #0
 8007380:	d19d      	bne.n	80072be <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007382:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007384:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007386:	68f8      	ldr	r0, [r7, #12]
 8007388:	f000 f918 	bl	80075bc <SPI_EndRxTxTransaction>
 800738c:	4603      	mov	r3, r0
 800738e:	2b00      	cmp	r3, #0
 8007390:	d006      	beq.n	80073a0 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8007392:	2301      	movs	r3, #1
 8007394:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007398:	68fb      	ldr	r3, [r7, #12]
 800739a:	2220      	movs	r2, #32
 800739c:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800739e:	e010      	b.n	80073c2 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80073a0:	68fb      	ldr	r3, [r7, #12]
 80073a2:	689b      	ldr	r3, [r3, #8]
 80073a4:	2b00      	cmp	r3, #0
 80073a6:	d10b      	bne.n	80073c0 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80073a8:	2300      	movs	r3, #0
 80073aa:	617b      	str	r3, [r7, #20]
 80073ac:	68fb      	ldr	r3, [r7, #12]
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	68db      	ldr	r3, [r3, #12]
 80073b2:	617b      	str	r3, [r7, #20]
 80073b4:	68fb      	ldr	r3, [r7, #12]
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	689b      	ldr	r3, [r3, #8]
 80073ba:	617b      	str	r3, [r7, #20]
 80073bc:	697b      	ldr	r3, [r7, #20]
 80073be:	e000      	b.n	80073c2 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 80073c0:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80073c2:	68fb      	ldr	r3, [r7, #12]
 80073c4:	2201      	movs	r2, #1
 80073c6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80073ca:	68fb      	ldr	r3, [r7, #12]
 80073cc:	2200      	movs	r2, #0
 80073ce:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80073d2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80073d6:	4618      	mov	r0, r3
 80073d8:	3730      	adds	r7, #48	; 0x30
 80073da:	46bd      	mov	sp, r7
 80073dc:	bd80      	pop	{r7, pc}
	...

080073e0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80073e0:	b580      	push	{r7, lr}
 80073e2:	b088      	sub	sp, #32
 80073e4:	af00      	add	r7, sp, #0
 80073e6:	60f8      	str	r0, [r7, #12]
 80073e8:	60b9      	str	r1, [r7, #8]
 80073ea:	603b      	str	r3, [r7, #0]
 80073ec:	4613      	mov	r3, r2
 80073ee:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80073f0:	f7fc fe2c 	bl	800404c <HAL_GetTick>
 80073f4:	4602      	mov	r2, r0
 80073f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073f8:	1a9b      	subs	r3, r3, r2
 80073fa:	683a      	ldr	r2, [r7, #0]
 80073fc:	4413      	add	r3, r2
 80073fe:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8007400:	f7fc fe24 	bl	800404c <HAL_GetTick>
 8007404:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8007406:	4b39      	ldr	r3, [pc, #228]	; (80074ec <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	015b      	lsls	r3, r3, #5
 800740c:	0d1b      	lsrs	r3, r3, #20
 800740e:	69fa      	ldr	r2, [r7, #28]
 8007410:	fb02 f303 	mul.w	r3, r2, r3
 8007414:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007416:	e054      	b.n	80074c2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8007418:	683b      	ldr	r3, [r7, #0]
 800741a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800741e:	d050      	beq.n	80074c2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007420:	f7fc fe14 	bl	800404c <HAL_GetTick>
 8007424:	4602      	mov	r2, r0
 8007426:	69bb      	ldr	r3, [r7, #24]
 8007428:	1ad3      	subs	r3, r2, r3
 800742a:	69fa      	ldr	r2, [r7, #28]
 800742c:	429a      	cmp	r2, r3
 800742e:	d902      	bls.n	8007436 <SPI_WaitFlagStateUntilTimeout+0x56>
 8007430:	69fb      	ldr	r3, [r7, #28]
 8007432:	2b00      	cmp	r3, #0
 8007434:	d13d      	bne.n	80074b2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007436:	68fb      	ldr	r3, [r7, #12]
 8007438:	681b      	ldr	r3, [r3, #0]
 800743a:	685a      	ldr	r2, [r3, #4]
 800743c:	68fb      	ldr	r3, [r7, #12]
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8007444:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007446:	68fb      	ldr	r3, [r7, #12]
 8007448:	685b      	ldr	r3, [r3, #4]
 800744a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800744e:	d111      	bne.n	8007474 <SPI_WaitFlagStateUntilTimeout+0x94>
 8007450:	68fb      	ldr	r3, [r7, #12]
 8007452:	689b      	ldr	r3, [r3, #8]
 8007454:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007458:	d004      	beq.n	8007464 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800745a:	68fb      	ldr	r3, [r7, #12]
 800745c:	689b      	ldr	r3, [r3, #8]
 800745e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007462:	d107      	bne.n	8007474 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007464:	68fb      	ldr	r3, [r7, #12]
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	681a      	ldr	r2, [r3, #0]
 800746a:	68fb      	ldr	r3, [r7, #12]
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007472:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007474:	68fb      	ldr	r3, [r7, #12]
 8007476:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007478:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800747c:	d10f      	bne.n	800749e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800747e:	68fb      	ldr	r3, [r7, #12]
 8007480:	681b      	ldr	r3, [r3, #0]
 8007482:	681a      	ldr	r2, [r3, #0]
 8007484:	68fb      	ldr	r3, [r7, #12]
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800748c:	601a      	str	r2, [r3, #0]
 800748e:	68fb      	ldr	r3, [r7, #12]
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	681a      	ldr	r2, [r3, #0]
 8007494:	68fb      	ldr	r3, [r7, #12]
 8007496:	681b      	ldr	r3, [r3, #0]
 8007498:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800749c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800749e:	68fb      	ldr	r3, [r7, #12]
 80074a0:	2201      	movs	r2, #1
 80074a2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80074a6:	68fb      	ldr	r3, [r7, #12]
 80074a8:	2200      	movs	r2, #0
 80074aa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80074ae:	2303      	movs	r3, #3
 80074b0:	e017      	b.n	80074e2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80074b2:	697b      	ldr	r3, [r7, #20]
 80074b4:	2b00      	cmp	r3, #0
 80074b6:	d101      	bne.n	80074bc <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80074b8:	2300      	movs	r3, #0
 80074ba:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80074bc:	697b      	ldr	r3, [r7, #20]
 80074be:	3b01      	subs	r3, #1
 80074c0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80074c2:	68fb      	ldr	r3, [r7, #12]
 80074c4:	681b      	ldr	r3, [r3, #0]
 80074c6:	689a      	ldr	r2, [r3, #8]
 80074c8:	68bb      	ldr	r3, [r7, #8]
 80074ca:	4013      	ands	r3, r2
 80074cc:	68ba      	ldr	r2, [r7, #8]
 80074ce:	429a      	cmp	r2, r3
 80074d0:	bf0c      	ite	eq
 80074d2:	2301      	moveq	r3, #1
 80074d4:	2300      	movne	r3, #0
 80074d6:	b2db      	uxtb	r3, r3
 80074d8:	461a      	mov	r2, r3
 80074da:	79fb      	ldrb	r3, [r7, #7]
 80074dc:	429a      	cmp	r2, r3
 80074de:	d19b      	bne.n	8007418 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80074e0:	2300      	movs	r3, #0
}
 80074e2:	4618      	mov	r0, r3
 80074e4:	3720      	adds	r7, #32
 80074e6:	46bd      	mov	sp, r7
 80074e8:	bd80      	pop	{r7, pc}
 80074ea:	bf00      	nop
 80074ec:	20000010 	.word	0x20000010

080074f0 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80074f0:	b580      	push	{r7, lr}
 80074f2:	b086      	sub	sp, #24
 80074f4:	af02      	add	r7, sp, #8
 80074f6:	60f8      	str	r0, [r7, #12]
 80074f8:	60b9      	str	r1, [r7, #8]
 80074fa:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80074fc:	68fb      	ldr	r3, [r7, #12]
 80074fe:	685b      	ldr	r3, [r3, #4]
 8007500:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007504:	d111      	bne.n	800752a <SPI_EndRxTransaction+0x3a>
 8007506:	68fb      	ldr	r3, [r7, #12]
 8007508:	689b      	ldr	r3, [r3, #8]
 800750a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800750e:	d004      	beq.n	800751a <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007510:	68fb      	ldr	r3, [r7, #12]
 8007512:	689b      	ldr	r3, [r3, #8]
 8007514:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007518:	d107      	bne.n	800752a <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800751a:	68fb      	ldr	r3, [r7, #12]
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	681a      	ldr	r2, [r3, #0]
 8007520:	68fb      	ldr	r3, [r7, #12]
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007528:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800752a:	68fb      	ldr	r3, [r7, #12]
 800752c:	685b      	ldr	r3, [r3, #4]
 800752e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007532:	d12a      	bne.n	800758a <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8007534:	68fb      	ldr	r3, [r7, #12]
 8007536:	689b      	ldr	r3, [r3, #8]
 8007538:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800753c:	d012      	beq.n	8007564 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	9300      	str	r3, [sp, #0]
 8007542:	68bb      	ldr	r3, [r7, #8]
 8007544:	2200      	movs	r2, #0
 8007546:	2180      	movs	r1, #128	; 0x80
 8007548:	68f8      	ldr	r0, [r7, #12]
 800754a:	f7ff ff49 	bl	80073e0 <SPI_WaitFlagStateUntilTimeout>
 800754e:	4603      	mov	r3, r0
 8007550:	2b00      	cmp	r3, #0
 8007552:	d02d      	beq.n	80075b0 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007554:	68fb      	ldr	r3, [r7, #12]
 8007556:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007558:	f043 0220 	orr.w	r2, r3, #32
 800755c:	68fb      	ldr	r3, [r7, #12]
 800755e:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8007560:	2303      	movs	r3, #3
 8007562:	e026      	b.n	80075b2 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	9300      	str	r3, [sp, #0]
 8007568:	68bb      	ldr	r3, [r7, #8]
 800756a:	2200      	movs	r2, #0
 800756c:	2101      	movs	r1, #1
 800756e:	68f8      	ldr	r0, [r7, #12]
 8007570:	f7ff ff36 	bl	80073e0 <SPI_WaitFlagStateUntilTimeout>
 8007574:	4603      	mov	r3, r0
 8007576:	2b00      	cmp	r3, #0
 8007578:	d01a      	beq.n	80075b0 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800757a:	68fb      	ldr	r3, [r7, #12]
 800757c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800757e:	f043 0220 	orr.w	r2, r3, #32
 8007582:	68fb      	ldr	r3, [r7, #12]
 8007584:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8007586:	2303      	movs	r3, #3
 8007588:	e013      	b.n	80075b2 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	9300      	str	r3, [sp, #0]
 800758e:	68bb      	ldr	r3, [r7, #8]
 8007590:	2200      	movs	r2, #0
 8007592:	2101      	movs	r1, #1
 8007594:	68f8      	ldr	r0, [r7, #12]
 8007596:	f7ff ff23 	bl	80073e0 <SPI_WaitFlagStateUntilTimeout>
 800759a:	4603      	mov	r3, r0
 800759c:	2b00      	cmp	r3, #0
 800759e:	d007      	beq.n	80075b0 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80075a0:	68fb      	ldr	r3, [r7, #12]
 80075a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80075a4:	f043 0220 	orr.w	r2, r3, #32
 80075a8:	68fb      	ldr	r3, [r7, #12]
 80075aa:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80075ac:	2303      	movs	r3, #3
 80075ae:	e000      	b.n	80075b2 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 80075b0:	2300      	movs	r3, #0
}
 80075b2:	4618      	mov	r0, r3
 80075b4:	3710      	adds	r7, #16
 80075b6:	46bd      	mov	sp, r7
 80075b8:	bd80      	pop	{r7, pc}
	...

080075bc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80075bc:	b580      	push	{r7, lr}
 80075be:	b088      	sub	sp, #32
 80075c0:	af02      	add	r7, sp, #8
 80075c2:	60f8      	str	r0, [r7, #12]
 80075c4:	60b9      	str	r1, [r7, #8]
 80075c6:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80075c8:	4b1b      	ldr	r3, [pc, #108]	; (8007638 <SPI_EndRxTxTransaction+0x7c>)
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	4a1b      	ldr	r2, [pc, #108]	; (800763c <SPI_EndRxTxTransaction+0x80>)
 80075ce:	fba2 2303 	umull	r2, r3, r2, r3
 80075d2:	0d5b      	lsrs	r3, r3, #21
 80075d4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80075d8:	fb02 f303 	mul.w	r3, r2, r3
 80075dc:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80075de:	68fb      	ldr	r3, [r7, #12]
 80075e0:	685b      	ldr	r3, [r3, #4]
 80075e2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80075e6:	d112      	bne.n	800760e <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	9300      	str	r3, [sp, #0]
 80075ec:	68bb      	ldr	r3, [r7, #8]
 80075ee:	2200      	movs	r2, #0
 80075f0:	2180      	movs	r1, #128	; 0x80
 80075f2:	68f8      	ldr	r0, [r7, #12]
 80075f4:	f7ff fef4 	bl	80073e0 <SPI_WaitFlagStateUntilTimeout>
 80075f8:	4603      	mov	r3, r0
 80075fa:	2b00      	cmp	r3, #0
 80075fc:	d016      	beq.n	800762c <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80075fe:	68fb      	ldr	r3, [r7, #12]
 8007600:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007602:	f043 0220 	orr.w	r2, r3, #32
 8007606:	68fb      	ldr	r3, [r7, #12]
 8007608:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800760a:	2303      	movs	r3, #3
 800760c:	e00f      	b.n	800762e <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800760e:	697b      	ldr	r3, [r7, #20]
 8007610:	2b00      	cmp	r3, #0
 8007612:	d00a      	beq.n	800762a <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8007614:	697b      	ldr	r3, [r7, #20]
 8007616:	3b01      	subs	r3, #1
 8007618:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800761a:	68fb      	ldr	r3, [r7, #12]
 800761c:	681b      	ldr	r3, [r3, #0]
 800761e:	689b      	ldr	r3, [r3, #8]
 8007620:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007624:	2b80      	cmp	r3, #128	; 0x80
 8007626:	d0f2      	beq.n	800760e <SPI_EndRxTxTransaction+0x52>
 8007628:	e000      	b.n	800762c <SPI_EndRxTxTransaction+0x70>
        break;
 800762a:	bf00      	nop
  }

  return HAL_OK;
 800762c:	2300      	movs	r3, #0
}
 800762e:	4618      	mov	r0, r3
 8007630:	3718      	adds	r7, #24
 8007632:	46bd      	mov	sp, r7
 8007634:	bd80      	pop	{r7, pc}
 8007636:	bf00      	nop
 8007638:	20000010 	.word	0x20000010
 800763c:	165e9f81 	.word	0x165e9f81

08007640 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007640:	b580      	push	{r7, lr}
 8007642:	b082      	sub	sp, #8
 8007644:	af00      	add	r7, sp, #0
 8007646:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	2b00      	cmp	r3, #0
 800764c:	d101      	bne.n	8007652 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800764e:	2301      	movs	r3, #1
 8007650:	e041      	b.n	80076d6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007658:	b2db      	uxtb	r3, r3
 800765a:	2b00      	cmp	r3, #0
 800765c:	d106      	bne.n	800766c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	2200      	movs	r2, #0
 8007662:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007666:	6878      	ldr	r0, [r7, #4]
 8007668:	f7fc f898 	bl	800379c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	2202      	movs	r2, #2
 8007670:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	681a      	ldr	r2, [r3, #0]
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	3304      	adds	r3, #4
 800767c:	4619      	mov	r1, r3
 800767e:	4610      	mov	r0, r2
 8007680:	f000 fab6 	bl	8007bf0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	2201      	movs	r2, #1
 8007688:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	2201      	movs	r2, #1
 8007690:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	2201      	movs	r2, #1
 8007698:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	2201      	movs	r2, #1
 80076a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	2201      	movs	r2, #1
 80076a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	2201      	movs	r2, #1
 80076b0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	2201      	movs	r2, #1
 80076b8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	2201      	movs	r2, #1
 80076c0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	2201      	movs	r2, #1
 80076c8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	2201      	movs	r2, #1
 80076d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80076d4:	2300      	movs	r3, #0
}
 80076d6:	4618      	mov	r0, r3
 80076d8:	3708      	adds	r7, #8
 80076da:	46bd      	mov	sp, r7
 80076dc:	bd80      	pop	{r7, pc}
	...

080076e0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80076e0:	b480      	push	{r7}
 80076e2:	b085      	sub	sp, #20
 80076e4:	af00      	add	r7, sp, #0
 80076e6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80076ee:	b2db      	uxtb	r3, r3
 80076f0:	2b01      	cmp	r3, #1
 80076f2:	d001      	beq.n	80076f8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80076f4:	2301      	movs	r3, #1
 80076f6:	e044      	b.n	8007782 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	2202      	movs	r2, #2
 80076fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	681b      	ldr	r3, [r3, #0]
 8007704:	68da      	ldr	r2, [r3, #12]
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	f042 0201 	orr.w	r2, r2, #1
 800770e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	4a1e      	ldr	r2, [pc, #120]	; (8007790 <HAL_TIM_Base_Start_IT+0xb0>)
 8007716:	4293      	cmp	r3, r2
 8007718:	d018      	beq.n	800774c <HAL_TIM_Base_Start_IT+0x6c>
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007722:	d013      	beq.n	800774c <HAL_TIM_Base_Start_IT+0x6c>
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	4a1a      	ldr	r2, [pc, #104]	; (8007794 <HAL_TIM_Base_Start_IT+0xb4>)
 800772a:	4293      	cmp	r3, r2
 800772c:	d00e      	beq.n	800774c <HAL_TIM_Base_Start_IT+0x6c>
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	681b      	ldr	r3, [r3, #0]
 8007732:	4a19      	ldr	r2, [pc, #100]	; (8007798 <HAL_TIM_Base_Start_IT+0xb8>)
 8007734:	4293      	cmp	r3, r2
 8007736:	d009      	beq.n	800774c <HAL_TIM_Base_Start_IT+0x6c>
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	681b      	ldr	r3, [r3, #0]
 800773c:	4a17      	ldr	r2, [pc, #92]	; (800779c <HAL_TIM_Base_Start_IT+0xbc>)
 800773e:	4293      	cmp	r3, r2
 8007740:	d004      	beq.n	800774c <HAL_TIM_Base_Start_IT+0x6c>
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	681b      	ldr	r3, [r3, #0]
 8007746:	4a16      	ldr	r2, [pc, #88]	; (80077a0 <HAL_TIM_Base_Start_IT+0xc0>)
 8007748:	4293      	cmp	r3, r2
 800774a:	d111      	bne.n	8007770 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	689b      	ldr	r3, [r3, #8]
 8007752:	f003 0307 	and.w	r3, r3, #7
 8007756:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007758:	68fb      	ldr	r3, [r7, #12]
 800775a:	2b06      	cmp	r3, #6
 800775c:	d010      	beq.n	8007780 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	681b      	ldr	r3, [r3, #0]
 8007762:	681a      	ldr	r2, [r3, #0]
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	f042 0201 	orr.w	r2, r2, #1
 800776c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800776e:	e007      	b.n	8007780 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	681b      	ldr	r3, [r3, #0]
 8007774:	681a      	ldr	r2, [r3, #0]
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	681b      	ldr	r3, [r3, #0]
 800777a:	f042 0201 	orr.w	r2, r2, #1
 800777e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007780:	2300      	movs	r3, #0
}
 8007782:	4618      	mov	r0, r3
 8007784:	3714      	adds	r7, #20
 8007786:	46bd      	mov	sp, r7
 8007788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800778c:	4770      	bx	lr
 800778e:	bf00      	nop
 8007790:	40010000 	.word	0x40010000
 8007794:	40000400 	.word	0x40000400
 8007798:	40000800 	.word	0x40000800
 800779c:	40000c00 	.word	0x40000c00
 80077a0:	40014000 	.word	0x40014000

080077a4 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 80077a4:	b480      	push	{r7}
 80077a6:	b083      	sub	sp, #12
 80077a8:	af00      	add	r7, sp, #0
 80077aa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	68da      	ldr	r2, [r3, #12]
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	681b      	ldr	r3, [r3, #0]
 80077b6:	f022 0201 	bic.w	r2, r2, #1
 80077ba:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	6a1a      	ldr	r2, [r3, #32]
 80077c2:	f241 1311 	movw	r3, #4369	; 0x1111
 80077c6:	4013      	ands	r3, r2
 80077c8:	2b00      	cmp	r3, #0
 80077ca:	d10f      	bne.n	80077ec <HAL_TIM_Base_Stop_IT+0x48>
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	681b      	ldr	r3, [r3, #0]
 80077d0:	6a1a      	ldr	r2, [r3, #32]
 80077d2:	f240 4344 	movw	r3, #1092	; 0x444
 80077d6:	4013      	ands	r3, r2
 80077d8:	2b00      	cmp	r3, #0
 80077da:	d107      	bne.n	80077ec <HAL_TIM_Base_Stop_IT+0x48>
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	681b      	ldr	r3, [r3, #0]
 80077e0:	681a      	ldr	r2, [r3, #0]
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	681b      	ldr	r3, [r3, #0]
 80077e6:	f022 0201 	bic.w	r2, r2, #1
 80077ea:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	2201      	movs	r2, #1
 80077f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 80077f4:	2300      	movs	r3, #0
}
 80077f6:	4618      	mov	r0, r3
 80077f8:	370c      	adds	r7, #12
 80077fa:	46bd      	mov	sp, r7
 80077fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007800:	4770      	bx	lr

08007802 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007802:	b580      	push	{r7, lr}
 8007804:	b082      	sub	sp, #8
 8007806:	af00      	add	r7, sp, #0
 8007808:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	681b      	ldr	r3, [r3, #0]
 800780e:	691b      	ldr	r3, [r3, #16]
 8007810:	f003 0302 	and.w	r3, r3, #2
 8007814:	2b02      	cmp	r3, #2
 8007816:	d122      	bne.n	800785e <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	68db      	ldr	r3, [r3, #12]
 800781e:	f003 0302 	and.w	r3, r3, #2
 8007822:	2b02      	cmp	r3, #2
 8007824:	d11b      	bne.n	800785e <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	681b      	ldr	r3, [r3, #0]
 800782a:	f06f 0202 	mvn.w	r2, #2
 800782e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	2201      	movs	r2, #1
 8007834:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	681b      	ldr	r3, [r3, #0]
 800783a:	699b      	ldr	r3, [r3, #24]
 800783c:	f003 0303 	and.w	r3, r3, #3
 8007840:	2b00      	cmp	r3, #0
 8007842:	d003      	beq.n	800784c <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007844:	6878      	ldr	r0, [r7, #4]
 8007846:	f000 f9b5 	bl	8007bb4 <HAL_TIM_IC_CaptureCallback>
 800784a:	e005      	b.n	8007858 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800784c:	6878      	ldr	r0, [r7, #4]
 800784e:	f000 f9a7 	bl	8007ba0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007852:	6878      	ldr	r0, [r7, #4]
 8007854:	f000 f9b8 	bl	8007bc8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	2200      	movs	r2, #0
 800785c:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	681b      	ldr	r3, [r3, #0]
 8007862:	691b      	ldr	r3, [r3, #16]
 8007864:	f003 0304 	and.w	r3, r3, #4
 8007868:	2b04      	cmp	r3, #4
 800786a:	d122      	bne.n	80078b2 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	681b      	ldr	r3, [r3, #0]
 8007870:	68db      	ldr	r3, [r3, #12]
 8007872:	f003 0304 	and.w	r3, r3, #4
 8007876:	2b04      	cmp	r3, #4
 8007878:	d11b      	bne.n	80078b2 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	681b      	ldr	r3, [r3, #0]
 800787e:	f06f 0204 	mvn.w	r2, #4
 8007882:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	2202      	movs	r2, #2
 8007888:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	681b      	ldr	r3, [r3, #0]
 800788e:	699b      	ldr	r3, [r3, #24]
 8007890:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007894:	2b00      	cmp	r3, #0
 8007896:	d003      	beq.n	80078a0 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007898:	6878      	ldr	r0, [r7, #4]
 800789a:	f000 f98b 	bl	8007bb4 <HAL_TIM_IC_CaptureCallback>
 800789e:	e005      	b.n	80078ac <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80078a0:	6878      	ldr	r0, [r7, #4]
 80078a2:	f000 f97d 	bl	8007ba0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80078a6:	6878      	ldr	r0, [r7, #4]
 80078a8:	f000 f98e 	bl	8007bc8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	2200      	movs	r2, #0
 80078b0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	681b      	ldr	r3, [r3, #0]
 80078b6:	691b      	ldr	r3, [r3, #16]
 80078b8:	f003 0308 	and.w	r3, r3, #8
 80078bc:	2b08      	cmp	r3, #8
 80078be:	d122      	bne.n	8007906 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	68db      	ldr	r3, [r3, #12]
 80078c6:	f003 0308 	and.w	r3, r3, #8
 80078ca:	2b08      	cmp	r3, #8
 80078cc:	d11b      	bne.n	8007906 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	681b      	ldr	r3, [r3, #0]
 80078d2:	f06f 0208 	mvn.w	r2, #8
 80078d6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	2204      	movs	r2, #4
 80078dc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	681b      	ldr	r3, [r3, #0]
 80078e2:	69db      	ldr	r3, [r3, #28]
 80078e4:	f003 0303 	and.w	r3, r3, #3
 80078e8:	2b00      	cmp	r3, #0
 80078ea:	d003      	beq.n	80078f4 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80078ec:	6878      	ldr	r0, [r7, #4]
 80078ee:	f000 f961 	bl	8007bb4 <HAL_TIM_IC_CaptureCallback>
 80078f2:	e005      	b.n	8007900 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80078f4:	6878      	ldr	r0, [r7, #4]
 80078f6:	f000 f953 	bl	8007ba0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80078fa:	6878      	ldr	r0, [r7, #4]
 80078fc:	f000 f964 	bl	8007bc8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	2200      	movs	r2, #0
 8007904:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	681b      	ldr	r3, [r3, #0]
 800790a:	691b      	ldr	r3, [r3, #16]
 800790c:	f003 0310 	and.w	r3, r3, #16
 8007910:	2b10      	cmp	r3, #16
 8007912:	d122      	bne.n	800795a <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	681b      	ldr	r3, [r3, #0]
 8007918:	68db      	ldr	r3, [r3, #12]
 800791a:	f003 0310 	and.w	r3, r3, #16
 800791e:	2b10      	cmp	r3, #16
 8007920:	d11b      	bne.n	800795a <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	681b      	ldr	r3, [r3, #0]
 8007926:	f06f 0210 	mvn.w	r2, #16
 800792a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	2208      	movs	r2, #8
 8007930:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	681b      	ldr	r3, [r3, #0]
 8007936:	69db      	ldr	r3, [r3, #28]
 8007938:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800793c:	2b00      	cmp	r3, #0
 800793e:	d003      	beq.n	8007948 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007940:	6878      	ldr	r0, [r7, #4]
 8007942:	f000 f937 	bl	8007bb4 <HAL_TIM_IC_CaptureCallback>
 8007946:	e005      	b.n	8007954 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007948:	6878      	ldr	r0, [r7, #4]
 800794a:	f000 f929 	bl	8007ba0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800794e:	6878      	ldr	r0, [r7, #4]
 8007950:	f000 f93a 	bl	8007bc8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	2200      	movs	r2, #0
 8007958:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	681b      	ldr	r3, [r3, #0]
 800795e:	691b      	ldr	r3, [r3, #16]
 8007960:	f003 0301 	and.w	r3, r3, #1
 8007964:	2b01      	cmp	r3, #1
 8007966:	d10e      	bne.n	8007986 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	681b      	ldr	r3, [r3, #0]
 800796c:	68db      	ldr	r3, [r3, #12]
 800796e:	f003 0301 	and.w	r3, r3, #1
 8007972:	2b01      	cmp	r3, #1
 8007974:	d107      	bne.n	8007986 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	681b      	ldr	r3, [r3, #0]
 800797a:	f06f 0201 	mvn.w	r2, #1
 800797e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007980:	6878      	ldr	r0, [r7, #4]
 8007982:	f7fa f99d 	bl	8001cc0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	681b      	ldr	r3, [r3, #0]
 800798a:	691b      	ldr	r3, [r3, #16]
 800798c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007990:	2b80      	cmp	r3, #128	; 0x80
 8007992:	d10e      	bne.n	80079b2 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	68db      	ldr	r3, [r3, #12]
 800799a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800799e:	2b80      	cmp	r3, #128	; 0x80
 80079a0:	d107      	bne.n	80079b2 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	681b      	ldr	r3, [r3, #0]
 80079a6:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80079aa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80079ac:	6878      	ldr	r0, [r7, #4]
 80079ae:	f000 fab1 	bl	8007f14 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	681b      	ldr	r3, [r3, #0]
 80079b6:	691b      	ldr	r3, [r3, #16]
 80079b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80079bc:	2b40      	cmp	r3, #64	; 0x40
 80079be:	d10e      	bne.n	80079de <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	681b      	ldr	r3, [r3, #0]
 80079c4:	68db      	ldr	r3, [r3, #12]
 80079c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80079ca:	2b40      	cmp	r3, #64	; 0x40
 80079cc:	d107      	bne.n	80079de <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	681b      	ldr	r3, [r3, #0]
 80079d2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80079d6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80079d8:	6878      	ldr	r0, [r7, #4]
 80079da:	f000 f8ff 	bl	8007bdc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	681b      	ldr	r3, [r3, #0]
 80079e2:	691b      	ldr	r3, [r3, #16]
 80079e4:	f003 0320 	and.w	r3, r3, #32
 80079e8:	2b20      	cmp	r3, #32
 80079ea:	d10e      	bne.n	8007a0a <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	681b      	ldr	r3, [r3, #0]
 80079f0:	68db      	ldr	r3, [r3, #12]
 80079f2:	f003 0320 	and.w	r3, r3, #32
 80079f6:	2b20      	cmp	r3, #32
 80079f8:	d107      	bne.n	8007a0a <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	681b      	ldr	r3, [r3, #0]
 80079fe:	f06f 0220 	mvn.w	r2, #32
 8007a02:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007a04:	6878      	ldr	r0, [r7, #4]
 8007a06:	f000 fa7b 	bl	8007f00 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007a0a:	bf00      	nop
 8007a0c:	3708      	adds	r7, #8
 8007a0e:	46bd      	mov	sp, r7
 8007a10:	bd80      	pop	{r7, pc}

08007a12 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007a12:	b580      	push	{r7, lr}
 8007a14:	b084      	sub	sp, #16
 8007a16:	af00      	add	r7, sp, #0
 8007a18:	6078      	str	r0, [r7, #4]
 8007a1a:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007a1c:	2300      	movs	r3, #0
 8007a1e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007a26:	2b01      	cmp	r3, #1
 8007a28:	d101      	bne.n	8007a2e <HAL_TIM_ConfigClockSource+0x1c>
 8007a2a:	2302      	movs	r3, #2
 8007a2c:	e0b4      	b.n	8007b98 <HAL_TIM_ConfigClockSource+0x186>
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	2201      	movs	r2, #1
 8007a32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	2202      	movs	r2, #2
 8007a3a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	681b      	ldr	r3, [r3, #0]
 8007a42:	689b      	ldr	r3, [r3, #8]
 8007a44:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007a46:	68bb      	ldr	r3, [r7, #8]
 8007a48:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8007a4c:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007a4e:	68bb      	ldr	r3, [r7, #8]
 8007a50:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007a54:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	681b      	ldr	r3, [r3, #0]
 8007a5a:	68ba      	ldr	r2, [r7, #8]
 8007a5c:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007a5e:	683b      	ldr	r3, [r7, #0]
 8007a60:	681b      	ldr	r3, [r3, #0]
 8007a62:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007a66:	d03e      	beq.n	8007ae6 <HAL_TIM_ConfigClockSource+0xd4>
 8007a68:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007a6c:	f200 8087 	bhi.w	8007b7e <HAL_TIM_ConfigClockSource+0x16c>
 8007a70:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007a74:	f000 8086 	beq.w	8007b84 <HAL_TIM_ConfigClockSource+0x172>
 8007a78:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007a7c:	d87f      	bhi.n	8007b7e <HAL_TIM_ConfigClockSource+0x16c>
 8007a7e:	2b70      	cmp	r3, #112	; 0x70
 8007a80:	d01a      	beq.n	8007ab8 <HAL_TIM_ConfigClockSource+0xa6>
 8007a82:	2b70      	cmp	r3, #112	; 0x70
 8007a84:	d87b      	bhi.n	8007b7e <HAL_TIM_ConfigClockSource+0x16c>
 8007a86:	2b60      	cmp	r3, #96	; 0x60
 8007a88:	d050      	beq.n	8007b2c <HAL_TIM_ConfigClockSource+0x11a>
 8007a8a:	2b60      	cmp	r3, #96	; 0x60
 8007a8c:	d877      	bhi.n	8007b7e <HAL_TIM_ConfigClockSource+0x16c>
 8007a8e:	2b50      	cmp	r3, #80	; 0x50
 8007a90:	d03c      	beq.n	8007b0c <HAL_TIM_ConfigClockSource+0xfa>
 8007a92:	2b50      	cmp	r3, #80	; 0x50
 8007a94:	d873      	bhi.n	8007b7e <HAL_TIM_ConfigClockSource+0x16c>
 8007a96:	2b40      	cmp	r3, #64	; 0x40
 8007a98:	d058      	beq.n	8007b4c <HAL_TIM_ConfigClockSource+0x13a>
 8007a9a:	2b40      	cmp	r3, #64	; 0x40
 8007a9c:	d86f      	bhi.n	8007b7e <HAL_TIM_ConfigClockSource+0x16c>
 8007a9e:	2b30      	cmp	r3, #48	; 0x30
 8007aa0:	d064      	beq.n	8007b6c <HAL_TIM_ConfigClockSource+0x15a>
 8007aa2:	2b30      	cmp	r3, #48	; 0x30
 8007aa4:	d86b      	bhi.n	8007b7e <HAL_TIM_ConfigClockSource+0x16c>
 8007aa6:	2b20      	cmp	r3, #32
 8007aa8:	d060      	beq.n	8007b6c <HAL_TIM_ConfigClockSource+0x15a>
 8007aaa:	2b20      	cmp	r3, #32
 8007aac:	d867      	bhi.n	8007b7e <HAL_TIM_ConfigClockSource+0x16c>
 8007aae:	2b00      	cmp	r3, #0
 8007ab0:	d05c      	beq.n	8007b6c <HAL_TIM_ConfigClockSource+0x15a>
 8007ab2:	2b10      	cmp	r3, #16
 8007ab4:	d05a      	beq.n	8007b6c <HAL_TIM_ConfigClockSource+0x15a>
 8007ab6:	e062      	b.n	8007b7e <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	6818      	ldr	r0, [r3, #0]
 8007abc:	683b      	ldr	r3, [r7, #0]
 8007abe:	6899      	ldr	r1, [r3, #8]
 8007ac0:	683b      	ldr	r3, [r7, #0]
 8007ac2:	685a      	ldr	r2, [r3, #4]
 8007ac4:	683b      	ldr	r3, [r7, #0]
 8007ac6:	68db      	ldr	r3, [r3, #12]
 8007ac8:	f000 f98c 	bl	8007de4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	681b      	ldr	r3, [r3, #0]
 8007ad0:	689b      	ldr	r3, [r3, #8]
 8007ad2:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007ad4:	68bb      	ldr	r3, [r7, #8]
 8007ad6:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8007ada:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	681b      	ldr	r3, [r3, #0]
 8007ae0:	68ba      	ldr	r2, [r7, #8]
 8007ae2:	609a      	str	r2, [r3, #8]
      break;
 8007ae4:	e04f      	b.n	8007b86 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	6818      	ldr	r0, [r3, #0]
 8007aea:	683b      	ldr	r3, [r7, #0]
 8007aec:	6899      	ldr	r1, [r3, #8]
 8007aee:	683b      	ldr	r3, [r7, #0]
 8007af0:	685a      	ldr	r2, [r3, #4]
 8007af2:	683b      	ldr	r3, [r7, #0]
 8007af4:	68db      	ldr	r3, [r3, #12]
 8007af6:	f000 f975 	bl	8007de4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	681b      	ldr	r3, [r3, #0]
 8007afe:	689a      	ldr	r2, [r3, #8]
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	681b      	ldr	r3, [r3, #0]
 8007b04:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007b08:	609a      	str	r2, [r3, #8]
      break;
 8007b0a:	e03c      	b.n	8007b86 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	6818      	ldr	r0, [r3, #0]
 8007b10:	683b      	ldr	r3, [r7, #0]
 8007b12:	6859      	ldr	r1, [r3, #4]
 8007b14:	683b      	ldr	r3, [r7, #0]
 8007b16:	68db      	ldr	r3, [r3, #12]
 8007b18:	461a      	mov	r2, r3
 8007b1a:	f000 f8e9 	bl	8007cf0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	681b      	ldr	r3, [r3, #0]
 8007b22:	2150      	movs	r1, #80	; 0x50
 8007b24:	4618      	mov	r0, r3
 8007b26:	f000 f942 	bl	8007dae <TIM_ITRx_SetConfig>
      break;
 8007b2a:	e02c      	b.n	8007b86 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	6818      	ldr	r0, [r3, #0]
 8007b30:	683b      	ldr	r3, [r7, #0]
 8007b32:	6859      	ldr	r1, [r3, #4]
 8007b34:	683b      	ldr	r3, [r7, #0]
 8007b36:	68db      	ldr	r3, [r3, #12]
 8007b38:	461a      	mov	r2, r3
 8007b3a:	f000 f908 	bl	8007d4e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	681b      	ldr	r3, [r3, #0]
 8007b42:	2160      	movs	r1, #96	; 0x60
 8007b44:	4618      	mov	r0, r3
 8007b46:	f000 f932 	bl	8007dae <TIM_ITRx_SetConfig>
      break;
 8007b4a:	e01c      	b.n	8007b86 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	6818      	ldr	r0, [r3, #0]
 8007b50:	683b      	ldr	r3, [r7, #0]
 8007b52:	6859      	ldr	r1, [r3, #4]
 8007b54:	683b      	ldr	r3, [r7, #0]
 8007b56:	68db      	ldr	r3, [r3, #12]
 8007b58:	461a      	mov	r2, r3
 8007b5a:	f000 f8c9 	bl	8007cf0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	681b      	ldr	r3, [r3, #0]
 8007b62:	2140      	movs	r1, #64	; 0x40
 8007b64:	4618      	mov	r0, r3
 8007b66:	f000 f922 	bl	8007dae <TIM_ITRx_SetConfig>
      break;
 8007b6a:	e00c      	b.n	8007b86 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	681a      	ldr	r2, [r3, #0]
 8007b70:	683b      	ldr	r3, [r7, #0]
 8007b72:	681b      	ldr	r3, [r3, #0]
 8007b74:	4619      	mov	r1, r3
 8007b76:	4610      	mov	r0, r2
 8007b78:	f000 f919 	bl	8007dae <TIM_ITRx_SetConfig>
      break;
 8007b7c:	e003      	b.n	8007b86 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8007b7e:	2301      	movs	r3, #1
 8007b80:	73fb      	strb	r3, [r7, #15]
      break;
 8007b82:	e000      	b.n	8007b86 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8007b84:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	2201      	movs	r2, #1
 8007b8a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	2200      	movs	r2, #0
 8007b92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007b96:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b98:	4618      	mov	r0, r3
 8007b9a:	3710      	adds	r7, #16
 8007b9c:	46bd      	mov	sp, r7
 8007b9e:	bd80      	pop	{r7, pc}

08007ba0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007ba0:	b480      	push	{r7}
 8007ba2:	b083      	sub	sp, #12
 8007ba4:	af00      	add	r7, sp, #0
 8007ba6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007ba8:	bf00      	nop
 8007baa:	370c      	adds	r7, #12
 8007bac:	46bd      	mov	sp, r7
 8007bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bb2:	4770      	bx	lr

08007bb4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007bb4:	b480      	push	{r7}
 8007bb6:	b083      	sub	sp, #12
 8007bb8:	af00      	add	r7, sp, #0
 8007bba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007bbc:	bf00      	nop
 8007bbe:	370c      	adds	r7, #12
 8007bc0:	46bd      	mov	sp, r7
 8007bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bc6:	4770      	bx	lr

08007bc8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007bc8:	b480      	push	{r7}
 8007bca:	b083      	sub	sp, #12
 8007bcc:	af00      	add	r7, sp, #0
 8007bce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007bd0:	bf00      	nop
 8007bd2:	370c      	adds	r7, #12
 8007bd4:	46bd      	mov	sp, r7
 8007bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bda:	4770      	bx	lr

08007bdc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007bdc:	b480      	push	{r7}
 8007bde:	b083      	sub	sp, #12
 8007be0:	af00      	add	r7, sp, #0
 8007be2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007be4:	bf00      	nop
 8007be6:	370c      	adds	r7, #12
 8007be8:	46bd      	mov	sp, r7
 8007bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bee:	4770      	bx	lr

08007bf0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007bf0:	b480      	push	{r7}
 8007bf2:	b085      	sub	sp, #20
 8007bf4:	af00      	add	r7, sp, #0
 8007bf6:	6078      	str	r0, [r7, #4]
 8007bf8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	681b      	ldr	r3, [r3, #0]
 8007bfe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	4a34      	ldr	r2, [pc, #208]	; (8007cd4 <TIM_Base_SetConfig+0xe4>)
 8007c04:	4293      	cmp	r3, r2
 8007c06:	d00f      	beq.n	8007c28 <TIM_Base_SetConfig+0x38>
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007c0e:	d00b      	beq.n	8007c28 <TIM_Base_SetConfig+0x38>
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	4a31      	ldr	r2, [pc, #196]	; (8007cd8 <TIM_Base_SetConfig+0xe8>)
 8007c14:	4293      	cmp	r3, r2
 8007c16:	d007      	beq.n	8007c28 <TIM_Base_SetConfig+0x38>
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	4a30      	ldr	r2, [pc, #192]	; (8007cdc <TIM_Base_SetConfig+0xec>)
 8007c1c:	4293      	cmp	r3, r2
 8007c1e:	d003      	beq.n	8007c28 <TIM_Base_SetConfig+0x38>
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	4a2f      	ldr	r2, [pc, #188]	; (8007ce0 <TIM_Base_SetConfig+0xf0>)
 8007c24:	4293      	cmp	r3, r2
 8007c26:	d108      	bne.n	8007c3a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007c28:	68fb      	ldr	r3, [r7, #12]
 8007c2a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007c2e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007c30:	683b      	ldr	r3, [r7, #0]
 8007c32:	685b      	ldr	r3, [r3, #4]
 8007c34:	68fa      	ldr	r2, [r7, #12]
 8007c36:	4313      	orrs	r3, r2
 8007c38:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	4a25      	ldr	r2, [pc, #148]	; (8007cd4 <TIM_Base_SetConfig+0xe4>)
 8007c3e:	4293      	cmp	r3, r2
 8007c40:	d01b      	beq.n	8007c7a <TIM_Base_SetConfig+0x8a>
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007c48:	d017      	beq.n	8007c7a <TIM_Base_SetConfig+0x8a>
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	4a22      	ldr	r2, [pc, #136]	; (8007cd8 <TIM_Base_SetConfig+0xe8>)
 8007c4e:	4293      	cmp	r3, r2
 8007c50:	d013      	beq.n	8007c7a <TIM_Base_SetConfig+0x8a>
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	4a21      	ldr	r2, [pc, #132]	; (8007cdc <TIM_Base_SetConfig+0xec>)
 8007c56:	4293      	cmp	r3, r2
 8007c58:	d00f      	beq.n	8007c7a <TIM_Base_SetConfig+0x8a>
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	4a20      	ldr	r2, [pc, #128]	; (8007ce0 <TIM_Base_SetConfig+0xf0>)
 8007c5e:	4293      	cmp	r3, r2
 8007c60:	d00b      	beq.n	8007c7a <TIM_Base_SetConfig+0x8a>
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	4a1f      	ldr	r2, [pc, #124]	; (8007ce4 <TIM_Base_SetConfig+0xf4>)
 8007c66:	4293      	cmp	r3, r2
 8007c68:	d007      	beq.n	8007c7a <TIM_Base_SetConfig+0x8a>
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	4a1e      	ldr	r2, [pc, #120]	; (8007ce8 <TIM_Base_SetConfig+0xf8>)
 8007c6e:	4293      	cmp	r3, r2
 8007c70:	d003      	beq.n	8007c7a <TIM_Base_SetConfig+0x8a>
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	4a1d      	ldr	r2, [pc, #116]	; (8007cec <TIM_Base_SetConfig+0xfc>)
 8007c76:	4293      	cmp	r3, r2
 8007c78:	d108      	bne.n	8007c8c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007c7a:	68fb      	ldr	r3, [r7, #12]
 8007c7c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007c80:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007c82:	683b      	ldr	r3, [r7, #0]
 8007c84:	68db      	ldr	r3, [r3, #12]
 8007c86:	68fa      	ldr	r2, [r7, #12]
 8007c88:	4313      	orrs	r3, r2
 8007c8a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007c8c:	68fb      	ldr	r3, [r7, #12]
 8007c8e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007c92:	683b      	ldr	r3, [r7, #0]
 8007c94:	695b      	ldr	r3, [r3, #20]
 8007c96:	4313      	orrs	r3, r2
 8007c98:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	68fa      	ldr	r2, [r7, #12]
 8007c9e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007ca0:	683b      	ldr	r3, [r7, #0]
 8007ca2:	689a      	ldr	r2, [r3, #8]
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007ca8:	683b      	ldr	r3, [r7, #0]
 8007caa:	681a      	ldr	r2, [r3, #0]
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	4a08      	ldr	r2, [pc, #32]	; (8007cd4 <TIM_Base_SetConfig+0xe4>)
 8007cb4:	4293      	cmp	r3, r2
 8007cb6:	d103      	bne.n	8007cc0 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007cb8:	683b      	ldr	r3, [r7, #0]
 8007cba:	691a      	ldr	r2, [r3, #16]
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	2201      	movs	r2, #1
 8007cc4:	615a      	str	r2, [r3, #20]
}
 8007cc6:	bf00      	nop
 8007cc8:	3714      	adds	r7, #20
 8007cca:	46bd      	mov	sp, r7
 8007ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cd0:	4770      	bx	lr
 8007cd2:	bf00      	nop
 8007cd4:	40010000 	.word	0x40010000
 8007cd8:	40000400 	.word	0x40000400
 8007cdc:	40000800 	.word	0x40000800
 8007ce0:	40000c00 	.word	0x40000c00
 8007ce4:	40014000 	.word	0x40014000
 8007ce8:	40014400 	.word	0x40014400
 8007cec:	40014800 	.word	0x40014800

08007cf0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007cf0:	b480      	push	{r7}
 8007cf2:	b087      	sub	sp, #28
 8007cf4:	af00      	add	r7, sp, #0
 8007cf6:	60f8      	str	r0, [r7, #12]
 8007cf8:	60b9      	str	r1, [r7, #8]
 8007cfa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007cfc:	68fb      	ldr	r3, [r7, #12]
 8007cfe:	6a1b      	ldr	r3, [r3, #32]
 8007d00:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007d02:	68fb      	ldr	r3, [r7, #12]
 8007d04:	6a1b      	ldr	r3, [r3, #32]
 8007d06:	f023 0201 	bic.w	r2, r3, #1
 8007d0a:	68fb      	ldr	r3, [r7, #12]
 8007d0c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007d0e:	68fb      	ldr	r3, [r7, #12]
 8007d10:	699b      	ldr	r3, [r3, #24]
 8007d12:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007d14:	693b      	ldr	r3, [r7, #16]
 8007d16:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007d1a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	011b      	lsls	r3, r3, #4
 8007d20:	693a      	ldr	r2, [r7, #16]
 8007d22:	4313      	orrs	r3, r2
 8007d24:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007d26:	697b      	ldr	r3, [r7, #20]
 8007d28:	f023 030a 	bic.w	r3, r3, #10
 8007d2c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007d2e:	697a      	ldr	r2, [r7, #20]
 8007d30:	68bb      	ldr	r3, [r7, #8]
 8007d32:	4313      	orrs	r3, r2
 8007d34:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007d36:	68fb      	ldr	r3, [r7, #12]
 8007d38:	693a      	ldr	r2, [r7, #16]
 8007d3a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007d3c:	68fb      	ldr	r3, [r7, #12]
 8007d3e:	697a      	ldr	r2, [r7, #20]
 8007d40:	621a      	str	r2, [r3, #32]
}
 8007d42:	bf00      	nop
 8007d44:	371c      	adds	r7, #28
 8007d46:	46bd      	mov	sp, r7
 8007d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d4c:	4770      	bx	lr

08007d4e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007d4e:	b480      	push	{r7}
 8007d50:	b087      	sub	sp, #28
 8007d52:	af00      	add	r7, sp, #0
 8007d54:	60f8      	str	r0, [r7, #12]
 8007d56:	60b9      	str	r1, [r7, #8]
 8007d58:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007d5a:	68fb      	ldr	r3, [r7, #12]
 8007d5c:	6a1b      	ldr	r3, [r3, #32]
 8007d5e:	f023 0210 	bic.w	r2, r3, #16
 8007d62:	68fb      	ldr	r3, [r7, #12]
 8007d64:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007d66:	68fb      	ldr	r3, [r7, #12]
 8007d68:	699b      	ldr	r3, [r3, #24]
 8007d6a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007d6c:	68fb      	ldr	r3, [r7, #12]
 8007d6e:	6a1b      	ldr	r3, [r3, #32]
 8007d70:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007d72:	697b      	ldr	r3, [r7, #20]
 8007d74:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007d78:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	031b      	lsls	r3, r3, #12
 8007d7e:	697a      	ldr	r2, [r7, #20]
 8007d80:	4313      	orrs	r3, r2
 8007d82:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007d84:	693b      	ldr	r3, [r7, #16]
 8007d86:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007d8a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007d8c:	68bb      	ldr	r3, [r7, #8]
 8007d8e:	011b      	lsls	r3, r3, #4
 8007d90:	693a      	ldr	r2, [r7, #16]
 8007d92:	4313      	orrs	r3, r2
 8007d94:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007d96:	68fb      	ldr	r3, [r7, #12]
 8007d98:	697a      	ldr	r2, [r7, #20]
 8007d9a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007d9c:	68fb      	ldr	r3, [r7, #12]
 8007d9e:	693a      	ldr	r2, [r7, #16]
 8007da0:	621a      	str	r2, [r3, #32]
}
 8007da2:	bf00      	nop
 8007da4:	371c      	adds	r7, #28
 8007da6:	46bd      	mov	sp, r7
 8007da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dac:	4770      	bx	lr

08007dae <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007dae:	b480      	push	{r7}
 8007db0:	b085      	sub	sp, #20
 8007db2:	af00      	add	r7, sp, #0
 8007db4:	6078      	str	r0, [r7, #4]
 8007db6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	689b      	ldr	r3, [r3, #8]
 8007dbc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007dbe:	68fb      	ldr	r3, [r7, #12]
 8007dc0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007dc4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007dc6:	683a      	ldr	r2, [r7, #0]
 8007dc8:	68fb      	ldr	r3, [r7, #12]
 8007dca:	4313      	orrs	r3, r2
 8007dcc:	f043 0307 	orr.w	r3, r3, #7
 8007dd0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	68fa      	ldr	r2, [r7, #12]
 8007dd6:	609a      	str	r2, [r3, #8]
}
 8007dd8:	bf00      	nop
 8007dda:	3714      	adds	r7, #20
 8007ddc:	46bd      	mov	sp, r7
 8007dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007de2:	4770      	bx	lr

08007de4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007de4:	b480      	push	{r7}
 8007de6:	b087      	sub	sp, #28
 8007de8:	af00      	add	r7, sp, #0
 8007dea:	60f8      	str	r0, [r7, #12]
 8007dec:	60b9      	str	r1, [r7, #8]
 8007dee:	607a      	str	r2, [r7, #4]
 8007df0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007df2:	68fb      	ldr	r3, [r7, #12]
 8007df4:	689b      	ldr	r3, [r3, #8]
 8007df6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007df8:	697b      	ldr	r3, [r7, #20]
 8007dfa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007dfe:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007e00:	683b      	ldr	r3, [r7, #0]
 8007e02:	021a      	lsls	r2, r3, #8
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	431a      	orrs	r2, r3
 8007e08:	68bb      	ldr	r3, [r7, #8]
 8007e0a:	4313      	orrs	r3, r2
 8007e0c:	697a      	ldr	r2, [r7, #20]
 8007e0e:	4313      	orrs	r3, r2
 8007e10:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007e12:	68fb      	ldr	r3, [r7, #12]
 8007e14:	697a      	ldr	r2, [r7, #20]
 8007e16:	609a      	str	r2, [r3, #8]
}
 8007e18:	bf00      	nop
 8007e1a:	371c      	adds	r7, #28
 8007e1c:	46bd      	mov	sp, r7
 8007e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e22:	4770      	bx	lr

08007e24 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007e24:	b480      	push	{r7}
 8007e26:	b085      	sub	sp, #20
 8007e28:	af00      	add	r7, sp, #0
 8007e2a:	6078      	str	r0, [r7, #4]
 8007e2c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007e34:	2b01      	cmp	r3, #1
 8007e36:	d101      	bne.n	8007e3c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007e38:	2302      	movs	r3, #2
 8007e3a:	e050      	b.n	8007ede <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	2201      	movs	r2, #1
 8007e40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	2202      	movs	r2, #2
 8007e48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	681b      	ldr	r3, [r3, #0]
 8007e50:	685b      	ldr	r3, [r3, #4]
 8007e52:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	681b      	ldr	r3, [r3, #0]
 8007e58:	689b      	ldr	r3, [r3, #8]
 8007e5a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007e5c:	68fb      	ldr	r3, [r7, #12]
 8007e5e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007e62:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007e64:	683b      	ldr	r3, [r7, #0]
 8007e66:	681b      	ldr	r3, [r3, #0]
 8007e68:	68fa      	ldr	r2, [r7, #12]
 8007e6a:	4313      	orrs	r3, r2
 8007e6c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	681b      	ldr	r3, [r3, #0]
 8007e72:	68fa      	ldr	r2, [r7, #12]
 8007e74:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	681b      	ldr	r3, [r3, #0]
 8007e7a:	4a1c      	ldr	r2, [pc, #112]	; (8007eec <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8007e7c:	4293      	cmp	r3, r2
 8007e7e:	d018      	beq.n	8007eb2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	681b      	ldr	r3, [r3, #0]
 8007e84:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007e88:	d013      	beq.n	8007eb2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	681b      	ldr	r3, [r3, #0]
 8007e8e:	4a18      	ldr	r2, [pc, #96]	; (8007ef0 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8007e90:	4293      	cmp	r3, r2
 8007e92:	d00e      	beq.n	8007eb2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	681b      	ldr	r3, [r3, #0]
 8007e98:	4a16      	ldr	r2, [pc, #88]	; (8007ef4 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8007e9a:	4293      	cmp	r3, r2
 8007e9c:	d009      	beq.n	8007eb2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	681b      	ldr	r3, [r3, #0]
 8007ea2:	4a15      	ldr	r2, [pc, #84]	; (8007ef8 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8007ea4:	4293      	cmp	r3, r2
 8007ea6:	d004      	beq.n	8007eb2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	681b      	ldr	r3, [r3, #0]
 8007eac:	4a13      	ldr	r2, [pc, #76]	; (8007efc <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8007eae:	4293      	cmp	r3, r2
 8007eb0:	d10c      	bne.n	8007ecc <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007eb2:	68bb      	ldr	r3, [r7, #8]
 8007eb4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007eb8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007eba:	683b      	ldr	r3, [r7, #0]
 8007ebc:	685b      	ldr	r3, [r3, #4]
 8007ebe:	68ba      	ldr	r2, [r7, #8]
 8007ec0:	4313      	orrs	r3, r2
 8007ec2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	681b      	ldr	r3, [r3, #0]
 8007ec8:	68ba      	ldr	r2, [r7, #8]
 8007eca:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	2201      	movs	r2, #1
 8007ed0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	2200      	movs	r2, #0
 8007ed8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007edc:	2300      	movs	r3, #0
}
 8007ede:	4618      	mov	r0, r3
 8007ee0:	3714      	adds	r7, #20
 8007ee2:	46bd      	mov	sp, r7
 8007ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ee8:	4770      	bx	lr
 8007eea:	bf00      	nop
 8007eec:	40010000 	.word	0x40010000
 8007ef0:	40000400 	.word	0x40000400
 8007ef4:	40000800 	.word	0x40000800
 8007ef8:	40000c00 	.word	0x40000c00
 8007efc:	40014000 	.word	0x40014000

08007f00 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007f00:	b480      	push	{r7}
 8007f02:	b083      	sub	sp, #12
 8007f04:	af00      	add	r7, sp, #0
 8007f06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007f08:	bf00      	nop
 8007f0a:	370c      	adds	r7, #12
 8007f0c:	46bd      	mov	sp, r7
 8007f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f12:	4770      	bx	lr

08007f14 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007f14:	b480      	push	{r7}
 8007f16:	b083      	sub	sp, #12
 8007f18:	af00      	add	r7, sp, #0
 8007f1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007f1c:	bf00      	nop
 8007f1e:	370c      	adds	r7, #12
 8007f20:	46bd      	mov	sp, r7
 8007f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f26:	4770      	bx	lr

08007f28 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007f28:	b580      	push	{r7, lr}
 8007f2a:	b082      	sub	sp, #8
 8007f2c:	af00      	add	r7, sp, #0
 8007f2e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	2b00      	cmp	r3, #0
 8007f34:	d101      	bne.n	8007f3a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007f36:	2301      	movs	r3, #1
 8007f38:	e03f      	b.n	8007fba <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007f40:	b2db      	uxtb	r3, r3
 8007f42:	2b00      	cmp	r3, #0
 8007f44:	d106      	bne.n	8007f54 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	2200      	movs	r2, #0
 8007f4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007f4e:	6878      	ldr	r0, [r7, #4]
 8007f50:	f7fb fc6a 	bl	8003828 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	2224      	movs	r2, #36	; 0x24
 8007f58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	681b      	ldr	r3, [r3, #0]
 8007f60:	68da      	ldr	r2, [r3, #12]
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	681b      	ldr	r3, [r3, #0]
 8007f66:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007f6a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007f6c:	6878      	ldr	r0, [r7, #4]
 8007f6e:	f000 f929 	bl	80081c4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	681b      	ldr	r3, [r3, #0]
 8007f76:	691a      	ldr	r2, [r3, #16]
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	681b      	ldr	r3, [r3, #0]
 8007f7c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007f80:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	681b      	ldr	r3, [r3, #0]
 8007f86:	695a      	ldr	r2, [r3, #20]
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	681b      	ldr	r3, [r3, #0]
 8007f8c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007f90:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	681b      	ldr	r3, [r3, #0]
 8007f96:	68da      	ldr	r2, [r3, #12]
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	681b      	ldr	r3, [r3, #0]
 8007f9c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007fa0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	2200      	movs	r2, #0
 8007fa6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	2220      	movs	r2, #32
 8007fac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	2220      	movs	r2, #32
 8007fb4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8007fb8:	2300      	movs	r3, #0
}
 8007fba:	4618      	mov	r0, r3
 8007fbc:	3708      	adds	r7, #8
 8007fbe:	46bd      	mov	sp, r7
 8007fc0:	bd80      	pop	{r7, pc}

08007fc2 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007fc2:	b580      	push	{r7, lr}
 8007fc4:	b08a      	sub	sp, #40	; 0x28
 8007fc6:	af02      	add	r7, sp, #8
 8007fc8:	60f8      	str	r0, [r7, #12]
 8007fca:	60b9      	str	r1, [r7, #8]
 8007fcc:	603b      	str	r3, [r7, #0]
 8007fce:	4613      	mov	r3, r2
 8007fd0:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8007fd2:	2300      	movs	r3, #0
 8007fd4:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007fd6:	68fb      	ldr	r3, [r7, #12]
 8007fd8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007fdc:	b2db      	uxtb	r3, r3
 8007fde:	2b20      	cmp	r3, #32
 8007fe0:	d17c      	bne.n	80080dc <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8007fe2:	68bb      	ldr	r3, [r7, #8]
 8007fe4:	2b00      	cmp	r3, #0
 8007fe6:	d002      	beq.n	8007fee <HAL_UART_Transmit+0x2c>
 8007fe8:	88fb      	ldrh	r3, [r7, #6]
 8007fea:	2b00      	cmp	r3, #0
 8007fec:	d101      	bne.n	8007ff2 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8007fee:	2301      	movs	r3, #1
 8007ff0:	e075      	b.n	80080de <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8007ff2:	68fb      	ldr	r3, [r7, #12]
 8007ff4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007ff8:	2b01      	cmp	r3, #1
 8007ffa:	d101      	bne.n	8008000 <HAL_UART_Transmit+0x3e>
 8007ffc:	2302      	movs	r3, #2
 8007ffe:	e06e      	b.n	80080de <HAL_UART_Transmit+0x11c>
 8008000:	68fb      	ldr	r3, [r7, #12]
 8008002:	2201      	movs	r2, #1
 8008004:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008008:	68fb      	ldr	r3, [r7, #12]
 800800a:	2200      	movs	r2, #0
 800800c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800800e:	68fb      	ldr	r3, [r7, #12]
 8008010:	2221      	movs	r2, #33	; 0x21
 8008012:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8008016:	f7fc f819 	bl	800404c <HAL_GetTick>
 800801a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800801c:	68fb      	ldr	r3, [r7, #12]
 800801e:	88fa      	ldrh	r2, [r7, #6]
 8008020:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8008022:	68fb      	ldr	r3, [r7, #12]
 8008024:	88fa      	ldrh	r2, [r7, #6]
 8008026:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008028:	68fb      	ldr	r3, [r7, #12]
 800802a:	689b      	ldr	r3, [r3, #8]
 800802c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008030:	d108      	bne.n	8008044 <HAL_UART_Transmit+0x82>
 8008032:	68fb      	ldr	r3, [r7, #12]
 8008034:	691b      	ldr	r3, [r3, #16]
 8008036:	2b00      	cmp	r3, #0
 8008038:	d104      	bne.n	8008044 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800803a:	2300      	movs	r3, #0
 800803c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800803e:	68bb      	ldr	r3, [r7, #8]
 8008040:	61bb      	str	r3, [r7, #24]
 8008042:	e003      	b.n	800804c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8008044:	68bb      	ldr	r3, [r7, #8]
 8008046:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008048:	2300      	movs	r3, #0
 800804a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800804c:	68fb      	ldr	r3, [r7, #12]
 800804e:	2200      	movs	r2, #0
 8008050:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8008054:	e02a      	b.n	80080ac <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008056:	683b      	ldr	r3, [r7, #0]
 8008058:	9300      	str	r3, [sp, #0]
 800805a:	697b      	ldr	r3, [r7, #20]
 800805c:	2200      	movs	r2, #0
 800805e:	2180      	movs	r1, #128	; 0x80
 8008060:	68f8      	ldr	r0, [r7, #12]
 8008062:	f000 f840 	bl	80080e6 <UART_WaitOnFlagUntilTimeout>
 8008066:	4603      	mov	r3, r0
 8008068:	2b00      	cmp	r3, #0
 800806a:	d001      	beq.n	8008070 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800806c:	2303      	movs	r3, #3
 800806e:	e036      	b.n	80080de <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8008070:	69fb      	ldr	r3, [r7, #28]
 8008072:	2b00      	cmp	r3, #0
 8008074:	d10b      	bne.n	800808e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8008076:	69bb      	ldr	r3, [r7, #24]
 8008078:	881b      	ldrh	r3, [r3, #0]
 800807a:	461a      	mov	r2, r3
 800807c:	68fb      	ldr	r3, [r7, #12]
 800807e:	681b      	ldr	r3, [r3, #0]
 8008080:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008084:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8008086:	69bb      	ldr	r3, [r7, #24]
 8008088:	3302      	adds	r3, #2
 800808a:	61bb      	str	r3, [r7, #24]
 800808c:	e007      	b.n	800809e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800808e:	69fb      	ldr	r3, [r7, #28]
 8008090:	781a      	ldrb	r2, [r3, #0]
 8008092:	68fb      	ldr	r3, [r7, #12]
 8008094:	681b      	ldr	r3, [r3, #0]
 8008096:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8008098:	69fb      	ldr	r3, [r7, #28]
 800809a:	3301      	adds	r3, #1
 800809c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800809e:	68fb      	ldr	r3, [r7, #12]
 80080a0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80080a2:	b29b      	uxth	r3, r3
 80080a4:	3b01      	subs	r3, #1
 80080a6:	b29a      	uxth	r2, r3
 80080a8:	68fb      	ldr	r3, [r7, #12]
 80080aa:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80080ac:	68fb      	ldr	r3, [r7, #12]
 80080ae:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80080b0:	b29b      	uxth	r3, r3
 80080b2:	2b00      	cmp	r3, #0
 80080b4:	d1cf      	bne.n	8008056 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80080b6:	683b      	ldr	r3, [r7, #0]
 80080b8:	9300      	str	r3, [sp, #0]
 80080ba:	697b      	ldr	r3, [r7, #20]
 80080bc:	2200      	movs	r2, #0
 80080be:	2140      	movs	r1, #64	; 0x40
 80080c0:	68f8      	ldr	r0, [r7, #12]
 80080c2:	f000 f810 	bl	80080e6 <UART_WaitOnFlagUntilTimeout>
 80080c6:	4603      	mov	r3, r0
 80080c8:	2b00      	cmp	r3, #0
 80080ca:	d001      	beq.n	80080d0 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80080cc:	2303      	movs	r3, #3
 80080ce:	e006      	b.n	80080de <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80080d0:	68fb      	ldr	r3, [r7, #12]
 80080d2:	2220      	movs	r2, #32
 80080d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80080d8:	2300      	movs	r3, #0
 80080da:	e000      	b.n	80080de <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80080dc:	2302      	movs	r3, #2
  }
}
 80080de:	4618      	mov	r0, r3
 80080e0:	3720      	adds	r7, #32
 80080e2:	46bd      	mov	sp, r7
 80080e4:	bd80      	pop	{r7, pc}

080080e6 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80080e6:	b580      	push	{r7, lr}
 80080e8:	b090      	sub	sp, #64	; 0x40
 80080ea:	af00      	add	r7, sp, #0
 80080ec:	60f8      	str	r0, [r7, #12]
 80080ee:	60b9      	str	r1, [r7, #8]
 80080f0:	603b      	str	r3, [r7, #0]
 80080f2:	4613      	mov	r3, r2
 80080f4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80080f6:	e050      	b.n	800819a <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80080f8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80080fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80080fe:	d04c      	beq.n	800819a <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8008100:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008102:	2b00      	cmp	r3, #0
 8008104:	d007      	beq.n	8008116 <UART_WaitOnFlagUntilTimeout+0x30>
 8008106:	f7fb ffa1 	bl	800404c <HAL_GetTick>
 800810a:	4602      	mov	r2, r0
 800810c:	683b      	ldr	r3, [r7, #0]
 800810e:	1ad3      	subs	r3, r2, r3
 8008110:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008112:	429a      	cmp	r2, r3
 8008114:	d241      	bcs.n	800819a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008116:	68fb      	ldr	r3, [r7, #12]
 8008118:	681b      	ldr	r3, [r3, #0]
 800811a:	330c      	adds	r3, #12
 800811c:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800811e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008120:	e853 3f00 	ldrex	r3, [r3]
 8008124:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008126:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008128:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800812c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800812e:	68fb      	ldr	r3, [r7, #12]
 8008130:	681b      	ldr	r3, [r3, #0]
 8008132:	330c      	adds	r3, #12
 8008134:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8008136:	637a      	str	r2, [r7, #52]	; 0x34
 8008138:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800813a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800813c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800813e:	e841 2300 	strex	r3, r2, [r1]
 8008142:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8008144:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008146:	2b00      	cmp	r3, #0
 8008148:	d1e5      	bne.n	8008116 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800814a:	68fb      	ldr	r3, [r7, #12]
 800814c:	681b      	ldr	r3, [r3, #0]
 800814e:	3314      	adds	r3, #20
 8008150:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008152:	697b      	ldr	r3, [r7, #20]
 8008154:	e853 3f00 	ldrex	r3, [r3]
 8008158:	613b      	str	r3, [r7, #16]
   return(result);
 800815a:	693b      	ldr	r3, [r7, #16]
 800815c:	f023 0301 	bic.w	r3, r3, #1
 8008160:	63bb      	str	r3, [r7, #56]	; 0x38
 8008162:	68fb      	ldr	r3, [r7, #12]
 8008164:	681b      	ldr	r3, [r3, #0]
 8008166:	3314      	adds	r3, #20
 8008168:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800816a:	623a      	str	r2, [r7, #32]
 800816c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800816e:	69f9      	ldr	r1, [r7, #28]
 8008170:	6a3a      	ldr	r2, [r7, #32]
 8008172:	e841 2300 	strex	r3, r2, [r1]
 8008176:	61bb      	str	r3, [r7, #24]
   return(result);
 8008178:	69bb      	ldr	r3, [r7, #24]
 800817a:	2b00      	cmp	r3, #0
 800817c:	d1e5      	bne.n	800814a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800817e:	68fb      	ldr	r3, [r7, #12]
 8008180:	2220      	movs	r2, #32
 8008182:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8008186:	68fb      	ldr	r3, [r7, #12]
 8008188:	2220      	movs	r2, #32
 800818a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800818e:	68fb      	ldr	r3, [r7, #12]
 8008190:	2200      	movs	r2, #0
 8008192:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8008196:	2303      	movs	r3, #3
 8008198:	e00f      	b.n	80081ba <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800819a:	68fb      	ldr	r3, [r7, #12]
 800819c:	681b      	ldr	r3, [r3, #0]
 800819e:	681a      	ldr	r2, [r3, #0]
 80081a0:	68bb      	ldr	r3, [r7, #8]
 80081a2:	4013      	ands	r3, r2
 80081a4:	68ba      	ldr	r2, [r7, #8]
 80081a6:	429a      	cmp	r2, r3
 80081a8:	bf0c      	ite	eq
 80081aa:	2301      	moveq	r3, #1
 80081ac:	2300      	movne	r3, #0
 80081ae:	b2db      	uxtb	r3, r3
 80081b0:	461a      	mov	r2, r3
 80081b2:	79fb      	ldrb	r3, [r7, #7]
 80081b4:	429a      	cmp	r2, r3
 80081b6:	d09f      	beq.n	80080f8 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80081b8:	2300      	movs	r3, #0
}
 80081ba:	4618      	mov	r0, r3
 80081bc:	3740      	adds	r7, #64	; 0x40
 80081be:	46bd      	mov	sp, r7
 80081c0:	bd80      	pop	{r7, pc}
	...

080081c4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80081c4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80081c8:	b0c0      	sub	sp, #256	; 0x100
 80081ca:	af00      	add	r7, sp, #0
 80081cc:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80081d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80081d4:	681b      	ldr	r3, [r3, #0]
 80081d6:	691b      	ldr	r3, [r3, #16]
 80081d8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80081dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80081e0:	68d9      	ldr	r1, [r3, #12]
 80081e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80081e6:	681a      	ldr	r2, [r3, #0]
 80081e8:	ea40 0301 	orr.w	r3, r0, r1
 80081ec:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80081ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80081f2:	689a      	ldr	r2, [r3, #8]
 80081f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80081f8:	691b      	ldr	r3, [r3, #16]
 80081fa:	431a      	orrs	r2, r3
 80081fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008200:	695b      	ldr	r3, [r3, #20]
 8008202:	431a      	orrs	r2, r3
 8008204:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008208:	69db      	ldr	r3, [r3, #28]
 800820a:	4313      	orrs	r3, r2
 800820c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8008210:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008214:	681b      	ldr	r3, [r3, #0]
 8008216:	68db      	ldr	r3, [r3, #12]
 8008218:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800821c:	f021 010c 	bic.w	r1, r1, #12
 8008220:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008224:	681a      	ldr	r2, [r3, #0]
 8008226:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800822a:	430b      	orrs	r3, r1
 800822c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800822e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008232:	681b      	ldr	r3, [r3, #0]
 8008234:	695b      	ldr	r3, [r3, #20]
 8008236:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800823a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800823e:	6999      	ldr	r1, [r3, #24]
 8008240:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008244:	681a      	ldr	r2, [r3, #0]
 8008246:	ea40 0301 	orr.w	r3, r0, r1
 800824a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800824c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008250:	681a      	ldr	r2, [r3, #0]
 8008252:	4b8f      	ldr	r3, [pc, #572]	; (8008490 <UART_SetConfig+0x2cc>)
 8008254:	429a      	cmp	r2, r3
 8008256:	d005      	beq.n	8008264 <UART_SetConfig+0xa0>
 8008258:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800825c:	681a      	ldr	r2, [r3, #0]
 800825e:	4b8d      	ldr	r3, [pc, #564]	; (8008494 <UART_SetConfig+0x2d0>)
 8008260:	429a      	cmp	r2, r3
 8008262:	d104      	bne.n	800826e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8008264:	f7fd faa4 	bl	80057b0 <HAL_RCC_GetPCLK2Freq>
 8008268:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800826c:	e003      	b.n	8008276 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800826e:	f7fd fa8b 	bl	8005788 <HAL_RCC_GetPCLK1Freq>
 8008272:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008276:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800827a:	69db      	ldr	r3, [r3, #28]
 800827c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008280:	f040 810c 	bne.w	800849c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8008284:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008288:	2200      	movs	r2, #0
 800828a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800828e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8008292:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8008296:	4622      	mov	r2, r4
 8008298:	462b      	mov	r3, r5
 800829a:	1891      	adds	r1, r2, r2
 800829c:	65b9      	str	r1, [r7, #88]	; 0x58
 800829e:	415b      	adcs	r3, r3
 80082a0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80082a2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80082a6:	4621      	mov	r1, r4
 80082a8:	eb12 0801 	adds.w	r8, r2, r1
 80082ac:	4629      	mov	r1, r5
 80082ae:	eb43 0901 	adc.w	r9, r3, r1
 80082b2:	f04f 0200 	mov.w	r2, #0
 80082b6:	f04f 0300 	mov.w	r3, #0
 80082ba:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80082be:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80082c2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80082c6:	4690      	mov	r8, r2
 80082c8:	4699      	mov	r9, r3
 80082ca:	4623      	mov	r3, r4
 80082cc:	eb18 0303 	adds.w	r3, r8, r3
 80082d0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80082d4:	462b      	mov	r3, r5
 80082d6:	eb49 0303 	adc.w	r3, r9, r3
 80082da:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80082de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80082e2:	685b      	ldr	r3, [r3, #4]
 80082e4:	2200      	movs	r2, #0
 80082e6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80082ea:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80082ee:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80082f2:	460b      	mov	r3, r1
 80082f4:	18db      	adds	r3, r3, r3
 80082f6:	653b      	str	r3, [r7, #80]	; 0x50
 80082f8:	4613      	mov	r3, r2
 80082fa:	eb42 0303 	adc.w	r3, r2, r3
 80082fe:	657b      	str	r3, [r7, #84]	; 0x54
 8008300:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8008304:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8008308:	f7f8 fcf6 	bl	8000cf8 <__aeabi_uldivmod>
 800830c:	4602      	mov	r2, r0
 800830e:	460b      	mov	r3, r1
 8008310:	4b61      	ldr	r3, [pc, #388]	; (8008498 <UART_SetConfig+0x2d4>)
 8008312:	fba3 2302 	umull	r2, r3, r3, r2
 8008316:	095b      	lsrs	r3, r3, #5
 8008318:	011c      	lsls	r4, r3, #4
 800831a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800831e:	2200      	movs	r2, #0
 8008320:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8008324:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8008328:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800832c:	4642      	mov	r2, r8
 800832e:	464b      	mov	r3, r9
 8008330:	1891      	adds	r1, r2, r2
 8008332:	64b9      	str	r1, [r7, #72]	; 0x48
 8008334:	415b      	adcs	r3, r3
 8008336:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008338:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800833c:	4641      	mov	r1, r8
 800833e:	eb12 0a01 	adds.w	sl, r2, r1
 8008342:	4649      	mov	r1, r9
 8008344:	eb43 0b01 	adc.w	fp, r3, r1
 8008348:	f04f 0200 	mov.w	r2, #0
 800834c:	f04f 0300 	mov.w	r3, #0
 8008350:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8008354:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8008358:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800835c:	4692      	mov	sl, r2
 800835e:	469b      	mov	fp, r3
 8008360:	4643      	mov	r3, r8
 8008362:	eb1a 0303 	adds.w	r3, sl, r3
 8008366:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800836a:	464b      	mov	r3, r9
 800836c:	eb4b 0303 	adc.w	r3, fp, r3
 8008370:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8008374:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008378:	685b      	ldr	r3, [r3, #4]
 800837a:	2200      	movs	r2, #0
 800837c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8008380:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8008384:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8008388:	460b      	mov	r3, r1
 800838a:	18db      	adds	r3, r3, r3
 800838c:	643b      	str	r3, [r7, #64]	; 0x40
 800838e:	4613      	mov	r3, r2
 8008390:	eb42 0303 	adc.w	r3, r2, r3
 8008394:	647b      	str	r3, [r7, #68]	; 0x44
 8008396:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800839a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800839e:	f7f8 fcab 	bl	8000cf8 <__aeabi_uldivmod>
 80083a2:	4602      	mov	r2, r0
 80083a4:	460b      	mov	r3, r1
 80083a6:	4611      	mov	r1, r2
 80083a8:	4b3b      	ldr	r3, [pc, #236]	; (8008498 <UART_SetConfig+0x2d4>)
 80083aa:	fba3 2301 	umull	r2, r3, r3, r1
 80083ae:	095b      	lsrs	r3, r3, #5
 80083b0:	2264      	movs	r2, #100	; 0x64
 80083b2:	fb02 f303 	mul.w	r3, r2, r3
 80083b6:	1acb      	subs	r3, r1, r3
 80083b8:	00db      	lsls	r3, r3, #3
 80083ba:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80083be:	4b36      	ldr	r3, [pc, #216]	; (8008498 <UART_SetConfig+0x2d4>)
 80083c0:	fba3 2302 	umull	r2, r3, r3, r2
 80083c4:	095b      	lsrs	r3, r3, #5
 80083c6:	005b      	lsls	r3, r3, #1
 80083c8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80083cc:	441c      	add	r4, r3
 80083ce:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80083d2:	2200      	movs	r2, #0
 80083d4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80083d8:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80083dc:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80083e0:	4642      	mov	r2, r8
 80083e2:	464b      	mov	r3, r9
 80083e4:	1891      	adds	r1, r2, r2
 80083e6:	63b9      	str	r1, [r7, #56]	; 0x38
 80083e8:	415b      	adcs	r3, r3
 80083ea:	63fb      	str	r3, [r7, #60]	; 0x3c
 80083ec:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80083f0:	4641      	mov	r1, r8
 80083f2:	1851      	adds	r1, r2, r1
 80083f4:	6339      	str	r1, [r7, #48]	; 0x30
 80083f6:	4649      	mov	r1, r9
 80083f8:	414b      	adcs	r3, r1
 80083fa:	637b      	str	r3, [r7, #52]	; 0x34
 80083fc:	f04f 0200 	mov.w	r2, #0
 8008400:	f04f 0300 	mov.w	r3, #0
 8008404:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8008408:	4659      	mov	r1, fp
 800840a:	00cb      	lsls	r3, r1, #3
 800840c:	4651      	mov	r1, sl
 800840e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008412:	4651      	mov	r1, sl
 8008414:	00ca      	lsls	r2, r1, #3
 8008416:	4610      	mov	r0, r2
 8008418:	4619      	mov	r1, r3
 800841a:	4603      	mov	r3, r0
 800841c:	4642      	mov	r2, r8
 800841e:	189b      	adds	r3, r3, r2
 8008420:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008424:	464b      	mov	r3, r9
 8008426:	460a      	mov	r2, r1
 8008428:	eb42 0303 	adc.w	r3, r2, r3
 800842c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008430:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008434:	685b      	ldr	r3, [r3, #4]
 8008436:	2200      	movs	r2, #0
 8008438:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800843c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8008440:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8008444:	460b      	mov	r3, r1
 8008446:	18db      	adds	r3, r3, r3
 8008448:	62bb      	str	r3, [r7, #40]	; 0x28
 800844a:	4613      	mov	r3, r2
 800844c:	eb42 0303 	adc.w	r3, r2, r3
 8008450:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008452:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8008456:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800845a:	f7f8 fc4d 	bl	8000cf8 <__aeabi_uldivmod>
 800845e:	4602      	mov	r2, r0
 8008460:	460b      	mov	r3, r1
 8008462:	4b0d      	ldr	r3, [pc, #52]	; (8008498 <UART_SetConfig+0x2d4>)
 8008464:	fba3 1302 	umull	r1, r3, r3, r2
 8008468:	095b      	lsrs	r3, r3, #5
 800846a:	2164      	movs	r1, #100	; 0x64
 800846c:	fb01 f303 	mul.w	r3, r1, r3
 8008470:	1ad3      	subs	r3, r2, r3
 8008472:	00db      	lsls	r3, r3, #3
 8008474:	3332      	adds	r3, #50	; 0x32
 8008476:	4a08      	ldr	r2, [pc, #32]	; (8008498 <UART_SetConfig+0x2d4>)
 8008478:	fba2 2303 	umull	r2, r3, r2, r3
 800847c:	095b      	lsrs	r3, r3, #5
 800847e:	f003 0207 	and.w	r2, r3, #7
 8008482:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008486:	681b      	ldr	r3, [r3, #0]
 8008488:	4422      	add	r2, r4
 800848a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800848c:	e105      	b.n	800869a <UART_SetConfig+0x4d6>
 800848e:	bf00      	nop
 8008490:	40011000 	.word	0x40011000
 8008494:	40011400 	.word	0x40011400
 8008498:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800849c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80084a0:	2200      	movs	r2, #0
 80084a2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80084a6:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80084aa:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80084ae:	4642      	mov	r2, r8
 80084b0:	464b      	mov	r3, r9
 80084b2:	1891      	adds	r1, r2, r2
 80084b4:	6239      	str	r1, [r7, #32]
 80084b6:	415b      	adcs	r3, r3
 80084b8:	627b      	str	r3, [r7, #36]	; 0x24
 80084ba:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80084be:	4641      	mov	r1, r8
 80084c0:	1854      	adds	r4, r2, r1
 80084c2:	4649      	mov	r1, r9
 80084c4:	eb43 0501 	adc.w	r5, r3, r1
 80084c8:	f04f 0200 	mov.w	r2, #0
 80084cc:	f04f 0300 	mov.w	r3, #0
 80084d0:	00eb      	lsls	r3, r5, #3
 80084d2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80084d6:	00e2      	lsls	r2, r4, #3
 80084d8:	4614      	mov	r4, r2
 80084da:	461d      	mov	r5, r3
 80084dc:	4643      	mov	r3, r8
 80084de:	18e3      	adds	r3, r4, r3
 80084e0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80084e4:	464b      	mov	r3, r9
 80084e6:	eb45 0303 	adc.w	r3, r5, r3
 80084ea:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80084ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80084f2:	685b      	ldr	r3, [r3, #4]
 80084f4:	2200      	movs	r2, #0
 80084f6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80084fa:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80084fe:	f04f 0200 	mov.w	r2, #0
 8008502:	f04f 0300 	mov.w	r3, #0
 8008506:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800850a:	4629      	mov	r1, r5
 800850c:	008b      	lsls	r3, r1, #2
 800850e:	4621      	mov	r1, r4
 8008510:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008514:	4621      	mov	r1, r4
 8008516:	008a      	lsls	r2, r1, #2
 8008518:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800851c:	f7f8 fbec 	bl	8000cf8 <__aeabi_uldivmod>
 8008520:	4602      	mov	r2, r0
 8008522:	460b      	mov	r3, r1
 8008524:	4b60      	ldr	r3, [pc, #384]	; (80086a8 <UART_SetConfig+0x4e4>)
 8008526:	fba3 2302 	umull	r2, r3, r3, r2
 800852a:	095b      	lsrs	r3, r3, #5
 800852c:	011c      	lsls	r4, r3, #4
 800852e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008532:	2200      	movs	r2, #0
 8008534:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8008538:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800853c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8008540:	4642      	mov	r2, r8
 8008542:	464b      	mov	r3, r9
 8008544:	1891      	adds	r1, r2, r2
 8008546:	61b9      	str	r1, [r7, #24]
 8008548:	415b      	adcs	r3, r3
 800854a:	61fb      	str	r3, [r7, #28]
 800854c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008550:	4641      	mov	r1, r8
 8008552:	1851      	adds	r1, r2, r1
 8008554:	6139      	str	r1, [r7, #16]
 8008556:	4649      	mov	r1, r9
 8008558:	414b      	adcs	r3, r1
 800855a:	617b      	str	r3, [r7, #20]
 800855c:	f04f 0200 	mov.w	r2, #0
 8008560:	f04f 0300 	mov.w	r3, #0
 8008564:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8008568:	4659      	mov	r1, fp
 800856a:	00cb      	lsls	r3, r1, #3
 800856c:	4651      	mov	r1, sl
 800856e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008572:	4651      	mov	r1, sl
 8008574:	00ca      	lsls	r2, r1, #3
 8008576:	4610      	mov	r0, r2
 8008578:	4619      	mov	r1, r3
 800857a:	4603      	mov	r3, r0
 800857c:	4642      	mov	r2, r8
 800857e:	189b      	adds	r3, r3, r2
 8008580:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8008584:	464b      	mov	r3, r9
 8008586:	460a      	mov	r2, r1
 8008588:	eb42 0303 	adc.w	r3, r2, r3
 800858c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8008590:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008594:	685b      	ldr	r3, [r3, #4]
 8008596:	2200      	movs	r2, #0
 8008598:	67bb      	str	r3, [r7, #120]	; 0x78
 800859a:	67fa      	str	r2, [r7, #124]	; 0x7c
 800859c:	f04f 0200 	mov.w	r2, #0
 80085a0:	f04f 0300 	mov.w	r3, #0
 80085a4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80085a8:	4649      	mov	r1, r9
 80085aa:	008b      	lsls	r3, r1, #2
 80085ac:	4641      	mov	r1, r8
 80085ae:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80085b2:	4641      	mov	r1, r8
 80085b4:	008a      	lsls	r2, r1, #2
 80085b6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80085ba:	f7f8 fb9d 	bl	8000cf8 <__aeabi_uldivmod>
 80085be:	4602      	mov	r2, r0
 80085c0:	460b      	mov	r3, r1
 80085c2:	4b39      	ldr	r3, [pc, #228]	; (80086a8 <UART_SetConfig+0x4e4>)
 80085c4:	fba3 1302 	umull	r1, r3, r3, r2
 80085c8:	095b      	lsrs	r3, r3, #5
 80085ca:	2164      	movs	r1, #100	; 0x64
 80085cc:	fb01 f303 	mul.w	r3, r1, r3
 80085d0:	1ad3      	subs	r3, r2, r3
 80085d2:	011b      	lsls	r3, r3, #4
 80085d4:	3332      	adds	r3, #50	; 0x32
 80085d6:	4a34      	ldr	r2, [pc, #208]	; (80086a8 <UART_SetConfig+0x4e4>)
 80085d8:	fba2 2303 	umull	r2, r3, r2, r3
 80085dc:	095b      	lsrs	r3, r3, #5
 80085de:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80085e2:	441c      	add	r4, r3
 80085e4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80085e8:	2200      	movs	r2, #0
 80085ea:	673b      	str	r3, [r7, #112]	; 0x70
 80085ec:	677a      	str	r2, [r7, #116]	; 0x74
 80085ee:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80085f2:	4642      	mov	r2, r8
 80085f4:	464b      	mov	r3, r9
 80085f6:	1891      	adds	r1, r2, r2
 80085f8:	60b9      	str	r1, [r7, #8]
 80085fa:	415b      	adcs	r3, r3
 80085fc:	60fb      	str	r3, [r7, #12]
 80085fe:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8008602:	4641      	mov	r1, r8
 8008604:	1851      	adds	r1, r2, r1
 8008606:	6039      	str	r1, [r7, #0]
 8008608:	4649      	mov	r1, r9
 800860a:	414b      	adcs	r3, r1
 800860c:	607b      	str	r3, [r7, #4]
 800860e:	f04f 0200 	mov.w	r2, #0
 8008612:	f04f 0300 	mov.w	r3, #0
 8008616:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800861a:	4659      	mov	r1, fp
 800861c:	00cb      	lsls	r3, r1, #3
 800861e:	4651      	mov	r1, sl
 8008620:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008624:	4651      	mov	r1, sl
 8008626:	00ca      	lsls	r2, r1, #3
 8008628:	4610      	mov	r0, r2
 800862a:	4619      	mov	r1, r3
 800862c:	4603      	mov	r3, r0
 800862e:	4642      	mov	r2, r8
 8008630:	189b      	adds	r3, r3, r2
 8008632:	66bb      	str	r3, [r7, #104]	; 0x68
 8008634:	464b      	mov	r3, r9
 8008636:	460a      	mov	r2, r1
 8008638:	eb42 0303 	adc.w	r3, r2, r3
 800863c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800863e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008642:	685b      	ldr	r3, [r3, #4]
 8008644:	2200      	movs	r2, #0
 8008646:	663b      	str	r3, [r7, #96]	; 0x60
 8008648:	667a      	str	r2, [r7, #100]	; 0x64
 800864a:	f04f 0200 	mov.w	r2, #0
 800864e:	f04f 0300 	mov.w	r3, #0
 8008652:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8008656:	4649      	mov	r1, r9
 8008658:	008b      	lsls	r3, r1, #2
 800865a:	4641      	mov	r1, r8
 800865c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008660:	4641      	mov	r1, r8
 8008662:	008a      	lsls	r2, r1, #2
 8008664:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8008668:	f7f8 fb46 	bl	8000cf8 <__aeabi_uldivmod>
 800866c:	4602      	mov	r2, r0
 800866e:	460b      	mov	r3, r1
 8008670:	4b0d      	ldr	r3, [pc, #52]	; (80086a8 <UART_SetConfig+0x4e4>)
 8008672:	fba3 1302 	umull	r1, r3, r3, r2
 8008676:	095b      	lsrs	r3, r3, #5
 8008678:	2164      	movs	r1, #100	; 0x64
 800867a:	fb01 f303 	mul.w	r3, r1, r3
 800867e:	1ad3      	subs	r3, r2, r3
 8008680:	011b      	lsls	r3, r3, #4
 8008682:	3332      	adds	r3, #50	; 0x32
 8008684:	4a08      	ldr	r2, [pc, #32]	; (80086a8 <UART_SetConfig+0x4e4>)
 8008686:	fba2 2303 	umull	r2, r3, r2, r3
 800868a:	095b      	lsrs	r3, r3, #5
 800868c:	f003 020f 	and.w	r2, r3, #15
 8008690:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008694:	681b      	ldr	r3, [r3, #0]
 8008696:	4422      	add	r2, r4
 8008698:	609a      	str	r2, [r3, #8]
}
 800869a:	bf00      	nop
 800869c:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80086a0:	46bd      	mov	sp, r7
 80086a2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80086a6:	bf00      	nop
 80086a8:	51eb851f 	.word	0x51eb851f

080086ac <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 80086ac:	b084      	sub	sp, #16
 80086ae:	b480      	push	{r7}
 80086b0:	b085      	sub	sp, #20
 80086b2:	af00      	add	r7, sp, #0
 80086b4:	6078      	str	r0, [r7, #4]
 80086b6:	f107 001c 	add.w	r0, r7, #28
 80086ba:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 80086be:	2300      	movs	r3, #0
 80086c0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 80086c2:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 80086c4:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 80086c6:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 80086c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 80086ca:	431a      	orrs	r2, r3
             Init.BusWide             |\
 80086cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 80086ce:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 80086d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 80086d2:	431a      	orrs	r2, r3
             Init.ClockDiv
 80086d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 80086d6:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 80086d8:	68fa      	ldr	r2, [r7, #12]
 80086da:	4313      	orrs	r3, r2
 80086dc:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	685b      	ldr	r3, [r3, #4]
 80086e2:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 80086e6:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80086ea:	68fa      	ldr	r2, [r7, #12]
 80086ec:	431a      	orrs	r2, r3
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 80086f2:	2300      	movs	r3, #0
}
 80086f4:	4618      	mov	r0, r3
 80086f6:	3714      	adds	r7, #20
 80086f8:	46bd      	mov	sp, r7
 80086fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086fe:	b004      	add	sp, #16
 8008700:	4770      	bx	lr

08008702 <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 8008702:	b480      	push	{r7}
 8008704:	b083      	sub	sp, #12
 8008706:	af00      	add	r7, sp, #0
 8008708:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 8008710:	4618      	mov	r0, r3
 8008712:	370c      	adds	r7, #12
 8008714:	46bd      	mov	sp, r7
 8008716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800871a:	4770      	bx	lr

0800871c <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 800871c:	b480      	push	{r7}
 800871e:	b083      	sub	sp, #12
 8008720:	af00      	add	r7, sp, #0
 8008722:	6078      	str	r0, [r7, #4]
 8008724:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 8008726:	683b      	ldr	r3, [r7, #0]
 8008728:	681a      	ldr	r2, [r3, #0]
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8008730:	2300      	movs	r3, #0
}
 8008732:	4618      	mov	r0, r3
 8008734:	370c      	adds	r7, #12
 8008736:	46bd      	mov	sp, r7
 8008738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800873c:	4770      	bx	lr

0800873e <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 800873e:	b480      	push	{r7}
 8008740:	b083      	sub	sp, #12
 8008742:	af00      	add	r7, sp, #0
 8008744:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	2203      	movs	r2, #3
 800874a:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 800874c:	2300      	movs	r3, #0
}
 800874e:	4618      	mov	r0, r3
 8008750:	370c      	adds	r7, #12
 8008752:	46bd      	mov	sp, r7
 8008754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008758:	4770      	bx	lr

0800875a <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 800875a:	b480      	push	{r7}
 800875c:	b083      	sub	sp, #12
 800875e:	af00      	add	r7, sp, #0
 8008760:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	681b      	ldr	r3, [r3, #0]
 8008766:	f003 0303 	and.w	r3, r3, #3
}
 800876a:	4618      	mov	r0, r3
 800876c:	370c      	adds	r7, #12
 800876e:	46bd      	mov	sp, r7
 8008770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008774:	4770      	bx	lr

08008776 <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 8008776:	b480      	push	{r7}
 8008778:	b085      	sub	sp, #20
 800877a:	af00      	add	r7, sp, #0
 800877c:	6078      	str	r0, [r7, #4]
 800877e:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8008780:	2300      	movs	r3, #0
 8008782:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 8008784:	683b      	ldr	r3, [r7, #0]
 8008786:	681a      	ldr	r2, [r3, #0]
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800878c:	683b      	ldr	r3, [r7, #0]
 800878e:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 8008790:	683b      	ldr	r3, [r7, #0]
 8008792:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8008794:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 8008796:	683b      	ldr	r3, [r7, #0]
 8008798:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 800879a:	431a      	orrs	r2, r3
                       Command->CPSM);
 800879c:	683b      	ldr	r3, [r7, #0]
 800879e:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 80087a0:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 80087a2:	68fa      	ldr	r2, [r7, #12]
 80087a4:	4313      	orrs	r3, r2
 80087a6:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	68db      	ldr	r3, [r3, #12]
 80087ac:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 80087b0:	f023 030f 	bic.w	r3, r3, #15
 80087b4:	68fa      	ldr	r2, [r7, #12]
 80087b6:	431a      	orrs	r2, r3
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 80087bc:	2300      	movs	r3, #0
}
 80087be:	4618      	mov	r0, r3
 80087c0:	3714      	adds	r7, #20
 80087c2:	46bd      	mov	sp, r7
 80087c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087c8:	4770      	bx	lr

080087ca <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 80087ca:	b480      	push	{r7}
 80087cc:	b083      	sub	sp, #12
 80087ce:	af00      	add	r7, sp, #0
 80087d0:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	691b      	ldr	r3, [r3, #16]
 80087d6:	b2db      	uxtb	r3, r3
}
 80087d8:	4618      	mov	r0, r3
 80087da:	370c      	adds	r7, #12
 80087dc:	46bd      	mov	sp, r7
 80087de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087e2:	4770      	bx	lr

080087e4 <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 80087e4:	b480      	push	{r7}
 80087e6:	b085      	sub	sp, #20
 80087e8:	af00      	add	r7, sp, #0
 80087ea:	6078      	str	r0, [r7, #4]
 80087ec:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	3314      	adds	r3, #20
 80087f2:	461a      	mov	r2, r3
 80087f4:	683b      	ldr	r3, [r7, #0]
 80087f6:	4413      	add	r3, r2
 80087f8:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 80087fa:	68fb      	ldr	r3, [r7, #12]
 80087fc:	681b      	ldr	r3, [r3, #0]
}  
 80087fe:	4618      	mov	r0, r3
 8008800:	3714      	adds	r7, #20
 8008802:	46bd      	mov	sp, r7
 8008804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008808:	4770      	bx	lr

0800880a <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 800880a:	b480      	push	{r7}
 800880c:	b085      	sub	sp, #20
 800880e:	af00      	add	r7, sp, #0
 8008810:	6078      	str	r0, [r7, #4]
 8008812:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8008814:	2300      	movs	r3, #0
 8008816:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 8008818:	683b      	ldr	r3, [r7, #0]
 800881a:	681a      	ldr	r2, [r3, #0]
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 8008820:	683b      	ldr	r3, [r7, #0]
 8008822:	685a      	ldr	r2, [r3, #4]
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8008828:	683b      	ldr	r3, [r7, #0]
 800882a:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 800882c:	683b      	ldr	r3, [r7, #0]
 800882e:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8008830:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 8008832:	683b      	ldr	r3, [r7, #0]
 8008834:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 8008836:	431a      	orrs	r2, r3
                       Data->DPSM);
 8008838:	683b      	ldr	r3, [r7, #0]
 800883a:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 800883c:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800883e:	68fa      	ldr	r2, [r7, #12]
 8008840:	4313      	orrs	r3, r2
 8008842:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008848:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 800884c:	68fb      	ldr	r3, [r7, #12]
 800884e:	431a      	orrs	r2, r3
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8008854:	2300      	movs	r3, #0

}
 8008856:	4618      	mov	r0, r3
 8008858:	3714      	adds	r7, #20
 800885a:	46bd      	mov	sp, r7
 800885c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008860:	4770      	bx	lr

08008862 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 8008862:	b580      	push	{r7, lr}
 8008864:	b088      	sub	sp, #32
 8008866:	af00      	add	r7, sp, #0
 8008868:	6078      	str	r0, [r7, #4]
 800886a:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800886c:	683b      	ldr	r3, [r7, #0]
 800886e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8008870:	2310      	movs	r3, #16
 8008872:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8008874:	2340      	movs	r3, #64	; 0x40
 8008876:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8008878:	2300      	movs	r3, #0
 800887a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800887c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008880:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8008882:	f107 0308 	add.w	r3, r7, #8
 8008886:	4619      	mov	r1, r3
 8008888:	6878      	ldr	r0, [r7, #4]
 800888a:	f7ff ff74 	bl	8008776 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 800888e:	f241 3288 	movw	r2, #5000	; 0x1388
 8008892:	2110      	movs	r1, #16
 8008894:	6878      	ldr	r0, [r7, #4]
 8008896:	f000 fa19 	bl	8008ccc <SDMMC_GetCmdResp1>
 800889a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800889c:	69fb      	ldr	r3, [r7, #28]
}
 800889e:	4618      	mov	r0, r3
 80088a0:	3720      	adds	r7, #32
 80088a2:	46bd      	mov	sp, r7
 80088a4:	bd80      	pop	{r7, pc}

080088a6 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 80088a6:	b580      	push	{r7, lr}
 80088a8:	b088      	sub	sp, #32
 80088aa:	af00      	add	r7, sp, #0
 80088ac:	6078      	str	r0, [r7, #4]
 80088ae:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 80088b0:	683b      	ldr	r3, [r7, #0]
 80088b2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 80088b4:	2311      	movs	r3, #17
 80088b6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80088b8:	2340      	movs	r3, #64	; 0x40
 80088ba:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80088bc:	2300      	movs	r3, #0
 80088be:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80088c0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80088c4:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80088c6:	f107 0308 	add.w	r3, r7, #8
 80088ca:	4619      	mov	r1, r3
 80088cc:	6878      	ldr	r0, [r7, #4]
 80088ce:	f7ff ff52 	bl	8008776 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 80088d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80088d6:	2111      	movs	r1, #17
 80088d8:	6878      	ldr	r0, [r7, #4]
 80088da:	f000 f9f7 	bl	8008ccc <SDMMC_GetCmdResp1>
 80088de:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80088e0:	69fb      	ldr	r3, [r7, #28]
}
 80088e2:	4618      	mov	r0, r3
 80088e4:	3720      	adds	r7, #32
 80088e6:	46bd      	mov	sp, r7
 80088e8:	bd80      	pop	{r7, pc}

080088ea <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 80088ea:	b580      	push	{r7, lr}
 80088ec:	b088      	sub	sp, #32
 80088ee:	af00      	add	r7, sp, #0
 80088f0:	6078      	str	r0, [r7, #4]
 80088f2:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 80088f4:	683b      	ldr	r3, [r7, #0]
 80088f6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 80088f8:	2312      	movs	r3, #18
 80088fa:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80088fc:	2340      	movs	r3, #64	; 0x40
 80088fe:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8008900:	2300      	movs	r3, #0
 8008902:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8008904:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008908:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800890a:	f107 0308 	add.w	r3, r7, #8
 800890e:	4619      	mov	r1, r3
 8008910:	6878      	ldr	r0, [r7, #4]
 8008912:	f7ff ff30 	bl	8008776 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8008916:	f241 3288 	movw	r2, #5000	; 0x1388
 800891a:	2112      	movs	r1, #18
 800891c:	6878      	ldr	r0, [r7, #4]
 800891e:	f000 f9d5 	bl	8008ccc <SDMMC_GetCmdResp1>
 8008922:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008924:	69fb      	ldr	r3, [r7, #28]
}
 8008926:	4618      	mov	r0, r3
 8008928:	3720      	adds	r7, #32
 800892a:	46bd      	mov	sp, r7
 800892c:	bd80      	pop	{r7, pc}

0800892e <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 800892e:	b580      	push	{r7, lr}
 8008930:	b088      	sub	sp, #32
 8008932:	af00      	add	r7, sp, #0
 8008934:	6078      	str	r0, [r7, #4]
 8008936:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8008938:	683b      	ldr	r3, [r7, #0]
 800893a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800893c:	2318      	movs	r3, #24
 800893e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8008940:	2340      	movs	r3, #64	; 0x40
 8008942:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8008944:	2300      	movs	r3, #0
 8008946:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8008948:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800894c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800894e:	f107 0308 	add.w	r3, r7, #8
 8008952:	4619      	mov	r1, r3
 8008954:	6878      	ldr	r0, [r7, #4]
 8008956:	f7ff ff0e 	bl	8008776 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 800895a:	f241 3288 	movw	r2, #5000	; 0x1388
 800895e:	2118      	movs	r1, #24
 8008960:	6878      	ldr	r0, [r7, #4]
 8008962:	f000 f9b3 	bl	8008ccc <SDMMC_GetCmdResp1>
 8008966:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008968:	69fb      	ldr	r3, [r7, #28]
}
 800896a:	4618      	mov	r0, r3
 800896c:	3720      	adds	r7, #32
 800896e:	46bd      	mov	sp, r7
 8008970:	bd80      	pop	{r7, pc}

08008972 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 8008972:	b580      	push	{r7, lr}
 8008974:	b088      	sub	sp, #32
 8008976:	af00      	add	r7, sp, #0
 8008978:	6078      	str	r0, [r7, #4]
 800897a:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800897c:	683b      	ldr	r3, [r7, #0]
 800897e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 8008980:	2319      	movs	r3, #25
 8008982:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8008984:	2340      	movs	r3, #64	; 0x40
 8008986:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8008988:	2300      	movs	r3, #0
 800898a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800898c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008990:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8008992:	f107 0308 	add.w	r3, r7, #8
 8008996:	4619      	mov	r1, r3
 8008998:	6878      	ldr	r0, [r7, #4]
 800899a:	f7ff feec 	bl	8008776 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 800899e:	f241 3288 	movw	r2, #5000	; 0x1388
 80089a2:	2119      	movs	r1, #25
 80089a4:	6878      	ldr	r0, [r7, #4]
 80089a6:	f000 f991 	bl	8008ccc <SDMMC_GetCmdResp1>
 80089aa:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80089ac:	69fb      	ldr	r3, [r7, #28]
}
 80089ae:	4618      	mov	r0, r3
 80089b0:	3720      	adds	r7, #32
 80089b2:	46bd      	mov	sp, r7
 80089b4:	bd80      	pop	{r7, pc}
	...

080089b8 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 80089b8:	b580      	push	{r7, lr}
 80089ba:	b088      	sub	sp, #32
 80089bc:	af00      	add	r7, sp, #0
 80089be:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 80089c0:	2300      	movs	r3, #0
 80089c2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 80089c4:	230c      	movs	r3, #12
 80089c6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80089c8:	2340      	movs	r3, #64	; 0x40
 80089ca:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80089cc:	2300      	movs	r3, #0
 80089ce:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80089d0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80089d4:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80089d6:	f107 0308 	add.w	r3, r7, #8
 80089da:	4619      	mov	r1, r3
 80089dc:	6878      	ldr	r0, [r7, #4]
 80089de:	f7ff feca 	bl	8008776 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 80089e2:	4a05      	ldr	r2, [pc, #20]	; (80089f8 <SDMMC_CmdStopTransfer+0x40>)
 80089e4:	210c      	movs	r1, #12
 80089e6:	6878      	ldr	r0, [r7, #4]
 80089e8:	f000 f970 	bl	8008ccc <SDMMC_GetCmdResp1>
 80089ec:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80089ee:	69fb      	ldr	r3, [r7, #28]
}
 80089f0:	4618      	mov	r0, r3
 80089f2:	3720      	adds	r7, #32
 80089f4:	46bd      	mov	sp, r7
 80089f6:	bd80      	pop	{r7, pc}
 80089f8:	05f5e100 	.word	0x05f5e100

080089fc <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 80089fc:	b580      	push	{r7, lr}
 80089fe:	b08a      	sub	sp, #40	; 0x28
 8008a00:	af00      	add	r7, sp, #0
 8008a02:	60f8      	str	r0, [r7, #12]
 8008a04:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8008a08:	683b      	ldr	r3, [r7, #0]
 8008a0a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8008a0c:	2307      	movs	r3, #7
 8008a0e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8008a10:	2340      	movs	r3, #64	; 0x40
 8008a12:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8008a14:	2300      	movs	r3, #0
 8008a16:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8008a18:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008a1c:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8008a1e:	f107 0310 	add.w	r3, r7, #16
 8008a22:	4619      	mov	r1, r3
 8008a24:	68f8      	ldr	r0, [r7, #12]
 8008a26:	f7ff fea6 	bl	8008776 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 8008a2a:	f241 3288 	movw	r2, #5000	; 0x1388
 8008a2e:	2107      	movs	r1, #7
 8008a30:	68f8      	ldr	r0, [r7, #12]
 8008a32:	f000 f94b 	bl	8008ccc <SDMMC_GetCmdResp1>
 8008a36:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 8008a38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8008a3a:	4618      	mov	r0, r3
 8008a3c:	3728      	adds	r7, #40	; 0x28
 8008a3e:	46bd      	mov	sp, r7
 8008a40:	bd80      	pop	{r7, pc}

08008a42 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 8008a42:	b580      	push	{r7, lr}
 8008a44:	b088      	sub	sp, #32
 8008a46:	af00      	add	r7, sp, #0
 8008a48:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 8008a4a:	2300      	movs	r3, #0
 8008a4c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8008a4e:	2300      	movs	r3, #0
 8008a50:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 8008a52:	2300      	movs	r3, #0
 8008a54:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8008a56:	2300      	movs	r3, #0
 8008a58:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8008a5a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008a5e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8008a60:	f107 0308 	add.w	r3, r7, #8
 8008a64:	4619      	mov	r1, r3
 8008a66:	6878      	ldr	r0, [r7, #4]
 8008a68:	f7ff fe85 	bl	8008776 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 8008a6c:	6878      	ldr	r0, [r7, #4]
 8008a6e:	f000 fb65 	bl	800913c <SDMMC_GetCmdError>
 8008a72:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008a74:	69fb      	ldr	r3, [r7, #28]
}
 8008a76:	4618      	mov	r0, r3
 8008a78:	3720      	adds	r7, #32
 8008a7a:	46bd      	mov	sp, r7
 8008a7c:	bd80      	pop	{r7, pc}

08008a7e <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 8008a7e:	b580      	push	{r7, lr}
 8008a80:	b088      	sub	sp, #32
 8008a82:	af00      	add	r7, sp, #0
 8008a84:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8008a86:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 8008a8a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8008a8c:	2308      	movs	r3, #8
 8008a8e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8008a90:	2340      	movs	r3, #64	; 0x40
 8008a92:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8008a94:	2300      	movs	r3, #0
 8008a96:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8008a98:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008a9c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8008a9e:	f107 0308 	add.w	r3, r7, #8
 8008aa2:	4619      	mov	r1, r3
 8008aa4:	6878      	ldr	r0, [r7, #4]
 8008aa6:	f7ff fe66 	bl	8008776 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 8008aaa:	6878      	ldr	r0, [r7, #4]
 8008aac:	f000 faf8 	bl	80090a0 <SDMMC_GetCmdResp7>
 8008ab0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008ab2:	69fb      	ldr	r3, [r7, #28]
}
 8008ab4:	4618      	mov	r0, r3
 8008ab6:	3720      	adds	r7, #32
 8008ab8:	46bd      	mov	sp, r7
 8008aba:	bd80      	pop	{r7, pc}

08008abc <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8008abc:	b580      	push	{r7, lr}
 8008abe:	b088      	sub	sp, #32
 8008ac0:	af00      	add	r7, sp, #0
 8008ac2:	6078      	str	r0, [r7, #4]
 8008ac4:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8008ac6:	683b      	ldr	r3, [r7, #0]
 8008ac8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8008aca:	2337      	movs	r3, #55	; 0x37
 8008acc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8008ace:	2340      	movs	r3, #64	; 0x40
 8008ad0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8008ad2:	2300      	movs	r3, #0
 8008ad4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8008ad6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008ada:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8008adc:	f107 0308 	add.w	r3, r7, #8
 8008ae0:	4619      	mov	r1, r3
 8008ae2:	6878      	ldr	r0, [r7, #4]
 8008ae4:	f7ff fe47 	bl	8008776 <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 8008ae8:	f241 3288 	movw	r2, #5000	; 0x1388
 8008aec:	2137      	movs	r1, #55	; 0x37
 8008aee:	6878      	ldr	r0, [r7, #4]
 8008af0:	f000 f8ec 	bl	8008ccc <SDMMC_GetCmdResp1>
 8008af4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008af6:	69fb      	ldr	r3, [r7, #28]
}
 8008af8:	4618      	mov	r0, r3
 8008afa:	3720      	adds	r7, #32
 8008afc:	46bd      	mov	sp, r7
 8008afe:	bd80      	pop	{r7, pc}

08008b00 <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8008b00:	b580      	push	{r7, lr}
 8008b02:	b088      	sub	sp, #32
 8008b04:	af00      	add	r7, sp, #0
 8008b06:	6078      	str	r0, [r7, #4]
 8008b08:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 8008b0a:	683b      	ldr	r3, [r7, #0]
 8008b0c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008b10:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008b14:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8008b16:	2329      	movs	r3, #41	; 0x29
 8008b18:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8008b1a:	2340      	movs	r3, #64	; 0x40
 8008b1c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8008b1e:	2300      	movs	r3, #0
 8008b20:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8008b22:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008b26:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8008b28:	f107 0308 	add.w	r3, r7, #8
 8008b2c:	4619      	mov	r1, r3
 8008b2e:	6878      	ldr	r0, [r7, #4]
 8008b30:	f7ff fe21 	bl	8008776 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 8008b34:	6878      	ldr	r0, [r7, #4]
 8008b36:	f000 f9ff 	bl	8008f38 <SDMMC_GetCmdResp3>
 8008b3a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008b3c:	69fb      	ldr	r3, [r7, #28]
}
 8008b3e:	4618      	mov	r0, r3
 8008b40:	3720      	adds	r7, #32
 8008b42:	46bd      	mov	sp, r7
 8008b44:	bd80      	pop	{r7, pc}

08008b46 <SDMMC_CmdBusWidth>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDIO_TypeDef *SDIOx, uint32_t BusWidth)
{
 8008b46:	b580      	push	{r7, lr}
 8008b48:	b088      	sub	sp, #32
 8008b4a:	af00      	add	r7, sp, #0
 8008b4c:	6078      	str	r0, [r7, #4]
 8008b4e:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 8008b50:	683b      	ldr	r3, [r7, #0]
 8008b52:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 8008b54:	2306      	movs	r3, #6
 8008b56:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8008b58:	2340      	movs	r3, #64	; 0x40
 8008b5a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8008b5c:	2300      	movs	r3, #0
 8008b5e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8008b60:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008b64:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8008b66:	f107 0308 	add.w	r3, r7, #8
 8008b6a:	4619      	mov	r1, r3
 8008b6c:	6878      	ldr	r0, [r7, #4]
 8008b6e:	f7ff fe02 	bl	8008776 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDIO_CMDTIMEOUT);
 8008b72:	f241 3288 	movw	r2, #5000	; 0x1388
 8008b76:	2106      	movs	r1, #6
 8008b78:	6878      	ldr	r0, [r7, #4]
 8008b7a:	f000 f8a7 	bl	8008ccc <SDMMC_GetCmdResp1>
 8008b7e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008b80:	69fb      	ldr	r3, [r7, #28]
}
 8008b82:	4618      	mov	r0, r3
 8008b84:	3720      	adds	r7, #32
 8008b86:	46bd      	mov	sp, r7
 8008b88:	bd80      	pop	{r7, pc}

08008b8a <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDIO_TypeDef *SDIOx)
{
 8008b8a:	b580      	push	{r7, lr}
 8008b8c:	b088      	sub	sp, #32
 8008b8e:	af00      	add	r7, sp, #0
 8008b90:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 8008b92:	2300      	movs	r3, #0
 8008b94:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 8008b96:	2333      	movs	r3, #51	; 0x33
 8008b98:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8008b9a:	2340      	movs	r3, #64	; 0x40
 8008b9c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8008b9e:	2300      	movs	r3, #0
 8008ba0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8008ba2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008ba6:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8008ba8:	f107 0308 	add.w	r3, r7, #8
 8008bac:	4619      	mov	r1, r3
 8008bae:	6878      	ldr	r0, [r7, #4]
 8008bb0:	f7ff fde1 	bl	8008776 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SD_APP_SEND_SCR, SDIO_CMDTIMEOUT);
 8008bb4:	f241 3288 	movw	r2, #5000	; 0x1388
 8008bb8:	2133      	movs	r1, #51	; 0x33
 8008bba:	6878      	ldr	r0, [r7, #4]
 8008bbc:	f000 f886 	bl	8008ccc <SDMMC_GetCmdResp1>
 8008bc0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008bc2:	69fb      	ldr	r3, [r7, #28]
}
 8008bc4:	4618      	mov	r0, r3
 8008bc6:	3720      	adds	r7, #32
 8008bc8:	46bd      	mov	sp, r7
 8008bca:	bd80      	pop	{r7, pc}

08008bcc <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 8008bcc:	b580      	push	{r7, lr}
 8008bce:	b088      	sub	sp, #32
 8008bd0:	af00      	add	r7, sp, #0
 8008bd2:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 8008bd4:	2300      	movs	r3, #0
 8008bd6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8008bd8:	2302      	movs	r3, #2
 8008bda:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8008bdc:	23c0      	movs	r3, #192	; 0xc0
 8008bde:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8008be0:	2300      	movs	r3, #0
 8008be2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8008be4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008be8:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8008bea:	f107 0308 	add.w	r3, r7, #8
 8008bee:	4619      	mov	r1, r3
 8008bf0:	6878      	ldr	r0, [r7, #4]
 8008bf2:	f7ff fdc0 	bl	8008776 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8008bf6:	6878      	ldr	r0, [r7, #4]
 8008bf8:	f000 f956 	bl	8008ea8 <SDMMC_GetCmdResp2>
 8008bfc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008bfe:	69fb      	ldr	r3, [r7, #28]
}
 8008c00:	4618      	mov	r0, r3
 8008c02:	3720      	adds	r7, #32
 8008c04:	46bd      	mov	sp, r7
 8008c06:	bd80      	pop	{r7, pc}

08008c08 <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8008c08:	b580      	push	{r7, lr}
 8008c0a:	b088      	sub	sp, #32
 8008c0c:	af00      	add	r7, sp, #0
 8008c0e:	6078      	str	r0, [r7, #4]
 8008c10:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 8008c12:	683b      	ldr	r3, [r7, #0]
 8008c14:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8008c16:	2309      	movs	r3, #9
 8008c18:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8008c1a:	23c0      	movs	r3, #192	; 0xc0
 8008c1c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8008c1e:	2300      	movs	r3, #0
 8008c20:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8008c22:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008c26:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8008c28:	f107 0308 	add.w	r3, r7, #8
 8008c2c:	4619      	mov	r1, r3
 8008c2e:	6878      	ldr	r0, [r7, #4]
 8008c30:	f7ff fda1 	bl	8008776 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8008c34:	6878      	ldr	r0, [r7, #4]
 8008c36:	f000 f937 	bl	8008ea8 <SDMMC_GetCmdResp2>
 8008c3a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008c3c:	69fb      	ldr	r3, [r7, #28]
}
 8008c3e:	4618      	mov	r0, r3
 8008c40:	3720      	adds	r7, #32
 8008c42:	46bd      	mov	sp, r7
 8008c44:	bd80      	pop	{r7, pc}

08008c46 <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 8008c46:	b580      	push	{r7, lr}
 8008c48:	b088      	sub	sp, #32
 8008c4a:	af00      	add	r7, sp, #0
 8008c4c:	6078      	str	r0, [r7, #4]
 8008c4e:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 8008c50:	2300      	movs	r3, #0
 8008c52:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8008c54:	2303      	movs	r3, #3
 8008c56:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8008c58:	2340      	movs	r3, #64	; 0x40
 8008c5a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8008c5c:	2300      	movs	r3, #0
 8008c5e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8008c60:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008c64:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8008c66:	f107 0308 	add.w	r3, r7, #8
 8008c6a:	4619      	mov	r1, r3
 8008c6c:	6878      	ldr	r0, [r7, #4]
 8008c6e:	f7ff fd82 	bl	8008776 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8008c72:	683a      	ldr	r2, [r7, #0]
 8008c74:	2103      	movs	r1, #3
 8008c76:	6878      	ldr	r0, [r7, #4]
 8008c78:	f000 f99c 	bl	8008fb4 <SDMMC_GetCmdResp6>
 8008c7c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008c7e:	69fb      	ldr	r3, [r7, #28]
}
 8008c80:	4618      	mov	r0, r3
 8008c82:	3720      	adds	r7, #32
 8008c84:	46bd      	mov	sp, r7
 8008c86:	bd80      	pop	{r7, pc}

08008c88 <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8008c88:	b580      	push	{r7, lr}
 8008c8a:	b088      	sub	sp, #32
 8008c8c:	af00      	add	r7, sp, #0
 8008c8e:	6078      	str	r0, [r7, #4]
 8008c90:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 8008c92:	683b      	ldr	r3, [r7, #0]
 8008c94:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8008c96:	230d      	movs	r3, #13
 8008c98:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8008c9a:	2340      	movs	r3, #64	; 0x40
 8008c9c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8008c9e:	2300      	movs	r3, #0
 8008ca0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8008ca2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008ca6:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8008ca8:	f107 0308 	add.w	r3, r7, #8
 8008cac:	4619      	mov	r1, r3
 8008cae:	6878      	ldr	r0, [r7, #4]
 8008cb0:	f7ff fd61 	bl	8008776 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 8008cb4:	f241 3288 	movw	r2, #5000	; 0x1388
 8008cb8:	210d      	movs	r1, #13
 8008cba:	6878      	ldr	r0, [r7, #4]
 8008cbc:	f000 f806 	bl	8008ccc <SDMMC_GetCmdResp1>
 8008cc0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008cc2:	69fb      	ldr	r3, [r7, #28]
}
 8008cc4:	4618      	mov	r0, r3
 8008cc6:	3720      	adds	r7, #32
 8008cc8:	46bd      	mov	sp, r7
 8008cca:	bd80      	pop	{r7, pc}

08008ccc <SDMMC_GetCmdResp1>:
  * @param  SDIOx Pointer to SDMMC register base
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 8008ccc:	b580      	push	{r7, lr}
 8008cce:	b088      	sub	sp, #32
 8008cd0:	af00      	add	r7, sp, #0
 8008cd2:	60f8      	str	r0, [r7, #12]
 8008cd4:	460b      	mov	r3, r1
 8008cd6:	607a      	str	r2, [r7, #4]
 8008cd8:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8008cda:	4b70      	ldr	r3, [pc, #448]	; (8008e9c <SDMMC_GetCmdResp1+0x1d0>)
 8008cdc:	681b      	ldr	r3, [r3, #0]
 8008cde:	4a70      	ldr	r2, [pc, #448]	; (8008ea0 <SDMMC_GetCmdResp1+0x1d4>)
 8008ce0:	fba2 2303 	umull	r2, r3, r2, r3
 8008ce4:	0a5a      	lsrs	r2, r3, #9
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	fb02 f303 	mul.w	r3, r2, r3
 8008cec:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 8008cee:	69fb      	ldr	r3, [r7, #28]
 8008cf0:	1e5a      	subs	r2, r3, #1
 8008cf2:	61fa      	str	r2, [r7, #28]
 8008cf4:	2b00      	cmp	r3, #0
 8008cf6:	d102      	bne.n	8008cfe <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 8008cf8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8008cfc:	e0c9      	b.n	8008e92 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDIOx->STA;
 8008cfe:	68fb      	ldr	r3, [r7, #12]
 8008d00:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008d02:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8008d04:	69bb      	ldr	r3, [r7, #24]
 8008d06:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8008d0a:	2b00      	cmp	r3, #0
 8008d0c:	d0ef      	beq.n	8008cee <SDMMC_GetCmdResp1+0x22>
 8008d0e:	69bb      	ldr	r3, [r7, #24]
 8008d10:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8008d14:	2b00      	cmp	r3, #0
 8008d16:	d1ea      	bne.n	8008cee <SDMMC_GetCmdResp1+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8008d18:	68fb      	ldr	r3, [r7, #12]
 8008d1a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008d1c:	f003 0304 	and.w	r3, r3, #4
 8008d20:	2b00      	cmp	r3, #0
 8008d22:	d004      	beq.n	8008d2e <SDMMC_GetCmdResp1+0x62>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8008d24:	68fb      	ldr	r3, [r7, #12]
 8008d26:	2204      	movs	r2, #4
 8008d28:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8008d2a:	2304      	movs	r3, #4
 8008d2c:	e0b1      	b.n	8008e92 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8008d2e:	68fb      	ldr	r3, [r7, #12]
 8008d30:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008d32:	f003 0301 	and.w	r3, r3, #1
 8008d36:	2b00      	cmp	r3, #0
 8008d38:	d004      	beq.n	8008d44 <SDMMC_GetCmdResp1+0x78>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8008d3a:	68fb      	ldr	r3, [r7, #12]
 8008d3c:	2201      	movs	r2, #1
 8008d3e:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8008d40:	2301      	movs	r3, #1
 8008d42:	e0a6      	b.n	8008e92 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8008d44:	68fb      	ldr	r3, [r7, #12]
 8008d46:	22c5      	movs	r2, #197	; 0xc5
 8008d48:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8008d4a:	68f8      	ldr	r0, [r7, #12]
 8008d4c:	f7ff fd3d 	bl	80087ca <SDIO_GetCommandResponse>
 8008d50:	4603      	mov	r3, r0
 8008d52:	461a      	mov	r2, r3
 8008d54:	7afb      	ldrb	r3, [r7, #11]
 8008d56:	4293      	cmp	r3, r2
 8008d58:	d001      	beq.n	8008d5e <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8008d5a:	2301      	movs	r3, #1
 8008d5c:	e099      	b.n	8008e92 <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8008d5e:	2100      	movs	r1, #0
 8008d60:	68f8      	ldr	r0, [r7, #12]
 8008d62:	f7ff fd3f 	bl	80087e4 <SDIO_GetResponse>
 8008d66:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8008d68:	697a      	ldr	r2, [r7, #20]
 8008d6a:	4b4e      	ldr	r3, [pc, #312]	; (8008ea4 <SDMMC_GetCmdResp1+0x1d8>)
 8008d6c:	4013      	ands	r3, r2
 8008d6e:	2b00      	cmp	r3, #0
 8008d70:	d101      	bne.n	8008d76 <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 8008d72:	2300      	movs	r3, #0
 8008d74:	e08d      	b.n	8008e92 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8008d76:	697b      	ldr	r3, [r7, #20]
 8008d78:	2b00      	cmp	r3, #0
 8008d7a:	da02      	bge.n	8008d82 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8008d7c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8008d80:	e087      	b.n	8008e92 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8008d82:	697b      	ldr	r3, [r7, #20]
 8008d84:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8008d88:	2b00      	cmp	r3, #0
 8008d8a:	d001      	beq.n	8008d90 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8008d8c:	2340      	movs	r3, #64	; 0x40
 8008d8e:	e080      	b.n	8008e92 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8008d90:	697b      	ldr	r3, [r7, #20]
 8008d92:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008d96:	2b00      	cmp	r3, #0
 8008d98:	d001      	beq.n	8008d9e <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8008d9a:	2380      	movs	r3, #128	; 0x80
 8008d9c:	e079      	b.n	8008e92 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8008d9e:	697b      	ldr	r3, [r7, #20]
 8008da0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008da4:	2b00      	cmp	r3, #0
 8008da6:	d002      	beq.n	8008dae <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8008da8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008dac:	e071      	b.n	8008e92 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8008dae:	697b      	ldr	r3, [r7, #20]
 8008db0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008db4:	2b00      	cmp	r3, #0
 8008db6:	d002      	beq.n	8008dbe <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8008db8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008dbc:	e069      	b.n	8008e92 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8008dbe:	697b      	ldr	r3, [r7, #20]
 8008dc0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8008dc4:	2b00      	cmp	r3, #0
 8008dc6:	d002      	beq.n	8008dce <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8008dc8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008dcc:	e061      	b.n	8008e92 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8008dce:	697b      	ldr	r3, [r7, #20]
 8008dd0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008dd4:	2b00      	cmp	r3, #0
 8008dd6:	d002      	beq.n	8008dde <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8008dd8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8008ddc:	e059      	b.n	8008e92 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8008dde:	697b      	ldr	r3, [r7, #20]
 8008de0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008de4:	2b00      	cmp	r3, #0
 8008de6:	d002      	beq.n	8008dee <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8008de8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008dec:	e051      	b.n	8008e92 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8008dee:	697b      	ldr	r3, [r7, #20]
 8008df0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008df4:	2b00      	cmp	r3, #0
 8008df6:	d002      	beq.n	8008dfe <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8008df8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8008dfc:	e049      	b.n	8008e92 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8008dfe:	697b      	ldr	r3, [r7, #20]
 8008e00:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008e04:	2b00      	cmp	r3, #0
 8008e06:	d002      	beq.n	8008e0e <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8008e08:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8008e0c:	e041      	b.n	8008e92 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8008e0e:	697b      	ldr	r3, [r7, #20]
 8008e10:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008e14:	2b00      	cmp	r3, #0
 8008e16:	d002      	beq.n	8008e1e <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 8008e18:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008e1c:	e039      	b.n	8008e92 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8008e1e:	697b      	ldr	r3, [r7, #20]
 8008e20:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008e24:	2b00      	cmp	r3, #0
 8008e26:	d002      	beq.n	8008e2e <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8008e28:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8008e2c:	e031      	b.n	8008e92 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8008e2e:	697b      	ldr	r3, [r7, #20]
 8008e30:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008e34:	2b00      	cmp	r3, #0
 8008e36:	d002      	beq.n	8008e3e <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8008e38:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8008e3c:	e029      	b.n	8008e92 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8008e3e:	697b      	ldr	r3, [r7, #20]
 8008e40:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008e44:	2b00      	cmp	r3, #0
 8008e46:	d002      	beq.n	8008e4e <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8008e48:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8008e4c:	e021      	b.n	8008e92 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8008e4e:	697b      	ldr	r3, [r7, #20]
 8008e50:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008e54:	2b00      	cmp	r3, #0
 8008e56:	d002      	beq.n	8008e5e <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8008e58:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8008e5c:	e019      	b.n	8008e92 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8008e5e:	697b      	ldr	r3, [r7, #20]
 8008e60:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008e64:	2b00      	cmp	r3, #0
 8008e66:	d002      	beq.n	8008e6e <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8008e68:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8008e6c:	e011      	b.n	8008e92 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8008e6e:	697b      	ldr	r3, [r7, #20]
 8008e70:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008e74:	2b00      	cmp	r3, #0
 8008e76:	d002      	beq.n	8008e7e <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8008e78:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8008e7c:	e009      	b.n	8008e92 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 8008e7e:	697b      	ldr	r3, [r7, #20]
 8008e80:	f003 0308 	and.w	r3, r3, #8
 8008e84:	2b00      	cmp	r3, #0
 8008e86:	d002      	beq.n	8008e8e <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8008e88:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8008e8c:	e001      	b.n	8008e92 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8008e8e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8008e92:	4618      	mov	r0, r3
 8008e94:	3720      	adds	r7, #32
 8008e96:	46bd      	mov	sp, r7
 8008e98:	bd80      	pop	{r7, pc}
 8008e9a:	bf00      	nop
 8008e9c:	20000010 	.word	0x20000010
 8008ea0:	10624dd3 	.word	0x10624dd3
 8008ea4:	fdffe008 	.word	0xfdffe008

08008ea8 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 8008ea8:	b480      	push	{r7}
 8008eaa:	b085      	sub	sp, #20
 8008eac:	af00      	add	r7, sp, #0
 8008eae:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8008eb0:	4b1f      	ldr	r3, [pc, #124]	; (8008f30 <SDMMC_GetCmdResp2+0x88>)
 8008eb2:	681b      	ldr	r3, [r3, #0]
 8008eb4:	4a1f      	ldr	r2, [pc, #124]	; (8008f34 <SDMMC_GetCmdResp2+0x8c>)
 8008eb6:	fba2 2303 	umull	r2, r3, r2, r3
 8008eba:	0a5b      	lsrs	r3, r3, #9
 8008ebc:	f241 3288 	movw	r2, #5000	; 0x1388
 8008ec0:	fb02 f303 	mul.w	r3, r2, r3
 8008ec4:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8008ec6:	68fb      	ldr	r3, [r7, #12]
 8008ec8:	1e5a      	subs	r2, r3, #1
 8008eca:	60fa      	str	r2, [r7, #12]
 8008ecc:	2b00      	cmp	r3, #0
 8008ece:	d102      	bne.n	8008ed6 <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8008ed0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8008ed4:	e026      	b.n	8008f24 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDIOx->STA;
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008eda:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8008edc:	68bb      	ldr	r3, [r7, #8]
 8008ede:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8008ee2:	2b00      	cmp	r3, #0
 8008ee4:	d0ef      	beq.n	8008ec6 <SDMMC_GetCmdResp2+0x1e>
 8008ee6:	68bb      	ldr	r3, [r7, #8]
 8008ee8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8008eec:	2b00      	cmp	r3, #0
 8008eee:	d1ea      	bne.n	8008ec6 <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008ef4:	f003 0304 	and.w	r3, r3, #4
 8008ef8:	2b00      	cmp	r3, #0
 8008efa:	d004      	beq.n	8008f06 <SDMMC_GetCmdResp2+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	2204      	movs	r2, #4
 8008f00:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8008f02:	2304      	movs	r3, #4
 8008f04:	e00e      	b.n	8008f24 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008f0a:	f003 0301 	and.w	r3, r3, #1
 8008f0e:	2b00      	cmp	r3, #0
 8008f10:	d004      	beq.n	8008f1c <SDMMC_GetCmdResp2+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	2201      	movs	r2, #1
 8008f16:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8008f18:	2301      	movs	r3, #1
 8008f1a:	e003      	b.n	8008f24 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	22c5      	movs	r2, #197	; 0xc5
 8008f20:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8008f22:	2300      	movs	r3, #0
}
 8008f24:	4618      	mov	r0, r3
 8008f26:	3714      	adds	r7, #20
 8008f28:	46bd      	mov	sp, r7
 8008f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f2e:	4770      	bx	lr
 8008f30:	20000010 	.word	0x20000010
 8008f34:	10624dd3 	.word	0x10624dd3

08008f38 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 8008f38:	b480      	push	{r7}
 8008f3a:	b085      	sub	sp, #20
 8008f3c:	af00      	add	r7, sp, #0
 8008f3e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8008f40:	4b1a      	ldr	r3, [pc, #104]	; (8008fac <SDMMC_GetCmdResp3+0x74>)
 8008f42:	681b      	ldr	r3, [r3, #0]
 8008f44:	4a1a      	ldr	r2, [pc, #104]	; (8008fb0 <SDMMC_GetCmdResp3+0x78>)
 8008f46:	fba2 2303 	umull	r2, r3, r2, r3
 8008f4a:	0a5b      	lsrs	r3, r3, #9
 8008f4c:	f241 3288 	movw	r2, #5000	; 0x1388
 8008f50:	fb02 f303 	mul.w	r3, r2, r3
 8008f54:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8008f56:	68fb      	ldr	r3, [r7, #12]
 8008f58:	1e5a      	subs	r2, r3, #1
 8008f5a:	60fa      	str	r2, [r7, #12]
 8008f5c:	2b00      	cmp	r3, #0
 8008f5e:	d102      	bne.n	8008f66 <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8008f60:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8008f64:	e01b      	b.n	8008f9e <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDIOx->STA;
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008f6a:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8008f6c:	68bb      	ldr	r3, [r7, #8]
 8008f6e:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8008f72:	2b00      	cmp	r3, #0
 8008f74:	d0ef      	beq.n	8008f56 <SDMMC_GetCmdResp3+0x1e>
 8008f76:	68bb      	ldr	r3, [r7, #8]
 8008f78:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8008f7c:	2b00      	cmp	r3, #0
 8008f7e:	d1ea      	bne.n	8008f56 <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008f84:	f003 0304 	and.w	r3, r3, #4
 8008f88:	2b00      	cmp	r3, #0
 8008f8a:	d004      	beq.n	8008f96 <SDMMC_GetCmdResp3+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	2204      	movs	r2, #4
 8008f90:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8008f92:	2304      	movs	r3, #4
 8008f94:	e003      	b.n	8008f9e <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	22c5      	movs	r2, #197	; 0xc5
 8008f9a:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8008f9c:	2300      	movs	r3, #0
}
 8008f9e:	4618      	mov	r0, r3
 8008fa0:	3714      	adds	r7, #20
 8008fa2:	46bd      	mov	sp, r7
 8008fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fa8:	4770      	bx	lr
 8008faa:	bf00      	nop
 8008fac:	20000010 	.word	0x20000010
 8008fb0:	10624dd3 	.word	0x10624dd3

08008fb4 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8008fb4:	b580      	push	{r7, lr}
 8008fb6:	b088      	sub	sp, #32
 8008fb8:	af00      	add	r7, sp, #0
 8008fba:	60f8      	str	r0, [r7, #12]
 8008fbc:	460b      	mov	r3, r1
 8008fbe:	607a      	str	r2, [r7, #4]
 8008fc0:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8008fc2:	4b35      	ldr	r3, [pc, #212]	; (8009098 <SDMMC_GetCmdResp6+0xe4>)
 8008fc4:	681b      	ldr	r3, [r3, #0]
 8008fc6:	4a35      	ldr	r2, [pc, #212]	; (800909c <SDMMC_GetCmdResp6+0xe8>)
 8008fc8:	fba2 2303 	umull	r2, r3, r2, r3
 8008fcc:	0a5b      	lsrs	r3, r3, #9
 8008fce:	f241 3288 	movw	r2, #5000	; 0x1388
 8008fd2:	fb02 f303 	mul.w	r3, r2, r3
 8008fd6:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 8008fd8:	69fb      	ldr	r3, [r7, #28]
 8008fda:	1e5a      	subs	r2, r3, #1
 8008fdc:	61fa      	str	r2, [r7, #28]
 8008fde:	2b00      	cmp	r3, #0
 8008fe0:	d102      	bne.n	8008fe8 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 8008fe2:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8008fe6:	e052      	b.n	800908e <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDIOx->STA;
 8008fe8:	68fb      	ldr	r3, [r7, #12]
 8008fea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008fec:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8008fee:	69bb      	ldr	r3, [r7, #24]
 8008ff0:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8008ff4:	2b00      	cmp	r3, #0
 8008ff6:	d0ef      	beq.n	8008fd8 <SDMMC_GetCmdResp6+0x24>
 8008ff8:	69bb      	ldr	r3, [r7, #24]
 8008ffa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8008ffe:	2b00      	cmp	r3, #0
 8009000:	d1ea      	bne.n	8008fd8 <SDMMC_GetCmdResp6+0x24>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8009002:	68fb      	ldr	r3, [r7, #12]
 8009004:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009006:	f003 0304 	and.w	r3, r3, #4
 800900a:	2b00      	cmp	r3, #0
 800900c:	d004      	beq.n	8009018 <SDMMC_GetCmdResp6+0x64>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800900e:	68fb      	ldr	r3, [r7, #12]
 8009010:	2204      	movs	r2, #4
 8009012:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8009014:	2304      	movs	r3, #4
 8009016:	e03a      	b.n	800908e <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8009018:	68fb      	ldr	r3, [r7, #12]
 800901a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800901c:	f003 0301 	and.w	r3, r3, #1
 8009020:	2b00      	cmp	r3, #0
 8009022:	d004      	beq.n	800902e <SDMMC_GetCmdResp6+0x7a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8009024:	68fb      	ldr	r3, [r7, #12]
 8009026:	2201      	movs	r2, #1
 8009028:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800902a:	2301      	movs	r3, #1
 800902c:	e02f      	b.n	800908e <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800902e:	68f8      	ldr	r0, [r7, #12]
 8009030:	f7ff fbcb 	bl	80087ca <SDIO_GetCommandResponse>
 8009034:	4603      	mov	r3, r0
 8009036:	461a      	mov	r2, r3
 8009038:	7afb      	ldrb	r3, [r7, #11]
 800903a:	4293      	cmp	r3, r2
 800903c:	d001      	beq.n	8009042 <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800903e:	2301      	movs	r3, #1
 8009040:	e025      	b.n	800908e <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8009042:	68fb      	ldr	r3, [r7, #12]
 8009044:	22c5      	movs	r2, #197	; 0xc5
 8009046:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8009048:	2100      	movs	r1, #0
 800904a:	68f8      	ldr	r0, [r7, #12]
 800904c:	f7ff fbca 	bl	80087e4 <SDIO_GetResponse>
 8009050:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 8009052:	697b      	ldr	r3, [r7, #20]
 8009054:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8009058:	2b00      	cmp	r3, #0
 800905a:	d106      	bne.n	800906a <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 800905c:	697b      	ldr	r3, [r7, #20]
 800905e:	0c1b      	lsrs	r3, r3, #16
 8009060:	b29a      	uxth	r2, r3
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 8009066:	2300      	movs	r3, #0
 8009068:	e011      	b.n	800908e <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800906a:	697b      	ldr	r3, [r7, #20]
 800906c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009070:	2b00      	cmp	r3, #0
 8009072:	d002      	beq.n	800907a <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8009074:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8009078:	e009      	b.n	800908e <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800907a:	697b      	ldr	r3, [r7, #20]
 800907c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009080:	2b00      	cmp	r3, #0
 8009082:	d002      	beq.n	800908a <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8009084:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009088:	e001      	b.n	800908e <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800908a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800908e:	4618      	mov	r0, r3
 8009090:	3720      	adds	r7, #32
 8009092:	46bd      	mov	sp, r7
 8009094:	bd80      	pop	{r7, pc}
 8009096:	bf00      	nop
 8009098:	20000010 	.word	0x20000010
 800909c:	10624dd3 	.word	0x10624dd3

080090a0 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 80090a0:	b480      	push	{r7}
 80090a2:	b085      	sub	sp, #20
 80090a4:	af00      	add	r7, sp, #0
 80090a6:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80090a8:	4b22      	ldr	r3, [pc, #136]	; (8009134 <SDMMC_GetCmdResp7+0x94>)
 80090aa:	681b      	ldr	r3, [r3, #0]
 80090ac:	4a22      	ldr	r2, [pc, #136]	; (8009138 <SDMMC_GetCmdResp7+0x98>)
 80090ae:	fba2 2303 	umull	r2, r3, r2, r3
 80090b2:	0a5b      	lsrs	r3, r3, #9
 80090b4:	f241 3288 	movw	r2, #5000	; 0x1388
 80090b8:	fb02 f303 	mul.w	r3, r2, r3
 80090bc:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 80090be:	68fb      	ldr	r3, [r7, #12]
 80090c0:	1e5a      	subs	r2, r3, #1
 80090c2:	60fa      	str	r2, [r7, #12]
 80090c4:	2b00      	cmp	r3, #0
 80090c6:	d102      	bne.n	80090ce <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80090c8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80090cc:	e02c      	b.n	8009128 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDIOx->STA;
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80090d2:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80090d4:	68bb      	ldr	r3, [r7, #8]
 80090d6:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 80090da:	2b00      	cmp	r3, #0
 80090dc:	d0ef      	beq.n	80090be <SDMMC_GetCmdResp7+0x1e>
 80090de:	68bb      	ldr	r3, [r7, #8]
 80090e0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80090e4:	2b00      	cmp	r3, #0
 80090e6:	d1ea      	bne.n	80090be <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80090ec:	f003 0304 	and.w	r3, r3, #4
 80090f0:	2b00      	cmp	r3, #0
 80090f2:	d004      	beq.n	80090fe <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	2204      	movs	r2, #4
 80090f8:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80090fa:	2304      	movs	r3, #4
 80090fc:	e014      	b.n	8009128 <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009102:	f003 0301 	and.w	r3, r3, #1
 8009106:	2b00      	cmp	r3, #0
 8009108:	d004      	beq.n	8009114 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	2201      	movs	r2, #1
 800910e:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8009110:	2301      	movs	r3, #1
 8009112:	e009      	b.n	8009128 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009118:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800911c:	2b00      	cmp	r3, #0
 800911e:	d002      	beq.n	8009126 <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	2240      	movs	r2, #64	; 0x40
 8009124:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8009126:	2300      	movs	r3, #0
  
}
 8009128:	4618      	mov	r0, r3
 800912a:	3714      	adds	r7, #20
 800912c:	46bd      	mov	sp, r7
 800912e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009132:	4770      	bx	lr
 8009134:	20000010 	.word	0x20000010
 8009138:	10624dd3 	.word	0x10624dd3

0800913c <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 800913c:	b480      	push	{r7}
 800913e:	b085      	sub	sp, #20
 8009140:	af00      	add	r7, sp, #0
 8009142:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8009144:	4b11      	ldr	r3, [pc, #68]	; (800918c <SDMMC_GetCmdError+0x50>)
 8009146:	681b      	ldr	r3, [r3, #0]
 8009148:	4a11      	ldr	r2, [pc, #68]	; (8009190 <SDMMC_GetCmdError+0x54>)
 800914a:	fba2 2303 	umull	r2, r3, r2, r3
 800914e:	0a5b      	lsrs	r3, r3, #9
 8009150:	f241 3288 	movw	r2, #5000	; 0x1388
 8009154:	fb02 f303 	mul.w	r3, r2, r3
 8009158:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800915a:	68fb      	ldr	r3, [r7, #12]
 800915c:	1e5a      	subs	r2, r3, #1
 800915e:	60fa      	str	r2, [r7, #12]
 8009160:	2b00      	cmp	r3, #0
 8009162:	d102      	bne.n	800916a <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8009164:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009168:	e009      	b.n	800917e <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800916e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009172:	2b00      	cmp	r3, #0
 8009174:	d0f1      	beq.n	800915a <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	22c5      	movs	r2, #197	; 0xc5
 800917a:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 800917c:	2300      	movs	r3, #0
}
 800917e:	4618      	mov	r0, r3
 8009180:	3714      	adds	r7, #20
 8009182:	46bd      	mov	sp, r7
 8009184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009188:	4770      	bx	lr
 800918a:	bf00      	nop
 800918c:	20000010 	.word	0x20000010
 8009190:	10624dd3 	.word	0x10624dd3

08009194 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8009194:	b580      	push	{r7, lr}
 8009196:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 8009198:	4904      	ldr	r1, [pc, #16]	; (80091ac <MX_FATFS_Init+0x18>)
 800919a:	4805      	ldr	r0, [pc, #20]	; (80091b0 <MX_FATFS_Init+0x1c>)
 800919c:	f002 fd2a 	bl	800bbf4 <FATFS_LinkDriver>
 80091a0:	4603      	mov	r3, r0
 80091a2:	461a      	mov	r2, r3
 80091a4:	4b03      	ldr	r3, [pc, #12]	; (80091b4 <MX_FATFS_Init+0x20>)
 80091a6:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 80091a8:	bf00      	nop
 80091aa:	bd80      	pop	{r7, pc}
 80091ac:	20006530 	.word	0x20006530
 80091b0:	0800e8f4 	.word	0x0800e8f4
 80091b4:	2000652c 	.word	0x2000652c

080091b8 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 80091b8:	b480      	push	{r7}
 80091ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 80091bc:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 80091be:	4618      	mov	r0, r3
 80091c0:	46bd      	mov	sp, r7
 80091c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091c6:	4770      	bx	lr

080091c8 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 80091c8:	b580      	push	{r7, lr}
 80091ca:	b082      	sub	sp, #8
 80091cc:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 80091ce:	2300      	movs	r3, #0
 80091d0:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 80091d2:	f000 f879 	bl	80092c8 <BSP_SD_IsDetected>
 80091d6:	4603      	mov	r3, r0
 80091d8:	2b01      	cmp	r3, #1
 80091da:	d001      	beq.n	80091e0 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 80091dc:	2301      	movs	r3, #1
 80091de:	e012      	b.n	8009206 <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 80091e0:	480b      	ldr	r0, [pc, #44]	; (8009210 <BSP_SD_Init+0x48>)
 80091e2:	f7fc faf9 	bl	80057d8 <HAL_SD_Init>
 80091e6:	4603      	mov	r3, r0
 80091e8:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 80091ea:	79fb      	ldrb	r3, [r7, #7]
 80091ec:	2b00      	cmp	r3, #0
 80091ee:	d109      	bne.n	8009204 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd, SDIO_BUS_WIDE_4B) != HAL_OK)
 80091f0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80091f4:	4806      	ldr	r0, [pc, #24]	; (8009210 <BSP_SD_Init+0x48>)
 80091f6:	f7fd f8d3 	bl	80063a0 <HAL_SD_ConfigWideBusOperation>
 80091fa:	4603      	mov	r3, r0
 80091fc:	2b00      	cmp	r3, #0
 80091fe:	d001      	beq.n	8009204 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 8009200:	2301      	movs	r3, #1
 8009202:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 8009204:	79fb      	ldrb	r3, [r7, #7]
}
 8009206:	4618      	mov	r0, r3
 8009208:	3708      	adds	r7, #8
 800920a:	46bd      	mov	sp, r7
 800920c:	bd80      	pop	{r7, pc}
 800920e:	bf00      	nop
 8009210:	20000264 	.word	0x20000264

08009214 <BSP_SD_ReadBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to read
  * @param  Timeout: Timeout for read operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 8009214:	b580      	push	{r7, lr}
 8009216:	b088      	sub	sp, #32
 8009218:	af02      	add	r7, sp, #8
 800921a:	60f8      	str	r0, [r7, #12]
 800921c:	60b9      	str	r1, [r7, #8]
 800921e:	607a      	str	r2, [r7, #4]
 8009220:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 8009222:	2300      	movs	r3, #0
 8009224:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_ReadBlocks(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout) != HAL_OK)
 8009226:	683b      	ldr	r3, [r7, #0]
 8009228:	9300      	str	r3, [sp, #0]
 800922a:	687b      	ldr	r3, [r7, #4]
 800922c:	68ba      	ldr	r2, [r7, #8]
 800922e:	68f9      	ldr	r1, [r7, #12]
 8009230:	4806      	ldr	r0, [pc, #24]	; (800924c <BSP_SD_ReadBlocks+0x38>)
 8009232:	f7fc fb81 	bl	8005938 <HAL_SD_ReadBlocks>
 8009236:	4603      	mov	r3, r0
 8009238:	2b00      	cmp	r3, #0
 800923a:	d001      	beq.n	8009240 <BSP_SD_ReadBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 800923c:	2301      	movs	r3, #1
 800923e:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8009240:	7dfb      	ldrb	r3, [r7, #23]
}
 8009242:	4618      	mov	r0, r3
 8009244:	3718      	adds	r7, #24
 8009246:	46bd      	mov	sp, r7
 8009248:	bd80      	pop	{r7, pc}
 800924a:	bf00      	nop
 800924c:	20000264 	.word	0x20000264

08009250 <BSP_SD_WriteBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to write
  * @param  Timeout: Timeout for write operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 8009250:	b580      	push	{r7, lr}
 8009252:	b088      	sub	sp, #32
 8009254:	af02      	add	r7, sp, #8
 8009256:	60f8      	str	r0, [r7, #12]
 8009258:	60b9      	str	r1, [r7, #8]
 800925a:	607a      	str	r2, [r7, #4]
 800925c:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 800925e:	2300      	movs	r3, #0
 8009260:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_WriteBlocks(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout) != HAL_OK)
 8009262:	683b      	ldr	r3, [r7, #0]
 8009264:	9300      	str	r3, [sp, #0]
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	68ba      	ldr	r2, [r7, #8]
 800926a:	68f9      	ldr	r1, [r7, #12]
 800926c:	4806      	ldr	r0, [pc, #24]	; (8009288 <BSP_SD_WriteBlocks+0x38>)
 800926e:	f7fc fd41 	bl	8005cf4 <HAL_SD_WriteBlocks>
 8009272:	4603      	mov	r3, r0
 8009274:	2b00      	cmp	r3, #0
 8009276:	d001      	beq.n	800927c <BSP_SD_WriteBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 8009278:	2301      	movs	r3, #1
 800927a:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800927c:	7dfb      	ldrb	r3, [r7, #23]
}
 800927e:	4618      	mov	r0, r3
 8009280:	3718      	adds	r7, #24
 8009282:	46bd      	mov	sp, r7
 8009284:	bd80      	pop	{r7, pc}
 8009286:	bf00      	nop
 8009288:	20000264 	.word	0x20000264

0800928c <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 800928c:	b580      	push	{r7, lr}
 800928e:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 8009290:	4805      	ldr	r0, [pc, #20]	; (80092a8 <BSP_SD_GetCardState+0x1c>)
 8009292:	f7fd f91f 	bl	80064d4 <HAL_SD_GetCardState>
 8009296:	4603      	mov	r3, r0
 8009298:	2b04      	cmp	r3, #4
 800929a:	bf14      	ite	ne
 800929c:	2301      	movne	r3, #1
 800929e:	2300      	moveq	r3, #0
 80092a0:	b2db      	uxtb	r3, r3
}
 80092a2:	4618      	mov	r0, r3
 80092a4:	bd80      	pop	{r7, pc}
 80092a6:	bf00      	nop
 80092a8:	20000264 	.word	0x20000264

080092ac <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 80092ac:	b580      	push	{r7, lr}
 80092ae:	b082      	sub	sp, #8
 80092b0:	af00      	add	r7, sp, #0
 80092b2:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 80092b4:	6879      	ldr	r1, [r7, #4]
 80092b6:	4803      	ldr	r0, [pc, #12]	; (80092c4 <BSP_SD_GetCardInfo+0x18>)
 80092b8:	f7fd f846 	bl	8006348 <HAL_SD_GetCardInfo>
}
 80092bc:	bf00      	nop
 80092be:	3708      	adds	r7, #8
 80092c0:	46bd      	mov	sp, r7
 80092c2:	bd80      	pop	{r7, pc}
 80092c4:	20000264 	.word	0x20000264

080092c8 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 80092c8:	b580      	push	{r7, lr}
 80092ca:	b082      	sub	sp, #8
 80092cc:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 80092ce:	2301      	movs	r3, #1
 80092d0:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 80092d2:	f000 f80b 	bl	80092ec <BSP_PlatformIsDetected>
 80092d6:	4603      	mov	r3, r0
 80092d8:	2b00      	cmp	r3, #0
 80092da:	d101      	bne.n	80092e0 <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 80092dc:	2300      	movs	r3, #0
 80092de:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 80092e0:	79fb      	ldrb	r3, [r7, #7]
 80092e2:	b2db      	uxtb	r3, r3
}
 80092e4:	4618      	mov	r0, r3
 80092e6:	3708      	adds	r7, #8
 80092e8:	46bd      	mov	sp, r7
 80092ea:	bd80      	pop	{r7, pc}

080092ec <BSP_PlatformIsDetected>:
  ******************************************************************************
*/
/* USER CODE END Header */
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 80092ec:	b580      	push	{r7, lr}
 80092ee:	b082      	sub	sp, #8
 80092f0:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 80092f2:	2301      	movs	r3, #1
 80092f4:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 80092f6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80092fa:	4806      	ldr	r0, [pc, #24]	; (8009314 <BSP_PlatformIsDetected+0x28>)
 80092fc:	f7fb fdc8 	bl	8004e90 <HAL_GPIO_ReadPin>
 8009300:	4603      	mov	r3, r0
 8009302:	2b00      	cmp	r3, #0
 8009304:	d001      	beq.n	800930a <BSP_PlatformIsDetected+0x1e>
    {
        status = SD_NOT_PRESENT;
 8009306:	2300      	movs	r3, #0
 8009308:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 800930a:	79fb      	ldrb	r3, [r7, #7]
}
 800930c:	4618      	mov	r0, r3
 800930e:	3708      	adds	r7, #8
 8009310:	46bd      	mov	sp, r7
 8009312:	bd80      	pop	{r7, pc}
 8009314:	40020000 	.word	0x40020000

08009318 <SD_CheckStatus>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static DSTATUS SD_CheckStatus(BYTE lun)
{
 8009318:	b580      	push	{r7, lr}
 800931a:	b082      	sub	sp, #8
 800931c:	af00      	add	r7, sp, #0
 800931e:	4603      	mov	r3, r0
 8009320:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 8009322:	4b0b      	ldr	r3, [pc, #44]	; (8009350 <SD_CheckStatus+0x38>)
 8009324:	2201      	movs	r2, #1
 8009326:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 8009328:	f7ff ffb0 	bl	800928c <BSP_SD_GetCardState>
 800932c:	4603      	mov	r3, r0
 800932e:	2b00      	cmp	r3, #0
 8009330:	d107      	bne.n	8009342 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 8009332:	4b07      	ldr	r3, [pc, #28]	; (8009350 <SD_CheckStatus+0x38>)
 8009334:	781b      	ldrb	r3, [r3, #0]
 8009336:	b2db      	uxtb	r3, r3
 8009338:	f023 0301 	bic.w	r3, r3, #1
 800933c:	b2da      	uxtb	r2, r3
 800933e:	4b04      	ldr	r3, [pc, #16]	; (8009350 <SD_CheckStatus+0x38>)
 8009340:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 8009342:	4b03      	ldr	r3, [pc, #12]	; (8009350 <SD_CheckStatus+0x38>)
 8009344:	781b      	ldrb	r3, [r3, #0]
 8009346:	b2db      	uxtb	r3, r3
}
 8009348:	4618      	mov	r0, r3
 800934a:	3708      	adds	r7, #8
 800934c:	46bd      	mov	sp, r7
 800934e:	bd80      	pop	{r7, pc}
 8009350:	2000002d 	.word	0x2000002d

08009354 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 8009354:	b580      	push	{r7, lr}
 8009356:	b082      	sub	sp, #8
 8009358:	af00      	add	r7, sp, #0
 800935a:	4603      	mov	r3, r0
 800935c:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 800935e:	4b0b      	ldr	r3, [pc, #44]	; (800938c <SD_initialize+0x38>)
 8009360:	2201      	movs	r2, #1
 8009362:	701a      	strb	r2, [r3, #0]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 8009364:	f7ff ff30 	bl	80091c8 <BSP_SD_Init>
 8009368:	4603      	mov	r3, r0
 800936a:	2b00      	cmp	r3, #0
 800936c:	d107      	bne.n	800937e <SD_initialize+0x2a>
  {
    Stat = SD_CheckStatus(lun);
 800936e:	79fb      	ldrb	r3, [r7, #7]
 8009370:	4618      	mov	r0, r3
 8009372:	f7ff ffd1 	bl	8009318 <SD_CheckStatus>
 8009376:	4603      	mov	r3, r0
 8009378:	461a      	mov	r2, r3
 800937a:	4b04      	ldr	r3, [pc, #16]	; (800938c <SD_initialize+0x38>)
 800937c:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 800937e:	4b03      	ldr	r3, [pc, #12]	; (800938c <SD_initialize+0x38>)
 8009380:	781b      	ldrb	r3, [r3, #0]
 8009382:	b2db      	uxtb	r3, r3
}
 8009384:	4618      	mov	r0, r3
 8009386:	3708      	adds	r7, #8
 8009388:	46bd      	mov	sp, r7
 800938a:	bd80      	pop	{r7, pc}
 800938c:	2000002d 	.word	0x2000002d

08009390 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 8009390:	b580      	push	{r7, lr}
 8009392:	b082      	sub	sp, #8
 8009394:	af00      	add	r7, sp, #0
 8009396:	4603      	mov	r3, r0
 8009398:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800939a:	79fb      	ldrb	r3, [r7, #7]
 800939c:	4618      	mov	r0, r3
 800939e:	f7ff ffbb 	bl	8009318 <SD_CheckStatus>
 80093a2:	4603      	mov	r3, r0
}
 80093a4:	4618      	mov	r0, r3
 80093a6:	3708      	adds	r7, #8
 80093a8:	46bd      	mov	sp, r7
 80093aa:	bd80      	pop	{r7, pc}

080093ac <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 80093ac:	b580      	push	{r7, lr}
 80093ae:	b086      	sub	sp, #24
 80093b0:	af00      	add	r7, sp, #0
 80093b2:	60b9      	str	r1, [r7, #8]
 80093b4:	607a      	str	r2, [r7, #4]
 80093b6:	603b      	str	r3, [r7, #0]
 80093b8:	4603      	mov	r3, r0
 80093ba:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 80093bc:	2301      	movs	r3, #1
 80093be:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_ReadBlocks((uint32_t*)buff,
 80093c0:	f04f 33ff 	mov.w	r3, #4294967295
 80093c4:	683a      	ldr	r2, [r7, #0]
 80093c6:	6879      	ldr	r1, [r7, #4]
 80093c8:	68b8      	ldr	r0, [r7, #8]
 80093ca:	f7ff ff23 	bl	8009214 <BSP_SD_ReadBlocks>
 80093ce:	4603      	mov	r3, r0
 80093d0:	2b00      	cmp	r3, #0
 80093d2:	d107      	bne.n	80093e4 <SD_read+0x38>
                       (uint32_t) (sector),
                       count, SD_TIMEOUT) == MSD_OK)
  {
    /* wait until the read operation is finished */
    while(BSP_SD_GetCardState()!= MSD_OK)
 80093d4:	bf00      	nop
 80093d6:	f7ff ff59 	bl	800928c <BSP_SD_GetCardState>
 80093da:	4603      	mov	r3, r0
 80093dc:	2b00      	cmp	r3, #0
 80093de:	d1fa      	bne.n	80093d6 <SD_read+0x2a>
    {
    }
    res = RES_OK;
 80093e0:	2300      	movs	r3, #0
 80093e2:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 80093e4:	7dfb      	ldrb	r3, [r7, #23]
}
 80093e6:	4618      	mov	r0, r3
 80093e8:	3718      	adds	r7, #24
 80093ea:	46bd      	mov	sp, r7
 80093ec:	bd80      	pop	{r7, pc}

080093ee <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 80093ee:	b580      	push	{r7, lr}
 80093f0:	b086      	sub	sp, #24
 80093f2:	af00      	add	r7, sp, #0
 80093f4:	60b9      	str	r1, [r7, #8]
 80093f6:	607a      	str	r2, [r7, #4]
 80093f8:	603b      	str	r3, [r7, #0]
 80093fa:	4603      	mov	r3, r0
 80093fc:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 80093fe:	2301      	movs	r3, #1
 8009400:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_WriteBlocks((uint32_t*)buff,
 8009402:	f04f 33ff 	mov.w	r3, #4294967295
 8009406:	683a      	ldr	r2, [r7, #0]
 8009408:	6879      	ldr	r1, [r7, #4]
 800940a:	68b8      	ldr	r0, [r7, #8]
 800940c:	f7ff ff20 	bl	8009250 <BSP_SD_WriteBlocks>
 8009410:	4603      	mov	r3, r0
 8009412:	2b00      	cmp	r3, #0
 8009414:	d107      	bne.n	8009426 <SD_write+0x38>
                        (uint32_t)(sector),
                        count, SD_TIMEOUT) == MSD_OK)
  {
	/* wait until the Write operation is finished */
    while(BSP_SD_GetCardState() != MSD_OK)
 8009416:	bf00      	nop
 8009418:	f7ff ff38 	bl	800928c <BSP_SD_GetCardState>
 800941c:	4603      	mov	r3, r0
 800941e:	2b00      	cmp	r3, #0
 8009420:	d1fa      	bne.n	8009418 <SD_write+0x2a>
    {
    }
    res = RES_OK;
 8009422:	2300      	movs	r3, #0
 8009424:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 8009426:	7dfb      	ldrb	r3, [r7, #23]
}
 8009428:	4618      	mov	r0, r3
 800942a:	3718      	adds	r7, #24
 800942c:	46bd      	mov	sp, r7
 800942e:	bd80      	pop	{r7, pc}

08009430 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8009430:	b580      	push	{r7, lr}
 8009432:	b08c      	sub	sp, #48	; 0x30
 8009434:	af00      	add	r7, sp, #0
 8009436:	4603      	mov	r3, r0
 8009438:	603a      	str	r2, [r7, #0]
 800943a:	71fb      	strb	r3, [r7, #7]
 800943c:	460b      	mov	r3, r1
 800943e:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8009440:	2301      	movs	r3, #1
 8009442:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8009446:	4b25      	ldr	r3, [pc, #148]	; (80094dc <SD_ioctl+0xac>)
 8009448:	781b      	ldrb	r3, [r3, #0]
 800944a:	b2db      	uxtb	r3, r3
 800944c:	f003 0301 	and.w	r3, r3, #1
 8009450:	2b00      	cmp	r3, #0
 8009452:	d001      	beq.n	8009458 <SD_ioctl+0x28>
 8009454:	2303      	movs	r3, #3
 8009456:	e03c      	b.n	80094d2 <SD_ioctl+0xa2>

  switch (cmd)
 8009458:	79bb      	ldrb	r3, [r7, #6]
 800945a:	2b03      	cmp	r3, #3
 800945c:	d834      	bhi.n	80094c8 <SD_ioctl+0x98>
 800945e:	a201      	add	r2, pc, #4	; (adr r2, 8009464 <SD_ioctl+0x34>)
 8009460:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009464:	08009475 	.word	0x08009475
 8009468:	0800947d 	.word	0x0800947d
 800946c:	08009495 	.word	0x08009495
 8009470:	080094af 	.word	0x080094af
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 8009474:	2300      	movs	r3, #0
 8009476:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800947a:	e028      	b.n	80094ce <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 800947c:	f107 030c 	add.w	r3, r7, #12
 8009480:	4618      	mov	r0, r3
 8009482:	f7ff ff13 	bl	80092ac <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 8009486:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009488:	683b      	ldr	r3, [r7, #0]
 800948a:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800948c:	2300      	movs	r3, #0
 800948e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8009492:	e01c      	b.n	80094ce <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8009494:	f107 030c 	add.w	r3, r7, #12
 8009498:	4618      	mov	r0, r3
 800949a:	f7ff ff07 	bl	80092ac <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800949e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80094a0:	b29a      	uxth	r2, r3
 80094a2:	683b      	ldr	r3, [r7, #0]
 80094a4:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 80094a6:	2300      	movs	r3, #0
 80094a8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 80094ac:	e00f      	b.n	80094ce <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 80094ae:	f107 030c 	add.w	r3, r7, #12
 80094b2:	4618      	mov	r0, r3
 80094b4:	f7ff fefa 	bl	80092ac <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 80094b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80094ba:	0a5a      	lsrs	r2, r3, #9
 80094bc:	683b      	ldr	r3, [r7, #0]
 80094be:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 80094c0:	2300      	movs	r3, #0
 80094c2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 80094c6:	e002      	b.n	80094ce <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 80094c8:	2304      	movs	r3, #4
 80094ca:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 80094ce:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80094d2:	4618      	mov	r0, r3
 80094d4:	3730      	adds	r7, #48	; 0x30
 80094d6:	46bd      	mov	sp, r7
 80094d8:	bd80      	pop	{r7, pc}
 80094da:	bf00      	nop
 80094dc:	2000002d 	.word	0x2000002d

080094e0 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 80094e0:	b580      	push	{r7, lr}
 80094e2:	b084      	sub	sp, #16
 80094e4:	af00      	add	r7, sp, #0
 80094e6:	4603      	mov	r3, r0
 80094e8:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 80094ea:	79fb      	ldrb	r3, [r7, #7]
 80094ec:	4a08      	ldr	r2, [pc, #32]	; (8009510 <disk_status+0x30>)
 80094ee:	009b      	lsls	r3, r3, #2
 80094f0:	4413      	add	r3, r2
 80094f2:	685b      	ldr	r3, [r3, #4]
 80094f4:	685b      	ldr	r3, [r3, #4]
 80094f6:	79fa      	ldrb	r2, [r7, #7]
 80094f8:	4905      	ldr	r1, [pc, #20]	; (8009510 <disk_status+0x30>)
 80094fa:	440a      	add	r2, r1
 80094fc:	7a12      	ldrb	r2, [r2, #8]
 80094fe:	4610      	mov	r0, r2
 8009500:	4798      	blx	r3
 8009502:	4603      	mov	r3, r0
 8009504:	73fb      	strb	r3, [r7, #15]
  return stat;
 8009506:	7bfb      	ldrb	r3, [r7, #15]
}
 8009508:	4618      	mov	r0, r3
 800950a:	3710      	adds	r7, #16
 800950c:	46bd      	mov	sp, r7
 800950e:	bd80      	pop	{r7, pc}
 8009510:	20007590 	.word	0x20007590

08009514 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8009514:	b580      	push	{r7, lr}
 8009516:	b084      	sub	sp, #16
 8009518:	af00      	add	r7, sp, #0
 800951a:	4603      	mov	r3, r0
 800951c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800951e:	2300      	movs	r3, #0
 8009520:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8009522:	79fb      	ldrb	r3, [r7, #7]
 8009524:	4a0d      	ldr	r2, [pc, #52]	; (800955c <disk_initialize+0x48>)
 8009526:	5cd3      	ldrb	r3, [r2, r3]
 8009528:	2b00      	cmp	r3, #0
 800952a:	d111      	bne.n	8009550 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 800952c:	79fb      	ldrb	r3, [r7, #7]
 800952e:	4a0b      	ldr	r2, [pc, #44]	; (800955c <disk_initialize+0x48>)
 8009530:	2101      	movs	r1, #1
 8009532:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8009534:	79fb      	ldrb	r3, [r7, #7]
 8009536:	4a09      	ldr	r2, [pc, #36]	; (800955c <disk_initialize+0x48>)
 8009538:	009b      	lsls	r3, r3, #2
 800953a:	4413      	add	r3, r2
 800953c:	685b      	ldr	r3, [r3, #4]
 800953e:	681b      	ldr	r3, [r3, #0]
 8009540:	79fa      	ldrb	r2, [r7, #7]
 8009542:	4906      	ldr	r1, [pc, #24]	; (800955c <disk_initialize+0x48>)
 8009544:	440a      	add	r2, r1
 8009546:	7a12      	ldrb	r2, [r2, #8]
 8009548:	4610      	mov	r0, r2
 800954a:	4798      	blx	r3
 800954c:	4603      	mov	r3, r0
 800954e:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8009550:	7bfb      	ldrb	r3, [r7, #15]
}
 8009552:	4618      	mov	r0, r3
 8009554:	3710      	adds	r7, #16
 8009556:	46bd      	mov	sp, r7
 8009558:	bd80      	pop	{r7, pc}
 800955a:	bf00      	nop
 800955c:	20007590 	.word	0x20007590

08009560 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8009560:	b590      	push	{r4, r7, lr}
 8009562:	b087      	sub	sp, #28
 8009564:	af00      	add	r7, sp, #0
 8009566:	60b9      	str	r1, [r7, #8]
 8009568:	607a      	str	r2, [r7, #4]
 800956a:	603b      	str	r3, [r7, #0]
 800956c:	4603      	mov	r3, r0
 800956e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8009570:	7bfb      	ldrb	r3, [r7, #15]
 8009572:	4a0a      	ldr	r2, [pc, #40]	; (800959c <disk_read+0x3c>)
 8009574:	009b      	lsls	r3, r3, #2
 8009576:	4413      	add	r3, r2
 8009578:	685b      	ldr	r3, [r3, #4]
 800957a:	689c      	ldr	r4, [r3, #8]
 800957c:	7bfb      	ldrb	r3, [r7, #15]
 800957e:	4a07      	ldr	r2, [pc, #28]	; (800959c <disk_read+0x3c>)
 8009580:	4413      	add	r3, r2
 8009582:	7a18      	ldrb	r0, [r3, #8]
 8009584:	683b      	ldr	r3, [r7, #0]
 8009586:	687a      	ldr	r2, [r7, #4]
 8009588:	68b9      	ldr	r1, [r7, #8]
 800958a:	47a0      	blx	r4
 800958c:	4603      	mov	r3, r0
 800958e:	75fb      	strb	r3, [r7, #23]
  return res;
 8009590:	7dfb      	ldrb	r3, [r7, #23]
}
 8009592:	4618      	mov	r0, r3
 8009594:	371c      	adds	r7, #28
 8009596:	46bd      	mov	sp, r7
 8009598:	bd90      	pop	{r4, r7, pc}
 800959a:	bf00      	nop
 800959c:	20007590 	.word	0x20007590

080095a0 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 80095a0:	b590      	push	{r4, r7, lr}
 80095a2:	b087      	sub	sp, #28
 80095a4:	af00      	add	r7, sp, #0
 80095a6:	60b9      	str	r1, [r7, #8]
 80095a8:	607a      	str	r2, [r7, #4]
 80095aa:	603b      	str	r3, [r7, #0]
 80095ac:	4603      	mov	r3, r0
 80095ae:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 80095b0:	7bfb      	ldrb	r3, [r7, #15]
 80095b2:	4a0a      	ldr	r2, [pc, #40]	; (80095dc <disk_write+0x3c>)
 80095b4:	009b      	lsls	r3, r3, #2
 80095b6:	4413      	add	r3, r2
 80095b8:	685b      	ldr	r3, [r3, #4]
 80095ba:	68dc      	ldr	r4, [r3, #12]
 80095bc:	7bfb      	ldrb	r3, [r7, #15]
 80095be:	4a07      	ldr	r2, [pc, #28]	; (80095dc <disk_write+0x3c>)
 80095c0:	4413      	add	r3, r2
 80095c2:	7a18      	ldrb	r0, [r3, #8]
 80095c4:	683b      	ldr	r3, [r7, #0]
 80095c6:	687a      	ldr	r2, [r7, #4]
 80095c8:	68b9      	ldr	r1, [r7, #8]
 80095ca:	47a0      	blx	r4
 80095cc:	4603      	mov	r3, r0
 80095ce:	75fb      	strb	r3, [r7, #23]
  return res;
 80095d0:	7dfb      	ldrb	r3, [r7, #23]
}
 80095d2:	4618      	mov	r0, r3
 80095d4:	371c      	adds	r7, #28
 80095d6:	46bd      	mov	sp, r7
 80095d8:	bd90      	pop	{r4, r7, pc}
 80095da:	bf00      	nop
 80095dc:	20007590 	.word	0x20007590

080095e0 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 80095e0:	b580      	push	{r7, lr}
 80095e2:	b084      	sub	sp, #16
 80095e4:	af00      	add	r7, sp, #0
 80095e6:	4603      	mov	r3, r0
 80095e8:	603a      	str	r2, [r7, #0]
 80095ea:	71fb      	strb	r3, [r7, #7]
 80095ec:	460b      	mov	r3, r1
 80095ee:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 80095f0:	79fb      	ldrb	r3, [r7, #7]
 80095f2:	4a09      	ldr	r2, [pc, #36]	; (8009618 <disk_ioctl+0x38>)
 80095f4:	009b      	lsls	r3, r3, #2
 80095f6:	4413      	add	r3, r2
 80095f8:	685b      	ldr	r3, [r3, #4]
 80095fa:	691b      	ldr	r3, [r3, #16]
 80095fc:	79fa      	ldrb	r2, [r7, #7]
 80095fe:	4906      	ldr	r1, [pc, #24]	; (8009618 <disk_ioctl+0x38>)
 8009600:	440a      	add	r2, r1
 8009602:	7a10      	ldrb	r0, [r2, #8]
 8009604:	79b9      	ldrb	r1, [r7, #6]
 8009606:	683a      	ldr	r2, [r7, #0]
 8009608:	4798      	blx	r3
 800960a:	4603      	mov	r3, r0
 800960c:	73fb      	strb	r3, [r7, #15]
  return res;
 800960e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009610:	4618      	mov	r0, r3
 8009612:	3710      	adds	r7, #16
 8009614:	46bd      	mov	sp, r7
 8009616:	bd80      	pop	{r7, pc}
 8009618:	20007590 	.word	0x20007590

0800961c <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800961c:	b480      	push	{r7}
 800961e:	b085      	sub	sp, #20
 8009620:	af00      	add	r7, sp, #0
 8009622:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	3301      	adds	r3, #1
 8009628:	781b      	ldrb	r3, [r3, #0]
 800962a:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800962c:	89fb      	ldrh	r3, [r7, #14]
 800962e:	021b      	lsls	r3, r3, #8
 8009630:	b21a      	sxth	r2, r3
 8009632:	687b      	ldr	r3, [r7, #4]
 8009634:	781b      	ldrb	r3, [r3, #0]
 8009636:	b21b      	sxth	r3, r3
 8009638:	4313      	orrs	r3, r2
 800963a:	b21b      	sxth	r3, r3
 800963c:	81fb      	strh	r3, [r7, #14]
	return rv;
 800963e:	89fb      	ldrh	r3, [r7, #14]
}
 8009640:	4618      	mov	r0, r3
 8009642:	3714      	adds	r7, #20
 8009644:	46bd      	mov	sp, r7
 8009646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800964a:	4770      	bx	lr

0800964c <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800964c:	b480      	push	{r7}
 800964e:	b085      	sub	sp, #20
 8009650:	af00      	add	r7, sp, #0
 8009652:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	3303      	adds	r3, #3
 8009658:	781b      	ldrb	r3, [r3, #0]
 800965a:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800965c:	68fb      	ldr	r3, [r7, #12]
 800965e:	021b      	lsls	r3, r3, #8
 8009660:	687a      	ldr	r2, [r7, #4]
 8009662:	3202      	adds	r2, #2
 8009664:	7812      	ldrb	r2, [r2, #0]
 8009666:	4313      	orrs	r3, r2
 8009668:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800966a:	68fb      	ldr	r3, [r7, #12]
 800966c:	021b      	lsls	r3, r3, #8
 800966e:	687a      	ldr	r2, [r7, #4]
 8009670:	3201      	adds	r2, #1
 8009672:	7812      	ldrb	r2, [r2, #0]
 8009674:	4313      	orrs	r3, r2
 8009676:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8009678:	68fb      	ldr	r3, [r7, #12]
 800967a:	021b      	lsls	r3, r3, #8
 800967c:	687a      	ldr	r2, [r7, #4]
 800967e:	7812      	ldrb	r2, [r2, #0]
 8009680:	4313      	orrs	r3, r2
 8009682:	60fb      	str	r3, [r7, #12]
	return rv;
 8009684:	68fb      	ldr	r3, [r7, #12]
}
 8009686:	4618      	mov	r0, r3
 8009688:	3714      	adds	r7, #20
 800968a:	46bd      	mov	sp, r7
 800968c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009690:	4770      	bx	lr

08009692 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8009692:	b480      	push	{r7}
 8009694:	b083      	sub	sp, #12
 8009696:	af00      	add	r7, sp, #0
 8009698:	6078      	str	r0, [r7, #4]
 800969a:	460b      	mov	r3, r1
 800969c:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800969e:	687b      	ldr	r3, [r7, #4]
 80096a0:	1c5a      	adds	r2, r3, #1
 80096a2:	607a      	str	r2, [r7, #4]
 80096a4:	887a      	ldrh	r2, [r7, #2]
 80096a6:	b2d2      	uxtb	r2, r2
 80096a8:	701a      	strb	r2, [r3, #0]
 80096aa:	887b      	ldrh	r3, [r7, #2]
 80096ac:	0a1b      	lsrs	r3, r3, #8
 80096ae:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	1c5a      	adds	r2, r3, #1
 80096b4:	607a      	str	r2, [r7, #4]
 80096b6:	887a      	ldrh	r2, [r7, #2]
 80096b8:	b2d2      	uxtb	r2, r2
 80096ba:	701a      	strb	r2, [r3, #0]
}
 80096bc:	bf00      	nop
 80096be:	370c      	adds	r7, #12
 80096c0:	46bd      	mov	sp, r7
 80096c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096c6:	4770      	bx	lr

080096c8 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 80096c8:	b480      	push	{r7}
 80096ca:	b083      	sub	sp, #12
 80096cc:	af00      	add	r7, sp, #0
 80096ce:	6078      	str	r0, [r7, #4]
 80096d0:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80096d2:	687b      	ldr	r3, [r7, #4]
 80096d4:	1c5a      	adds	r2, r3, #1
 80096d6:	607a      	str	r2, [r7, #4]
 80096d8:	683a      	ldr	r2, [r7, #0]
 80096da:	b2d2      	uxtb	r2, r2
 80096dc:	701a      	strb	r2, [r3, #0]
 80096de:	683b      	ldr	r3, [r7, #0]
 80096e0:	0a1b      	lsrs	r3, r3, #8
 80096e2:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	1c5a      	adds	r2, r3, #1
 80096e8:	607a      	str	r2, [r7, #4]
 80096ea:	683a      	ldr	r2, [r7, #0]
 80096ec:	b2d2      	uxtb	r2, r2
 80096ee:	701a      	strb	r2, [r3, #0]
 80096f0:	683b      	ldr	r3, [r7, #0]
 80096f2:	0a1b      	lsrs	r3, r3, #8
 80096f4:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80096f6:	687b      	ldr	r3, [r7, #4]
 80096f8:	1c5a      	adds	r2, r3, #1
 80096fa:	607a      	str	r2, [r7, #4]
 80096fc:	683a      	ldr	r2, [r7, #0]
 80096fe:	b2d2      	uxtb	r2, r2
 8009700:	701a      	strb	r2, [r3, #0]
 8009702:	683b      	ldr	r3, [r7, #0]
 8009704:	0a1b      	lsrs	r3, r3, #8
 8009706:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8009708:	687b      	ldr	r3, [r7, #4]
 800970a:	1c5a      	adds	r2, r3, #1
 800970c:	607a      	str	r2, [r7, #4]
 800970e:	683a      	ldr	r2, [r7, #0]
 8009710:	b2d2      	uxtb	r2, r2
 8009712:	701a      	strb	r2, [r3, #0]
}
 8009714:	bf00      	nop
 8009716:	370c      	adds	r7, #12
 8009718:	46bd      	mov	sp, r7
 800971a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800971e:	4770      	bx	lr

08009720 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8009720:	b480      	push	{r7}
 8009722:	b087      	sub	sp, #28
 8009724:	af00      	add	r7, sp, #0
 8009726:	60f8      	str	r0, [r7, #12]
 8009728:	60b9      	str	r1, [r7, #8]
 800972a:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800972c:	68fb      	ldr	r3, [r7, #12]
 800972e:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8009730:	68bb      	ldr	r3, [r7, #8]
 8009732:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8009734:	687b      	ldr	r3, [r7, #4]
 8009736:	2b00      	cmp	r3, #0
 8009738:	d00d      	beq.n	8009756 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800973a:	693a      	ldr	r2, [r7, #16]
 800973c:	1c53      	adds	r3, r2, #1
 800973e:	613b      	str	r3, [r7, #16]
 8009740:	697b      	ldr	r3, [r7, #20]
 8009742:	1c59      	adds	r1, r3, #1
 8009744:	6179      	str	r1, [r7, #20]
 8009746:	7812      	ldrb	r2, [r2, #0]
 8009748:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800974a:	687b      	ldr	r3, [r7, #4]
 800974c:	3b01      	subs	r3, #1
 800974e:	607b      	str	r3, [r7, #4]
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	2b00      	cmp	r3, #0
 8009754:	d1f1      	bne.n	800973a <mem_cpy+0x1a>
	}
}
 8009756:	bf00      	nop
 8009758:	371c      	adds	r7, #28
 800975a:	46bd      	mov	sp, r7
 800975c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009760:	4770      	bx	lr

08009762 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8009762:	b480      	push	{r7}
 8009764:	b087      	sub	sp, #28
 8009766:	af00      	add	r7, sp, #0
 8009768:	60f8      	str	r0, [r7, #12]
 800976a:	60b9      	str	r1, [r7, #8]
 800976c:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800976e:	68fb      	ldr	r3, [r7, #12]
 8009770:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8009772:	697b      	ldr	r3, [r7, #20]
 8009774:	1c5a      	adds	r2, r3, #1
 8009776:	617a      	str	r2, [r7, #20]
 8009778:	68ba      	ldr	r2, [r7, #8]
 800977a:	b2d2      	uxtb	r2, r2
 800977c:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800977e:	687b      	ldr	r3, [r7, #4]
 8009780:	3b01      	subs	r3, #1
 8009782:	607b      	str	r3, [r7, #4]
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	2b00      	cmp	r3, #0
 8009788:	d1f3      	bne.n	8009772 <mem_set+0x10>
}
 800978a:	bf00      	nop
 800978c:	bf00      	nop
 800978e:	371c      	adds	r7, #28
 8009790:	46bd      	mov	sp, r7
 8009792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009796:	4770      	bx	lr

08009798 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8009798:	b480      	push	{r7}
 800979a:	b089      	sub	sp, #36	; 0x24
 800979c:	af00      	add	r7, sp, #0
 800979e:	60f8      	str	r0, [r7, #12]
 80097a0:	60b9      	str	r1, [r7, #8]
 80097a2:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 80097a4:	68fb      	ldr	r3, [r7, #12]
 80097a6:	61fb      	str	r3, [r7, #28]
 80097a8:	68bb      	ldr	r3, [r7, #8]
 80097aa:	61bb      	str	r3, [r7, #24]
	int r = 0;
 80097ac:	2300      	movs	r3, #0
 80097ae:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 80097b0:	69fb      	ldr	r3, [r7, #28]
 80097b2:	1c5a      	adds	r2, r3, #1
 80097b4:	61fa      	str	r2, [r7, #28]
 80097b6:	781b      	ldrb	r3, [r3, #0]
 80097b8:	4619      	mov	r1, r3
 80097ba:	69bb      	ldr	r3, [r7, #24]
 80097bc:	1c5a      	adds	r2, r3, #1
 80097be:	61ba      	str	r2, [r7, #24]
 80097c0:	781b      	ldrb	r3, [r3, #0]
 80097c2:	1acb      	subs	r3, r1, r3
 80097c4:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 80097c6:	687b      	ldr	r3, [r7, #4]
 80097c8:	3b01      	subs	r3, #1
 80097ca:	607b      	str	r3, [r7, #4]
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	2b00      	cmp	r3, #0
 80097d0:	d002      	beq.n	80097d8 <mem_cmp+0x40>
 80097d2:	697b      	ldr	r3, [r7, #20]
 80097d4:	2b00      	cmp	r3, #0
 80097d6:	d0eb      	beq.n	80097b0 <mem_cmp+0x18>

	return r;
 80097d8:	697b      	ldr	r3, [r7, #20]
}
 80097da:	4618      	mov	r0, r3
 80097dc:	3724      	adds	r7, #36	; 0x24
 80097de:	46bd      	mov	sp, r7
 80097e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097e4:	4770      	bx	lr

080097e6 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 80097e6:	b480      	push	{r7}
 80097e8:	b083      	sub	sp, #12
 80097ea:	af00      	add	r7, sp, #0
 80097ec:	6078      	str	r0, [r7, #4]
 80097ee:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 80097f0:	e002      	b.n	80097f8 <chk_chr+0x12>
 80097f2:	687b      	ldr	r3, [r7, #4]
 80097f4:	3301      	adds	r3, #1
 80097f6:	607b      	str	r3, [r7, #4]
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	781b      	ldrb	r3, [r3, #0]
 80097fc:	2b00      	cmp	r3, #0
 80097fe:	d005      	beq.n	800980c <chk_chr+0x26>
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	781b      	ldrb	r3, [r3, #0]
 8009804:	461a      	mov	r2, r3
 8009806:	683b      	ldr	r3, [r7, #0]
 8009808:	4293      	cmp	r3, r2
 800980a:	d1f2      	bne.n	80097f2 <chk_chr+0xc>
	return *str;
 800980c:	687b      	ldr	r3, [r7, #4]
 800980e:	781b      	ldrb	r3, [r3, #0]
}
 8009810:	4618      	mov	r0, r3
 8009812:	370c      	adds	r7, #12
 8009814:	46bd      	mov	sp, r7
 8009816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800981a:	4770      	bx	lr

0800981c <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800981c:	b480      	push	{r7}
 800981e:	b085      	sub	sp, #20
 8009820:	af00      	add	r7, sp, #0
 8009822:	6078      	str	r0, [r7, #4]
 8009824:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8009826:	2300      	movs	r3, #0
 8009828:	60bb      	str	r3, [r7, #8]
 800982a:	68bb      	ldr	r3, [r7, #8]
 800982c:	60fb      	str	r3, [r7, #12]
 800982e:	e029      	b.n	8009884 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8009830:	4a27      	ldr	r2, [pc, #156]	; (80098d0 <chk_lock+0xb4>)
 8009832:	68fb      	ldr	r3, [r7, #12]
 8009834:	011b      	lsls	r3, r3, #4
 8009836:	4413      	add	r3, r2
 8009838:	681b      	ldr	r3, [r3, #0]
 800983a:	2b00      	cmp	r3, #0
 800983c:	d01d      	beq.n	800987a <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800983e:	4a24      	ldr	r2, [pc, #144]	; (80098d0 <chk_lock+0xb4>)
 8009840:	68fb      	ldr	r3, [r7, #12]
 8009842:	011b      	lsls	r3, r3, #4
 8009844:	4413      	add	r3, r2
 8009846:	681a      	ldr	r2, [r3, #0]
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	681b      	ldr	r3, [r3, #0]
 800984c:	429a      	cmp	r2, r3
 800984e:	d116      	bne.n	800987e <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8009850:	4a1f      	ldr	r2, [pc, #124]	; (80098d0 <chk_lock+0xb4>)
 8009852:	68fb      	ldr	r3, [r7, #12]
 8009854:	011b      	lsls	r3, r3, #4
 8009856:	4413      	add	r3, r2
 8009858:	3304      	adds	r3, #4
 800985a:	681a      	ldr	r2, [r3, #0]
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8009860:	429a      	cmp	r2, r3
 8009862:	d10c      	bne.n	800987e <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8009864:	4a1a      	ldr	r2, [pc, #104]	; (80098d0 <chk_lock+0xb4>)
 8009866:	68fb      	ldr	r3, [r7, #12]
 8009868:	011b      	lsls	r3, r3, #4
 800986a:	4413      	add	r3, r2
 800986c:	3308      	adds	r3, #8
 800986e:	681a      	ldr	r2, [r3, #0]
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8009874:	429a      	cmp	r2, r3
 8009876:	d102      	bne.n	800987e <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8009878:	e007      	b.n	800988a <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800987a:	2301      	movs	r3, #1
 800987c:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800987e:	68fb      	ldr	r3, [r7, #12]
 8009880:	3301      	adds	r3, #1
 8009882:	60fb      	str	r3, [r7, #12]
 8009884:	68fb      	ldr	r3, [r7, #12]
 8009886:	2b01      	cmp	r3, #1
 8009888:	d9d2      	bls.n	8009830 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800988a:	68fb      	ldr	r3, [r7, #12]
 800988c:	2b02      	cmp	r3, #2
 800988e:	d109      	bne.n	80098a4 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8009890:	68bb      	ldr	r3, [r7, #8]
 8009892:	2b00      	cmp	r3, #0
 8009894:	d102      	bne.n	800989c <chk_lock+0x80>
 8009896:	683b      	ldr	r3, [r7, #0]
 8009898:	2b02      	cmp	r3, #2
 800989a:	d101      	bne.n	80098a0 <chk_lock+0x84>
 800989c:	2300      	movs	r3, #0
 800989e:	e010      	b.n	80098c2 <chk_lock+0xa6>
 80098a0:	2312      	movs	r3, #18
 80098a2:	e00e      	b.n	80098c2 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 80098a4:	683b      	ldr	r3, [r7, #0]
 80098a6:	2b00      	cmp	r3, #0
 80098a8:	d108      	bne.n	80098bc <chk_lock+0xa0>
 80098aa:	4a09      	ldr	r2, [pc, #36]	; (80098d0 <chk_lock+0xb4>)
 80098ac:	68fb      	ldr	r3, [r7, #12]
 80098ae:	011b      	lsls	r3, r3, #4
 80098b0:	4413      	add	r3, r2
 80098b2:	330c      	adds	r3, #12
 80098b4:	881b      	ldrh	r3, [r3, #0]
 80098b6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80098ba:	d101      	bne.n	80098c0 <chk_lock+0xa4>
 80098bc:	2310      	movs	r3, #16
 80098be:	e000      	b.n	80098c2 <chk_lock+0xa6>
 80098c0:	2300      	movs	r3, #0
}
 80098c2:	4618      	mov	r0, r3
 80098c4:	3714      	adds	r7, #20
 80098c6:	46bd      	mov	sp, r7
 80098c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098cc:	4770      	bx	lr
 80098ce:	bf00      	nop
 80098d0:	20007570 	.word	0x20007570

080098d4 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 80098d4:	b480      	push	{r7}
 80098d6:	b083      	sub	sp, #12
 80098d8:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80098da:	2300      	movs	r3, #0
 80098dc:	607b      	str	r3, [r7, #4]
 80098de:	e002      	b.n	80098e6 <enq_lock+0x12>
 80098e0:	687b      	ldr	r3, [r7, #4]
 80098e2:	3301      	adds	r3, #1
 80098e4:	607b      	str	r3, [r7, #4]
 80098e6:	687b      	ldr	r3, [r7, #4]
 80098e8:	2b01      	cmp	r3, #1
 80098ea:	d806      	bhi.n	80098fa <enq_lock+0x26>
 80098ec:	4a09      	ldr	r2, [pc, #36]	; (8009914 <enq_lock+0x40>)
 80098ee:	687b      	ldr	r3, [r7, #4]
 80098f0:	011b      	lsls	r3, r3, #4
 80098f2:	4413      	add	r3, r2
 80098f4:	681b      	ldr	r3, [r3, #0]
 80098f6:	2b00      	cmp	r3, #0
 80098f8:	d1f2      	bne.n	80098e0 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 80098fa:	687b      	ldr	r3, [r7, #4]
 80098fc:	2b02      	cmp	r3, #2
 80098fe:	bf14      	ite	ne
 8009900:	2301      	movne	r3, #1
 8009902:	2300      	moveq	r3, #0
 8009904:	b2db      	uxtb	r3, r3
}
 8009906:	4618      	mov	r0, r3
 8009908:	370c      	adds	r7, #12
 800990a:	46bd      	mov	sp, r7
 800990c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009910:	4770      	bx	lr
 8009912:	bf00      	nop
 8009914:	20007570 	.word	0x20007570

08009918 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8009918:	b480      	push	{r7}
 800991a:	b085      	sub	sp, #20
 800991c:	af00      	add	r7, sp, #0
 800991e:	6078      	str	r0, [r7, #4]
 8009920:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8009922:	2300      	movs	r3, #0
 8009924:	60fb      	str	r3, [r7, #12]
 8009926:	e01f      	b.n	8009968 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8009928:	4a41      	ldr	r2, [pc, #260]	; (8009a30 <inc_lock+0x118>)
 800992a:	68fb      	ldr	r3, [r7, #12]
 800992c:	011b      	lsls	r3, r3, #4
 800992e:	4413      	add	r3, r2
 8009930:	681a      	ldr	r2, [r3, #0]
 8009932:	687b      	ldr	r3, [r7, #4]
 8009934:	681b      	ldr	r3, [r3, #0]
 8009936:	429a      	cmp	r2, r3
 8009938:	d113      	bne.n	8009962 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800993a:	4a3d      	ldr	r2, [pc, #244]	; (8009a30 <inc_lock+0x118>)
 800993c:	68fb      	ldr	r3, [r7, #12]
 800993e:	011b      	lsls	r3, r3, #4
 8009940:	4413      	add	r3, r2
 8009942:	3304      	adds	r3, #4
 8009944:	681a      	ldr	r2, [r3, #0]
 8009946:	687b      	ldr	r3, [r7, #4]
 8009948:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800994a:	429a      	cmp	r2, r3
 800994c:	d109      	bne.n	8009962 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800994e:	4a38      	ldr	r2, [pc, #224]	; (8009a30 <inc_lock+0x118>)
 8009950:	68fb      	ldr	r3, [r7, #12]
 8009952:	011b      	lsls	r3, r3, #4
 8009954:	4413      	add	r3, r2
 8009956:	3308      	adds	r3, #8
 8009958:	681a      	ldr	r2, [r3, #0]
 800995a:	687b      	ldr	r3, [r7, #4]
 800995c:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800995e:	429a      	cmp	r2, r3
 8009960:	d006      	beq.n	8009970 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8009962:	68fb      	ldr	r3, [r7, #12]
 8009964:	3301      	adds	r3, #1
 8009966:	60fb      	str	r3, [r7, #12]
 8009968:	68fb      	ldr	r3, [r7, #12]
 800996a:	2b01      	cmp	r3, #1
 800996c:	d9dc      	bls.n	8009928 <inc_lock+0x10>
 800996e:	e000      	b.n	8009972 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8009970:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8009972:	68fb      	ldr	r3, [r7, #12]
 8009974:	2b02      	cmp	r3, #2
 8009976:	d132      	bne.n	80099de <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8009978:	2300      	movs	r3, #0
 800997a:	60fb      	str	r3, [r7, #12]
 800997c:	e002      	b.n	8009984 <inc_lock+0x6c>
 800997e:	68fb      	ldr	r3, [r7, #12]
 8009980:	3301      	adds	r3, #1
 8009982:	60fb      	str	r3, [r7, #12]
 8009984:	68fb      	ldr	r3, [r7, #12]
 8009986:	2b01      	cmp	r3, #1
 8009988:	d806      	bhi.n	8009998 <inc_lock+0x80>
 800998a:	4a29      	ldr	r2, [pc, #164]	; (8009a30 <inc_lock+0x118>)
 800998c:	68fb      	ldr	r3, [r7, #12]
 800998e:	011b      	lsls	r3, r3, #4
 8009990:	4413      	add	r3, r2
 8009992:	681b      	ldr	r3, [r3, #0]
 8009994:	2b00      	cmp	r3, #0
 8009996:	d1f2      	bne.n	800997e <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8009998:	68fb      	ldr	r3, [r7, #12]
 800999a:	2b02      	cmp	r3, #2
 800999c:	d101      	bne.n	80099a2 <inc_lock+0x8a>
 800999e:	2300      	movs	r3, #0
 80099a0:	e040      	b.n	8009a24 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 80099a2:	687b      	ldr	r3, [r7, #4]
 80099a4:	681a      	ldr	r2, [r3, #0]
 80099a6:	4922      	ldr	r1, [pc, #136]	; (8009a30 <inc_lock+0x118>)
 80099a8:	68fb      	ldr	r3, [r7, #12]
 80099aa:	011b      	lsls	r3, r3, #4
 80099ac:	440b      	add	r3, r1
 80099ae:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 80099b0:	687b      	ldr	r3, [r7, #4]
 80099b2:	689a      	ldr	r2, [r3, #8]
 80099b4:	491e      	ldr	r1, [pc, #120]	; (8009a30 <inc_lock+0x118>)
 80099b6:	68fb      	ldr	r3, [r7, #12]
 80099b8:	011b      	lsls	r3, r3, #4
 80099ba:	440b      	add	r3, r1
 80099bc:	3304      	adds	r3, #4
 80099be:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 80099c0:	687b      	ldr	r3, [r7, #4]
 80099c2:	695a      	ldr	r2, [r3, #20]
 80099c4:	491a      	ldr	r1, [pc, #104]	; (8009a30 <inc_lock+0x118>)
 80099c6:	68fb      	ldr	r3, [r7, #12]
 80099c8:	011b      	lsls	r3, r3, #4
 80099ca:	440b      	add	r3, r1
 80099cc:	3308      	adds	r3, #8
 80099ce:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 80099d0:	4a17      	ldr	r2, [pc, #92]	; (8009a30 <inc_lock+0x118>)
 80099d2:	68fb      	ldr	r3, [r7, #12]
 80099d4:	011b      	lsls	r3, r3, #4
 80099d6:	4413      	add	r3, r2
 80099d8:	330c      	adds	r3, #12
 80099da:	2200      	movs	r2, #0
 80099dc:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 80099de:	683b      	ldr	r3, [r7, #0]
 80099e0:	2b00      	cmp	r3, #0
 80099e2:	d009      	beq.n	80099f8 <inc_lock+0xe0>
 80099e4:	4a12      	ldr	r2, [pc, #72]	; (8009a30 <inc_lock+0x118>)
 80099e6:	68fb      	ldr	r3, [r7, #12]
 80099e8:	011b      	lsls	r3, r3, #4
 80099ea:	4413      	add	r3, r2
 80099ec:	330c      	adds	r3, #12
 80099ee:	881b      	ldrh	r3, [r3, #0]
 80099f0:	2b00      	cmp	r3, #0
 80099f2:	d001      	beq.n	80099f8 <inc_lock+0xe0>
 80099f4:	2300      	movs	r3, #0
 80099f6:	e015      	b.n	8009a24 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 80099f8:	683b      	ldr	r3, [r7, #0]
 80099fa:	2b00      	cmp	r3, #0
 80099fc:	d108      	bne.n	8009a10 <inc_lock+0xf8>
 80099fe:	4a0c      	ldr	r2, [pc, #48]	; (8009a30 <inc_lock+0x118>)
 8009a00:	68fb      	ldr	r3, [r7, #12]
 8009a02:	011b      	lsls	r3, r3, #4
 8009a04:	4413      	add	r3, r2
 8009a06:	330c      	adds	r3, #12
 8009a08:	881b      	ldrh	r3, [r3, #0]
 8009a0a:	3301      	adds	r3, #1
 8009a0c:	b29a      	uxth	r2, r3
 8009a0e:	e001      	b.n	8009a14 <inc_lock+0xfc>
 8009a10:	f44f 7280 	mov.w	r2, #256	; 0x100
 8009a14:	4906      	ldr	r1, [pc, #24]	; (8009a30 <inc_lock+0x118>)
 8009a16:	68fb      	ldr	r3, [r7, #12]
 8009a18:	011b      	lsls	r3, r3, #4
 8009a1a:	440b      	add	r3, r1
 8009a1c:	330c      	adds	r3, #12
 8009a1e:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8009a20:	68fb      	ldr	r3, [r7, #12]
 8009a22:	3301      	adds	r3, #1
}
 8009a24:	4618      	mov	r0, r3
 8009a26:	3714      	adds	r7, #20
 8009a28:	46bd      	mov	sp, r7
 8009a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a2e:	4770      	bx	lr
 8009a30:	20007570 	.word	0x20007570

08009a34 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8009a34:	b480      	push	{r7}
 8009a36:	b085      	sub	sp, #20
 8009a38:	af00      	add	r7, sp, #0
 8009a3a:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8009a3c:	687b      	ldr	r3, [r7, #4]
 8009a3e:	3b01      	subs	r3, #1
 8009a40:	607b      	str	r3, [r7, #4]
 8009a42:	687b      	ldr	r3, [r7, #4]
 8009a44:	2b01      	cmp	r3, #1
 8009a46:	d825      	bhi.n	8009a94 <dec_lock+0x60>
		n = Files[i].ctr;
 8009a48:	4a17      	ldr	r2, [pc, #92]	; (8009aa8 <dec_lock+0x74>)
 8009a4a:	687b      	ldr	r3, [r7, #4]
 8009a4c:	011b      	lsls	r3, r3, #4
 8009a4e:	4413      	add	r3, r2
 8009a50:	330c      	adds	r3, #12
 8009a52:	881b      	ldrh	r3, [r3, #0]
 8009a54:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8009a56:	89fb      	ldrh	r3, [r7, #14]
 8009a58:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009a5c:	d101      	bne.n	8009a62 <dec_lock+0x2e>
 8009a5e:	2300      	movs	r3, #0
 8009a60:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 8009a62:	89fb      	ldrh	r3, [r7, #14]
 8009a64:	2b00      	cmp	r3, #0
 8009a66:	d002      	beq.n	8009a6e <dec_lock+0x3a>
 8009a68:	89fb      	ldrh	r3, [r7, #14]
 8009a6a:	3b01      	subs	r3, #1
 8009a6c:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8009a6e:	4a0e      	ldr	r2, [pc, #56]	; (8009aa8 <dec_lock+0x74>)
 8009a70:	687b      	ldr	r3, [r7, #4]
 8009a72:	011b      	lsls	r3, r3, #4
 8009a74:	4413      	add	r3, r2
 8009a76:	330c      	adds	r3, #12
 8009a78:	89fa      	ldrh	r2, [r7, #14]
 8009a7a:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8009a7c:	89fb      	ldrh	r3, [r7, #14]
 8009a7e:	2b00      	cmp	r3, #0
 8009a80:	d105      	bne.n	8009a8e <dec_lock+0x5a>
 8009a82:	4a09      	ldr	r2, [pc, #36]	; (8009aa8 <dec_lock+0x74>)
 8009a84:	687b      	ldr	r3, [r7, #4]
 8009a86:	011b      	lsls	r3, r3, #4
 8009a88:	4413      	add	r3, r2
 8009a8a:	2200      	movs	r2, #0
 8009a8c:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8009a8e:	2300      	movs	r3, #0
 8009a90:	737b      	strb	r3, [r7, #13]
 8009a92:	e001      	b.n	8009a98 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8009a94:	2302      	movs	r3, #2
 8009a96:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8009a98:	7b7b      	ldrb	r3, [r7, #13]
}
 8009a9a:	4618      	mov	r0, r3
 8009a9c:	3714      	adds	r7, #20
 8009a9e:	46bd      	mov	sp, r7
 8009aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009aa4:	4770      	bx	lr
 8009aa6:	bf00      	nop
 8009aa8:	20007570 	.word	0x20007570

08009aac <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8009aac:	b480      	push	{r7}
 8009aae:	b085      	sub	sp, #20
 8009ab0:	af00      	add	r7, sp, #0
 8009ab2:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8009ab4:	2300      	movs	r3, #0
 8009ab6:	60fb      	str	r3, [r7, #12]
 8009ab8:	e010      	b.n	8009adc <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8009aba:	4a0d      	ldr	r2, [pc, #52]	; (8009af0 <clear_lock+0x44>)
 8009abc:	68fb      	ldr	r3, [r7, #12]
 8009abe:	011b      	lsls	r3, r3, #4
 8009ac0:	4413      	add	r3, r2
 8009ac2:	681b      	ldr	r3, [r3, #0]
 8009ac4:	687a      	ldr	r2, [r7, #4]
 8009ac6:	429a      	cmp	r2, r3
 8009ac8:	d105      	bne.n	8009ad6 <clear_lock+0x2a>
 8009aca:	4a09      	ldr	r2, [pc, #36]	; (8009af0 <clear_lock+0x44>)
 8009acc:	68fb      	ldr	r3, [r7, #12]
 8009ace:	011b      	lsls	r3, r3, #4
 8009ad0:	4413      	add	r3, r2
 8009ad2:	2200      	movs	r2, #0
 8009ad4:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8009ad6:	68fb      	ldr	r3, [r7, #12]
 8009ad8:	3301      	adds	r3, #1
 8009ada:	60fb      	str	r3, [r7, #12]
 8009adc:	68fb      	ldr	r3, [r7, #12]
 8009ade:	2b01      	cmp	r3, #1
 8009ae0:	d9eb      	bls.n	8009aba <clear_lock+0xe>
	}
}
 8009ae2:	bf00      	nop
 8009ae4:	bf00      	nop
 8009ae6:	3714      	adds	r7, #20
 8009ae8:	46bd      	mov	sp, r7
 8009aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009aee:	4770      	bx	lr
 8009af0:	20007570 	.word	0x20007570

08009af4 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8009af4:	b580      	push	{r7, lr}
 8009af6:	b086      	sub	sp, #24
 8009af8:	af00      	add	r7, sp, #0
 8009afa:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8009afc:	2300      	movs	r3, #0
 8009afe:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8009b00:	687b      	ldr	r3, [r7, #4]
 8009b02:	78db      	ldrb	r3, [r3, #3]
 8009b04:	2b00      	cmp	r3, #0
 8009b06:	d034      	beq.n	8009b72 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8009b08:	687b      	ldr	r3, [r7, #4]
 8009b0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009b0c:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8009b0e:	687b      	ldr	r3, [r7, #4]
 8009b10:	7858      	ldrb	r0, [r3, #1]
 8009b12:	687b      	ldr	r3, [r7, #4]
 8009b14:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8009b18:	2301      	movs	r3, #1
 8009b1a:	697a      	ldr	r2, [r7, #20]
 8009b1c:	f7ff fd40 	bl	80095a0 <disk_write>
 8009b20:	4603      	mov	r3, r0
 8009b22:	2b00      	cmp	r3, #0
 8009b24:	d002      	beq.n	8009b2c <sync_window+0x38>
			res = FR_DISK_ERR;
 8009b26:	2301      	movs	r3, #1
 8009b28:	73fb      	strb	r3, [r7, #15]
 8009b2a:	e022      	b.n	8009b72 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8009b2c:	687b      	ldr	r3, [r7, #4]
 8009b2e:	2200      	movs	r2, #0
 8009b30:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8009b32:	687b      	ldr	r3, [r7, #4]
 8009b34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b36:	697a      	ldr	r2, [r7, #20]
 8009b38:	1ad2      	subs	r2, r2, r3
 8009b3a:	687b      	ldr	r3, [r7, #4]
 8009b3c:	69db      	ldr	r3, [r3, #28]
 8009b3e:	429a      	cmp	r2, r3
 8009b40:	d217      	bcs.n	8009b72 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8009b42:	687b      	ldr	r3, [r7, #4]
 8009b44:	789b      	ldrb	r3, [r3, #2]
 8009b46:	613b      	str	r3, [r7, #16]
 8009b48:	e010      	b.n	8009b6c <sync_window+0x78>
					wsect += fs->fsize;
 8009b4a:	687b      	ldr	r3, [r7, #4]
 8009b4c:	69db      	ldr	r3, [r3, #28]
 8009b4e:	697a      	ldr	r2, [r7, #20]
 8009b50:	4413      	add	r3, r2
 8009b52:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8009b54:	687b      	ldr	r3, [r7, #4]
 8009b56:	7858      	ldrb	r0, [r3, #1]
 8009b58:	687b      	ldr	r3, [r7, #4]
 8009b5a:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8009b5e:	2301      	movs	r3, #1
 8009b60:	697a      	ldr	r2, [r7, #20]
 8009b62:	f7ff fd1d 	bl	80095a0 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8009b66:	693b      	ldr	r3, [r7, #16]
 8009b68:	3b01      	subs	r3, #1
 8009b6a:	613b      	str	r3, [r7, #16]
 8009b6c:	693b      	ldr	r3, [r7, #16]
 8009b6e:	2b01      	cmp	r3, #1
 8009b70:	d8eb      	bhi.n	8009b4a <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8009b72:	7bfb      	ldrb	r3, [r7, #15]
}
 8009b74:	4618      	mov	r0, r3
 8009b76:	3718      	adds	r7, #24
 8009b78:	46bd      	mov	sp, r7
 8009b7a:	bd80      	pop	{r7, pc}

08009b7c <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8009b7c:	b580      	push	{r7, lr}
 8009b7e:	b084      	sub	sp, #16
 8009b80:	af00      	add	r7, sp, #0
 8009b82:	6078      	str	r0, [r7, #4]
 8009b84:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8009b86:	2300      	movs	r3, #0
 8009b88:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8009b8a:	687b      	ldr	r3, [r7, #4]
 8009b8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009b8e:	683a      	ldr	r2, [r7, #0]
 8009b90:	429a      	cmp	r2, r3
 8009b92:	d01b      	beq.n	8009bcc <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8009b94:	6878      	ldr	r0, [r7, #4]
 8009b96:	f7ff ffad 	bl	8009af4 <sync_window>
 8009b9a:	4603      	mov	r3, r0
 8009b9c:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8009b9e:	7bfb      	ldrb	r3, [r7, #15]
 8009ba0:	2b00      	cmp	r3, #0
 8009ba2:	d113      	bne.n	8009bcc <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8009ba4:	687b      	ldr	r3, [r7, #4]
 8009ba6:	7858      	ldrb	r0, [r3, #1]
 8009ba8:	687b      	ldr	r3, [r7, #4]
 8009baa:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8009bae:	2301      	movs	r3, #1
 8009bb0:	683a      	ldr	r2, [r7, #0]
 8009bb2:	f7ff fcd5 	bl	8009560 <disk_read>
 8009bb6:	4603      	mov	r3, r0
 8009bb8:	2b00      	cmp	r3, #0
 8009bba:	d004      	beq.n	8009bc6 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8009bbc:	f04f 33ff 	mov.w	r3, #4294967295
 8009bc0:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8009bc2:	2301      	movs	r3, #1
 8009bc4:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8009bc6:	687b      	ldr	r3, [r7, #4]
 8009bc8:	683a      	ldr	r2, [r7, #0]
 8009bca:	631a      	str	r2, [r3, #48]	; 0x30
		}
	}
	return res;
 8009bcc:	7bfb      	ldrb	r3, [r7, #15]
}
 8009bce:	4618      	mov	r0, r3
 8009bd0:	3710      	adds	r7, #16
 8009bd2:	46bd      	mov	sp, r7
 8009bd4:	bd80      	pop	{r7, pc}
	...

08009bd8 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8009bd8:	b580      	push	{r7, lr}
 8009bda:	b084      	sub	sp, #16
 8009bdc:	af00      	add	r7, sp, #0
 8009bde:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8009be0:	6878      	ldr	r0, [r7, #4]
 8009be2:	f7ff ff87 	bl	8009af4 <sync_window>
 8009be6:	4603      	mov	r3, r0
 8009be8:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8009bea:	7bfb      	ldrb	r3, [r7, #15]
 8009bec:	2b00      	cmp	r3, #0
 8009bee:	d159      	bne.n	8009ca4 <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8009bf0:	687b      	ldr	r3, [r7, #4]
 8009bf2:	781b      	ldrb	r3, [r3, #0]
 8009bf4:	2b03      	cmp	r3, #3
 8009bf6:	d149      	bne.n	8009c8c <sync_fs+0xb4>
 8009bf8:	687b      	ldr	r3, [r7, #4]
 8009bfa:	791b      	ldrb	r3, [r3, #4]
 8009bfc:	2b01      	cmp	r3, #1
 8009bfe:	d145      	bne.n	8009c8c <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8009c00:	687b      	ldr	r3, [r7, #4]
 8009c02:	f103 0034 	add.w	r0, r3, #52	; 0x34
 8009c06:	687b      	ldr	r3, [r7, #4]
 8009c08:	899b      	ldrh	r3, [r3, #12]
 8009c0a:	461a      	mov	r2, r3
 8009c0c:	2100      	movs	r1, #0
 8009c0e:	f7ff fda8 	bl	8009762 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8009c12:	687b      	ldr	r3, [r7, #4]
 8009c14:	3334      	adds	r3, #52	; 0x34
 8009c16:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8009c1a:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8009c1e:	4618      	mov	r0, r3
 8009c20:	f7ff fd37 	bl	8009692 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8009c24:	687b      	ldr	r3, [r7, #4]
 8009c26:	3334      	adds	r3, #52	; 0x34
 8009c28:	4921      	ldr	r1, [pc, #132]	; (8009cb0 <sync_fs+0xd8>)
 8009c2a:	4618      	mov	r0, r3
 8009c2c:	f7ff fd4c 	bl	80096c8 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8009c30:	687b      	ldr	r3, [r7, #4]
 8009c32:	3334      	adds	r3, #52	; 0x34
 8009c34:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8009c38:	491e      	ldr	r1, [pc, #120]	; (8009cb4 <sync_fs+0xdc>)
 8009c3a:	4618      	mov	r0, r3
 8009c3c:	f7ff fd44 	bl	80096c8 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8009c40:	687b      	ldr	r3, [r7, #4]
 8009c42:	3334      	adds	r3, #52	; 0x34
 8009c44:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 8009c48:	687b      	ldr	r3, [r7, #4]
 8009c4a:	695b      	ldr	r3, [r3, #20]
 8009c4c:	4619      	mov	r1, r3
 8009c4e:	4610      	mov	r0, r2
 8009c50:	f7ff fd3a 	bl	80096c8 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8009c54:	687b      	ldr	r3, [r7, #4]
 8009c56:	3334      	adds	r3, #52	; 0x34
 8009c58:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 8009c5c:	687b      	ldr	r3, [r7, #4]
 8009c5e:	691b      	ldr	r3, [r3, #16]
 8009c60:	4619      	mov	r1, r3
 8009c62:	4610      	mov	r0, r2
 8009c64:	f7ff fd30 	bl	80096c8 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8009c68:	687b      	ldr	r3, [r7, #4]
 8009c6a:	6a1b      	ldr	r3, [r3, #32]
 8009c6c:	1c5a      	adds	r2, r3, #1
 8009c6e:	687b      	ldr	r3, [r7, #4]
 8009c70:	631a      	str	r2, [r3, #48]	; 0x30
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8009c72:	687b      	ldr	r3, [r7, #4]
 8009c74:	7858      	ldrb	r0, [r3, #1]
 8009c76:	687b      	ldr	r3, [r7, #4]
 8009c78:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8009c7c:	687b      	ldr	r3, [r7, #4]
 8009c7e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009c80:	2301      	movs	r3, #1
 8009c82:	f7ff fc8d 	bl	80095a0 <disk_write>
			fs->fsi_flag = 0;
 8009c86:	687b      	ldr	r3, [r7, #4]
 8009c88:	2200      	movs	r2, #0
 8009c8a:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8009c8c:	687b      	ldr	r3, [r7, #4]
 8009c8e:	785b      	ldrb	r3, [r3, #1]
 8009c90:	2200      	movs	r2, #0
 8009c92:	2100      	movs	r1, #0
 8009c94:	4618      	mov	r0, r3
 8009c96:	f7ff fca3 	bl	80095e0 <disk_ioctl>
 8009c9a:	4603      	mov	r3, r0
 8009c9c:	2b00      	cmp	r3, #0
 8009c9e:	d001      	beq.n	8009ca4 <sync_fs+0xcc>
 8009ca0:	2301      	movs	r3, #1
 8009ca2:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8009ca4:	7bfb      	ldrb	r3, [r7, #15]
}
 8009ca6:	4618      	mov	r0, r3
 8009ca8:	3710      	adds	r7, #16
 8009caa:	46bd      	mov	sp, r7
 8009cac:	bd80      	pop	{r7, pc}
 8009cae:	bf00      	nop
 8009cb0:	41615252 	.word	0x41615252
 8009cb4:	61417272 	.word	0x61417272

08009cb8 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8009cb8:	b480      	push	{r7}
 8009cba:	b083      	sub	sp, #12
 8009cbc:	af00      	add	r7, sp, #0
 8009cbe:	6078      	str	r0, [r7, #4]
 8009cc0:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8009cc2:	683b      	ldr	r3, [r7, #0]
 8009cc4:	3b02      	subs	r3, #2
 8009cc6:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8009cc8:	687b      	ldr	r3, [r7, #4]
 8009cca:	699b      	ldr	r3, [r3, #24]
 8009ccc:	3b02      	subs	r3, #2
 8009cce:	683a      	ldr	r2, [r7, #0]
 8009cd0:	429a      	cmp	r2, r3
 8009cd2:	d301      	bcc.n	8009cd8 <clust2sect+0x20>
 8009cd4:	2300      	movs	r3, #0
 8009cd6:	e008      	b.n	8009cea <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8009cd8:	687b      	ldr	r3, [r7, #4]
 8009cda:	895b      	ldrh	r3, [r3, #10]
 8009cdc:	461a      	mov	r2, r3
 8009cde:	683b      	ldr	r3, [r7, #0]
 8009ce0:	fb03 f202 	mul.w	r2, r3, r2
 8009ce4:	687b      	ldr	r3, [r7, #4]
 8009ce6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ce8:	4413      	add	r3, r2
}
 8009cea:	4618      	mov	r0, r3
 8009cec:	370c      	adds	r7, #12
 8009cee:	46bd      	mov	sp, r7
 8009cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cf4:	4770      	bx	lr

08009cf6 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8009cf6:	b580      	push	{r7, lr}
 8009cf8:	b086      	sub	sp, #24
 8009cfa:	af00      	add	r7, sp, #0
 8009cfc:	6078      	str	r0, [r7, #4]
 8009cfe:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8009d00:	687b      	ldr	r3, [r7, #4]
 8009d02:	681b      	ldr	r3, [r3, #0]
 8009d04:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8009d06:	683b      	ldr	r3, [r7, #0]
 8009d08:	2b01      	cmp	r3, #1
 8009d0a:	d904      	bls.n	8009d16 <get_fat+0x20>
 8009d0c:	693b      	ldr	r3, [r7, #16]
 8009d0e:	699b      	ldr	r3, [r3, #24]
 8009d10:	683a      	ldr	r2, [r7, #0]
 8009d12:	429a      	cmp	r2, r3
 8009d14:	d302      	bcc.n	8009d1c <get_fat+0x26>
		val = 1;	/* Internal error */
 8009d16:	2301      	movs	r3, #1
 8009d18:	617b      	str	r3, [r7, #20]
 8009d1a:	e0bb      	b.n	8009e94 <get_fat+0x19e>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8009d1c:	f04f 33ff 	mov.w	r3, #4294967295
 8009d20:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8009d22:	693b      	ldr	r3, [r7, #16]
 8009d24:	781b      	ldrb	r3, [r3, #0]
 8009d26:	2b03      	cmp	r3, #3
 8009d28:	f000 8083 	beq.w	8009e32 <get_fat+0x13c>
 8009d2c:	2b03      	cmp	r3, #3
 8009d2e:	f300 80a7 	bgt.w	8009e80 <get_fat+0x18a>
 8009d32:	2b01      	cmp	r3, #1
 8009d34:	d002      	beq.n	8009d3c <get_fat+0x46>
 8009d36:	2b02      	cmp	r3, #2
 8009d38:	d056      	beq.n	8009de8 <get_fat+0xf2>
 8009d3a:	e0a1      	b.n	8009e80 <get_fat+0x18a>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8009d3c:	683b      	ldr	r3, [r7, #0]
 8009d3e:	60fb      	str	r3, [r7, #12]
 8009d40:	68fb      	ldr	r3, [r7, #12]
 8009d42:	085b      	lsrs	r3, r3, #1
 8009d44:	68fa      	ldr	r2, [r7, #12]
 8009d46:	4413      	add	r3, r2
 8009d48:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8009d4a:	693b      	ldr	r3, [r7, #16]
 8009d4c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009d4e:	693b      	ldr	r3, [r7, #16]
 8009d50:	899b      	ldrh	r3, [r3, #12]
 8009d52:	4619      	mov	r1, r3
 8009d54:	68fb      	ldr	r3, [r7, #12]
 8009d56:	fbb3 f3f1 	udiv	r3, r3, r1
 8009d5a:	4413      	add	r3, r2
 8009d5c:	4619      	mov	r1, r3
 8009d5e:	6938      	ldr	r0, [r7, #16]
 8009d60:	f7ff ff0c 	bl	8009b7c <move_window>
 8009d64:	4603      	mov	r3, r0
 8009d66:	2b00      	cmp	r3, #0
 8009d68:	f040 808d 	bne.w	8009e86 <get_fat+0x190>
			wc = fs->win[bc++ % SS(fs)];
 8009d6c:	68fb      	ldr	r3, [r7, #12]
 8009d6e:	1c5a      	adds	r2, r3, #1
 8009d70:	60fa      	str	r2, [r7, #12]
 8009d72:	693a      	ldr	r2, [r7, #16]
 8009d74:	8992      	ldrh	r2, [r2, #12]
 8009d76:	fbb3 f1f2 	udiv	r1, r3, r2
 8009d7a:	fb01 f202 	mul.w	r2, r1, r2
 8009d7e:	1a9b      	subs	r3, r3, r2
 8009d80:	693a      	ldr	r2, [r7, #16]
 8009d82:	4413      	add	r3, r2
 8009d84:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8009d88:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8009d8a:	693b      	ldr	r3, [r7, #16]
 8009d8c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009d8e:	693b      	ldr	r3, [r7, #16]
 8009d90:	899b      	ldrh	r3, [r3, #12]
 8009d92:	4619      	mov	r1, r3
 8009d94:	68fb      	ldr	r3, [r7, #12]
 8009d96:	fbb3 f3f1 	udiv	r3, r3, r1
 8009d9a:	4413      	add	r3, r2
 8009d9c:	4619      	mov	r1, r3
 8009d9e:	6938      	ldr	r0, [r7, #16]
 8009da0:	f7ff feec 	bl	8009b7c <move_window>
 8009da4:	4603      	mov	r3, r0
 8009da6:	2b00      	cmp	r3, #0
 8009da8:	d16f      	bne.n	8009e8a <get_fat+0x194>
			wc |= fs->win[bc % SS(fs)] << 8;
 8009daa:	693b      	ldr	r3, [r7, #16]
 8009dac:	899b      	ldrh	r3, [r3, #12]
 8009dae:	461a      	mov	r2, r3
 8009db0:	68fb      	ldr	r3, [r7, #12]
 8009db2:	fbb3 f1f2 	udiv	r1, r3, r2
 8009db6:	fb01 f202 	mul.w	r2, r1, r2
 8009dba:	1a9b      	subs	r3, r3, r2
 8009dbc:	693a      	ldr	r2, [r7, #16]
 8009dbe:	4413      	add	r3, r2
 8009dc0:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8009dc4:	021b      	lsls	r3, r3, #8
 8009dc6:	461a      	mov	r2, r3
 8009dc8:	68bb      	ldr	r3, [r7, #8]
 8009dca:	4313      	orrs	r3, r2
 8009dcc:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8009dce:	683b      	ldr	r3, [r7, #0]
 8009dd0:	f003 0301 	and.w	r3, r3, #1
 8009dd4:	2b00      	cmp	r3, #0
 8009dd6:	d002      	beq.n	8009dde <get_fat+0xe8>
 8009dd8:	68bb      	ldr	r3, [r7, #8]
 8009dda:	091b      	lsrs	r3, r3, #4
 8009ddc:	e002      	b.n	8009de4 <get_fat+0xee>
 8009dde:	68bb      	ldr	r3, [r7, #8]
 8009de0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009de4:	617b      	str	r3, [r7, #20]
			break;
 8009de6:	e055      	b.n	8009e94 <get_fat+0x19e>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8009de8:	693b      	ldr	r3, [r7, #16]
 8009dea:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009dec:	693b      	ldr	r3, [r7, #16]
 8009dee:	899b      	ldrh	r3, [r3, #12]
 8009df0:	085b      	lsrs	r3, r3, #1
 8009df2:	b29b      	uxth	r3, r3
 8009df4:	4619      	mov	r1, r3
 8009df6:	683b      	ldr	r3, [r7, #0]
 8009df8:	fbb3 f3f1 	udiv	r3, r3, r1
 8009dfc:	4413      	add	r3, r2
 8009dfe:	4619      	mov	r1, r3
 8009e00:	6938      	ldr	r0, [r7, #16]
 8009e02:	f7ff febb 	bl	8009b7c <move_window>
 8009e06:	4603      	mov	r3, r0
 8009e08:	2b00      	cmp	r3, #0
 8009e0a:	d140      	bne.n	8009e8e <get_fat+0x198>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8009e0c:	693b      	ldr	r3, [r7, #16]
 8009e0e:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8009e12:	683b      	ldr	r3, [r7, #0]
 8009e14:	005b      	lsls	r3, r3, #1
 8009e16:	693a      	ldr	r2, [r7, #16]
 8009e18:	8992      	ldrh	r2, [r2, #12]
 8009e1a:	fbb3 f0f2 	udiv	r0, r3, r2
 8009e1e:	fb00 f202 	mul.w	r2, r0, r2
 8009e22:	1a9b      	subs	r3, r3, r2
 8009e24:	440b      	add	r3, r1
 8009e26:	4618      	mov	r0, r3
 8009e28:	f7ff fbf8 	bl	800961c <ld_word>
 8009e2c:	4603      	mov	r3, r0
 8009e2e:	617b      	str	r3, [r7, #20]
			break;
 8009e30:	e030      	b.n	8009e94 <get_fat+0x19e>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8009e32:	693b      	ldr	r3, [r7, #16]
 8009e34:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009e36:	693b      	ldr	r3, [r7, #16]
 8009e38:	899b      	ldrh	r3, [r3, #12]
 8009e3a:	089b      	lsrs	r3, r3, #2
 8009e3c:	b29b      	uxth	r3, r3
 8009e3e:	4619      	mov	r1, r3
 8009e40:	683b      	ldr	r3, [r7, #0]
 8009e42:	fbb3 f3f1 	udiv	r3, r3, r1
 8009e46:	4413      	add	r3, r2
 8009e48:	4619      	mov	r1, r3
 8009e4a:	6938      	ldr	r0, [r7, #16]
 8009e4c:	f7ff fe96 	bl	8009b7c <move_window>
 8009e50:	4603      	mov	r3, r0
 8009e52:	2b00      	cmp	r3, #0
 8009e54:	d11d      	bne.n	8009e92 <get_fat+0x19c>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8009e56:	693b      	ldr	r3, [r7, #16]
 8009e58:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8009e5c:	683b      	ldr	r3, [r7, #0]
 8009e5e:	009b      	lsls	r3, r3, #2
 8009e60:	693a      	ldr	r2, [r7, #16]
 8009e62:	8992      	ldrh	r2, [r2, #12]
 8009e64:	fbb3 f0f2 	udiv	r0, r3, r2
 8009e68:	fb00 f202 	mul.w	r2, r0, r2
 8009e6c:	1a9b      	subs	r3, r3, r2
 8009e6e:	440b      	add	r3, r1
 8009e70:	4618      	mov	r0, r3
 8009e72:	f7ff fbeb 	bl	800964c <ld_dword>
 8009e76:	4603      	mov	r3, r0
 8009e78:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8009e7c:	617b      	str	r3, [r7, #20]
			break;
 8009e7e:	e009      	b.n	8009e94 <get_fat+0x19e>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8009e80:	2301      	movs	r3, #1
 8009e82:	617b      	str	r3, [r7, #20]
 8009e84:	e006      	b.n	8009e94 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8009e86:	bf00      	nop
 8009e88:	e004      	b.n	8009e94 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8009e8a:	bf00      	nop
 8009e8c:	e002      	b.n	8009e94 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8009e8e:	bf00      	nop
 8009e90:	e000      	b.n	8009e94 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8009e92:	bf00      	nop
		}
	}

	return val;
 8009e94:	697b      	ldr	r3, [r7, #20]
}
 8009e96:	4618      	mov	r0, r3
 8009e98:	3718      	adds	r7, #24
 8009e9a:	46bd      	mov	sp, r7
 8009e9c:	bd80      	pop	{r7, pc}

08009e9e <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8009e9e:	b590      	push	{r4, r7, lr}
 8009ea0:	b089      	sub	sp, #36	; 0x24
 8009ea2:	af00      	add	r7, sp, #0
 8009ea4:	60f8      	str	r0, [r7, #12]
 8009ea6:	60b9      	str	r1, [r7, #8]
 8009ea8:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8009eaa:	2302      	movs	r3, #2
 8009eac:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8009eae:	68bb      	ldr	r3, [r7, #8]
 8009eb0:	2b01      	cmp	r3, #1
 8009eb2:	f240 8102 	bls.w	800a0ba <put_fat+0x21c>
 8009eb6:	68fb      	ldr	r3, [r7, #12]
 8009eb8:	699b      	ldr	r3, [r3, #24]
 8009eba:	68ba      	ldr	r2, [r7, #8]
 8009ebc:	429a      	cmp	r2, r3
 8009ebe:	f080 80fc 	bcs.w	800a0ba <put_fat+0x21c>
		switch (fs->fs_type) {
 8009ec2:	68fb      	ldr	r3, [r7, #12]
 8009ec4:	781b      	ldrb	r3, [r3, #0]
 8009ec6:	2b03      	cmp	r3, #3
 8009ec8:	f000 80b6 	beq.w	800a038 <put_fat+0x19a>
 8009ecc:	2b03      	cmp	r3, #3
 8009ece:	f300 80fd 	bgt.w	800a0cc <put_fat+0x22e>
 8009ed2:	2b01      	cmp	r3, #1
 8009ed4:	d003      	beq.n	8009ede <put_fat+0x40>
 8009ed6:	2b02      	cmp	r3, #2
 8009ed8:	f000 8083 	beq.w	8009fe2 <put_fat+0x144>
 8009edc:	e0f6      	b.n	800a0cc <put_fat+0x22e>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8009ede:	68bb      	ldr	r3, [r7, #8]
 8009ee0:	61bb      	str	r3, [r7, #24]
 8009ee2:	69bb      	ldr	r3, [r7, #24]
 8009ee4:	085b      	lsrs	r3, r3, #1
 8009ee6:	69ba      	ldr	r2, [r7, #24]
 8009ee8:	4413      	add	r3, r2
 8009eea:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8009eec:	68fb      	ldr	r3, [r7, #12]
 8009eee:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009ef0:	68fb      	ldr	r3, [r7, #12]
 8009ef2:	899b      	ldrh	r3, [r3, #12]
 8009ef4:	4619      	mov	r1, r3
 8009ef6:	69bb      	ldr	r3, [r7, #24]
 8009ef8:	fbb3 f3f1 	udiv	r3, r3, r1
 8009efc:	4413      	add	r3, r2
 8009efe:	4619      	mov	r1, r3
 8009f00:	68f8      	ldr	r0, [r7, #12]
 8009f02:	f7ff fe3b 	bl	8009b7c <move_window>
 8009f06:	4603      	mov	r3, r0
 8009f08:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8009f0a:	7ffb      	ldrb	r3, [r7, #31]
 8009f0c:	2b00      	cmp	r3, #0
 8009f0e:	f040 80d6 	bne.w	800a0be <put_fat+0x220>
			p = fs->win + bc++ % SS(fs);
 8009f12:	68fb      	ldr	r3, [r7, #12]
 8009f14:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8009f18:	69bb      	ldr	r3, [r7, #24]
 8009f1a:	1c5a      	adds	r2, r3, #1
 8009f1c:	61ba      	str	r2, [r7, #24]
 8009f1e:	68fa      	ldr	r2, [r7, #12]
 8009f20:	8992      	ldrh	r2, [r2, #12]
 8009f22:	fbb3 f0f2 	udiv	r0, r3, r2
 8009f26:	fb00 f202 	mul.w	r2, r0, r2
 8009f2a:	1a9b      	subs	r3, r3, r2
 8009f2c:	440b      	add	r3, r1
 8009f2e:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8009f30:	68bb      	ldr	r3, [r7, #8]
 8009f32:	f003 0301 	and.w	r3, r3, #1
 8009f36:	2b00      	cmp	r3, #0
 8009f38:	d00d      	beq.n	8009f56 <put_fat+0xb8>
 8009f3a:	697b      	ldr	r3, [r7, #20]
 8009f3c:	781b      	ldrb	r3, [r3, #0]
 8009f3e:	b25b      	sxtb	r3, r3
 8009f40:	f003 030f 	and.w	r3, r3, #15
 8009f44:	b25a      	sxtb	r2, r3
 8009f46:	687b      	ldr	r3, [r7, #4]
 8009f48:	b2db      	uxtb	r3, r3
 8009f4a:	011b      	lsls	r3, r3, #4
 8009f4c:	b25b      	sxtb	r3, r3
 8009f4e:	4313      	orrs	r3, r2
 8009f50:	b25b      	sxtb	r3, r3
 8009f52:	b2db      	uxtb	r3, r3
 8009f54:	e001      	b.n	8009f5a <put_fat+0xbc>
 8009f56:	687b      	ldr	r3, [r7, #4]
 8009f58:	b2db      	uxtb	r3, r3
 8009f5a:	697a      	ldr	r2, [r7, #20]
 8009f5c:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8009f5e:	68fb      	ldr	r3, [r7, #12]
 8009f60:	2201      	movs	r2, #1
 8009f62:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8009f64:	68fb      	ldr	r3, [r7, #12]
 8009f66:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009f68:	68fb      	ldr	r3, [r7, #12]
 8009f6a:	899b      	ldrh	r3, [r3, #12]
 8009f6c:	4619      	mov	r1, r3
 8009f6e:	69bb      	ldr	r3, [r7, #24]
 8009f70:	fbb3 f3f1 	udiv	r3, r3, r1
 8009f74:	4413      	add	r3, r2
 8009f76:	4619      	mov	r1, r3
 8009f78:	68f8      	ldr	r0, [r7, #12]
 8009f7a:	f7ff fdff 	bl	8009b7c <move_window>
 8009f7e:	4603      	mov	r3, r0
 8009f80:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8009f82:	7ffb      	ldrb	r3, [r7, #31]
 8009f84:	2b00      	cmp	r3, #0
 8009f86:	f040 809c 	bne.w	800a0c2 <put_fat+0x224>
			p = fs->win + bc % SS(fs);
 8009f8a:	68fb      	ldr	r3, [r7, #12]
 8009f8c:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8009f90:	68fb      	ldr	r3, [r7, #12]
 8009f92:	899b      	ldrh	r3, [r3, #12]
 8009f94:	461a      	mov	r2, r3
 8009f96:	69bb      	ldr	r3, [r7, #24]
 8009f98:	fbb3 f0f2 	udiv	r0, r3, r2
 8009f9c:	fb00 f202 	mul.w	r2, r0, r2
 8009fa0:	1a9b      	subs	r3, r3, r2
 8009fa2:	440b      	add	r3, r1
 8009fa4:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8009fa6:	68bb      	ldr	r3, [r7, #8]
 8009fa8:	f003 0301 	and.w	r3, r3, #1
 8009fac:	2b00      	cmp	r3, #0
 8009fae:	d003      	beq.n	8009fb8 <put_fat+0x11a>
 8009fb0:	687b      	ldr	r3, [r7, #4]
 8009fb2:	091b      	lsrs	r3, r3, #4
 8009fb4:	b2db      	uxtb	r3, r3
 8009fb6:	e00e      	b.n	8009fd6 <put_fat+0x138>
 8009fb8:	697b      	ldr	r3, [r7, #20]
 8009fba:	781b      	ldrb	r3, [r3, #0]
 8009fbc:	b25b      	sxtb	r3, r3
 8009fbe:	f023 030f 	bic.w	r3, r3, #15
 8009fc2:	b25a      	sxtb	r2, r3
 8009fc4:	687b      	ldr	r3, [r7, #4]
 8009fc6:	0a1b      	lsrs	r3, r3, #8
 8009fc8:	b25b      	sxtb	r3, r3
 8009fca:	f003 030f 	and.w	r3, r3, #15
 8009fce:	b25b      	sxtb	r3, r3
 8009fd0:	4313      	orrs	r3, r2
 8009fd2:	b25b      	sxtb	r3, r3
 8009fd4:	b2db      	uxtb	r3, r3
 8009fd6:	697a      	ldr	r2, [r7, #20]
 8009fd8:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8009fda:	68fb      	ldr	r3, [r7, #12]
 8009fdc:	2201      	movs	r2, #1
 8009fde:	70da      	strb	r2, [r3, #3]
			break;
 8009fe0:	e074      	b.n	800a0cc <put_fat+0x22e>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8009fe2:	68fb      	ldr	r3, [r7, #12]
 8009fe4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009fe6:	68fb      	ldr	r3, [r7, #12]
 8009fe8:	899b      	ldrh	r3, [r3, #12]
 8009fea:	085b      	lsrs	r3, r3, #1
 8009fec:	b29b      	uxth	r3, r3
 8009fee:	4619      	mov	r1, r3
 8009ff0:	68bb      	ldr	r3, [r7, #8]
 8009ff2:	fbb3 f3f1 	udiv	r3, r3, r1
 8009ff6:	4413      	add	r3, r2
 8009ff8:	4619      	mov	r1, r3
 8009ffa:	68f8      	ldr	r0, [r7, #12]
 8009ffc:	f7ff fdbe 	bl	8009b7c <move_window>
 800a000:	4603      	mov	r3, r0
 800a002:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800a004:	7ffb      	ldrb	r3, [r7, #31]
 800a006:	2b00      	cmp	r3, #0
 800a008:	d15d      	bne.n	800a0c6 <put_fat+0x228>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800a00a:	68fb      	ldr	r3, [r7, #12]
 800a00c:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800a010:	68bb      	ldr	r3, [r7, #8]
 800a012:	005b      	lsls	r3, r3, #1
 800a014:	68fa      	ldr	r2, [r7, #12]
 800a016:	8992      	ldrh	r2, [r2, #12]
 800a018:	fbb3 f0f2 	udiv	r0, r3, r2
 800a01c:	fb00 f202 	mul.w	r2, r0, r2
 800a020:	1a9b      	subs	r3, r3, r2
 800a022:	440b      	add	r3, r1
 800a024:	687a      	ldr	r2, [r7, #4]
 800a026:	b292      	uxth	r2, r2
 800a028:	4611      	mov	r1, r2
 800a02a:	4618      	mov	r0, r3
 800a02c:	f7ff fb31 	bl	8009692 <st_word>
			fs->wflag = 1;
 800a030:	68fb      	ldr	r3, [r7, #12]
 800a032:	2201      	movs	r2, #1
 800a034:	70da      	strb	r2, [r3, #3]
			break;
 800a036:	e049      	b.n	800a0cc <put_fat+0x22e>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800a038:	68fb      	ldr	r3, [r7, #12]
 800a03a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a03c:	68fb      	ldr	r3, [r7, #12]
 800a03e:	899b      	ldrh	r3, [r3, #12]
 800a040:	089b      	lsrs	r3, r3, #2
 800a042:	b29b      	uxth	r3, r3
 800a044:	4619      	mov	r1, r3
 800a046:	68bb      	ldr	r3, [r7, #8]
 800a048:	fbb3 f3f1 	udiv	r3, r3, r1
 800a04c:	4413      	add	r3, r2
 800a04e:	4619      	mov	r1, r3
 800a050:	68f8      	ldr	r0, [r7, #12]
 800a052:	f7ff fd93 	bl	8009b7c <move_window>
 800a056:	4603      	mov	r3, r0
 800a058:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800a05a:	7ffb      	ldrb	r3, [r7, #31]
 800a05c:	2b00      	cmp	r3, #0
 800a05e:	d134      	bne.n	800a0ca <put_fat+0x22c>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800a060:	687b      	ldr	r3, [r7, #4]
 800a062:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 800a066:	68fb      	ldr	r3, [r7, #12]
 800a068:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800a06c:	68bb      	ldr	r3, [r7, #8]
 800a06e:	009b      	lsls	r3, r3, #2
 800a070:	68fa      	ldr	r2, [r7, #12]
 800a072:	8992      	ldrh	r2, [r2, #12]
 800a074:	fbb3 f0f2 	udiv	r0, r3, r2
 800a078:	fb00 f202 	mul.w	r2, r0, r2
 800a07c:	1a9b      	subs	r3, r3, r2
 800a07e:	440b      	add	r3, r1
 800a080:	4618      	mov	r0, r3
 800a082:	f7ff fae3 	bl	800964c <ld_dword>
 800a086:	4603      	mov	r3, r0
 800a088:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800a08c:	4323      	orrs	r3, r4
 800a08e:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800a090:	68fb      	ldr	r3, [r7, #12]
 800a092:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800a096:	68bb      	ldr	r3, [r7, #8]
 800a098:	009b      	lsls	r3, r3, #2
 800a09a:	68fa      	ldr	r2, [r7, #12]
 800a09c:	8992      	ldrh	r2, [r2, #12]
 800a09e:	fbb3 f0f2 	udiv	r0, r3, r2
 800a0a2:	fb00 f202 	mul.w	r2, r0, r2
 800a0a6:	1a9b      	subs	r3, r3, r2
 800a0a8:	440b      	add	r3, r1
 800a0aa:	6879      	ldr	r1, [r7, #4]
 800a0ac:	4618      	mov	r0, r3
 800a0ae:	f7ff fb0b 	bl	80096c8 <st_dword>
			fs->wflag = 1;
 800a0b2:	68fb      	ldr	r3, [r7, #12]
 800a0b4:	2201      	movs	r2, #1
 800a0b6:	70da      	strb	r2, [r3, #3]
			break;
 800a0b8:	e008      	b.n	800a0cc <put_fat+0x22e>
		}
	}
 800a0ba:	bf00      	nop
 800a0bc:	e006      	b.n	800a0cc <put_fat+0x22e>
			if (res != FR_OK) break;
 800a0be:	bf00      	nop
 800a0c0:	e004      	b.n	800a0cc <put_fat+0x22e>
			if (res != FR_OK) break;
 800a0c2:	bf00      	nop
 800a0c4:	e002      	b.n	800a0cc <put_fat+0x22e>
			if (res != FR_OK) break;
 800a0c6:	bf00      	nop
 800a0c8:	e000      	b.n	800a0cc <put_fat+0x22e>
			if (res != FR_OK) break;
 800a0ca:	bf00      	nop
	return res;
 800a0cc:	7ffb      	ldrb	r3, [r7, #31]
}
 800a0ce:	4618      	mov	r0, r3
 800a0d0:	3724      	adds	r7, #36	; 0x24
 800a0d2:	46bd      	mov	sp, r7
 800a0d4:	bd90      	pop	{r4, r7, pc}

0800a0d6 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800a0d6:	b580      	push	{r7, lr}
 800a0d8:	b088      	sub	sp, #32
 800a0da:	af00      	add	r7, sp, #0
 800a0dc:	60f8      	str	r0, [r7, #12]
 800a0de:	60b9      	str	r1, [r7, #8]
 800a0e0:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800a0e2:	2300      	movs	r3, #0
 800a0e4:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800a0e6:	68fb      	ldr	r3, [r7, #12]
 800a0e8:	681b      	ldr	r3, [r3, #0]
 800a0ea:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800a0ec:	68bb      	ldr	r3, [r7, #8]
 800a0ee:	2b01      	cmp	r3, #1
 800a0f0:	d904      	bls.n	800a0fc <remove_chain+0x26>
 800a0f2:	69bb      	ldr	r3, [r7, #24]
 800a0f4:	699b      	ldr	r3, [r3, #24]
 800a0f6:	68ba      	ldr	r2, [r7, #8]
 800a0f8:	429a      	cmp	r2, r3
 800a0fa:	d301      	bcc.n	800a100 <remove_chain+0x2a>
 800a0fc:	2302      	movs	r3, #2
 800a0fe:	e04b      	b.n	800a198 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800a100:	687b      	ldr	r3, [r7, #4]
 800a102:	2b00      	cmp	r3, #0
 800a104:	d00c      	beq.n	800a120 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800a106:	f04f 32ff 	mov.w	r2, #4294967295
 800a10a:	6879      	ldr	r1, [r7, #4]
 800a10c:	69b8      	ldr	r0, [r7, #24]
 800a10e:	f7ff fec6 	bl	8009e9e <put_fat>
 800a112:	4603      	mov	r3, r0
 800a114:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800a116:	7ffb      	ldrb	r3, [r7, #31]
 800a118:	2b00      	cmp	r3, #0
 800a11a:	d001      	beq.n	800a120 <remove_chain+0x4a>
 800a11c:	7ffb      	ldrb	r3, [r7, #31]
 800a11e:	e03b      	b.n	800a198 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800a120:	68b9      	ldr	r1, [r7, #8]
 800a122:	68f8      	ldr	r0, [r7, #12]
 800a124:	f7ff fde7 	bl	8009cf6 <get_fat>
 800a128:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800a12a:	697b      	ldr	r3, [r7, #20]
 800a12c:	2b00      	cmp	r3, #0
 800a12e:	d031      	beq.n	800a194 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800a130:	697b      	ldr	r3, [r7, #20]
 800a132:	2b01      	cmp	r3, #1
 800a134:	d101      	bne.n	800a13a <remove_chain+0x64>
 800a136:	2302      	movs	r3, #2
 800a138:	e02e      	b.n	800a198 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800a13a:	697b      	ldr	r3, [r7, #20]
 800a13c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a140:	d101      	bne.n	800a146 <remove_chain+0x70>
 800a142:	2301      	movs	r3, #1
 800a144:	e028      	b.n	800a198 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800a146:	2200      	movs	r2, #0
 800a148:	68b9      	ldr	r1, [r7, #8]
 800a14a:	69b8      	ldr	r0, [r7, #24]
 800a14c:	f7ff fea7 	bl	8009e9e <put_fat>
 800a150:	4603      	mov	r3, r0
 800a152:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800a154:	7ffb      	ldrb	r3, [r7, #31]
 800a156:	2b00      	cmp	r3, #0
 800a158:	d001      	beq.n	800a15e <remove_chain+0x88>
 800a15a:	7ffb      	ldrb	r3, [r7, #31]
 800a15c:	e01c      	b.n	800a198 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800a15e:	69bb      	ldr	r3, [r7, #24]
 800a160:	695a      	ldr	r2, [r3, #20]
 800a162:	69bb      	ldr	r3, [r7, #24]
 800a164:	699b      	ldr	r3, [r3, #24]
 800a166:	3b02      	subs	r3, #2
 800a168:	429a      	cmp	r2, r3
 800a16a:	d20b      	bcs.n	800a184 <remove_chain+0xae>
			fs->free_clst++;
 800a16c:	69bb      	ldr	r3, [r7, #24]
 800a16e:	695b      	ldr	r3, [r3, #20]
 800a170:	1c5a      	adds	r2, r3, #1
 800a172:	69bb      	ldr	r3, [r7, #24]
 800a174:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;
 800a176:	69bb      	ldr	r3, [r7, #24]
 800a178:	791b      	ldrb	r3, [r3, #4]
 800a17a:	f043 0301 	orr.w	r3, r3, #1
 800a17e:	b2da      	uxtb	r2, r3
 800a180:	69bb      	ldr	r3, [r7, #24]
 800a182:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800a184:	697b      	ldr	r3, [r7, #20]
 800a186:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800a188:	69bb      	ldr	r3, [r7, #24]
 800a18a:	699b      	ldr	r3, [r3, #24]
 800a18c:	68ba      	ldr	r2, [r7, #8]
 800a18e:	429a      	cmp	r2, r3
 800a190:	d3c6      	bcc.n	800a120 <remove_chain+0x4a>
 800a192:	e000      	b.n	800a196 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800a194:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800a196:	2300      	movs	r3, #0
}
 800a198:	4618      	mov	r0, r3
 800a19a:	3720      	adds	r7, #32
 800a19c:	46bd      	mov	sp, r7
 800a19e:	bd80      	pop	{r7, pc}

0800a1a0 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800a1a0:	b580      	push	{r7, lr}
 800a1a2:	b088      	sub	sp, #32
 800a1a4:	af00      	add	r7, sp, #0
 800a1a6:	6078      	str	r0, [r7, #4]
 800a1a8:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800a1aa:	687b      	ldr	r3, [r7, #4]
 800a1ac:	681b      	ldr	r3, [r3, #0]
 800a1ae:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800a1b0:	683b      	ldr	r3, [r7, #0]
 800a1b2:	2b00      	cmp	r3, #0
 800a1b4:	d10d      	bne.n	800a1d2 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800a1b6:	693b      	ldr	r3, [r7, #16]
 800a1b8:	691b      	ldr	r3, [r3, #16]
 800a1ba:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800a1bc:	69bb      	ldr	r3, [r7, #24]
 800a1be:	2b00      	cmp	r3, #0
 800a1c0:	d004      	beq.n	800a1cc <create_chain+0x2c>
 800a1c2:	693b      	ldr	r3, [r7, #16]
 800a1c4:	699b      	ldr	r3, [r3, #24]
 800a1c6:	69ba      	ldr	r2, [r7, #24]
 800a1c8:	429a      	cmp	r2, r3
 800a1ca:	d31b      	bcc.n	800a204 <create_chain+0x64>
 800a1cc:	2301      	movs	r3, #1
 800a1ce:	61bb      	str	r3, [r7, #24]
 800a1d0:	e018      	b.n	800a204 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800a1d2:	6839      	ldr	r1, [r7, #0]
 800a1d4:	6878      	ldr	r0, [r7, #4]
 800a1d6:	f7ff fd8e 	bl	8009cf6 <get_fat>
 800a1da:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800a1dc:	68fb      	ldr	r3, [r7, #12]
 800a1de:	2b01      	cmp	r3, #1
 800a1e0:	d801      	bhi.n	800a1e6 <create_chain+0x46>
 800a1e2:	2301      	movs	r3, #1
 800a1e4:	e070      	b.n	800a2c8 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800a1e6:	68fb      	ldr	r3, [r7, #12]
 800a1e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a1ec:	d101      	bne.n	800a1f2 <create_chain+0x52>
 800a1ee:	68fb      	ldr	r3, [r7, #12]
 800a1f0:	e06a      	b.n	800a2c8 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800a1f2:	693b      	ldr	r3, [r7, #16]
 800a1f4:	699b      	ldr	r3, [r3, #24]
 800a1f6:	68fa      	ldr	r2, [r7, #12]
 800a1f8:	429a      	cmp	r2, r3
 800a1fa:	d201      	bcs.n	800a200 <create_chain+0x60>
 800a1fc:	68fb      	ldr	r3, [r7, #12]
 800a1fe:	e063      	b.n	800a2c8 <create_chain+0x128>
		scl = clst;
 800a200:	683b      	ldr	r3, [r7, #0]
 800a202:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800a204:	69bb      	ldr	r3, [r7, #24]
 800a206:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800a208:	69fb      	ldr	r3, [r7, #28]
 800a20a:	3301      	adds	r3, #1
 800a20c:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800a20e:	693b      	ldr	r3, [r7, #16]
 800a210:	699b      	ldr	r3, [r3, #24]
 800a212:	69fa      	ldr	r2, [r7, #28]
 800a214:	429a      	cmp	r2, r3
 800a216:	d307      	bcc.n	800a228 <create_chain+0x88>
				ncl = 2;
 800a218:	2302      	movs	r3, #2
 800a21a:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800a21c:	69fa      	ldr	r2, [r7, #28]
 800a21e:	69bb      	ldr	r3, [r7, #24]
 800a220:	429a      	cmp	r2, r3
 800a222:	d901      	bls.n	800a228 <create_chain+0x88>
 800a224:	2300      	movs	r3, #0
 800a226:	e04f      	b.n	800a2c8 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800a228:	69f9      	ldr	r1, [r7, #28]
 800a22a:	6878      	ldr	r0, [r7, #4]
 800a22c:	f7ff fd63 	bl	8009cf6 <get_fat>
 800a230:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800a232:	68fb      	ldr	r3, [r7, #12]
 800a234:	2b00      	cmp	r3, #0
 800a236:	d00e      	beq.n	800a256 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800a238:	68fb      	ldr	r3, [r7, #12]
 800a23a:	2b01      	cmp	r3, #1
 800a23c:	d003      	beq.n	800a246 <create_chain+0xa6>
 800a23e:	68fb      	ldr	r3, [r7, #12]
 800a240:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a244:	d101      	bne.n	800a24a <create_chain+0xaa>
 800a246:	68fb      	ldr	r3, [r7, #12]
 800a248:	e03e      	b.n	800a2c8 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800a24a:	69fa      	ldr	r2, [r7, #28]
 800a24c:	69bb      	ldr	r3, [r7, #24]
 800a24e:	429a      	cmp	r2, r3
 800a250:	d1da      	bne.n	800a208 <create_chain+0x68>
 800a252:	2300      	movs	r3, #0
 800a254:	e038      	b.n	800a2c8 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800a256:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800a258:	f04f 32ff 	mov.w	r2, #4294967295
 800a25c:	69f9      	ldr	r1, [r7, #28]
 800a25e:	6938      	ldr	r0, [r7, #16]
 800a260:	f7ff fe1d 	bl	8009e9e <put_fat>
 800a264:	4603      	mov	r3, r0
 800a266:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800a268:	7dfb      	ldrb	r3, [r7, #23]
 800a26a:	2b00      	cmp	r3, #0
 800a26c:	d109      	bne.n	800a282 <create_chain+0xe2>
 800a26e:	683b      	ldr	r3, [r7, #0]
 800a270:	2b00      	cmp	r3, #0
 800a272:	d006      	beq.n	800a282 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800a274:	69fa      	ldr	r2, [r7, #28]
 800a276:	6839      	ldr	r1, [r7, #0]
 800a278:	6938      	ldr	r0, [r7, #16]
 800a27a:	f7ff fe10 	bl	8009e9e <put_fat>
 800a27e:	4603      	mov	r3, r0
 800a280:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800a282:	7dfb      	ldrb	r3, [r7, #23]
 800a284:	2b00      	cmp	r3, #0
 800a286:	d116      	bne.n	800a2b6 <create_chain+0x116>
		fs->last_clst = ncl;
 800a288:	693b      	ldr	r3, [r7, #16]
 800a28a:	69fa      	ldr	r2, [r7, #28]
 800a28c:	611a      	str	r2, [r3, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800a28e:	693b      	ldr	r3, [r7, #16]
 800a290:	695a      	ldr	r2, [r3, #20]
 800a292:	693b      	ldr	r3, [r7, #16]
 800a294:	699b      	ldr	r3, [r3, #24]
 800a296:	3b02      	subs	r3, #2
 800a298:	429a      	cmp	r2, r3
 800a29a:	d804      	bhi.n	800a2a6 <create_chain+0x106>
 800a29c:	693b      	ldr	r3, [r7, #16]
 800a29e:	695b      	ldr	r3, [r3, #20]
 800a2a0:	1e5a      	subs	r2, r3, #1
 800a2a2:	693b      	ldr	r3, [r7, #16]
 800a2a4:	615a      	str	r2, [r3, #20]
		fs->fsi_flag |= 1;
 800a2a6:	693b      	ldr	r3, [r7, #16]
 800a2a8:	791b      	ldrb	r3, [r3, #4]
 800a2aa:	f043 0301 	orr.w	r3, r3, #1
 800a2ae:	b2da      	uxtb	r2, r3
 800a2b0:	693b      	ldr	r3, [r7, #16]
 800a2b2:	711a      	strb	r2, [r3, #4]
 800a2b4:	e007      	b.n	800a2c6 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800a2b6:	7dfb      	ldrb	r3, [r7, #23]
 800a2b8:	2b01      	cmp	r3, #1
 800a2ba:	d102      	bne.n	800a2c2 <create_chain+0x122>
 800a2bc:	f04f 33ff 	mov.w	r3, #4294967295
 800a2c0:	e000      	b.n	800a2c4 <create_chain+0x124>
 800a2c2:	2301      	movs	r3, #1
 800a2c4:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800a2c6:	69fb      	ldr	r3, [r7, #28]
}
 800a2c8:	4618      	mov	r0, r3
 800a2ca:	3720      	adds	r7, #32
 800a2cc:	46bd      	mov	sp, r7
 800a2ce:	bd80      	pop	{r7, pc}

0800a2d0 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800a2d0:	b580      	push	{r7, lr}
 800a2d2:	b086      	sub	sp, #24
 800a2d4:	af00      	add	r7, sp, #0
 800a2d6:	6078      	str	r0, [r7, #4]
 800a2d8:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800a2da:	687b      	ldr	r3, [r7, #4]
 800a2dc:	681b      	ldr	r3, [r3, #0]
 800a2de:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800a2e0:	683b      	ldr	r3, [r7, #0]
 800a2e2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a2e6:	d204      	bcs.n	800a2f2 <dir_sdi+0x22>
 800a2e8:	683b      	ldr	r3, [r7, #0]
 800a2ea:	f003 031f 	and.w	r3, r3, #31
 800a2ee:	2b00      	cmp	r3, #0
 800a2f0:	d001      	beq.n	800a2f6 <dir_sdi+0x26>
		return FR_INT_ERR;
 800a2f2:	2302      	movs	r3, #2
 800a2f4:	e071      	b.n	800a3da <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 800a2f6:	687b      	ldr	r3, [r7, #4]
 800a2f8:	683a      	ldr	r2, [r7, #0]
 800a2fa:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800a2fc:	687b      	ldr	r3, [r7, #4]
 800a2fe:	689b      	ldr	r3, [r3, #8]
 800a300:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800a302:	697b      	ldr	r3, [r7, #20]
 800a304:	2b00      	cmp	r3, #0
 800a306:	d106      	bne.n	800a316 <dir_sdi+0x46>
 800a308:	693b      	ldr	r3, [r7, #16]
 800a30a:	781b      	ldrb	r3, [r3, #0]
 800a30c:	2b02      	cmp	r3, #2
 800a30e:	d902      	bls.n	800a316 <dir_sdi+0x46>
		clst = fs->dirbase;
 800a310:	693b      	ldr	r3, [r7, #16]
 800a312:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a314:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800a316:	697b      	ldr	r3, [r7, #20]
 800a318:	2b00      	cmp	r3, #0
 800a31a:	d10c      	bne.n	800a336 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800a31c:	683b      	ldr	r3, [r7, #0]
 800a31e:	095b      	lsrs	r3, r3, #5
 800a320:	693a      	ldr	r2, [r7, #16]
 800a322:	8912      	ldrh	r2, [r2, #8]
 800a324:	4293      	cmp	r3, r2
 800a326:	d301      	bcc.n	800a32c <dir_sdi+0x5c>
 800a328:	2302      	movs	r3, #2
 800a32a:	e056      	b.n	800a3da <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 800a32c:	693b      	ldr	r3, [r7, #16]
 800a32e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a330:	687b      	ldr	r3, [r7, #4]
 800a332:	61da      	str	r2, [r3, #28]
 800a334:	e02d      	b.n	800a392 <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800a336:	693b      	ldr	r3, [r7, #16]
 800a338:	895b      	ldrh	r3, [r3, #10]
 800a33a:	461a      	mov	r2, r3
 800a33c:	693b      	ldr	r3, [r7, #16]
 800a33e:	899b      	ldrh	r3, [r3, #12]
 800a340:	fb02 f303 	mul.w	r3, r2, r3
 800a344:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800a346:	e019      	b.n	800a37c <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800a348:	687b      	ldr	r3, [r7, #4]
 800a34a:	6979      	ldr	r1, [r7, #20]
 800a34c:	4618      	mov	r0, r3
 800a34e:	f7ff fcd2 	bl	8009cf6 <get_fat>
 800a352:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800a354:	697b      	ldr	r3, [r7, #20]
 800a356:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a35a:	d101      	bne.n	800a360 <dir_sdi+0x90>
 800a35c:	2301      	movs	r3, #1
 800a35e:	e03c      	b.n	800a3da <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800a360:	697b      	ldr	r3, [r7, #20]
 800a362:	2b01      	cmp	r3, #1
 800a364:	d904      	bls.n	800a370 <dir_sdi+0xa0>
 800a366:	693b      	ldr	r3, [r7, #16]
 800a368:	699b      	ldr	r3, [r3, #24]
 800a36a:	697a      	ldr	r2, [r7, #20]
 800a36c:	429a      	cmp	r2, r3
 800a36e:	d301      	bcc.n	800a374 <dir_sdi+0xa4>
 800a370:	2302      	movs	r3, #2
 800a372:	e032      	b.n	800a3da <dir_sdi+0x10a>
			ofs -= csz;
 800a374:	683a      	ldr	r2, [r7, #0]
 800a376:	68fb      	ldr	r3, [r7, #12]
 800a378:	1ad3      	subs	r3, r2, r3
 800a37a:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800a37c:	683a      	ldr	r2, [r7, #0]
 800a37e:	68fb      	ldr	r3, [r7, #12]
 800a380:	429a      	cmp	r2, r3
 800a382:	d2e1      	bcs.n	800a348 <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 800a384:	6979      	ldr	r1, [r7, #20]
 800a386:	6938      	ldr	r0, [r7, #16]
 800a388:	f7ff fc96 	bl	8009cb8 <clust2sect>
 800a38c:	4602      	mov	r2, r0
 800a38e:	687b      	ldr	r3, [r7, #4]
 800a390:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800a392:	687b      	ldr	r3, [r7, #4]
 800a394:	697a      	ldr	r2, [r7, #20]
 800a396:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800a398:	687b      	ldr	r3, [r7, #4]
 800a39a:	69db      	ldr	r3, [r3, #28]
 800a39c:	2b00      	cmp	r3, #0
 800a39e:	d101      	bne.n	800a3a4 <dir_sdi+0xd4>
 800a3a0:	2302      	movs	r3, #2
 800a3a2:	e01a      	b.n	800a3da <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800a3a4:	687b      	ldr	r3, [r7, #4]
 800a3a6:	69da      	ldr	r2, [r3, #28]
 800a3a8:	693b      	ldr	r3, [r7, #16]
 800a3aa:	899b      	ldrh	r3, [r3, #12]
 800a3ac:	4619      	mov	r1, r3
 800a3ae:	683b      	ldr	r3, [r7, #0]
 800a3b0:	fbb3 f3f1 	udiv	r3, r3, r1
 800a3b4:	441a      	add	r2, r3
 800a3b6:	687b      	ldr	r3, [r7, #4]
 800a3b8:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800a3ba:	693b      	ldr	r3, [r7, #16]
 800a3bc:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800a3c0:	693b      	ldr	r3, [r7, #16]
 800a3c2:	899b      	ldrh	r3, [r3, #12]
 800a3c4:	461a      	mov	r2, r3
 800a3c6:	683b      	ldr	r3, [r7, #0]
 800a3c8:	fbb3 f0f2 	udiv	r0, r3, r2
 800a3cc:	fb00 f202 	mul.w	r2, r0, r2
 800a3d0:	1a9b      	subs	r3, r3, r2
 800a3d2:	18ca      	adds	r2, r1, r3
 800a3d4:	687b      	ldr	r3, [r7, #4]
 800a3d6:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800a3d8:	2300      	movs	r3, #0
}
 800a3da:	4618      	mov	r0, r3
 800a3dc:	3718      	adds	r7, #24
 800a3de:	46bd      	mov	sp, r7
 800a3e0:	bd80      	pop	{r7, pc}

0800a3e2 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800a3e2:	b580      	push	{r7, lr}
 800a3e4:	b086      	sub	sp, #24
 800a3e6:	af00      	add	r7, sp, #0
 800a3e8:	6078      	str	r0, [r7, #4]
 800a3ea:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800a3ec:	687b      	ldr	r3, [r7, #4]
 800a3ee:	681b      	ldr	r3, [r3, #0]
 800a3f0:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800a3f2:	687b      	ldr	r3, [r7, #4]
 800a3f4:	695b      	ldr	r3, [r3, #20]
 800a3f6:	3320      	adds	r3, #32
 800a3f8:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800a3fa:	687b      	ldr	r3, [r7, #4]
 800a3fc:	69db      	ldr	r3, [r3, #28]
 800a3fe:	2b00      	cmp	r3, #0
 800a400:	d003      	beq.n	800a40a <dir_next+0x28>
 800a402:	68bb      	ldr	r3, [r7, #8]
 800a404:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a408:	d301      	bcc.n	800a40e <dir_next+0x2c>
 800a40a:	2304      	movs	r3, #4
 800a40c:	e0bb      	b.n	800a586 <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800a40e:	68fb      	ldr	r3, [r7, #12]
 800a410:	899b      	ldrh	r3, [r3, #12]
 800a412:	461a      	mov	r2, r3
 800a414:	68bb      	ldr	r3, [r7, #8]
 800a416:	fbb3 f1f2 	udiv	r1, r3, r2
 800a41a:	fb01 f202 	mul.w	r2, r1, r2
 800a41e:	1a9b      	subs	r3, r3, r2
 800a420:	2b00      	cmp	r3, #0
 800a422:	f040 809d 	bne.w	800a560 <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 800a426:	687b      	ldr	r3, [r7, #4]
 800a428:	69db      	ldr	r3, [r3, #28]
 800a42a:	1c5a      	adds	r2, r3, #1
 800a42c:	687b      	ldr	r3, [r7, #4]
 800a42e:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800a430:	687b      	ldr	r3, [r7, #4]
 800a432:	699b      	ldr	r3, [r3, #24]
 800a434:	2b00      	cmp	r3, #0
 800a436:	d10b      	bne.n	800a450 <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800a438:	68bb      	ldr	r3, [r7, #8]
 800a43a:	095b      	lsrs	r3, r3, #5
 800a43c:	68fa      	ldr	r2, [r7, #12]
 800a43e:	8912      	ldrh	r2, [r2, #8]
 800a440:	4293      	cmp	r3, r2
 800a442:	f0c0 808d 	bcc.w	800a560 <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 800a446:	687b      	ldr	r3, [r7, #4]
 800a448:	2200      	movs	r2, #0
 800a44a:	61da      	str	r2, [r3, #28]
 800a44c:	2304      	movs	r3, #4
 800a44e:	e09a      	b.n	800a586 <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800a450:	68fb      	ldr	r3, [r7, #12]
 800a452:	899b      	ldrh	r3, [r3, #12]
 800a454:	461a      	mov	r2, r3
 800a456:	68bb      	ldr	r3, [r7, #8]
 800a458:	fbb3 f3f2 	udiv	r3, r3, r2
 800a45c:	68fa      	ldr	r2, [r7, #12]
 800a45e:	8952      	ldrh	r2, [r2, #10]
 800a460:	3a01      	subs	r2, #1
 800a462:	4013      	ands	r3, r2
 800a464:	2b00      	cmp	r3, #0
 800a466:	d17b      	bne.n	800a560 <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800a468:	687a      	ldr	r2, [r7, #4]
 800a46a:	687b      	ldr	r3, [r7, #4]
 800a46c:	699b      	ldr	r3, [r3, #24]
 800a46e:	4619      	mov	r1, r3
 800a470:	4610      	mov	r0, r2
 800a472:	f7ff fc40 	bl	8009cf6 <get_fat>
 800a476:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800a478:	697b      	ldr	r3, [r7, #20]
 800a47a:	2b01      	cmp	r3, #1
 800a47c:	d801      	bhi.n	800a482 <dir_next+0xa0>
 800a47e:	2302      	movs	r3, #2
 800a480:	e081      	b.n	800a586 <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800a482:	697b      	ldr	r3, [r7, #20]
 800a484:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a488:	d101      	bne.n	800a48e <dir_next+0xac>
 800a48a:	2301      	movs	r3, #1
 800a48c:	e07b      	b.n	800a586 <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800a48e:	68fb      	ldr	r3, [r7, #12]
 800a490:	699b      	ldr	r3, [r3, #24]
 800a492:	697a      	ldr	r2, [r7, #20]
 800a494:	429a      	cmp	r2, r3
 800a496:	d359      	bcc.n	800a54c <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800a498:	683b      	ldr	r3, [r7, #0]
 800a49a:	2b00      	cmp	r3, #0
 800a49c:	d104      	bne.n	800a4a8 <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 800a49e:	687b      	ldr	r3, [r7, #4]
 800a4a0:	2200      	movs	r2, #0
 800a4a2:	61da      	str	r2, [r3, #28]
 800a4a4:	2304      	movs	r3, #4
 800a4a6:	e06e      	b.n	800a586 <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800a4a8:	687a      	ldr	r2, [r7, #4]
 800a4aa:	687b      	ldr	r3, [r7, #4]
 800a4ac:	699b      	ldr	r3, [r3, #24]
 800a4ae:	4619      	mov	r1, r3
 800a4b0:	4610      	mov	r0, r2
 800a4b2:	f7ff fe75 	bl	800a1a0 <create_chain>
 800a4b6:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800a4b8:	697b      	ldr	r3, [r7, #20]
 800a4ba:	2b00      	cmp	r3, #0
 800a4bc:	d101      	bne.n	800a4c2 <dir_next+0xe0>
 800a4be:	2307      	movs	r3, #7
 800a4c0:	e061      	b.n	800a586 <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800a4c2:	697b      	ldr	r3, [r7, #20]
 800a4c4:	2b01      	cmp	r3, #1
 800a4c6:	d101      	bne.n	800a4cc <dir_next+0xea>
 800a4c8:	2302      	movs	r3, #2
 800a4ca:	e05c      	b.n	800a586 <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800a4cc:	697b      	ldr	r3, [r7, #20]
 800a4ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a4d2:	d101      	bne.n	800a4d8 <dir_next+0xf6>
 800a4d4:	2301      	movs	r3, #1
 800a4d6:	e056      	b.n	800a586 <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800a4d8:	68f8      	ldr	r0, [r7, #12]
 800a4da:	f7ff fb0b 	bl	8009af4 <sync_window>
 800a4de:	4603      	mov	r3, r0
 800a4e0:	2b00      	cmp	r3, #0
 800a4e2:	d001      	beq.n	800a4e8 <dir_next+0x106>
 800a4e4:	2301      	movs	r3, #1
 800a4e6:	e04e      	b.n	800a586 <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800a4e8:	68fb      	ldr	r3, [r7, #12]
 800a4ea:	f103 0034 	add.w	r0, r3, #52	; 0x34
 800a4ee:	68fb      	ldr	r3, [r7, #12]
 800a4f0:	899b      	ldrh	r3, [r3, #12]
 800a4f2:	461a      	mov	r2, r3
 800a4f4:	2100      	movs	r1, #0
 800a4f6:	f7ff f934 	bl	8009762 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800a4fa:	2300      	movs	r3, #0
 800a4fc:	613b      	str	r3, [r7, #16]
 800a4fe:	6979      	ldr	r1, [r7, #20]
 800a500:	68f8      	ldr	r0, [r7, #12]
 800a502:	f7ff fbd9 	bl	8009cb8 <clust2sect>
 800a506:	4602      	mov	r2, r0
 800a508:	68fb      	ldr	r3, [r7, #12]
 800a50a:	631a      	str	r2, [r3, #48]	; 0x30
 800a50c:	e012      	b.n	800a534 <dir_next+0x152>
						fs->wflag = 1;
 800a50e:	68fb      	ldr	r3, [r7, #12]
 800a510:	2201      	movs	r2, #1
 800a512:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800a514:	68f8      	ldr	r0, [r7, #12]
 800a516:	f7ff faed 	bl	8009af4 <sync_window>
 800a51a:	4603      	mov	r3, r0
 800a51c:	2b00      	cmp	r3, #0
 800a51e:	d001      	beq.n	800a524 <dir_next+0x142>
 800a520:	2301      	movs	r3, #1
 800a522:	e030      	b.n	800a586 <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800a524:	693b      	ldr	r3, [r7, #16]
 800a526:	3301      	adds	r3, #1
 800a528:	613b      	str	r3, [r7, #16]
 800a52a:	68fb      	ldr	r3, [r7, #12]
 800a52c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a52e:	1c5a      	adds	r2, r3, #1
 800a530:	68fb      	ldr	r3, [r7, #12]
 800a532:	631a      	str	r2, [r3, #48]	; 0x30
 800a534:	68fb      	ldr	r3, [r7, #12]
 800a536:	895b      	ldrh	r3, [r3, #10]
 800a538:	461a      	mov	r2, r3
 800a53a:	693b      	ldr	r3, [r7, #16]
 800a53c:	4293      	cmp	r3, r2
 800a53e:	d3e6      	bcc.n	800a50e <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 800a540:	68fb      	ldr	r3, [r7, #12]
 800a542:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a544:	693b      	ldr	r3, [r7, #16]
 800a546:	1ad2      	subs	r2, r2, r3
 800a548:	68fb      	ldr	r3, [r7, #12]
 800a54a:	631a      	str	r2, [r3, #48]	; 0x30
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800a54c:	687b      	ldr	r3, [r7, #4]
 800a54e:	697a      	ldr	r2, [r7, #20]
 800a550:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800a552:	6979      	ldr	r1, [r7, #20]
 800a554:	68f8      	ldr	r0, [r7, #12]
 800a556:	f7ff fbaf 	bl	8009cb8 <clust2sect>
 800a55a:	4602      	mov	r2, r0
 800a55c:	687b      	ldr	r3, [r7, #4]
 800a55e:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800a560:	687b      	ldr	r3, [r7, #4]
 800a562:	68ba      	ldr	r2, [r7, #8]
 800a564:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800a566:	68fb      	ldr	r3, [r7, #12]
 800a568:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800a56c:	68fb      	ldr	r3, [r7, #12]
 800a56e:	899b      	ldrh	r3, [r3, #12]
 800a570:	461a      	mov	r2, r3
 800a572:	68bb      	ldr	r3, [r7, #8]
 800a574:	fbb3 f0f2 	udiv	r0, r3, r2
 800a578:	fb00 f202 	mul.w	r2, r0, r2
 800a57c:	1a9b      	subs	r3, r3, r2
 800a57e:	18ca      	adds	r2, r1, r3
 800a580:	687b      	ldr	r3, [r7, #4]
 800a582:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800a584:	2300      	movs	r3, #0
}
 800a586:	4618      	mov	r0, r3
 800a588:	3718      	adds	r7, #24
 800a58a:	46bd      	mov	sp, r7
 800a58c:	bd80      	pop	{r7, pc}

0800a58e <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800a58e:	b580      	push	{r7, lr}
 800a590:	b086      	sub	sp, #24
 800a592:	af00      	add	r7, sp, #0
 800a594:	6078      	str	r0, [r7, #4]
 800a596:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800a598:	687b      	ldr	r3, [r7, #4]
 800a59a:	681b      	ldr	r3, [r3, #0]
 800a59c:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800a59e:	2100      	movs	r1, #0
 800a5a0:	6878      	ldr	r0, [r7, #4]
 800a5a2:	f7ff fe95 	bl	800a2d0 <dir_sdi>
 800a5a6:	4603      	mov	r3, r0
 800a5a8:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800a5aa:	7dfb      	ldrb	r3, [r7, #23]
 800a5ac:	2b00      	cmp	r3, #0
 800a5ae:	d12b      	bne.n	800a608 <dir_alloc+0x7a>
		n = 0;
 800a5b0:	2300      	movs	r3, #0
 800a5b2:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800a5b4:	687b      	ldr	r3, [r7, #4]
 800a5b6:	69db      	ldr	r3, [r3, #28]
 800a5b8:	4619      	mov	r1, r3
 800a5ba:	68f8      	ldr	r0, [r7, #12]
 800a5bc:	f7ff fade 	bl	8009b7c <move_window>
 800a5c0:	4603      	mov	r3, r0
 800a5c2:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800a5c4:	7dfb      	ldrb	r3, [r7, #23]
 800a5c6:	2b00      	cmp	r3, #0
 800a5c8:	d11d      	bne.n	800a606 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800a5ca:	687b      	ldr	r3, [r7, #4]
 800a5cc:	6a1b      	ldr	r3, [r3, #32]
 800a5ce:	781b      	ldrb	r3, [r3, #0]
 800a5d0:	2be5      	cmp	r3, #229	; 0xe5
 800a5d2:	d004      	beq.n	800a5de <dir_alloc+0x50>
 800a5d4:	687b      	ldr	r3, [r7, #4]
 800a5d6:	6a1b      	ldr	r3, [r3, #32]
 800a5d8:	781b      	ldrb	r3, [r3, #0]
 800a5da:	2b00      	cmp	r3, #0
 800a5dc:	d107      	bne.n	800a5ee <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800a5de:	693b      	ldr	r3, [r7, #16]
 800a5e0:	3301      	adds	r3, #1
 800a5e2:	613b      	str	r3, [r7, #16]
 800a5e4:	693a      	ldr	r2, [r7, #16]
 800a5e6:	683b      	ldr	r3, [r7, #0]
 800a5e8:	429a      	cmp	r2, r3
 800a5ea:	d102      	bne.n	800a5f2 <dir_alloc+0x64>
 800a5ec:	e00c      	b.n	800a608 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800a5ee:	2300      	movs	r3, #0
 800a5f0:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800a5f2:	2101      	movs	r1, #1
 800a5f4:	6878      	ldr	r0, [r7, #4]
 800a5f6:	f7ff fef4 	bl	800a3e2 <dir_next>
 800a5fa:	4603      	mov	r3, r0
 800a5fc:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800a5fe:	7dfb      	ldrb	r3, [r7, #23]
 800a600:	2b00      	cmp	r3, #0
 800a602:	d0d7      	beq.n	800a5b4 <dir_alloc+0x26>
 800a604:	e000      	b.n	800a608 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800a606:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800a608:	7dfb      	ldrb	r3, [r7, #23]
 800a60a:	2b04      	cmp	r3, #4
 800a60c:	d101      	bne.n	800a612 <dir_alloc+0x84>
 800a60e:	2307      	movs	r3, #7
 800a610:	75fb      	strb	r3, [r7, #23]
	return res;
 800a612:	7dfb      	ldrb	r3, [r7, #23]
}
 800a614:	4618      	mov	r0, r3
 800a616:	3718      	adds	r7, #24
 800a618:	46bd      	mov	sp, r7
 800a61a:	bd80      	pop	{r7, pc}

0800a61c <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800a61c:	b580      	push	{r7, lr}
 800a61e:	b084      	sub	sp, #16
 800a620:	af00      	add	r7, sp, #0
 800a622:	6078      	str	r0, [r7, #4]
 800a624:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800a626:	683b      	ldr	r3, [r7, #0]
 800a628:	331a      	adds	r3, #26
 800a62a:	4618      	mov	r0, r3
 800a62c:	f7fe fff6 	bl	800961c <ld_word>
 800a630:	4603      	mov	r3, r0
 800a632:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800a634:	687b      	ldr	r3, [r7, #4]
 800a636:	781b      	ldrb	r3, [r3, #0]
 800a638:	2b03      	cmp	r3, #3
 800a63a:	d109      	bne.n	800a650 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800a63c:	683b      	ldr	r3, [r7, #0]
 800a63e:	3314      	adds	r3, #20
 800a640:	4618      	mov	r0, r3
 800a642:	f7fe ffeb 	bl	800961c <ld_word>
 800a646:	4603      	mov	r3, r0
 800a648:	041b      	lsls	r3, r3, #16
 800a64a:	68fa      	ldr	r2, [r7, #12]
 800a64c:	4313      	orrs	r3, r2
 800a64e:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800a650:	68fb      	ldr	r3, [r7, #12]
}
 800a652:	4618      	mov	r0, r3
 800a654:	3710      	adds	r7, #16
 800a656:	46bd      	mov	sp, r7
 800a658:	bd80      	pop	{r7, pc}

0800a65a <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800a65a:	b580      	push	{r7, lr}
 800a65c:	b084      	sub	sp, #16
 800a65e:	af00      	add	r7, sp, #0
 800a660:	60f8      	str	r0, [r7, #12]
 800a662:	60b9      	str	r1, [r7, #8]
 800a664:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800a666:	68bb      	ldr	r3, [r7, #8]
 800a668:	331a      	adds	r3, #26
 800a66a:	687a      	ldr	r2, [r7, #4]
 800a66c:	b292      	uxth	r2, r2
 800a66e:	4611      	mov	r1, r2
 800a670:	4618      	mov	r0, r3
 800a672:	f7ff f80e 	bl	8009692 <st_word>
	if (fs->fs_type == FS_FAT32) {
 800a676:	68fb      	ldr	r3, [r7, #12]
 800a678:	781b      	ldrb	r3, [r3, #0]
 800a67a:	2b03      	cmp	r3, #3
 800a67c:	d109      	bne.n	800a692 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800a67e:	68bb      	ldr	r3, [r7, #8]
 800a680:	f103 0214 	add.w	r2, r3, #20
 800a684:	687b      	ldr	r3, [r7, #4]
 800a686:	0c1b      	lsrs	r3, r3, #16
 800a688:	b29b      	uxth	r3, r3
 800a68a:	4619      	mov	r1, r3
 800a68c:	4610      	mov	r0, r2
 800a68e:	f7ff f800 	bl	8009692 <st_word>
	}
}
 800a692:	bf00      	nop
 800a694:	3710      	adds	r7, #16
 800a696:	46bd      	mov	sp, r7
 800a698:	bd80      	pop	{r7, pc}

0800a69a <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800a69a:	b580      	push	{r7, lr}
 800a69c:	b086      	sub	sp, #24
 800a69e:	af00      	add	r7, sp, #0
 800a6a0:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800a6a2:	687b      	ldr	r3, [r7, #4]
 800a6a4:	681b      	ldr	r3, [r3, #0]
 800a6a6:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800a6a8:	2100      	movs	r1, #0
 800a6aa:	6878      	ldr	r0, [r7, #4]
 800a6ac:	f7ff fe10 	bl	800a2d0 <dir_sdi>
 800a6b0:	4603      	mov	r3, r0
 800a6b2:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800a6b4:	7dfb      	ldrb	r3, [r7, #23]
 800a6b6:	2b00      	cmp	r3, #0
 800a6b8:	d001      	beq.n	800a6be <dir_find+0x24>
 800a6ba:	7dfb      	ldrb	r3, [r7, #23]
 800a6bc:	e03e      	b.n	800a73c <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 800a6be:	687b      	ldr	r3, [r7, #4]
 800a6c0:	69db      	ldr	r3, [r3, #28]
 800a6c2:	4619      	mov	r1, r3
 800a6c4:	6938      	ldr	r0, [r7, #16]
 800a6c6:	f7ff fa59 	bl	8009b7c <move_window>
 800a6ca:	4603      	mov	r3, r0
 800a6cc:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800a6ce:	7dfb      	ldrb	r3, [r7, #23]
 800a6d0:	2b00      	cmp	r3, #0
 800a6d2:	d12f      	bne.n	800a734 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 800a6d4:	687b      	ldr	r3, [r7, #4]
 800a6d6:	6a1b      	ldr	r3, [r3, #32]
 800a6d8:	781b      	ldrb	r3, [r3, #0]
 800a6da:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800a6dc:	7bfb      	ldrb	r3, [r7, #15]
 800a6de:	2b00      	cmp	r3, #0
 800a6e0:	d102      	bne.n	800a6e8 <dir_find+0x4e>
 800a6e2:	2304      	movs	r3, #4
 800a6e4:	75fb      	strb	r3, [r7, #23]
 800a6e6:	e028      	b.n	800a73a <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 800a6e8:	687b      	ldr	r3, [r7, #4]
 800a6ea:	6a1b      	ldr	r3, [r3, #32]
 800a6ec:	330b      	adds	r3, #11
 800a6ee:	781b      	ldrb	r3, [r3, #0]
 800a6f0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a6f4:	b2da      	uxtb	r2, r3
 800a6f6:	687b      	ldr	r3, [r7, #4]
 800a6f8:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800a6fa:	687b      	ldr	r3, [r7, #4]
 800a6fc:	6a1b      	ldr	r3, [r3, #32]
 800a6fe:	330b      	adds	r3, #11
 800a700:	781b      	ldrb	r3, [r3, #0]
 800a702:	f003 0308 	and.w	r3, r3, #8
 800a706:	2b00      	cmp	r3, #0
 800a708:	d10a      	bne.n	800a720 <dir_find+0x86>
 800a70a:	687b      	ldr	r3, [r7, #4]
 800a70c:	6a18      	ldr	r0, [r3, #32]
 800a70e:	687b      	ldr	r3, [r7, #4]
 800a710:	3324      	adds	r3, #36	; 0x24
 800a712:	220b      	movs	r2, #11
 800a714:	4619      	mov	r1, r3
 800a716:	f7ff f83f 	bl	8009798 <mem_cmp>
 800a71a:	4603      	mov	r3, r0
 800a71c:	2b00      	cmp	r3, #0
 800a71e:	d00b      	beq.n	800a738 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800a720:	2100      	movs	r1, #0
 800a722:	6878      	ldr	r0, [r7, #4]
 800a724:	f7ff fe5d 	bl	800a3e2 <dir_next>
 800a728:	4603      	mov	r3, r0
 800a72a:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800a72c:	7dfb      	ldrb	r3, [r7, #23]
 800a72e:	2b00      	cmp	r3, #0
 800a730:	d0c5      	beq.n	800a6be <dir_find+0x24>
 800a732:	e002      	b.n	800a73a <dir_find+0xa0>
		if (res != FR_OK) break;
 800a734:	bf00      	nop
 800a736:	e000      	b.n	800a73a <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800a738:	bf00      	nop

	return res;
 800a73a:	7dfb      	ldrb	r3, [r7, #23]
}
 800a73c:	4618      	mov	r0, r3
 800a73e:	3718      	adds	r7, #24
 800a740:	46bd      	mov	sp, r7
 800a742:	bd80      	pop	{r7, pc}

0800a744 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800a744:	b580      	push	{r7, lr}
 800a746:	b084      	sub	sp, #16
 800a748:	af00      	add	r7, sp, #0
 800a74a:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800a74c:	687b      	ldr	r3, [r7, #4]
 800a74e:	681b      	ldr	r3, [r3, #0]
 800a750:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 800a752:	2101      	movs	r1, #1
 800a754:	6878      	ldr	r0, [r7, #4]
 800a756:	f7ff ff1a 	bl	800a58e <dir_alloc>
 800a75a:	4603      	mov	r3, r0
 800a75c:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800a75e:	7bfb      	ldrb	r3, [r7, #15]
 800a760:	2b00      	cmp	r3, #0
 800a762:	d11c      	bne.n	800a79e <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 800a764:	687b      	ldr	r3, [r7, #4]
 800a766:	69db      	ldr	r3, [r3, #28]
 800a768:	4619      	mov	r1, r3
 800a76a:	68b8      	ldr	r0, [r7, #8]
 800a76c:	f7ff fa06 	bl	8009b7c <move_window>
 800a770:	4603      	mov	r3, r0
 800a772:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800a774:	7bfb      	ldrb	r3, [r7, #15]
 800a776:	2b00      	cmp	r3, #0
 800a778:	d111      	bne.n	800a79e <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800a77a:	687b      	ldr	r3, [r7, #4]
 800a77c:	6a1b      	ldr	r3, [r3, #32]
 800a77e:	2220      	movs	r2, #32
 800a780:	2100      	movs	r1, #0
 800a782:	4618      	mov	r0, r3
 800a784:	f7fe ffed 	bl	8009762 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800a788:	687b      	ldr	r3, [r7, #4]
 800a78a:	6a18      	ldr	r0, [r3, #32]
 800a78c:	687b      	ldr	r3, [r7, #4]
 800a78e:	3324      	adds	r3, #36	; 0x24
 800a790:	220b      	movs	r2, #11
 800a792:	4619      	mov	r1, r3
 800a794:	f7fe ffc4 	bl	8009720 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 800a798:	68bb      	ldr	r3, [r7, #8]
 800a79a:	2201      	movs	r2, #1
 800a79c:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800a79e:	7bfb      	ldrb	r3, [r7, #15]
}
 800a7a0:	4618      	mov	r0, r3
 800a7a2:	3710      	adds	r7, #16
 800a7a4:	46bd      	mov	sp, r7
 800a7a6:	bd80      	pop	{r7, pc}

0800a7a8 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800a7a8:	b580      	push	{r7, lr}
 800a7aa:	b088      	sub	sp, #32
 800a7ac:	af00      	add	r7, sp, #0
 800a7ae:	6078      	str	r0, [r7, #4]
 800a7b0:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 800a7b2:	683b      	ldr	r3, [r7, #0]
 800a7b4:	681b      	ldr	r3, [r3, #0]
 800a7b6:	60fb      	str	r3, [r7, #12]
 800a7b8:	687b      	ldr	r3, [r7, #4]
 800a7ba:	3324      	adds	r3, #36	; 0x24
 800a7bc:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 800a7be:	220b      	movs	r2, #11
 800a7c0:	2120      	movs	r1, #32
 800a7c2:	68b8      	ldr	r0, [r7, #8]
 800a7c4:	f7fe ffcd 	bl	8009762 <mem_set>
	si = i = 0; ni = 8;
 800a7c8:	2300      	movs	r3, #0
 800a7ca:	613b      	str	r3, [r7, #16]
 800a7cc:	693b      	ldr	r3, [r7, #16]
 800a7ce:	61fb      	str	r3, [r7, #28]
 800a7d0:	2308      	movs	r3, #8
 800a7d2:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 800a7d4:	69fb      	ldr	r3, [r7, #28]
 800a7d6:	1c5a      	adds	r2, r3, #1
 800a7d8:	61fa      	str	r2, [r7, #28]
 800a7da:	68fa      	ldr	r2, [r7, #12]
 800a7dc:	4413      	add	r3, r2
 800a7de:	781b      	ldrb	r3, [r3, #0]
 800a7e0:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 800a7e2:	7efb      	ldrb	r3, [r7, #27]
 800a7e4:	2b20      	cmp	r3, #32
 800a7e6:	d94e      	bls.n	800a886 <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 800a7e8:	7efb      	ldrb	r3, [r7, #27]
 800a7ea:	2b2f      	cmp	r3, #47	; 0x2f
 800a7ec:	d006      	beq.n	800a7fc <create_name+0x54>
 800a7ee:	7efb      	ldrb	r3, [r7, #27]
 800a7f0:	2b5c      	cmp	r3, #92	; 0x5c
 800a7f2:	d110      	bne.n	800a816 <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800a7f4:	e002      	b.n	800a7fc <create_name+0x54>
 800a7f6:	69fb      	ldr	r3, [r7, #28]
 800a7f8:	3301      	adds	r3, #1
 800a7fa:	61fb      	str	r3, [r7, #28]
 800a7fc:	68fa      	ldr	r2, [r7, #12]
 800a7fe:	69fb      	ldr	r3, [r7, #28]
 800a800:	4413      	add	r3, r2
 800a802:	781b      	ldrb	r3, [r3, #0]
 800a804:	2b2f      	cmp	r3, #47	; 0x2f
 800a806:	d0f6      	beq.n	800a7f6 <create_name+0x4e>
 800a808:	68fa      	ldr	r2, [r7, #12]
 800a80a:	69fb      	ldr	r3, [r7, #28]
 800a80c:	4413      	add	r3, r2
 800a80e:	781b      	ldrb	r3, [r3, #0]
 800a810:	2b5c      	cmp	r3, #92	; 0x5c
 800a812:	d0f0      	beq.n	800a7f6 <create_name+0x4e>
			break;
 800a814:	e038      	b.n	800a888 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 800a816:	7efb      	ldrb	r3, [r7, #27]
 800a818:	2b2e      	cmp	r3, #46	; 0x2e
 800a81a:	d003      	beq.n	800a824 <create_name+0x7c>
 800a81c:	693a      	ldr	r2, [r7, #16]
 800a81e:	697b      	ldr	r3, [r7, #20]
 800a820:	429a      	cmp	r2, r3
 800a822:	d30c      	bcc.n	800a83e <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 800a824:	697b      	ldr	r3, [r7, #20]
 800a826:	2b0b      	cmp	r3, #11
 800a828:	d002      	beq.n	800a830 <create_name+0x88>
 800a82a:	7efb      	ldrb	r3, [r7, #27]
 800a82c:	2b2e      	cmp	r3, #46	; 0x2e
 800a82e:	d001      	beq.n	800a834 <create_name+0x8c>
 800a830:	2306      	movs	r3, #6
 800a832:	e044      	b.n	800a8be <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 800a834:	2308      	movs	r3, #8
 800a836:	613b      	str	r3, [r7, #16]
 800a838:	230b      	movs	r3, #11
 800a83a:	617b      	str	r3, [r7, #20]
			continue;
 800a83c:	e022      	b.n	800a884 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 800a83e:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800a842:	2b00      	cmp	r3, #0
 800a844:	da04      	bge.n	800a850 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 800a846:	7efb      	ldrb	r3, [r7, #27]
 800a848:	3b80      	subs	r3, #128	; 0x80
 800a84a:	4a1f      	ldr	r2, [pc, #124]	; (800a8c8 <create_name+0x120>)
 800a84c:	5cd3      	ldrb	r3, [r2, r3]
 800a84e:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 800a850:	7efb      	ldrb	r3, [r7, #27]
 800a852:	4619      	mov	r1, r3
 800a854:	481d      	ldr	r0, [pc, #116]	; (800a8cc <create_name+0x124>)
 800a856:	f7fe ffc6 	bl	80097e6 <chk_chr>
 800a85a:	4603      	mov	r3, r0
 800a85c:	2b00      	cmp	r3, #0
 800a85e:	d001      	beq.n	800a864 <create_name+0xbc>
 800a860:	2306      	movs	r3, #6
 800a862:	e02c      	b.n	800a8be <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 800a864:	7efb      	ldrb	r3, [r7, #27]
 800a866:	2b60      	cmp	r3, #96	; 0x60
 800a868:	d905      	bls.n	800a876 <create_name+0xce>
 800a86a:	7efb      	ldrb	r3, [r7, #27]
 800a86c:	2b7a      	cmp	r3, #122	; 0x7a
 800a86e:	d802      	bhi.n	800a876 <create_name+0xce>
 800a870:	7efb      	ldrb	r3, [r7, #27]
 800a872:	3b20      	subs	r3, #32
 800a874:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 800a876:	693b      	ldr	r3, [r7, #16]
 800a878:	1c5a      	adds	r2, r3, #1
 800a87a:	613a      	str	r2, [r7, #16]
 800a87c:	68ba      	ldr	r2, [r7, #8]
 800a87e:	4413      	add	r3, r2
 800a880:	7efa      	ldrb	r2, [r7, #27]
 800a882:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 800a884:	e7a6      	b.n	800a7d4 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 800a886:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 800a888:	68fa      	ldr	r2, [r7, #12]
 800a88a:	69fb      	ldr	r3, [r7, #28]
 800a88c:	441a      	add	r2, r3
 800a88e:	683b      	ldr	r3, [r7, #0]
 800a890:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 800a892:	693b      	ldr	r3, [r7, #16]
 800a894:	2b00      	cmp	r3, #0
 800a896:	d101      	bne.n	800a89c <create_name+0xf4>
 800a898:	2306      	movs	r3, #6
 800a89a:	e010      	b.n	800a8be <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800a89c:	68bb      	ldr	r3, [r7, #8]
 800a89e:	781b      	ldrb	r3, [r3, #0]
 800a8a0:	2be5      	cmp	r3, #229	; 0xe5
 800a8a2:	d102      	bne.n	800a8aa <create_name+0x102>
 800a8a4:	68bb      	ldr	r3, [r7, #8]
 800a8a6:	2205      	movs	r2, #5
 800a8a8:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800a8aa:	7efb      	ldrb	r3, [r7, #27]
 800a8ac:	2b20      	cmp	r3, #32
 800a8ae:	d801      	bhi.n	800a8b4 <create_name+0x10c>
 800a8b0:	2204      	movs	r2, #4
 800a8b2:	e000      	b.n	800a8b6 <create_name+0x10e>
 800a8b4:	2200      	movs	r2, #0
 800a8b6:	68bb      	ldr	r3, [r7, #8]
 800a8b8:	330b      	adds	r3, #11
 800a8ba:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 800a8bc:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 800a8be:	4618      	mov	r0, r3
 800a8c0:	3720      	adds	r7, #32
 800a8c2:	46bd      	mov	sp, r7
 800a8c4:	bd80      	pop	{r7, pc}
 800a8c6:	bf00      	nop
 800a8c8:	0800e908 	.word	0x0800e908
 800a8cc:	0800e898 	.word	0x0800e898

0800a8d0 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800a8d0:	b580      	push	{r7, lr}
 800a8d2:	b086      	sub	sp, #24
 800a8d4:	af00      	add	r7, sp, #0
 800a8d6:	6078      	str	r0, [r7, #4]
 800a8d8:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800a8da:	687b      	ldr	r3, [r7, #4]
 800a8dc:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800a8de:	693b      	ldr	r3, [r7, #16]
 800a8e0:	681b      	ldr	r3, [r3, #0]
 800a8e2:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800a8e4:	e002      	b.n	800a8ec <follow_path+0x1c>
 800a8e6:	683b      	ldr	r3, [r7, #0]
 800a8e8:	3301      	adds	r3, #1
 800a8ea:	603b      	str	r3, [r7, #0]
 800a8ec:	683b      	ldr	r3, [r7, #0]
 800a8ee:	781b      	ldrb	r3, [r3, #0]
 800a8f0:	2b2f      	cmp	r3, #47	; 0x2f
 800a8f2:	d0f8      	beq.n	800a8e6 <follow_path+0x16>
 800a8f4:	683b      	ldr	r3, [r7, #0]
 800a8f6:	781b      	ldrb	r3, [r3, #0]
 800a8f8:	2b5c      	cmp	r3, #92	; 0x5c
 800a8fa:	d0f4      	beq.n	800a8e6 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800a8fc:	693b      	ldr	r3, [r7, #16]
 800a8fe:	2200      	movs	r2, #0
 800a900:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800a902:	683b      	ldr	r3, [r7, #0]
 800a904:	781b      	ldrb	r3, [r3, #0]
 800a906:	2b1f      	cmp	r3, #31
 800a908:	d80a      	bhi.n	800a920 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800a90a:	687b      	ldr	r3, [r7, #4]
 800a90c:	2280      	movs	r2, #128	; 0x80
 800a90e:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 800a912:	2100      	movs	r1, #0
 800a914:	6878      	ldr	r0, [r7, #4]
 800a916:	f7ff fcdb 	bl	800a2d0 <dir_sdi>
 800a91a:	4603      	mov	r3, r0
 800a91c:	75fb      	strb	r3, [r7, #23]
 800a91e:	e048      	b.n	800a9b2 <follow_path+0xe2>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800a920:	463b      	mov	r3, r7
 800a922:	4619      	mov	r1, r3
 800a924:	6878      	ldr	r0, [r7, #4]
 800a926:	f7ff ff3f 	bl	800a7a8 <create_name>
 800a92a:	4603      	mov	r3, r0
 800a92c:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800a92e:	7dfb      	ldrb	r3, [r7, #23]
 800a930:	2b00      	cmp	r3, #0
 800a932:	d139      	bne.n	800a9a8 <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the segment name */
 800a934:	6878      	ldr	r0, [r7, #4]
 800a936:	f7ff feb0 	bl	800a69a <dir_find>
 800a93a:	4603      	mov	r3, r0
 800a93c:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800a93e:	687b      	ldr	r3, [r7, #4]
 800a940:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800a944:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800a946:	7dfb      	ldrb	r3, [r7, #23]
 800a948:	2b00      	cmp	r3, #0
 800a94a:	d00a      	beq.n	800a962 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800a94c:	7dfb      	ldrb	r3, [r7, #23]
 800a94e:	2b04      	cmp	r3, #4
 800a950:	d12c      	bne.n	800a9ac <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800a952:	7afb      	ldrb	r3, [r7, #11]
 800a954:	f003 0304 	and.w	r3, r3, #4
 800a958:	2b00      	cmp	r3, #0
 800a95a:	d127      	bne.n	800a9ac <follow_path+0xdc>
 800a95c:	2305      	movs	r3, #5
 800a95e:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800a960:	e024      	b.n	800a9ac <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800a962:	7afb      	ldrb	r3, [r7, #11]
 800a964:	f003 0304 	and.w	r3, r3, #4
 800a968:	2b00      	cmp	r3, #0
 800a96a:	d121      	bne.n	800a9b0 <follow_path+0xe0>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800a96c:	693b      	ldr	r3, [r7, #16]
 800a96e:	799b      	ldrb	r3, [r3, #6]
 800a970:	f003 0310 	and.w	r3, r3, #16
 800a974:	2b00      	cmp	r3, #0
 800a976:	d102      	bne.n	800a97e <follow_path+0xae>
				res = FR_NO_PATH; break;
 800a978:	2305      	movs	r3, #5
 800a97a:	75fb      	strb	r3, [r7, #23]
 800a97c:	e019      	b.n	800a9b2 <follow_path+0xe2>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800a97e:	68fb      	ldr	r3, [r7, #12]
 800a980:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800a984:	687b      	ldr	r3, [r7, #4]
 800a986:	695b      	ldr	r3, [r3, #20]
 800a988:	68fa      	ldr	r2, [r7, #12]
 800a98a:	8992      	ldrh	r2, [r2, #12]
 800a98c:	fbb3 f0f2 	udiv	r0, r3, r2
 800a990:	fb00 f202 	mul.w	r2, r0, r2
 800a994:	1a9b      	subs	r3, r3, r2
 800a996:	440b      	add	r3, r1
 800a998:	4619      	mov	r1, r3
 800a99a:	68f8      	ldr	r0, [r7, #12]
 800a99c:	f7ff fe3e 	bl	800a61c <ld_clust>
 800a9a0:	4602      	mov	r2, r0
 800a9a2:	693b      	ldr	r3, [r7, #16]
 800a9a4:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800a9a6:	e7bb      	b.n	800a920 <follow_path+0x50>
			if (res != FR_OK) break;
 800a9a8:	bf00      	nop
 800a9aa:	e002      	b.n	800a9b2 <follow_path+0xe2>
				break;
 800a9ac:	bf00      	nop
 800a9ae:	e000      	b.n	800a9b2 <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800a9b0:	bf00      	nop
			}
		}
	}

	return res;
 800a9b2:	7dfb      	ldrb	r3, [r7, #23]
}
 800a9b4:	4618      	mov	r0, r3
 800a9b6:	3718      	adds	r7, #24
 800a9b8:	46bd      	mov	sp, r7
 800a9ba:	bd80      	pop	{r7, pc}

0800a9bc <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800a9bc:	b480      	push	{r7}
 800a9be:	b087      	sub	sp, #28
 800a9c0:	af00      	add	r7, sp, #0
 800a9c2:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800a9c4:	f04f 33ff 	mov.w	r3, #4294967295
 800a9c8:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800a9ca:	687b      	ldr	r3, [r7, #4]
 800a9cc:	681b      	ldr	r3, [r3, #0]
 800a9ce:	2b00      	cmp	r3, #0
 800a9d0:	d031      	beq.n	800aa36 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800a9d2:	687b      	ldr	r3, [r7, #4]
 800a9d4:	681b      	ldr	r3, [r3, #0]
 800a9d6:	617b      	str	r3, [r7, #20]
 800a9d8:	e002      	b.n	800a9e0 <get_ldnumber+0x24>
 800a9da:	697b      	ldr	r3, [r7, #20]
 800a9dc:	3301      	adds	r3, #1
 800a9de:	617b      	str	r3, [r7, #20]
 800a9e0:	697b      	ldr	r3, [r7, #20]
 800a9e2:	781b      	ldrb	r3, [r3, #0]
 800a9e4:	2b20      	cmp	r3, #32
 800a9e6:	d903      	bls.n	800a9f0 <get_ldnumber+0x34>
 800a9e8:	697b      	ldr	r3, [r7, #20]
 800a9ea:	781b      	ldrb	r3, [r3, #0]
 800a9ec:	2b3a      	cmp	r3, #58	; 0x3a
 800a9ee:	d1f4      	bne.n	800a9da <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800a9f0:	697b      	ldr	r3, [r7, #20]
 800a9f2:	781b      	ldrb	r3, [r3, #0]
 800a9f4:	2b3a      	cmp	r3, #58	; 0x3a
 800a9f6:	d11c      	bne.n	800aa32 <get_ldnumber+0x76>
			tp = *path;
 800a9f8:	687b      	ldr	r3, [r7, #4]
 800a9fa:	681b      	ldr	r3, [r3, #0]
 800a9fc:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800a9fe:	68fb      	ldr	r3, [r7, #12]
 800aa00:	1c5a      	adds	r2, r3, #1
 800aa02:	60fa      	str	r2, [r7, #12]
 800aa04:	781b      	ldrb	r3, [r3, #0]
 800aa06:	3b30      	subs	r3, #48	; 0x30
 800aa08:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800aa0a:	68bb      	ldr	r3, [r7, #8]
 800aa0c:	2b09      	cmp	r3, #9
 800aa0e:	d80e      	bhi.n	800aa2e <get_ldnumber+0x72>
 800aa10:	68fa      	ldr	r2, [r7, #12]
 800aa12:	697b      	ldr	r3, [r7, #20]
 800aa14:	429a      	cmp	r2, r3
 800aa16:	d10a      	bne.n	800aa2e <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800aa18:	68bb      	ldr	r3, [r7, #8]
 800aa1a:	2b00      	cmp	r3, #0
 800aa1c:	d107      	bne.n	800aa2e <get_ldnumber+0x72>
					vol = (int)i;
 800aa1e:	68bb      	ldr	r3, [r7, #8]
 800aa20:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800aa22:	697b      	ldr	r3, [r7, #20]
 800aa24:	3301      	adds	r3, #1
 800aa26:	617b      	str	r3, [r7, #20]
 800aa28:	687b      	ldr	r3, [r7, #4]
 800aa2a:	697a      	ldr	r2, [r7, #20]
 800aa2c:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800aa2e:	693b      	ldr	r3, [r7, #16]
 800aa30:	e002      	b.n	800aa38 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800aa32:	2300      	movs	r3, #0
 800aa34:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800aa36:	693b      	ldr	r3, [r7, #16]
}
 800aa38:	4618      	mov	r0, r3
 800aa3a:	371c      	adds	r7, #28
 800aa3c:	46bd      	mov	sp, r7
 800aa3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa42:	4770      	bx	lr

0800aa44 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800aa44:	b580      	push	{r7, lr}
 800aa46:	b082      	sub	sp, #8
 800aa48:	af00      	add	r7, sp, #0
 800aa4a:	6078      	str	r0, [r7, #4]
 800aa4c:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800aa4e:	687b      	ldr	r3, [r7, #4]
 800aa50:	2200      	movs	r2, #0
 800aa52:	70da      	strb	r2, [r3, #3]
 800aa54:	687b      	ldr	r3, [r7, #4]
 800aa56:	f04f 32ff 	mov.w	r2, #4294967295
 800aa5a:	631a      	str	r2, [r3, #48]	; 0x30
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800aa5c:	6839      	ldr	r1, [r7, #0]
 800aa5e:	6878      	ldr	r0, [r7, #4]
 800aa60:	f7ff f88c 	bl	8009b7c <move_window>
 800aa64:	4603      	mov	r3, r0
 800aa66:	2b00      	cmp	r3, #0
 800aa68:	d001      	beq.n	800aa6e <check_fs+0x2a>
 800aa6a:	2304      	movs	r3, #4
 800aa6c:	e038      	b.n	800aae0 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800aa6e:	687b      	ldr	r3, [r7, #4]
 800aa70:	3334      	adds	r3, #52	; 0x34
 800aa72:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800aa76:	4618      	mov	r0, r3
 800aa78:	f7fe fdd0 	bl	800961c <ld_word>
 800aa7c:	4603      	mov	r3, r0
 800aa7e:	461a      	mov	r2, r3
 800aa80:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800aa84:	429a      	cmp	r2, r3
 800aa86:	d001      	beq.n	800aa8c <check_fs+0x48>
 800aa88:	2303      	movs	r3, #3
 800aa8a:	e029      	b.n	800aae0 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800aa8c:	687b      	ldr	r3, [r7, #4]
 800aa8e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800aa92:	2be9      	cmp	r3, #233	; 0xe9
 800aa94:	d009      	beq.n	800aaaa <check_fs+0x66>
 800aa96:	687b      	ldr	r3, [r7, #4]
 800aa98:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800aa9c:	2beb      	cmp	r3, #235	; 0xeb
 800aa9e:	d11e      	bne.n	800aade <check_fs+0x9a>
 800aaa0:	687b      	ldr	r3, [r7, #4]
 800aaa2:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 800aaa6:	2b90      	cmp	r3, #144	; 0x90
 800aaa8:	d119      	bne.n	800aade <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800aaaa:	687b      	ldr	r3, [r7, #4]
 800aaac:	3334      	adds	r3, #52	; 0x34
 800aaae:	3336      	adds	r3, #54	; 0x36
 800aab0:	4618      	mov	r0, r3
 800aab2:	f7fe fdcb 	bl	800964c <ld_dword>
 800aab6:	4603      	mov	r3, r0
 800aab8:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800aabc:	4a0a      	ldr	r2, [pc, #40]	; (800aae8 <check_fs+0xa4>)
 800aabe:	4293      	cmp	r3, r2
 800aac0:	d101      	bne.n	800aac6 <check_fs+0x82>
 800aac2:	2300      	movs	r3, #0
 800aac4:	e00c      	b.n	800aae0 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800aac6:	687b      	ldr	r3, [r7, #4]
 800aac8:	3334      	adds	r3, #52	; 0x34
 800aaca:	3352      	adds	r3, #82	; 0x52
 800aacc:	4618      	mov	r0, r3
 800aace:	f7fe fdbd 	bl	800964c <ld_dword>
 800aad2:	4603      	mov	r3, r0
 800aad4:	4a05      	ldr	r2, [pc, #20]	; (800aaec <check_fs+0xa8>)
 800aad6:	4293      	cmp	r3, r2
 800aad8:	d101      	bne.n	800aade <check_fs+0x9a>
 800aada:	2300      	movs	r3, #0
 800aadc:	e000      	b.n	800aae0 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800aade:	2302      	movs	r3, #2
}
 800aae0:	4618      	mov	r0, r3
 800aae2:	3708      	adds	r7, #8
 800aae4:	46bd      	mov	sp, r7
 800aae6:	bd80      	pop	{r7, pc}
 800aae8:	00544146 	.word	0x00544146
 800aaec:	33544146 	.word	0x33544146

0800aaf0 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800aaf0:	b580      	push	{r7, lr}
 800aaf2:	b096      	sub	sp, #88	; 0x58
 800aaf4:	af00      	add	r7, sp, #0
 800aaf6:	60f8      	str	r0, [r7, #12]
 800aaf8:	60b9      	str	r1, [r7, #8]
 800aafa:	4613      	mov	r3, r2
 800aafc:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800aafe:	68bb      	ldr	r3, [r7, #8]
 800ab00:	2200      	movs	r2, #0
 800ab02:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800ab04:	68f8      	ldr	r0, [r7, #12]
 800ab06:	f7ff ff59 	bl	800a9bc <get_ldnumber>
 800ab0a:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800ab0c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ab0e:	2b00      	cmp	r3, #0
 800ab10:	da01      	bge.n	800ab16 <find_volume+0x26>
 800ab12:	230b      	movs	r3, #11
 800ab14:	e262      	b.n	800afdc <find_volume+0x4ec>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800ab16:	4a9f      	ldr	r2, [pc, #636]	; (800ad94 <find_volume+0x2a4>)
 800ab18:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ab1a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ab1e:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800ab20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ab22:	2b00      	cmp	r3, #0
 800ab24:	d101      	bne.n	800ab2a <find_volume+0x3a>
 800ab26:	230c      	movs	r3, #12
 800ab28:	e258      	b.n	800afdc <find_volume+0x4ec>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800ab2a:	68bb      	ldr	r3, [r7, #8]
 800ab2c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ab2e:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800ab30:	79fb      	ldrb	r3, [r7, #7]
 800ab32:	f023 0301 	bic.w	r3, r3, #1
 800ab36:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800ab38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ab3a:	781b      	ldrb	r3, [r3, #0]
 800ab3c:	2b00      	cmp	r3, #0
 800ab3e:	d01a      	beq.n	800ab76 <find_volume+0x86>
		stat = disk_status(fs->drv);
 800ab40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ab42:	785b      	ldrb	r3, [r3, #1]
 800ab44:	4618      	mov	r0, r3
 800ab46:	f7fe fccb 	bl	80094e0 <disk_status>
 800ab4a:	4603      	mov	r3, r0
 800ab4c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800ab50:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800ab54:	f003 0301 	and.w	r3, r3, #1
 800ab58:	2b00      	cmp	r3, #0
 800ab5a:	d10c      	bne.n	800ab76 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800ab5c:	79fb      	ldrb	r3, [r7, #7]
 800ab5e:	2b00      	cmp	r3, #0
 800ab60:	d007      	beq.n	800ab72 <find_volume+0x82>
 800ab62:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800ab66:	f003 0304 	and.w	r3, r3, #4
 800ab6a:	2b00      	cmp	r3, #0
 800ab6c:	d001      	beq.n	800ab72 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800ab6e:	230a      	movs	r3, #10
 800ab70:	e234      	b.n	800afdc <find_volume+0x4ec>
			}
			return FR_OK;				/* The file system object is valid */
 800ab72:	2300      	movs	r3, #0
 800ab74:	e232      	b.n	800afdc <find_volume+0x4ec>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800ab76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ab78:	2200      	movs	r2, #0
 800ab7a:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800ab7c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ab7e:	b2da      	uxtb	r2, r3
 800ab80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ab82:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800ab84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ab86:	785b      	ldrb	r3, [r3, #1]
 800ab88:	4618      	mov	r0, r3
 800ab8a:	f7fe fcc3 	bl	8009514 <disk_initialize>
 800ab8e:	4603      	mov	r3, r0
 800ab90:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800ab94:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800ab98:	f003 0301 	and.w	r3, r3, #1
 800ab9c:	2b00      	cmp	r3, #0
 800ab9e:	d001      	beq.n	800aba4 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800aba0:	2303      	movs	r3, #3
 800aba2:	e21b      	b.n	800afdc <find_volume+0x4ec>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800aba4:	79fb      	ldrb	r3, [r7, #7]
 800aba6:	2b00      	cmp	r3, #0
 800aba8:	d007      	beq.n	800abba <find_volume+0xca>
 800abaa:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800abae:	f003 0304 	and.w	r3, r3, #4
 800abb2:	2b00      	cmp	r3, #0
 800abb4:	d001      	beq.n	800abba <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800abb6:	230a      	movs	r3, #10
 800abb8:	e210      	b.n	800afdc <find_volume+0x4ec>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 800abba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800abbc:	7858      	ldrb	r0, [r3, #1]
 800abbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800abc0:	330c      	adds	r3, #12
 800abc2:	461a      	mov	r2, r3
 800abc4:	2102      	movs	r1, #2
 800abc6:	f7fe fd0b 	bl	80095e0 <disk_ioctl>
 800abca:	4603      	mov	r3, r0
 800abcc:	2b00      	cmp	r3, #0
 800abce:	d001      	beq.n	800abd4 <find_volume+0xe4>
 800abd0:	2301      	movs	r3, #1
 800abd2:	e203      	b.n	800afdc <find_volume+0x4ec>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 800abd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800abd6:	899b      	ldrh	r3, [r3, #12]
 800abd8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800abdc:	d80d      	bhi.n	800abfa <find_volume+0x10a>
 800abde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800abe0:	899b      	ldrh	r3, [r3, #12]
 800abe2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800abe6:	d308      	bcc.n	800abfa <find_volume+0x10a>
 800abe8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800abea:	899b      	ldrh	r3, [r3, #12]
 800abec:	461a      	mov	r2, r3
 800abee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800abf0:	899b      	ldrh	r3, [r3, #12]
 800abf2:	3b01      	subs	r3, #1
 800abf4:	4013      	ands	r3, r2
 800abf6:	2b00      	cmp	r3, #0
 800abf8:	d001      	beq.n	800abfe <find_volume+0x10e>
 800abfa:	2301      	movs	r3, #1
 800abfc:	e1ee      	b.n	800afdc <find_volume+0x4ec>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800abfe:	2300      	movs	r3, #0
 800ac00:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800ac02:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800ac04:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800ac06:	f7ff ff1d 	bl	800aa44 <check_fs>
 800ac0a:	4603      	mov	r3, r0
 800ac0c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800ac10:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800ac14:	2b02      	cmp	r3, #2
 800ac16:	d149      	bne.n	800acac <find_volume+0x1bc>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800ac18:	2300      	movs	r3, #0
 800ac1a:	643b      	str	r3, [r7, #64]	; 0x40
 800ac1c:	e01e      	b.n	800ac5c <find_volume+0x16c>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800ac1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ac20:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800ac24:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ac26:	011b      	lsls	r3, r3, #4
 800ac28:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800ac2c:	4413      	add	r3, r2
 800ac2e:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800ac30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac32:	3304      	adds	r3, #4
 800ac34:	781b      	ldrb	r3, [r3, #0]
 800ac36:	2b00      	cmp	r3, #0
 800ac38:	d006      	beq.n	800ac48 <find_volume+0x158>
 800ac3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac3c:	3308      	adds	r3, #8
 800ac3e:	4618      	mov	r0, r3
 800ac40:	f7fe fd04 	bl	800964c <ld_dword>
 800ac44:	4602      	mov	r2, r0
 800ac46:	e000      	b.n	800ac4a <find_volume+0x15a>
 800ac48:	2200      	movs	r2, #0
 800ac4a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ac4c:	009b      	lsls	r3, r3, #2
 800ac4e:	3358      	adds	r3, #88	; 0x58
 800ac50:	443b      	add	r3, r7
 800ac52:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800ac56:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ac58:	3301      	adds	r3, #1
 800ac5a:	643b      	str	r3, [r7, #64]	; 0x40
 800ac5c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ac5e:	2b03      	cmp	r3, #3
 800ac60:	d9dd      	bls.n	800ac1e <find_volume+0x12e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800ac62:	2300      	movs	r3, #0
 800ac64:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 800ac66:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ac68:	2b00      	cmp	r3, #0
 800ac6a:	d002      	beq.n	800ac72 <find_volume+0x182>
 800ac6c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ac6e:	3b01      	subs	r3, #1
 800ac70:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800ac72:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ac74:	009b      	lsls	r3, r3, #2
 800ac76:	3358      	adds	r3, #88	; 0x58
 800ac78:	443b      	add	r3, r7
 800ac7a:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800ac7e:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800ac80:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ac82:	2b00      	cmp	r3, #0
 800ac84:	d005      	beq.n	800ac92 <find_volume+0x1a2>
 800ac86:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800ac88:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800ac8a:	f7ff fedb 	bl	800aa44 <check_fs>
 800ac8e:	4603      	mov	r3, r0
 800ac90:	e000      	b.n	800ac94 <find_volume+0x1a4>
 800ac92:	2303      	movs	r3, #3
 800ac94:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800ac98:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800ac9c:	2b01      	cmp	r3, #1
 800ac9e:	d905      	bls.n	800acac <find_volume+0x1bc>
 800aca0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800aca2:	3301      	adds	r3, #1
 800aca4:	643b      	str	r3, [r7, #64]	; 0x40
 800aca6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800aca8:	2b03      	cmp	r3, #3
 800acaa:	d9e2      	bls.n	800ac72 <find_volume+0x182>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800acac:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800acb0:	2b04      	cmp	r3, #4
 800acb2:	d101      	bne.n	800acb8 <find_volume+0x1c8>
 800acb4:	2301      	movs	r3, #1
 800acb6:	e191      	b.n	800afdc <find_volume+0x4ec>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800acb8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800acbc:	2b01      	cmp	r3, #1
 800acbe:	d901      	bls.n	800acc4 <find_volume+0x1d4>
 800acc0:	230d      	movs	r3, #13
 800acc2:	e18b      	b.n	800afdc <find_volume+0x4ec>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800acc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800acc6:	3334      	adds	r3, #52	; 0x34
 800acc8:	330b      	adds	r3, #11
 800acca:	4618      	mov	r0, r3
 800accc:	f7fe fca6 	bl	800961c <ld_word>
 800acd0:	4603      	mov	r3, r0
 800acd2:	461a      	mov	r2, r3
 800acd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800acd6:	899b      	ldrh	r3, [r3, #12]
 800acd8:	429a      	cmp	r2, r3
 800acda:	d001      	beq.n	800ace0 <find_volume+0x1f0>
 800acdc:	230d      	movs	r3, #13
 800acde:	e17d      	b.n	800afdc <find_volume+0x4ec>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800ace0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ace2:	3334      	adds	r3, #52	; 0x34
 800ace4:	3316      	adds	r3, #22
 800ace6:	4618      	mov	r0, r3
 800ace8:	f7fe fc98 	bl	800961c <ld_word>
 800acec:	4603      	mov	r3, r0
 800acee:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800acf0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800acf2:	2b00      	cmp	r3, #0
 800acf4:	d106      	bne.n	800ad04 <find_volume+0x214>
 800acf6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800acf8:	3334      	adds	r3, #52	; 0x34
 800acfa:	3324      	adds	r3, #36	; 0x24
 800acfc:	4618      	mov	r0, r3
 800acfe:	f7fe fca5 	bl	800964c <ld_dword>
 800ad02:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 800ad04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad06:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800ad08:	61da      	str	r2, [r3, #28]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800ad0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad0c:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 800ad10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad12:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800ad14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad16:	789b      	ldrb	r3, [r3, #2]
 800ad18:	2b01      	cmp	r3, #1
 800ad1a:	d005      	beq.n	800ad28 <find_volume+0x238>
 800ad1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad1e:	789b      	ldrb	r3, [r3, #2]
 800ad20:	2b02      	cmp	r3, #2
 800ad22:	d001      	beq.n	800ad28 <find_volume+0x238>
 800ad24:	230d      	movs	r3, #13
 800ad26:	e159      	b.n	800afdc <find_volume+0x4ec>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800ad28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad2a:	789b      	ldrb	r3, [r3, #2]
 800ad2c:	461a      	mov	r2, r3
 800ad2e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ad30:	fb02 f303 	mul.w	r3, r2, r3
 800ad34:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800ad36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad38:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800ad3c:	b29a      	uxth	r2, r3
 800ad3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad40:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800ad42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad44:	895b      	ldrh	r3, [r3, #10]
 800ad46:	2b00      	cmp	r3, #0
 800ad48:	d008      	beq.n	800ad5c <find_volume+0x26c>
 800ad4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad4c:	895b      	ldrh	r3, [r3, #10]
 800ad4e:	461a      	mov	r2, r3
 800ad50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad52:	895b      	ldrh	r3, [r3, #10]
 800ad54:	3b01      	subs	r3, #1
 800ad56:	4013      	ands	r3, r2
 800ad58:	2b00      	cmp	r3, #0
 800ad5a:	d001      	beq.n	800ad60 <find_volume+0x270>
 800ad5c:	230d      	movs	r3, #13
 800ad5e:	e13d      	b.n	800afdc <find_volume+0x4ec>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800ad60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad62:	3334      	adds	r3, #52	; 0x34
 800ad64:	3311      	adds	r3, #17
 800ad66:	4618      	mov	r0, r3
 800ad68:	f7fe fc58 	bl	800961c <ld_word>
 800ad6c:	4603      	mov	r3, r0
 800ad6e:	461a      	mov	r2, r3
 800ad70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad72:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800ad74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad76:	891b      	ldrh	r3, [r3, #8]
 800ad78:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ad7a:	8992      	ldrh	r2, [r2, #12]
 800ad7c:	0952      	lsrs	r2, r2, #5
 800ad7e:	b292      	uxth	r2, r2
 800ad80:	fbb3 f1f2 	udiv	r1, r3, r2
 800ad84:	fb01 f202 	mul.w	r2, r1, r2
 800ad88:	1a9b      	subs	r3, r3, r2
 800ad8a:	b29b      	uxth	r3, r3
 800ad8c:	2b00      	cmp	r3, #0
 800ad8e:	d003      	beq.n	800ad98 <find_volume+0x2a8>
 800ad90:	230d      	movs	r3, #13
 800ad92:	e123      	b.n	800afdc <find_volume+0x4ec>
 800ad94:	20007568 	.word	0x20007568

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800ad98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad9a:	3334      	adds	r3, #52	; 0x34
 800ad9c:	3313      	adds	r3, #19
 800ad9e:	4618      	mov	r0, r3
 800ada0:	f7fe fc3c 	bl	800961c <ld_word>
 800ada4:	4603      	mov	r3, r0
 800ada6:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800ada8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800adaa:	2b00      	cmp	r3, #0
 800adac:	d106      	bne.n	800adbc <find_volume+0x2cc>
 800adae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800adb0:	3334      	adds	r3, #52	; 0x34
 800adb2:	3320      	adds	r3, #32
 800adb4:	4618      	mov	r0, r3
 800adb6:	f7fe fc49 	bl	800964c <ld_dword>
 800adba:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800adbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800adbe:	3334      	adds	r3, #52	; 0x34
 800adc0:	330e      	adds	r3, #14
 800adc2:	4618      	mov	r0, r3
 800adc4:	f7fe fc2a 	bl	800961c <ld_word>
 800adc8:	4603      	mov	r3, r0
 800adca:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800adcc:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800adce:	2b00      	cmp	r3, #0
 800add0:	d101      	bne.n	800add6 <find_volume+0x2e6>
 800add2:	230d      	movs	r3, #13
 800add4:	e102      	b.n	800afdc <find_volume+0x4ec>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800add6:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800add8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800adda:	4413      	add	r3, r2
 800addc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800adde:	8911      	ldrh	r1, [r2, #8]
 800ade0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ade2:	8992      	ldrh	r2, [r2, #12]
 800ade4:	0952      	lsrs	r2, r2, #5
 800ade6:	b292      	uxth	r2, r2
 800ade8:	fbb1 f2f2 	udiv	r2, r1, r2
 800adec:	b292      	uxth	r2, r2
 800adee:	4413      	add	r3, r2
 800adf0:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800adf2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800adf4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800adf6:	429a      	cmp	r2, r3
 800adf8:	d201      	bcs.n	800adfe <find_volume+0x30e>
 800adfa:	230d      	movs	r3, #13
 800adfc:	e0ee      	b.n	800afdc <find_volume+0x4ec>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800adfe:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800ae00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae02:	1ad3      	subs	r3, r2, r3
 800ae04:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ae06:	8952      	ldrh	r2, [r2, #10]
 800ae08:	fbb3 f3f2 	udiv	r3, r3, r2
 800ae0c:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800ae0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae10:	2b00      	cmp	r3, #0
 800ae12:	d101      	bne.n	800ae18 <find_volume+0x328>
 800ae14:	230d      	movs	r3, #13
 800ae16:	e0e1      	b.n	800afdc <find_volume+0x4ec>
		fmt = FS_FAT32;
 800ae18:	2303      	movs	r3, #3
 800ae1a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800ae1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae20:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800ae24:	4293      	cmp	r3, r2
 800ae26:	d802      	bhi.n	800ae2e <find_volume+0x33e>
 800ae28:	2302      	movs	r3, #2
 800ae2a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800ae2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae30:	f640 72f5 	movw	r2, #4085	; 0xff5
 800ae34:	4293      	cmp	r3, r2
 800ae36:	d802      	bhi.n	800ae3e <find_volume+0x34e>
 800ae38:	2301      	movs	r3, #1
 800ae3a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800ae3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae40:	1c9a      	adds	r2, r3, #2
 800ae42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ae44:	619a      	str	r2, [r3, #24]
		fs->volbase = bsect;							/* Volume start sector */
 800ae46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ae48:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800ae4a:	621a      	str	r2, [r3, #32]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800ae4c:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800ae4e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ae50:	441a      	add	r2, r3
 800ae52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ae54:	625a      	str	r2, [r3, #36]	; 0x24
		fs->database = bsect + sysect;					/* Data start sector */
 800ae56:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800ae58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae5a:	441a      	add	r2, r3
 800ae5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ae5e:	62da      	str	r2, [r3, #44]	; 0x2c
		if (fmt == FS_FAT32) {
 800ae60:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800ae64:	2b03      	cmp	r3, #3
 800ae66:	d11e      	bne.n	800aea6 <find_volume+0x3b6>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800ae68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ae6a:	3334      	adds	r3, #52	; 0x34
 800ae6c:	332a      	adds	r3, #42	; 0x2a
 800ae6e:	4618      	mov	r0, r3
 800ae70:	f7fe fbd4 	bl	800961c <ld_word>
 800ae74:	4603      	mov	r3, r0
 800ae76:	2b00      	cmp	r3, #0
 800ae78:	d001      	beq.n	800ae7e <find_volume+0x38e>
 800ae7a:	230d      	movs	r3, #13
 800ae7c:	e0ae      	b.n	800afdc <find_volume+0x4ec>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800ae7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ae80:	891b      	ldrh	r3, [r3, #8]
 800ae82:	2b00      	cmp	r3, #0
 800ae84:	d001      	beq.n	800ae8a <find_volume+0x39a>
 800ae86:	230d      	movs	r3, #13
 800ae88:	e0a8      	b.n	800afdc <find_volume+0x4ec>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800ae8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ae8c:	3334      	adds	r3, #52	; 0x34
 800ae8e:	332c      	adds	r3, #44	; 0x2c
 800ae90:	4618      	mov	r0, r3
 800ae92:	f7fe fbdb 	bl	800964c <ld_dword>
 800ae96:	4602      	mov	r2, r0
 800ae98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ae9a:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800ae9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ae9e:	699b      	ldr	r3, [r3, #24]
 800aea0:	009b      	lsls	r3, r3, #2
 800aea2:	647b      	str	r3, [r7, #68]	; 0x44
 800aea4:	e01f      	b.n	800aee6 <find_volume+0x3f6>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800aea6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aea8:	891b      	ldrh	r3, [r3, #8]
 800aeaa:	2b00      	cmp	r3, #0
 800aeac:	d101      	bne.n	800aeb2 <find_volume+0x3c2>
 800aeae:	230d      	movs	r3, #13
 800aeb0:	e094      	b.n	800afdc <find_volume+0x4ec>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800aeb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aeb4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800aeb6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800aeb8:	441a      	add	r2, r3
 800aeba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aebc:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800aebe:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800aec2:	2b02      	cmp	r3, #2
 800aec4:	d103      	bne.n	800aece <find_volume+0x3de>
 800aec6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aec8:	699b      	ldr	r3, [r3, #24]
 800aeca:	005b      	lsls	r3, r3, #1
 800aecc:	e00a      	b.n	800aee4 <find_volume+0x3f4>
 800aece:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aed0:	699a      	ldr	r2, [r3, #24]
 800aed2:	4613      	mov	r3, r2
 800aed4:	005b      	lsls	r3, r3, #1
 800aed6:	4413      	add	r3, r2
 800aed8:	085a      	lsrs	r2, r3, #1
 800aeda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aedc:	699b      	ldr	r3, [r3, #24]
 800aede:	f003 0301 	and.w	r3, r3, #1
 800aee2:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800aee4:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800aee6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aee8:	69da      	ldr	r2, [r3, #28]
 800aeea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aeec:	899b      	ldrh	r3, [r3, #12]
 800aeee:	4619      	mov	r1, r3
 800aef0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800aef2:	440b      	add	r3, r1
 800aef4:	3b01      	subs	r3, #1
 800aef6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800aef8:	8989      	ldrh	r1, [r1, #12]
 800aefa:	fbb3 f3f1 	udiv	r3, r3, r1
 800aefe:	429a      	cmp	r2, r3
 800af00:	d201      	bcs.n	800af06 <find_volume+0x416>
 800af02:	230d      	movs	r3, #13
 800af04:	e06a      	b.n	800afdc <find_volume+0x4ec>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800af06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800af08:	f04f 32ff 	mov.w	r2, #4294967295
 800af0c:	615a      	str	r2, [r3, #20]
 800af0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800af10:	695a      	ldr	r2, [r3, #20]
 800af12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800af14:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 800af16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800af18:	2280      	movs	r2, #128	; 0x80
 800af1a:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800af1c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800af20:	2b03      	cmp	r3, #3
 800af22:	d149      	bne.n	800afb8 <find_volume+0x4c8>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800af24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800af26:	3334      	adds	r3, #52	; 0x34
 800af28:	3330      	adds	r3, #48	; 0x30
 800af2a:	4618      	mov	r0, r3
 800af2c:	f7fe fb76 	bl	800961c <ld_word>
 800af30:	4603      	mov	r3, r0
 800af32:	2b01      	cmp	r3, #1
 800af34:	d140      	bne.n	800afb8 <find_volume+0x4c8>
			&& move_window(fs, bsect + 1) == FR_OK)
 800af36:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800af38:	3301      	adds	r3, #1
 800af3a:	4619      	mov	r1, r3
 800af3c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800af3e:	f7fe fe1d 	bl	8009b7c <move_window>
 800af42:	4603      	mov	r3, r0
 800af44:	2b00      	cmp	r3, #0
 800af46:	d137      	bne.n	800afb8 <find_volume+0x4c8>
		{
			fs->fsi_flag = 0;
 800af48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800af4a:	2200      	movs	r2, #0
 800af4c:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800af4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800af50:	3334      	adds	r3, #52	; 0x34
 800af52:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800af56:	4618      	mov	r0, r3
 800af58:	f7fe fb60 	bl	800961c <ld_word>
 800af5c:	4603      	mov	r3, r0
 800af5e:	461a      	mov	r2, r3
 800af60:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800af64:	429a      	cmp	r2, r3
 800af66:	d127      	bne.n	800afb8 <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800af68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800af6a:	3334      	adds	r3, #52	; 0x34
 800af6c:	4618      	mov	r0, r3
 800af6e:	f7fe fb6d 	bl	800964c <ld_dword>
 800af72:	4603      	mov	r3, r0
 800af74:	4a1b      	ldr	r2, [pc, #108]	; (800afe4 <find_volume+0x4f4>)
 800af76:	4293      	cmp	r3, r2
 800af78:	d11e      	bne.n	800afb8 <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800af7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800af7c:	3334      	adds	r3, #52	; 0x34
 800af7e:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800af82:	4618      	mov	r0, r3
 800af84:	f7fe fb62 	bl	800964c <ld_dword>
 800af88:	4603      	mov	r3, r0
 800af8a:	4a17      	ldr	r2, [pc, #92]	; (800afe8 <find_volume+0x4f8>)
 800af8c:	4293      	cmp	r3, r2
 800af8e:	d113      	bne.n	800afb8 <find_volume+0x4c8>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800af90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800af92:	3334      	adds	r3, #52	; 0x34
 800af94:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 800af98:	4618      	mov	r0, r3
 800af9a:	f7fe fb57 	bl	800964c <ld_dword>
 800af9e:	4602      	mov	r2, r0
 800afa0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800afa2:	615a      	str	r2, [r3, #20]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800afa4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800afa6:	3334      	adds	r3, #52	; 0x34
 800afa8:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800afac:	4618      	mov	r0, r3
 800afae:	f7fe fb4d 	bl	800964c <ld_dword>
 800afb2:	4602      	mov	r2, r0
 800afb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800afb6:	611a      	str	r2, [r3, #16]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800afb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800afba:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800afbe:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800afc0:	4b0a      	ldr	r3, [pc, #40]	; (800afec <find_volume+0x4fc>)
 800afc2:	881b      	ldrh	r3, [r3, #0]
 800afc4:	3301      	adds	r3, #1
 800afc6:	b29a      	uxth	r2, r3
 800afc8:	4b08      	ldr	r3, [pc, #32]	; (800afec <find_volume+0x4fc>)
 800afca:	801a      	strh	r2, [r3, #0]
 800afcc:	4b07      	ldr	r3, [pc, #28]	; (800afec <find_volume+0x4fc>)
 800afce:	881a      	ldrh	r2, [r3, #0]
 800afd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800afd2:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800afd4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800afd6:	f7fe fd69 	bl	8009aac <clear_lock>
#endif
	return FR_OK;
 800afda:	2300      	movs	r3, #0
}
 800afdc:	4618      	mov	r0, r3
 800afde:	3758      	adds	r7, #88	; 0x58
 800afe0:	46bd      	mov	sp, r7
 800afe2:	bd80      	pop	{r7, pc}
 800afe4:	41615252 	.word	0x41615252
 800afe8:	61417272 	.word	0x61417272
 800afec:	2000756c 	.word	0x2000756c

0800aff0 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800aff0:	b580      	push	{r7, lr}
 800aff2:	b084      	sub	sp, #16
 800aff4:	af00      	add	r7, sp, #0
 800aff6:	6078      	str	r0, [r7, #4]
 800aff8:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800affa:	2309      	movs	r3, #9
 800affc:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800affe:	687b      	ldr	r3, [r7, #4]
 800b000:	2b00      	cmp	r3, #0
 800b002:	d01c      	beq.n	800b03e <validate+0x4e>
 800b004:	687b      	ldr	r3, [r7, #4]
 800b006:	681b      	ldr	r3, [r3, #0]
 800b008:	2b00      	cmp	r3, #0
 800b00a:	d018      	beq.n	800b03e <validate+0x4e>
 800b00c:	687b      	ldr	r3, [r7, #4]
 800b00e:	681b      	ldr	r3, [r3, #0]
 800b010:	781b      	ldrb	r3, [r3, #0]
 800b012:	2b00      	cmp	r3, #0
 800b014:	d013      	beq.n	800b03e <validate+0x4e>
 800b016:	687b      	ldr	r3, [r7, #4]
 800b018:	889a      	ldrh	r2, [r3, #4]
 800b01a:	687b      	ldr	r3, [r7, #4]
 800b01c:	681b      	ldr	r3, [r3, #0]
 800b01e:	88db      	ldrh	r3, [r3, #6]
 800b020:	429a      	cmp	r2, r3
 800b022:	d10c      	bne.n	800b03e <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800b024:	687b      	ldr	r3, [r7, #4]
 800b026:	681b      	ldr	r3, [r3, #0]
 800b028:	785b      	ldrb	r3, [r3, #1]
 800b02a:	4618      	mov	r0, r3
 800b02c:	f7fe fa58 	bl	80094e0 <disk_status>
 800b030:	4603      	mov	r3, r0
 800b032:	f003 0301 	and.w	r3, r3, #1
 800b036:	2b00      	cmp	r3, #0
 800b038:	d101      	bne.n	800b03e <validate+0x4e>
			res = FR_OK;
 800b03a:	2300      	movs	r3, #0
 800b03c:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800b03e:	7bfb      	ldrb	r3, [r7, #15]
 800b040:	2b00      	cmp	r3, #0
 800b042:	d102      	bne.n	800b04a <validate+0x5a>
 800b044:	687b      	ldr	r3, [r7, #4]
 800b046:	681b      	ldr	r3, [r3, #0]
 800b048:	e000      	b.n	800b04c <validate+0x5c>
 800b04a:	2300      	movs	r3, #0
 800b04c:	683a      	ldr	r2, [r7, #0]
 800b04e:	6013      	str	r3, [r2, #0]
	return res;
 800b050:	7bfb      	ldrb	r3, [r7, #15]
}
 800b052:	4618      	mov	r0, r3
 800b054:	3710      	adds	r7, #16
 800b056:	46bd      	mov	sp, r7
 800b058:	bd80      	pop	{r7, pc}
	...

0800b05c <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800b05c:	b580      	push	{r7, lr}
 800b05e:	b088      	sub	sp, #32
 800b060:	af00      	add	r7, sp, #0
 800b062:	60f8      	str	r0, [r7, #12]
 800b064:	60b9      	str	r1, [r7, #8]
 800b066:	4613      	mov	r3, r2
 800b068:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800b06a:	68bb      	ldr	r3, [r7, #8]
 800b06c:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800b06e:	f107 0310 	add.w	r3, r7, #16
 800b072:	4618      	mov	r0, r3
 800b074:	f7ff fca2 	bl	800a9bc <get_ldnumber>
 800b078:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800b07a:	69fb      	ldr	r3, [r7, #28]
 800b07c:	2b00      	cmp	r3, #0
 800b07e:	da01      	bge.n	800b084 <f_mount+0x28>
 800b080:	230b      	movs	r3, #11
 800b082:	e02b      	b.n	800b0dc <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800b084:	4a17      	ldr	r2, [pc, #92]	; (800b0e4 <f_mount+0x88>)
 800b086:	69fb      	ldr	r3, [r7, #28]
 800b088:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b08c:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800b08e:	69bb      	ldr	r3, [r7, #24]
 800b090:	2b00      	cmp	r3, #0
 800b092:	d005      	beq.n	800b0a0 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800b094:	69b8      	ldr	r0, [r7, #24]
 800b096:	f7fe fd09 	bl	8009aac <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800b09a:	69bb      	ldr	r3, [r7, #24]
 800b09c:	2200      	movs	r2, #0
 800b09e:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800b0a0:	68fb      	ldr	r3, [r7, #12]
 800b0a2:	2b00      	cmp	r3, #0
 800b0a4:	d002      	beq.n	800b0ac <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800b0a6:	68fb      	ldr	r3, [r7, #12]
 800b0a8:	2200      	movs	r2, #0
 800b0aa:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800b0ac:	68fa      	ldr	r2, [r7, #12]
 800b0ae:	490d      	ldr	r1, [pc, #52]	; (800b0e4 <f_mount+0x88>)
 800b0b0:	69fb      	ldr	r3, [r7, #28]
 800b0b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800b0b6:	68fb      	ldr	r3, [r7, #12]
 800b0b8:	2b00      	cmp	r3, #0
 800b0ba:	d002      	beq.n	800b0c2 <f_mount+0x66>
 800b0bc:	79fb      	ldrb	r3, [r7, #7]
 800b0be:	2b01      	cmp	r3, #1
 800b0c0:	d001      	beq.n	800b0c6 <f_mount+0x6a>
 800b0c2:	2300      	movs	r3, #0
 800b0c4:	e00a      	b.n	800b0dc <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800b0c6:	f107 010c 	add.w	r1, r7, #12
 800b0ca:	f107 0308 	add.w	r3, r7, #8
 800b0ce:	2200      	movs	r2, #0
 800b0d0:	4618      	mov	r0, r3
 800b0d2:	f7ff fd0d 	bl	800aaf0 <find_volume>
 800b0d6:	4603      	mov	r3, r0
 800b0d8:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800b0da:	7dfb      	ldrb	r3, [r7, #23]
}
 800b0dc:	4618      	mov	r0, r3
 800b0de:	3720      	adds	r7, #32
 800b0e0:	46bd      	mov	sp, r7
 800b0e2:	bd80      	pop	{r7, pc}
 800b0e4:	20007568 	.word	0x20007568

0800b0e8 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800b0e8:	b580      	push	{r7, lr}
 800b0ea:	b098      	sub	sp, #96	; 0x60
 800b0ec:	af00      	add	r7, sp, #0
 800b0ee:	60f8      	str	r0, [r7, #12]
 800b0f0:	60b9      	str	r1, [r7, #8]
 800b0f2:	4613      	mov	r3, r2
 800b0f4:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800b0f6:	68fb      	ldr	r3, [r7, #12]
 800b0f8:	2b00      	cmp	r3, #0
 800b0fa:	d101      	bne.n	800b100 <f_open+0x18>
 800b0fc:	2309      	movs	r3, #9
 800b0fe:	e1b8      	b.n	800b472 <f_open+0x38a>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800b100:	79fb      	ldrb	r3, [r7, #7]
 800b102:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b106:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800b108:	79fa      	ldrb	r2, [r7, #7]
 800b10a:	f107 0110 	add.w	r1, r7, #16
 800b10e:	f107 0308 	add.w	r3, r7, #8
 800b112:	4618      	mov	r0, r3
 800b114:	f7ff fcec 	bl	800aaf0 <find_volume>
 800b118:	4603      	mov	r3, r0
 800b11a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 800b11e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b122:	2b00      	cmp	r3, #0
 800b124:	f040 819c 	bne.w	800b460 <f_open+0x378>
		dj.obj.fs = fs;
 800b128:	693b      	ldr	r3, [r7, #16]
 800b12a:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800b12c:	68ba      	ldr	r2, [r7, #8]
 800b12e:	f107 0314 	add.w	r3, r7, #20
 800b132:	4611      	mov	r1, r2
 800b134:	4618      	mov	r0, r3
 800b136:	f7ff fbcb 	bl	800a8d0 <follow_path>
 800b13a:	4603      	mov	r3, r0
 800b13c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800b140:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b144:	2b00      	cmp	r3, #0
 800b146:	d11a      	bne.n	800b17e <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800b148:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800b14c:	b25b      	sxtb	r3, r3
 800b14e:	2b00      	cmp	r3, #0
 800b150:	da03      	bge.n	800b15a <f_open+0x72>
				res = FR_INVALID_NAME;
 800b152:	2306      	movs	r3, #6
 800b154:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800b158:	e011      	b.n	800b17e <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800b15a:	79fb      	ldrb	r3, [r7, #7]
 800b15c:	f023 0301 	bic.w	r3, r3, #1
 800b160:	2b00      	cmp	r3, #0
 800b162:	bf14      	ite	ne
 800b164:	2301      	movne	r3, #1
 800b166:	2300      	moveq	r3, #0
 800b168:	b2db      	uxtb	r3, r3
 800b16a:	461a      	mov	r2, r3
 800b16c:	f107 0314 	add.w	r3, r7, #20
 800b170:	4611      	mov	r1, r2
 800b172:	4618      	mov	r0, r3
 800b174:	f7fe fb52 	bl	800981c <chk_lock>
 800b178:	4603      	mov	r3, r0
 800b17a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800b17e:	79fb      	ldrb	r3, [r7, #7]
 800b180:	f003 031c 	and.w	r3, r3, #28
 800b184:	2b00      	cmp	r3, #0
 800b186:	d07f      	beq.n	800b288 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 800b188:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b18c:	2b00      	cmp	r3, #0
 800b18e:	d017      	beq.n	800b1c0 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800b190:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b194:	2b04      	cmp	r3, #4
 800b196:	d10e      	bne.n	800b1b6 <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800b198:	f7fe fb9c 	bl	80098d4 <enq_lock>
 800b19c:	4603      	mov	r3, r0
 800b19e:	2b00      	cmp	r3, #0
 800b1a0:	d006      	beq.n	800b1b0 <f_open+0xc8>
 800b1a2:	f107 0314 	add.w	r3, r7, #20
 800b1a6:	4618      	mov	r0, r3
 800b1a8:	f7ff facc 	bl	800a744 <dir_register>
 800b1ac:	4603      	mov	r3, r0
 800b1ae:	e000      	b.n	800b1b2 <f_open+0xca>
 800b1b0:	2312      	movs	r3, #18
 800b1b2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800b1b6:	79fb      	ldrb	r3, [r7, #7]
 800b1b8:	f043 0308 	orr.w	r3, r3, #8
 800b1bc:	71fb      	strb	r3, [r7, #7]
 800b1be:	e010      	b.n	800b1e2 <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800b1c0:	7ebb      	ldrb	r3, [r7, #26]
 800b1c2:	f003 0311 	and.w	r3, r3, #17
 800b1c6:	2b00      	cmp	r3, #0
 800b1c8:	d003      	beq.n	800b1d2 <f_open+0xea>
					res = FR_DENIED;
 800b1ca:	2307      	movs	r3, #7
 800b1cc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800b1d0:	e007      	b.n	800b1e2 <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800b1d2:	79fb      	ldrb	r3, [r7, #7]
 800b1d4:	f003 0304 	and.w	r3, r3, #4
 800b1d8:	2b00      	cmp	r3, #0
 800b1da:	d002      	beq.n	800b1e2 <f_open+0xfa>
 800b1dc:	2308      	movs	r3, #8
 800b1de:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800b1e2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b1e6:	2b00      	cmp	r3, #0
 800b1e8:	d168      	bne.n	800b2bc <f_open+0x1d4>
 800b1ea:	79fb      	ldrb	r3, [r7, #7]
 800b1ec:	f003 0308 	and.w	r3, r3, #8
 800b1f0:	2b00      	cmp	r3, #0
 800b1f2:	d063      	beq.n	800b2bc <f_open+0x1d4>
				dw = GET_FATTIME();
 800b1f4:	f7fd ffe0 	bl	80091b8 <get_fattime>
 800b1f8:	6538      	str	r0, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800b1fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b1fc:	330e      	adds	r3, #14
 800b1fe:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800b200:	4618      	mov	r0, r3
 800b202:	f7fe fa61 	bl	80096c8 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800b206:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b208:	3316      	adds	r3, #22
 800b20a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800b20c:	4618      	mov	r0, r3
 800b20e:	f7fe fa5b 	bl	80096c8 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800b212:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b214:	330b      	adds	r3, #11
 800b216:	2220      	movs	r2, #32
 800b218:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800b21a:	693b      	ldr	r3, [r7, #16]
 800b21c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b21e:	4611      	mov	r1, r2
 800b220:	4618      	mov	r0, r3
 800b222:	f7ff f9fb 	bl	800a61c <ld_clust>
 800b226:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800b228:	693b      	ldr	r3, [r7, #16]
 800b22a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800b22c:	2200      	movs	r2, #0
 800b22e:	4618      	mov	r0, r3
 800b230:	f7ff fa13 	bl	800a65a <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800b234:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b236:	331c      	adds	r3, #28
 800b238:	2100      	movs	r1, #0
 800b23a:	4618      	mov	r0, r3
 800b23c:	f7fe fa44 	bl	80096c8 <st_dword>
					fs->wflag = 1;
 800b240:	693b      	ldr	r3, [r7, #16]
 800b242:	2201      	movs	r2, #1
 800b244:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800b246:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b248:	2b00      	cmp	r3, #0
 800b24a:	d037      	beq.n	800b2bc <f_open+0x1d4>
						dw = fs->winsect;
 800b24c:	693b      	ldr	r3, [r7, #16]
 800b24e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b250:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 800b252:	f107 0314 	add.w	r3, r7, #20
 800b256:	2200      	movs	r2, #0
 800b258:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800b25a:	4618      	mov	r0, r3
 800b25c:	f7fe ff3b 	bl	800a0d6 <remove_chain>
 800b260:	4603      	mov	r3, r0
 800b262:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 800b266:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b26a:	2b00      	cmp	r3, #0
 800b26c:	d126      	bne.n	800b2bc <f_open+0x1d4>
							res = move_window(fs, dw);
 800b26e:	693b      	ldr	r3, [r7, #16]
 800b270:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800b272:	4618      	mov	r0, r3
 800b274:	f7fe fc82 	bl	8009b7c <move_window>
 800b278:	4603      	mov	r3, r0
 800b27a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800b27e:	693b      	ldr	r3, [r7, #16]
 800b280:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800b282:	3a01      	subs	r2, #1
 800b284:	611a      	str	r2, [r3, #16]
 800b286:	e019      	b.n	800b2bc <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800b288:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b28c:	2b00      	cmp	r3, #0
 800b28e:	d115      	bne.n	800b2bc <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800b290:	7ebb      	ldrb	r3, [r7, #26]
 800b292:	f003 0310 	and.w	r3, r3, #16
 800b296:	2b00      	cmp	r3, #0
 800b298:	d003      	beq.n	800b2a2 <f_open+0x1ba>
					res = FR_NO_FILE;
 800b29a:	2304      	movs	r3, #4
 800b29c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800b2a0:	e00c      	b.n	800b2bc <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800b2a2:	79fb      	ldrb	r3, [r7, #7]
 800b2a4:	f003 0302 	and.w	r3, r3, #2
 800b2a8:	2b00      	cmp	r3, #0
 800b2aa:	d007      	beq.n	800b2bc <f_open+0x1d4>
 800b2ac:	7ebb      	ldrb	r3, [r7, #26]
 800b2ae:	f003 0301 	and.w	r3, r3, #1
 800b2b2:	2b00      	cmp	r3, #0
 800b2b4:	d002      	beq.n	800b2bc <f_open+0x1d4>
						res = FR_DENIED;
 800b2b6:	2307      	movs	r3, #7
 800b2b8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 800b2bc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b2c0:	2b00      	cmp	r3, #0
 800b2c2:	d128      	bne.n	800b316 <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800b2c4:	79fb      	ldrb	r3, [r7, #7]
 800b2c6:	f003 0308 	and.w	r3, r3, #8
 800b2ca:	2b00      	cmp	r3, #0
 800b2cc:	d003      	beq.n	800b2d6 <f_open+0x1ee>
				mode |= FA_MODIFIED;
 800b2ce:	79fb      	ldrb	r3, [r7, #7]
 800b2d0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b2d4:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800b2d6:	693b      	ldr	r3, [r7, #16]
 800b2d8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b2da:	68fb      	ldr	r3, [r7, #12]
 800b2dc:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 800b2de:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b2e0:	68fb      	ldr	r3, [r7, #12]
 800b2e2:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800b2e4:	79fb      	ldrb	r3, [r7, #7]
 800b2e6:	f023 0301 	bic.w	r3, r3, #1
 800b2ea:	2b00      	cmp	r3, #0
 800b2ec:	bf14      	ite	ne
 800b2ee:	2301      	movne	r3, #1
 800b2f0:	2300      	moveq	r3, #0
 800b2f2:	b2db      	uxtb	r3, r3
 800b2f4:	461a      	mov	r2, r3
 800b2f6:	f107 0314 	add.w	r3, r7, #20
 800b2fa:	4611      	mov	r1, r2
 800b2fc:	4618      	mov	r0, r3
 800b2fe:	f7fe fb0b 	bl	8009918 <inc_lock>
 800b302:	4602      	mov	r2, r0
 800b304:	68fb      	ldr	r3, [r7, #12]
 800b306:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800b308:	68fb      	ldr	r3, [r7, #12]
 800b30a:	691b      	ldr	r3, [r3, #16]
 800b30c:	2b00      	cmp	r3, #0
 800b30e:	d102      	bne.n	800b316 <f_open+0x22e>
 800b310:	2302      	movs	r3, #2
 800b312:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 800b316:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b31a:	2b00      	cmp	r3, #0
 800b31c:	f040 80a0 	bne.w	800b460 <f_open+0x378>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800b320:	693b      	ldr	r3, [r7, #16]
 800b322:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b324:	4611      	mov	r1, r2
 800b326:	4618      	mov	r0, r3
 800b328:	f7ff f978 	bl	800a61c <ld_clust>
 800b32c:	4602      	mov	r2, r0
 800b32e:	68fb      	ldr	r3, [r7, #12]
 800b330:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800b332:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b334:	331c      	adds	r3, #28
 800b336:	4618      	mov	r0, r3
 800b338:	f7fe f988 	bl	800964c <ld_dword>
 800b33c:	4602      	mov	r2, r0
 800b33e:	68fb      	ldr	r3, [r7, #12]
 800b340:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800b342:	693a      	ldr	r2, [r7, #16]
 800b344:	68fb      	ldr	r3, [r7, #12]
 800b346:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800b348:	693b      	ldr	r3, [r7, #16]
 800b34a:	88da      	ldrh	r2, [r3, #6]
 800b34c:	68fb      	ldr	r3, [r7, #12]
 800b34e:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800b350:	68fb      	ldr	r3, [r7, #12]
 800b352:	79fa      	ldrb	r2, [r7, #7]
 800b354:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800b356:	68fb      	ldr	r3, [r7, #12]
 800b358:	2200      	movs	r2, #0
 800b35a:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800b35c:	68fb      	ldr	r3, [r7, #12]
 800b35e:	2200      	movs	r2, #0
 800b360:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800b362:	68fb      	ldr	r3, [r7, #12]
 800b364:	2200      	movs	r2, #0
 800b366:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800b368:	68fb      	ldr	r3, [r7, #12]
 800b36a:	332c      	adds	r3, #44	; 0x2c
 800b36c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800b370:	2100      	movs	r1, #0
 800b372:	4618      	mov	r0, r3
 800b374:	f7fe f9f5 	bl	8009762 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800b378:	79fb      	ldrb	r3, [r7, #7]
 800b37a:	f003 0320 	and.w	r3, r3, #32
 800b37e:	2b00      	cmp	r3, #0
 800b380:	d06e      	beq.n	800b460 <f_open+0x378>
 800b382:	68fb      	ldr	r3, [r7, #12]
 800b384:	68db      	ldr	r3, [r3, #12]
 800b386:	2b00      	cmp	r3, #0
 800b388:	d06a      	beq.n	800b460 <f_open+0x378>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800b38a:	68fb      	ldr	r3, [r7, #12]
 800b38c:	68da      	ldr	r2, [r3, #12]
 800b38e:	68fb      	ldr	r3, [r7, #12]
 800b390:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800b392:	693b      	ldr	r3, [r7, #16]
 800b394:	895b      	ldrh	r3, [r3, #10]
 800b396:	461a      	mov	r2, r3
 800b398:	693b      	ldr	r3, [r7, #16]
 800b39a:	899b      	ldrh	r3, [r3, #12]
 800b39c:	fb02 f303 	mul.w	r3, r2, r3
 800b3a0:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800b3a2:	68fb      	ldr	r3, [r7, #12]
 800b3a4:	689b      	ldr	r3, [r3, #8]
 800b3a6:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800b3a8:	68fb      	ldr	r3, [r7, #12]
 800b3aa:	68db      	ldr	r3, [r3, #12]
 800b3ac:	657b      	str	r3, [r7, #84]	; 0x54
 800b3ae:	e016      	b.n	800b3de <f_open+0x2f6>
					clst = get_fat(&fp->obj, clst);
 800b3b0:	68fb      	ldr	r3, [r7, #12]
 800b3b2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800b3b4:	4618      	mov	r0, r3
 800b3b6:	f7fe fc9e 	bl	8009cf6 <get_fat>
 800b3ba:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 800b3bc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800b3be:	2b01      	cmp	r3, #1
 800b3c0:	d802      	bhi.n	800b3c8 <f_open+0x2e0>
 800b3c2:	2302      	movs	r3, #2
 800b3c4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800b3c8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800b3ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b3ce:	d102      	bne.n	800b3d6 <f_open+0x2ee>
 800b3d0:	2301      	movs	r3, #1
 800b3d2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800b3d6:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800b3d8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b3da:	1ad3      	subs	r3, r2, r3
 800b3dc:	657b      	str	r3, [r7, #84]	; 0x54
 800b3de:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b3e2:	2b00      	cmp	r3, #0
 800b3e4:	d103      	bne.n	800b3ee <f_open+0x306>
 800b3e6:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800b3e8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b3ea:	429a      	cmp	r2, r3
 800b3ec:	d8e0      	bhi.n	800b3b0 <f_open+0x2c8>
				}
				fp->clust = clst;
 800b3ee:	68fb      	ldr	r3, [r7, #12]
 800b3f0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800b3f2:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800b3f4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b3f8:	2b00      	cmp	r3, #0
 800b3fa:	d131      	bne.n	800b460 <f_open+0x378>
 800b3fc:	693b      	ldr	r3, [r7, #16]
 800b3fe:	899b      	ldrh	r3, [r3, #12]
 800b400:	461a      	mov	r2, r3
 800b402:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b404:	fbb3 f1f2 	udiv	r1, r3, r2
 800b408:	fb01 f202 	mul.w	r2, r1, r2
 800b40c:	1a9b      	subs	r3, r3, r2
 800b40e:	2b00      	cmp	r3, #0
 800b410:	d026      	beq.n	800b460 <f_open+0x378>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800b412:	693b      	ldr	r3, [r7, #16]
 800b414:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800b416:	4618      	mov	r0, r3
 800b418:	f7fe fc4e 	bl	8009cb8 <clust2sect>
 800b41c:	6478      	str	r0, [r7, #68]	; 0x44
 800b41e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b420:	2b00      	cmp	r3, #0
 800b422:	d103      	bne.n	800b42c <f_open+0x344>
						res = FR_INT_ERR;
 800b424:	2302      	movs	r3, #2
 800b426:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800b42a:	e019      	b.n	800b460 <f_open+0x378>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800b42c:	693b      	ldr	r3, [r7, #16]
 800b42e:	899b      	ldrh	r3, [r3, #12]
 800b430:	461a      	mov	r2, r3
 800b432:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b434:	fbb3 f2f2 	udiv	r2, r3, r2
 800b438:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b43a:	441a      	add	r2, r3
 800b43c:	68fb      	ldr	r3, [r7, #12]
 800b43e:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800b440:	693b      	ldr	r3, [r7, #16]
 800b442:	7858      	ldrb	r0, [r3, #1]
 800b444:	68fb      	ldr	r3, [r7, #12]
 800b446:	f103 012c 	add.w	r1, r3, #44	; 0x2c
 800b44a:	68fb      	ldr	r3, [r7, #12]
 800b44c:	6a1a      	ldr	r2, [r3, #32]
 800b44e:	2301      	movs	r3, #1
 800b450:	f7fe f886 	bl	8009560 <disk_read>
 800b454:	4603      	mov	r3, r0
 800b456:	2b00      	cmp	r3, #0
 800b458:	d002      	beq.n	800b460 <f_open+0x378>
 800b45a:	2301      	movs	r3, #1
 800b45c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800b460:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b464:	2b00      	cmp	r3, #0
 800b466:	d002      	beq.n	800b46e <f_open+0x386>
 800b468:	68fb      	ldr	r3, [r7, #12]
 800b46a:	2200      	movs	r2, #0
 800b46c:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800b46e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 800b472:	4618      	mov	r0, r3
 800b474:	3760      	adds	r7, #96	; 0x60
 800b476:	46bd      	mov	sp, r7
 800b478:	bd80      	pop	{r7, pc}

0800b47a <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800b47a:	b580      	push	{r7, lr}
 800b47c:	b08c      	sub	sp, #48	; 0x30
 800b47e:	af00      	add	r7, sp, #0
 800b480:	60f8      	str	r0, [r7, #12]
 800b482:	60b9      	str	r1, [r7, #8]
 800b484:	607a      	str	r2, [r7, #4]
 800b486:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 800b488:	68bb      	ldr	r3, [r7, #8]
 800b48a:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 800b48c:	683b      	ldr	r3, [r7, #0]
 800b48e:	2200      	movs	r2, #0
 800b490:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 800b492:	68fb      	ldr	r3, [r7, #12]
 800b494:	f107 0210 	add.w	r2, r7, #16
 800b498:	4611      	mov	r1, r2
 800b49a:	4618      	mov	r0, r3
 800b49c:	f7ff fda8 	bl	800aff0 <validate>
 800b4a0:	4603      	mov	r3, r0
 800b4a2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800b4a6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800b4aa:	2b00      	cmp	r3, #0
 800b4ac:	d107      	bne.n	800b4be <f_write+0x44>
 800b4ae:	68fb      	ldr	r3, [r7, #12]
 800b4b0:	7d5b      	ldrb	r3, [r3, #21]
 800b4b2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800b4b6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800b4ba:	2b00      	cmp	r3, #0
 800b4bc:	d002      	beq.n	800b4c4 <f_write+0x4a>
 800b4be:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800b4c2:	e15e      	b.n	800b782 <f_write+0x308>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800b4c4:	68fb      	ldr	r3, [r7, #12]
 800b4c6:	7d1b      	ldrb	r3, [r3, #20]
 800b4c8:	f003 0302 	and.w	r3, r3, #2
 800b4cc:	2b00      	cmp	r3, #0
 800b4ce:	d101      	bne.n	800b4d4 <f_write+0x5a>
 800b4d0:	2307      	movs	r3, #7
 800b4d2:	e156      	b.n	800b782 <f_write+0x308>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 800b4d4:	68fb      	ldr	r3, [r7, #12]
 800b4d6:	699a      	ldr	r2, [r3, #24]
 800b4d8:	687b      	ldr	r3, [r7, #4]
 800b4da:	441a      	add	r2, r3
 800b4dc:	68fb      	ldr	r3, [r7, #12]
 800b4de:	699b      	ldr	r3, [r3, #24]
 800b4e0:	429a      	cmp	r2, r3
 800b4e2:	f080 8140 	bcs.w	800b766 <f_write+0x2ec>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 800b4e6:	68fb      	ldr	r3, [r7, #12]
 800b4e8:	699b      	ldr	r3, [r3, #24]
 800b4ea:	43db      	mvns	r3, r3
 800b4ec:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 800b4ee:	e13a      	b.n	800b766 <f_write+0x2ec>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 800b4f0:	68fb      	ldr	r3, [r7, #12]
 800b4f2:	699b      	ldr	r3, [r3, #24]
 800b4f4:	693a      	ldr	r2, [r7, #16]
 800b4f6:	8992      	ldrh	r2, [r2, #12]
 800b4f8:	fbb3 f1f2 	udiv	r1, r3, r2
 800b4fc:	fb01 f202 	mul.w	r2, r1, r2
 800b500:	1a9b      	subs	r3, r3, r2
 800b502:	2b00      	cmp	r3, #0
 800b504:	f040 80e5 	bne.w	800b6d2 <f_write+0x258>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 800b508:	68fb      	ldr	r3, [r7, #12]
 800b50a:	699b      	ldr	r3, [r3, #24]
 800b50c:	693a      	ldr	r2, [r7, #16]
 800b50e:	8992      	ldrh	r2, [r2, #12]
 800b510:	fbb3 f3f2 	udiv	r3, r3, r2
 800b514:	693a      	ldr	r2, [r7, #16]
 800b516:	8952      	ldrh	r2, [r2, #10]
 800b518:	3a01      	subs	r2, #1
 800b51a:	4013      	ands	r3, r2
 800b51c:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 800b51e:	69bb      	ldr	r3, [r7, #24]
 800b520:	2b00      	cmp	r3, #0
 800b522:	d137      	bne.n	800b594 <f_write+0x11a>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800b524:	68fb      	ldr	r3, [r7, #12]
 800b526:	699b      	ldr	r3, [r3, #24]
 800b528:	2b00      	cmp	r3, #0
 800b52a:	d10c      	bne.n	800b546 <f_write+0xcc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 800b52c:	68fb      	ldr	r3, [r7, #12]
 800b52e:	689b      	ldr	r3, [r3, #8]
 800b530:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 800b532:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b534:	2b00      	cmp	r3, #0
 800b536:	d10e      	bne.n	800b556 <f_write+0xdc>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 800b538:	68fb      	ldr	r3, [r7, #12]
 800b53a:	2100      	movs	r1, #0
 800b53c:	4618      	mov	r0, r3
 800b53e:	f7fe fe2f 	bl	800a1a0 <create_chain>
 800b542:	62b8      	str	r0, [r7, #40]	; 0x28
 800b544:	e007      	b.n	800b556 <f_write+0xdc>
					if (fp->cltbl) {
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800b546:	68fa      	ldr	r2, [r7, #12]
 800b548:	68fb      	ldr	r3, [r7, #12]
 800b54a:	69db      	ldr	r3, [r3, #28]
 800b54c:	4619      	mov	r1, r3
 800b54e:	4610      	mov	r0, r2
 800b550:	f7fe fe26 	bl	800a1a0 <create_chain>
 800b554:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800b556:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b558:	2b00      	cmp	r3, #0
 800b55a:	f000 8109 	beq.w	800b770 <f_write+0x2f6>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800b55e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b560:	2b01      	cmp	r3, #1
 800b562:	d104      	bne.n	800b56e <f_write+0xf4>
 800b564:	68fb      	ldr	r3, [r7, #12]
 800b566:	2202      	movs	r2, #2
 800b568:	755a      	strb	r2, [r3, #21]
 800b56a:	2302      	movs	r3, #2
 800b56c:	e109      	b.n	800b782 <f_write+0x308>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800b56e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b570:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b574:	d104      	bne.n	800b580 <f_write+0x106>
 800b576:	68fb      	ldr	r3, [r7, #12]
 800b578:	2201      	movs	r2, #1
 800b57a:	755a      	strb	r2, [r3, #21]
 800b57c:	2301      	movs	r3, #1
 800b57e:	e100      	b.n	800b782 <f_write+0x308>
				fp->clust = clst;			/* Update current cluster */
 800b580:	68fb      	ldr	r3, [r7, #12]
 800b582:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b584:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 800b586:	68fb      	ldr	r3, [r7, #12]
 800b588:	689b      	ldr	r3, [r3, #8]
 800b58a:	2b00      	cmp	r3, #0
 800b58c:	d102      	bne.n	800b594 <f_write+0x11a>
 800b58e:	68fb      	ldr	r3, [r7, #12]
 800b590:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b592:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 800b594:	68fb      	ldr	r3, [r7, #12]
 800b596:	7d1b      	ldrb	r3, [r3, #20]
 800b598:	b25b      	sxtb	r3, r3
 800b59a:	2b00      	cmp	r3, #0
 800b59c:	da18      	bge.n	800b5d0 <f_write+0x156>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800b59e:	693b      	ldr	r3, [r7, #16]
 800b5a0:	7858      	ldrb	r0, [r3, #1]
 800b5a2:	68fb      	ldr	r3, [r7, #12]
 800b5a4:	f103 012c 	add.w	r1, r3, #44	; 0x2c
 800b5a8:	68fb      	ldr	r3, [r7, #12]
 800b5aa:	6a1a      	ldr	r2, [r3, #32]
 800b5ac:	2301      	movs	r3, #1
 800b5ae:	f7fd fff7 	bl	80095a0 <disk_write>
 800b5b2:	4603      	mov	r3, r0
 800b5b4:	2b00      	cmp	r3, #0
 800b5b6:	d004      	beq.n	800b5c2 <f_write+0x148>
 800b5b8:	68fb      	ldr	r3, [r7, #12]
 800b5ba:	2201      	movs	r2, #1
 800b5bc:	755a      	strb	r2, [r3, #21]
 800b5be:	2301      	movs	r3, #1
 800b5c0:	e0df      	b.n	800b782 <f_write+0x308>
				fp->flag &= (BYTE)~FA_DIRTY;
 800b5c2:	68fb      	ldr	r3, [r7, #12]
 800b5c4:	7d1b      	ldrb	r3, [r3, #20]
 800b5c6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b5ca:	b2da      	uxtb	r2, r3
 800b5cc:	68fb      	ldr	r3, [r7, #12]
 800b5ce:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800b5d0:	693a      	ldr	r2, [r7, #16]
 800b5d2:	68fb      	ldr	r3, [r7, #12]
 800b5d4:	69db      	ldr	r3, [r3, #28]
 800b5d6:	4619      	mov	r1, r3
 800b5d8:	4610      	mov	r0, r2
 800b5da:	f7fe fb6d 	bl	8009cb8 <clust2sect>
 800b5de:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800b5e0:	697b      	ldr	r3, [r7, #20]
 800b5e2:	2b00      	cmp	r3, #0
 800b5e4:	d104      	bne.n	800b5f0 <f_write+0x176>
 800b5e6:	68fb      	ldr	r3, [r7, #12]
 800b5e8:	2202      	movs	r2, #2
 800b5ea:	755a      	strb	r2, [r3, #21]
 800b5ec:	2302      	movs	r3, #2
 800b5ee:	e0c8      	b.n	800b782 <f_write+0x308>
			sect += csect;
 800b5f0:	697a      	ldr	r2, [r7, #20]
 800b5f2:	69bb      	ldr	r3, [r7, #24]
 800b5f4:	4413      	add	r3, r2
 800b5f6:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 800b5f8:	693b      	ldr	r3, [r7, #16]
 800b5fa:	899b      	ldrh	r3, [r3, #12]
 800b5fc:	461a      	mov	r2, r3
 800b5fe:	687b      	ldr	r3, [r7, #4]
 800b600:	fbb3 f3f2 	udiv	r3, r3, r2
 800b604:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800b606:	6a3b      	ldr	r3, [r7, #32]
 800b608:	2b00      	cmp	r3, #0
 800b60a:	d043      	beq.n	800b694 <f_write+0x21a>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800b60c:	69ba      	ldr	r2, [r7, #24]
 800b60e:	6a3b      	ldr	r3, [r7, #32]
 800b610:	4413      	add	r3, r2
 800b612:	693a      	ldr	r2, [r7, #16]
 800b614:	8952      	ldrh	r2, [r2, #10]
 800b616:	4293      	cmp	r3, r2
 800b618:	d905      	bls.n	800b626 <f_write+0x1ac>
					cc = fs->csize - csect;
 800b61a:	693b      	ldr	r3, [r7, #16]
 800b61c:	895b      	ldrh	r3, [r3, #10]
 800b61e:	461a      	mov	r2, r3
 800b620:	69bb      	ldr	r3, [r7, #24]
 800b622:	1ad3      	subs	r3, r2, r3
 800b624:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800b626:	693b      	ldr	r3, [r7, #16]
 800b628:	7858      	ldrb	r0, [r3, #1]
 800b62a:	6a3b      	ldr	r3, [r7, #32]
 800b62c:	697a      	ldr	r2, [r7, #20]
 800b62e:	69f9      	ldr	r1, [r7, #28]
 800b630:	f7fd ffb6 	bl	80095a0 <disk_write>
 800b634:	4603      	mov	r3, r0
 800b636:	2b00      	cmp	r3, #0
 800b638:	d004      	beq.n	800b644 <f_write+0x1ca>
 800b63a:	68fb      	ldr	r3, [r7, #12]
 800b63c:	2201      	movs	r2, #1
 800b63e:	755a      	strb	r2, [r3, #21]
 800b640:	2301      	movs	r3, #1
 800b642:	e09e      	b.n	800b782 <f_write+0x308>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800b644:	68fb      	ldr	r3, [r7, #12]
 800b646:	6a1a      	ldr	r2, [r3, #32]
 800b648:	697b      	ldr	r3, [r7, #20]
 800b64a:	1ad3      	subs	r3, r2, r3
 800b64c:	6a3a      	ldr	r2, [r7, #32]
 800b64e:	429a      	cmp	r2, r3
 800b650:	d918      	bls.n	800b684 <f_write+0x20a>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 800b652:	68fb      	ldr	r3, [r7, #12]
 800b654:	f103 002c 	add.w	r0, r3, #44	; 0x2c
 800b658:	68fb      	ldr	r3, [r7, #12]
 800b65a:	6a1a      	ldr	r2, [r3, #32]
 800b65c:	697b      	ldr	r3, [r7, #20]
 800b65e:	1ad3      	subs	r3, r2, r3
 800b660:	693a      	ldr	r2, [r7, #16]
 800b662:	8992      	ldrh	r2, [r2, #12]
 800b664:	fb02 f303 	mul.w	r3, r2, r3
 800b668:	69fa      	ldr	r2, [r7, #28]
 800b66a:	18d1      	adds	r1, r2, r3
 800b66c:	693b      	ldr	r3, [r7, #16]
 800b66e:	899b      	ldrh	r3, [r3, #12]
 800b670:	461a      	mov	r2, r3
 800b672:	f7fe f855 	bl	8009720 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 800b676:	68fb      	ldr	r3, [r7, #12]
 800b678:	7d1b      	ldrb	r3, [r3, #20]
 800b67a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b67e:	b2da      	uxtb	r2, r3
 800b680:	68fb      	ldr	r3, [r7, #12]
 800b682:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 800b684:	693b      	ldr	r3, [r7, #16]
 800b686:	899b      	ldrh	r3, [r3, #12]
 800b688:	461a      	mov	r2, r3
 800b68a:	6a3b      	ldr	r3, [r7, #32]
 800b68c:	fb02 f303 	mul.w	r3, r2, r3
 800b690:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 800b692:	e04b      	b.n	800b72c <f_write+0x2b2>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800b694:	68fb      	ldr	r3, [r7, #12]
 800b696:	6a1b      	ldr	r3, [r3, #32]
 800b698:	697a      	ldr	r2, [r7, #20]
 800b69a:	429a      	cmp	r2, r3
 800b69c:	d016      	beq.n	800b6cc <f_write+0x252>
				fp->fptr < fp->obj.objsize &&
 800b69e:	68fb      	ldr	r3, [r7, #12]
 800b6a0:	699a      	ldr	r2, [r3, #24]
 800b6a2:	68fb      	ldr	r3, [r7, #12]
 800b6a4:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800b6a6:	429a      	cmp	r2, r3
 800b6a8:	d210      	bcs.n	800b6cc <f_write+0x252>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 800b6aa:	693b      	ldr	r3, [r7, #16]
 800b6ac:	7858      	ldrb	r0, [r3, #1]
 800b6ae:	68fb      	ldr	r3, [r7, #12]
 800b6b0:	f103 012c 	add.w	r1, r3, #44	; 0x2c
 800b6b4:	2301      	movs	r3, #1
 800b6b6:	697a      	ldr	r2, [r7, #20]
 800b6b8:	f7fd ff52 	bl	8009560 <disk_read>
 800b6bc:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 800b6be:	2b00      	cmp	r3, #0
 800b6c0:	d004      	beq.n	800b6cc <f_write+0x252>
					ABORT(fs, FR_DISK_ERR);
 800b6c2:	68fb      	ldr	r3, [r7, #12]
 800b6c4:	2201      	movs	r2, #1
 800b6c6:	755a      	strb	r2, [r3, #21]
 800b6c8:	2301      	movs	r3, #1
 800b6ca:	e05a      	b.n	800b782 <f_write+0x308>
			}
#endif
			fp->sect = sect;
 800b6cc:	68fb      	ldr	r3, [r7, #12]
 800b6ce:	697a      	ldr	r2, [r7, #20]
 800b6d0:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800b6d2:	693b      	ldr	r3, [r7, #16]
 800b6d4:	899b      	ldrh	r3, [r3, #12]
 800b6d6:	4618      	mov	r0, r3
 800b6d8:	68fb      	ldr	r3, [r7, #12]
 800b6da:	699b      	ldr	r3, [r3, #24]
 800b6dc:	693a      	ldr	r2, [r7, #16]
 800b6de:	8992      	ldrh	r2, [r2, #12]
 800b6e0:	fbb3 f1f2 	udiv	r1, r3, r2
 800b6e4:	fb01 f202 	mul.w	r2, r1, r2
 800b6e8:	1a9b      	subs	r3, r3, r2
 800b6ea:	1ac3      	subs	r3, r0, r3
 800b6ec:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 800b6ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b6f0:	687b      	ldr	r3, [r7, #4]
 800b6f2:	429a      	cmp	r2, r3
 800b6f4:	d901      	bls.n	800b6fa <f_write+0x280>
 800b6f6:	687b      	ldr	r3, [r7, #4]
 800b6f8:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 800b6fa:	68fb      	ldr	r3, [r7, #12]
 800b6fc:	f103 012c 	add.w	r1, r3, #44	; 0x2c
 800b700:	68fb      	ldr	r3, [r7, #12]
 800b702:	699b      	ldr	r3, [r3, #24]
 800b704:	693a      	ldr	r2, [r7, #16]
 800b706:	8992      	ldrh	r2, [r2, #12]
 800b708:	fbb3 f0f2 	udiv	r0, r3, r2
 800b70c:	fb00 f202 	mul.w	r2, r0, r2
 800b710:	1a9b      	subs	r3, r3, r2
 800b712:	440b      	add	r3, r1
 800b714:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b716:	69f9      	ldr	r1, [r7, #28]
 800b718:	4618      	mov	r0, r3
 800b71a:	f7fe f801 	bl	8009720 <mem_cpy>
		fp->flag |= FA_DIRTY;
 800b71e:	68fb      	ldr	r3, [r7, #12]
 800b720:	7d1b      	ldrb	r3, [r3, #20]
 800b722:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800b726:	b2da      	uxtb	r2, r3
 800b728:	68fb      	ldr	r3, [r7, #12]
 800b72a:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 800b72c:	69fa      	ldr	r2, [r7, #28]
 800b72e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b730:	4413      	add	r3, r2
 800b732:	61fb      	str	r3, [r7, #28]
 800b734:	68fb      	ldr	r3, [r7, #12]
 800b736:	699a      	ldr	r2, [r3, #24]
 800b738:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b73a:	441a      	add	r2, r3
 800b73c:	68fb      	ldr	r3, [r7, #12]
 800b73e:	619a      	str	r2, [r3, #24]
 800b740:	68fb      	ldr	r3, [r7, #12]
 800b742:	68da      	ldr	r2, [r3, #12]
 800b744:	68fb      	ldr	r3, [r7, #12]
 800b746:	699b      	ldr	r3, [r3, #24]
 800b748:	429a      	cmp	r2, r3
 800b74a:	bf38      	it	cc
 800b74c:	461a      	movcc	r2, r3
 800b74e:	68fb      	ldr	r3, [r7, #12]
 800b750:	60da      	str	r2, [r3, #12]
 800b752:	683b      	ldr	r3, [r7, #0]
 800b754:	681a      	ldr	r2, [r3, #0]
 800b756:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b758:	441a      	add	r2, r3
 800b75a:	683b      	ldr	r3, [r7, #0]
 800b75c:	601a      	str	r2, [r3, #0]
 800b75e:	687a      	ldr	r2, [r7, #4]
 800b760:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b762:	1ad3      	subs	r3, r2, r3
 800b764:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 800b766:	687b      	ldr	r3, [r7, #4]
 800b768:	2b00      	cmp	r3, #0
 800b76a:	f47f aec1 	bne.w	800b4f0 <f_write+0x76>
 800b76e:	e000      	b.n	800b772 <f_write+0x2f8>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800b770:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 800b772:	68fb      	ldr	r3, [r7, #12]
 800b774:	7d1b      	ldrb	r3, [r3, #20]
 800b776:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b77a:	b2da      	uxtb	r2, r3
 800b77c:	68fb      	ldr	r3, [r7, #12]
 800b77e:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 800b780:	2300      	movs	r3, #0
}
 800b782:	4618      	mov	r0, r3
 800b784:	3730      	adds	r7, #48	; 0x30
 800b786:	46bd      	mov	sp, r7
 800b788:	bd80      	pop	{r7, pc}

0800b78a <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800b78a:	b580      	push	{r7, lr}
 800b78c:	b086      	sub	sp, #24
 800b78e:	af00      	add	r7, sp, #0
 800b790:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800b792:	687b      	ldr	r3, [r7, #4]
 800b794:	f107 0208 	add.w	r2, r7, #8
 800b798:	4611      	mov	r1, r2
 800b79a:	4618      	mov	r0, r3
 800b79c:	f7ff fc28 	bl	800aff0 <validate>
 800b7a0:	4603      	mov	r3, r0
 800b7a2:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800b7a4:	7dfb      	ldrb	r3, [r7, #23]
 800b7a6:	2b00      	cmp	r3, #0
 800b7a8:	d168      	bne.n	800b87c <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800b7aa:	687b      	ldr	r3, [r7, #4]
 800b7ac:	7d1b      	ldrb	r3, [r3, #20]
 800b7ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b7b2:	2b00      	cmp	r3, #0
 800b7b4:	d062      	beq.n	800b87c <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800b7b6:	687b      	ldr	r3, [r7, #4]
 800b7b8:	7d1b      	ldrb	r3, [r3, #20]
 800b7ba:	b25b      	sxtb	r3, r3
 800b7bc:	2b00      	cmp	r3, #0
 800b7be:	da15      	bge.n	800b7ec <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800b7c0:	68bb      	ldr	r3, [r7, #8]
 800b7c2:	7858      	ldrb	r0, [r3, #1]
 800b7c4:	687b      	ldr	r3, [r7, #4]
 800b7c6:	f103 012c 	add.w	r1, r3, #44	; 0x2c
 800b7ca:	687b      	ldr	r3, [r7, #4]
 800b7cc:	6a1a      	ldr	r2, [r3, #32]
 800b7ce:	2301      	movs	r3, #1
 800b7d0:	f7fd fee6 	bl	80095a0 <disk_write>
 800b7d4:	4603      	mov	r3, r0
 800b7d6:	2b00      	cmp	r3, #0
 800b7d8:	d001      	beq.n	800b7de <f_sync+0x54>
 800b7da:	2301      	movs	r3, #1
 800b7dc:	e04f      	b.n	800b87e <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 800b7de:	687b      	ldr	r3, [r7, #4]
 800b7e0:	7d1b      	ldrb	r3, [r3, #20]
 800b7e2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b7e6:	b2da      	uxtb	r2, r3
 800b7e8:	687b      	ldr	r3, [r7, #4]
 800b7ea:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800b7ec:	f7fd fce4 	bl	80091b8 <get_fattime>
 800b7f0:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800b7f2:	68ba      	ldr	r2, [r7, #8]
 800b7f4:	687b      	ldr	r3, [r7, #4]
 800b7f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b7f8:	4619      	mov	r1, r3
 800b7fa:	4610      	mov	r0, r2
 800b7fc:	f7fe f9be 	bl	8009b7c <move_window>
 800b800:	4603      	mov	r3, r0
 800b802:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800b804:	7dfb      	ldrb	r3, [r7, #23]
 800b806:	2b00      	cmp	r3, #0
 800b808:	d138      	bne.n	800b87c <f_sync+0xf2>
					dir = fp->dir_ptr;
 800b80a:	687b      	ldr	r3, [r7, #4]
 800b80c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b80e:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800b810:	68fb      	ldr	r3, [r7, #12]
 800b812:	330b      	adds	r3, #11
 800b814:	781a      	ldrb	r2, [r3, #0]
 800b816:	68fb      	ldr	r3, [r7, #12]
 800b818:	330b      	adds	r3, #11
 800b81a:	f042 0220 	orr.w	r2, r2, #32
 800b81e:	b2d2      	uxtb	r2, r2
 800b820:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800b822:	687b      	ldr	r3, [r7, #4]
 800b824:	6818      	ldr	r0, [r3, #0]
 800b826:	687b      	ldr	r3, [r7, #4]
 800b828:	689b      	ldr	r3, [r3, #8]
 800b82a:	461a      	mov	r2, r3
 800b82c:	68f9      	ldr	r1, [r7, #12]
 800b82e:	f7fe ff14 	bl	800a65a <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800b832:	68fb      	ldr	r3, [r7, #12]
 800b834:	f103 021c 	add.w	r2, r3, #28
 800b838:	687b      	ldr	r3, [r7, #4]
 800b83a:	68db      	ldr	r3, [r3, #12]
 800b83c:	4619      	mov	r1, r3
 800b83e:	4610      	mov	r0, r2
 800b840:	f7fd ff42 	bl	80096c8 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800b844:	68fb      	ldr	r3, [r7, #12]
 800b846:	3316      	adds	r3, #22
 800b848:	6939      	ldr	r1, [r7, #16]
 800b84a:	4618      	mov	r0, r3
 800b84c:	f7fd ff3c 	bl	80096c8 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800b850:	68fb      	ldr	r3, [r7, #12]
 800b852:	3312      	adds	r3, #18
 800b854:	2100      	movs	r1, #0
 800b856:	4618      	mov	r0, r3
 800b858:	f7fd ff1b 	bl	8009692 <st_word>
					fs->wflag = 1;
 800b85c:	68bb      	ldr	r3, [r7, #8]
 800b85e:	2201      	movs	r2, #1
 800b860:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800b862:	68bb      	ldr	r3, [r7, #8]
 800b864:	4618      	mov	r0, r3
 800b866:	f7fe f9b7 	bl	8009bd8 <sync_fs>
 800b86a:	4603      	mov	r3, r0
 800b86c:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800b86e:	687b      	ldr	r3, [r7, #4]
 800b870:	7d1b      	ldrb	r3, [r3, #20]
 800b872:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b876:	b2da      	uxtb	r2, r3
 800b878:	687b      	ldr	r3, [r7, #4]
 800b87a:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800b87c:	7dfb      	ldrb	r3, [r7, #23]
}
 800b87e:	4618      	mov	r0, r3
 800b880:	3718      	adds	r7, #24
 800b882:	46bd      	mov	sp, r7
 800b884:	bd80      	pop	{r7, pc}

0800b886 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800b886:	b580      	push	{r7, lr}
 800b888:	b084      	sub	sp, #16
 800b88a:	af00      	add	r7, sp, #0
 800b88c:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800b88e:	6878      	ldr	r0, [r7, #4]
 800b890:	f7ff ff7b 	bl	800b78a <f_sync>
 800b894:	4603      	mov	r3, r0
 800b896:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800b898:	7bfb      	ldrb	r3, [r7, #15]
 800b89a:	2b00      	cmp	r3, #0
 800b89c:	d118      	bne.n	800b8d0 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800b89e:	687b      	ldr	r3, [r7, #4]
 800b8a0:	f107 0208 	add.w	r2, r7, #8
 800b8a4:	4611      	mov	r1, r2
 800b8a6:	4618      	mov	r0, r3
 800b8a8:	f7ff fba2 	bl	800aff0 <validate>
 800b8ac:	4603      	mov	r3, r0
 800b8ae:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800b8b0:	7bfb      	ldrb	r3, [r7, #15]
 800b8b2:	2b00      	cmp	r3, #0
 800b8b4:	d10c      	bne.n	800b8d0 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800b8b6:	687b      	ldr	r3, [r7, #4]
 800b8b8:	691b      	ldr	r3, [r3, #16]
 800b8ba:	4618      	mov	r0, r3
 800b8bc:	f7fe f8ba 	bl	8009a34 <dec_lock>
 800b8c0:	4603      	mov	r3, r0
 800b8c2:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800b8c4:	7bfb      	ldrb	r3, [r7, #15]
 800b8c6:	2b00      	cmp	r3, #0
 800b8c8:	d102      	bne.n	800b8d0 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800b8ca:	687b      	ldr	r3, [r7, #4]
 800b8cc:	2200      	movs	r2, #0
 800b8ce:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800b8d0:	7bfb      	ldrb	r3, [r7, #15]
}
 800b8d2:	4618      	mov	r0, r3
 800b8d4:	3710      	adds	r7, #16
 800b8d6:	46bd      	mov	sp, r7
 800b8d8:	bd80      	pop	{r7, pc}

0800b8da <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 800b8da:	b580      	push	{r7, lr}
 800b8dc:	b088      	sub	sp, #32
 800b8de:	af00      	add	r7, sp, #0
 800b8e0:	6078      	str	r0, [r7, #4]
 800b8e2:	6039      	str	r1, [r7, #0]
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 800b8e4:	687b      	ldr	r3, [r7, #4]
 800b8e6:	f107 0208 	add.w	r2, r7, #8
 800b8ea:	4611      	mov	r1, r2
 800b8ec:	4618      	mov	r0, r3
 800b8ee:	f7ff fb7f 	bl	800aff0 <validate>
 800b8f2:	4603      	mov	r3, r0
 800b8f4:	77fb      	strb	r3, [r7, #31]
	if (res == FR_OK) res = (FRESULT)fp->err;
 800b8f6:	7ffb      	ldrb	r3, [r7, #31]
 800b8f8:	2b00      	cmp	r3, #0
 800b8fa:	d102      	bne.n	800b902 <f_lseek+0x28>
 800b8fc:	687b      	ldr	r3, [r7, #4]
 800b8fe:	7d5b      	ldrb	r3, [r3, #21]
 800b900:	77fb      	strb	r3, [r7, #31]
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 800b902:	7ffb      	ldrb	r3, [r7, #31]
 800b904:	2b00      	cmp	r3, #0
 800b906:	d001      	beq.n	800b90c <f_lseek+0x32>
 800b908:	7ffb      	ldrb	r3, [r7, #31]
 800b90a:	e122      	b.n	800bb52 <f_lseek+0x278>
	/* Normal Seek */
	{
#if _FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATxx */
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 800b90c:	687b      	ldr	r3, [r7, #4]
 800b90e:	68db      	ldr	r3, [r3, #12]
 800b910:	683a      	ldr	r2, [r7, #0]
 800b912:	429a      	cmp	r2, r3
 800b914:	d908      	bls.n	800b928 <f_lseek+0x4e>
 800b916:	687b      	ldr	r3, [r7, #4]
 800b918:	7d1b      	ldrb	r3, [r3, #20]
 800b91a:	f003 0302 	and.w	r3, r3, #2
 800b91e:	2b00      	cmp	r3, #0
 800b920:	d102      	bne.n	800b928 <f_lseek+0x4e>
			ofs = fp->obj.objsize;
 800b922:	687b      	ldr	r3, [r7, #4]
 800b924:	68db      	ldr	r3, [r3, #12]
 800b926:	603b      	str	r3, [r7, #0]
		}
		ifptr = fp->fptr;
 800b928:	687b      	ldr	r3, [r7, #4]
 800b92a:	699b      	ldr	r3, [r3, #24]
 800b92c:	613b      	str	r3, [r7, #16]
		fp->fptr = nsect = 0;
 800b92e:	2300      	movs	r3, #0
 800b930:	617b      	str	r3, [r7, #20]
 800b932:	687b      	ldr	r3, [r7, #4]
 800b934:	697a      	ldr	r2, [r7, #20]
 800b936:	619a      	str	r2, [r3, #24]
		if (ofs) {
 800b938:	683b      	ldr	r3, [r7, #0]
 800b93a:	2b00      	cmp	r3, #0
 800b93c:	f000 80b5 	beq.w	800baaa <f_lseek+0x1d0>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 800b940:	68bb      	ldr	r3, [r7, #8]
 800b942:	895b      	ldrh	r3, [r3, #10]
 800b944:	461a      	mov	r2, r3
 800b946:	68bb      	ldr	r3, [r7, #8]
 800b948:	899b      	ldrh	r3, [r3, #12]
 800b94a:	fb02 f303 	mul.w	r3, r2, r3
 800b94e:	60fb      	str	r3, [r7, #12]
			if (ifptr > 0 &&
 800b950:	693b      	ldr	r3, [r7, #16]
 800b952:	2b00      	cmp	r3, #0
 800b954:	d01b      	beq.n	800b98e <f_lseek+0xb4>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 800b956:	683b      	ldr	r3, [r7, #0]
 800b958:	1e5a      	subs	r2, r3, #1
 800b95a:	68fb      	ldr	r3, [r7, #12]
 800b95c:	fbb2 f2f3 	udiv	r2, r2, r3
 800b960:	693b      	ldr	r3, [r7, #16]
 800b962:	1e59      	subs	r1, r3, #1
 800b964:	68fb      	ldr	r3, [r7, #12]
 800b966:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 800b96a:	429a      	cmp	r2, r3
 800b96c:	d30f      	bcc.n	800b98e <f_lseek+0xb4>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 800b96e:	693b      	ldr	r3, [r7, #16]
 800b970:	1e5a      	subs	r2, r3, #1
 800b972:	68fb      	ldr	r3, [r7, #12]
 800b974:	425b      	negs	r3, r3
 800b976:	401a      	ands	r2, r3
 800b978:	687b      	ldr	r3, [r7, #4]
 800b97a:	619a      	str	r2, [r3, #24]
				ofs -= fp->fptr;
 800b97c:	687b      	ldr	r3, [r7, #4]
 800b97e:	699b      	ldr	r3, [r3, #24]
 800b980:	683a      	ldr	r2, [r7, #0]
 800b982:	1ad3      	subs	r3, r2, r3
 800b984:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 800b986:	687b      	ldr	r3, [r7, #4]
 800b988:	69db      	ldr	r3, [r3, #28]
 800b98a:	61bb      	str	r3, [r7, #24]
 800b98c:	e022      	b.n	800b9d4 <f_lseek+0xfa>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
 800b98e:	687b      	ldr	r3, [r7, #4]
 800b990:	689b      	ldr	r3, [r3, #8]
 800b992:	61bb      	str	r3, [r7, #24]
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 800b994:	69bb      	ldr	r3, [r7, #24]
 800b996:	2b00      	cmp	r3, #0
 800b998:	d119      	bne.n	800b9ce <f_lseek+0xf4>
					clst = create_chain(&fp->obj, 0);
 800b99a:	687b      	ldr	r3, [r7, #4]
 800b99c:	2100      	movs	r1, #0
 800b99e:	4618      	mov	r0, r3
 800b9a0:	f7fe fbfe 	bl	800a1a0 <create_chain>
 800b9a4:	61b8      	str	r0, [r7, #24]
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 800b9a6:	69bb      	ldr	r3, [r7, #24]
 800b9a8:	2b01      	cmp	r3, #1
 800b9aa:	d104      	bne.n	800b9b6 <f_lseek+0xdc>
 800b9ac:	687b      	ldr	r3, [r7, #4]
 800b9ae:	2202      	movs	r2, #2
 800b9b0:	755a      	strb	r2, [r3, #21]
 800b9b2:	2302      	movs	r3, #2
 800b9b4:	e0cd      	b.n	800bb52 <f_lseek+0x278>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800b9b6:	69bb      	ldr	r3, [r7, #24]
 800b9b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b9bc:	d104      	bne.n	800b9c8 <f_lseek+0xee>
 800b9be:	687b      	ldr	r3, [r7, #4]
 800b9c0:	2201      	movs	r2, #1
 800b9c2:	755a      	strb	r2, [r3, #21]
 800b9c4:	2301      	movs	r3, #1
 800b9c6:	e0c4      	b.n	800bb52 <f_lseek+0x278>
					fp->obj.sclust = clst;
 800b9c8:	687b      	ldr	r3, [r7, #4]
 800b9ca:	69ba      	ldr	r2, [r7, #24]
 800b9cc:	609a      	str	r2, [r3, #8]
				}
#endif
				fp->clust = clst;
 800b9ce:	687b      	ldr	r3, [r7, #4]
 800b9d0:	69ba      	ldr	r2, [r7, #24]
 800b9d2:	61da      	str	r2, [r3, #28]
			}
			if (clst != 0) {
 800b9d4:	69bb      	ldr	r3, [r7, #24]
 800b9d6:	2b00      	cmp	r3, #0
 800b9d8:	d067      	beq.n	800baaa <f_lseek+0x1d0>
				while (ofs > bcs) {						/* Cluster following loop */
 800b9da:	e03a      	b.n	800ba52 <f_lseek+0x178>
					ofs -= bcs; fp->fptr += bcs;
 800b9dc:	683a      	ldr	r2, [r7, #0]
 800b9de:	68fb      	ldr	r3, [r7, #12]
 800b9e0:	1ad3      	subs	r3, r2, r3
 800b9e2:	603b      	str	r3, [r7, #0]
 800b9e4:	687b      	ldr	r3, [r7, #4]
 800b9e6:	699a      	ldr	r2, [r3, #24]
 800b9e8:	68fb      	ldr	r3, [r7, #12]
 800b9ea:	441a      	add	r2, r3
 800b9ec:	687b      	ldr	r3, [r7, #4]
 800b9ee:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 800b9f0:	687b      	ldr	r3, [r7, #4]
 800b9f2:	7d1b      	ldrb	r3, [r3, #20]
 800b9f4:	f003 0302 	and.w	r3, r3, #2
 800b9f8:	2b00      	cmp	r3, #0
 800b9fa:	d00b      	beq.n	800ba14 <f_lseek+0x13a>
						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
							fp->obj.objsize = fp->fptr;
							fp->flag |= FA_MODIFIED;
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 800b9fc:	687b      	ldr	r3, [r7, #4]
 800b9fe:	69b9      	ldr	r1, [r7, #24]
 800ba00:	4618      	mov	r0, r3
 800ba02:	f7fe fbcd 	bl	800a1a0 <create_chain>
 800ba06:	61b8      	str	r0, [r7, #24]
						if (clst == 0) {				/* Clip file size in case of disk full */
 800ba08:	69bb      	ldr	r3, [r7, #24]
 800ba0a:	2b00      	cmp	r3, #0
 800ba0c:	d108      	bne.n	800ba20 <f_lseek+0x146>
							ofs = 0; break;
 800ba0e:	2300      	movs	r3, #0
 800ba10:	603b      	str	r3, [r7, #0]
 800ba12:	e022      	b.n	800ba5a <f_lseek+0x180>
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 800ba14:	687b      	ldr	r3, [r7, #4]
 800ba16:	69b9      	ldr	r1, [r7, #24]
 800ba18:	4618      	mov	r0, r3
 800ba1a:	f7fe f96c 	bl	8009cf6 <get_fat>
 800ba1e:	61b8      	str	r0, [r7, #24]
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800ba20:	69bb      	ldr	r3, [r7, #24]
 800ba22:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ba26:	d104      	bne.n	800ba32 <f_lseek+0x158>
 800ba28:	687b      	ldr	r3, [r7, #4]
 800ba2a:	2201      	movs	r2, #1
 800ba2c:	755a      	strb	r2, [r3, #21]
 800ba2e:	2301      	movs	r3, #1
 800ba30:	e08f      	b.n	800bb52 <f_lseek+0x278>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 800ba32:	69bb      	ldr	r3, [r7, #24]
 800ba34:	2b01      	cmp	r3, #1
 800ba36:	d904      	bls.n	800ba42 <f_lseek+0x168>
 800ba38:	68bb      	ldr	r3, [r7, #8]
 800ba3a:	699b      	ldr	r3, [r3, #24]
 800ba3c:	69ba      	ldr	r2, [r7, #24]
 800ba3e:	429a      	cmp	r2, r3
 800ba40:	d304      	bcc.n	800ba4c <f_lseek+0x172>
 800ba42:	687b      	ldr	r3, [r7, #4]
 800ba44:	2202      	movs	r2, #2
 800ba46:	755a      	strb	r2, [r3, #21]
 800ba48:	2302      	movs	r3, #2
 800ba4a:	e082      	b.n	800bb52 <f_lseek+0x278>
					fp->clust = clst;
 800ba4c:	687b      	ldr	r3, [r7, #4]
 800ba4e:	69ba      	ldr	r2, [r7, #24]
 800ba50:	61da      	str	r2, [r3, #28]
				while (ofs > bcs) {						/* Cluster following loop */
 800ba52:	683a      	ldr	r2, [r7, #0]
 800ba54:	68fb      	ldr	r3, [r7, #12]
 800ba56:	429a      	cmp	r2, r3
 800ba58:	d8c0      	bhi.n	800b9dc <f_lseek+0x102>
				}
				fp->fptr += ofs;
 800ba5a:	687b      	ldr	r3, [r7, #4]
 800ba5c:	699a      	ldr	r2, [r3, #24]
 800ba5e:	683b      	ldr	r3, [r7, #0]
 800ba60:	441a      	add	r2, r3
 800ba62:	687b      	ldr	r3, [r7, #4]
 800ba64:	619a      	str	r2, [r3, #24]
				if (ofs % SS(fs)) {
 800ba66:	68bb      	ldr	r3, [r7, #8]
 800ba68:	899b      	ldrh	r3, [r3, #12]
 800ba6a:	461a      	mov	r2, r3
 800ba6c:	683b      	ldr	r3, [r7, #0]
 800ba6e:	fbb3 f1f2 	udiv	r1, r3, r2
 800ba72:	fb01 f202 	mul.w	r2, r1, r2
 800ba76:	1a9b      	subs	r3, r3, r2
 800ba78:	2b00      	cmp	r3, #0
 800ba7a:	d016      	beq.n	800baaa <f_lseek+0x1d0>
					nsect = clust2sect(fs, clst);	/* Current sector */
 800ba7c:	68bb      	ldr	r3, [r7, #8]
 800ba7e:	69b9      	ldr	r1, [r7, #24]
 800ba80:	4618      	mov	r0, r3
 800ba82:	f7fe f919 	bl	8009cb8 <clust2sect>
 800ba86:	6178      	str	r0, [r7, #20]
					if (!nsect) ABORT(fs, FR_INT_ERR);
 800ba88:	697b      	ldr	r3, [r7, #20]
 800ba8a:	2b00      	cmp	r3, #0
 800ba8c:	d104      	bne.n	800ba98 <f_lseek+0x1be>
 800ba8e:	687b      	ldr	r3, [r7, #4]
 800ba90:	2202      	movs	r2, #2
 800ba92:	755a      	strb	r2, [r3, #21]
 800ba94:	2302      	movs	r3, #2
 800ba96:	e05c      	b.n	800bb52 <f_lseek+0x278>
					nsect += (DWORD)(ofs / SS(fs));
 800ba98:	68bb      	ldr	r3, [r7, #8]
 800ba9a:	899b      	ldrh	r3, [r3, #12]
 800ba9c:	461a      	mov	r2, r3
 800ba9e:	683b      	ldr	r3, [r7, #0]
 800baa0:	fbb3 f3f2 	udiv	r3, r3, r2
 800baa4:	697a      	ldr	r2, [r7, #20]
 800baa6:	4413      	add	r3, r2
 800baa8:	617b      	str	r3, [r7, #20]
				}
			}
		}
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 800baaa:	687b      	ldr	r3, [r7, #4]
 800baac:	699a      	ldr	r2, [r3, #24]
 800baae:	687b      	ldr	r3, [r7, #4]
 800bab0:	68db      	ldr	r3, [r3, #12]
 800bab2:	429a      	cmp	r2, r3
 800bab4:	d90a      	bls.n	800bacc <f_lseek+0x1f2>
			fp->obj.objsize = fp->fptr;
 800bab6:	687b      	ldr	r3, [r7, #4]
 800bab8:	699a      	ldr	r2, [r3, #24]
 800baba:	687b      	ldr	r3, [r7, #4]
 800babc:	60da      	str	r2, [r3, #12]
			fp->flag |= FA_MODIFIED;
 800babe:	687b      	ldr	r3, [r7, #4]
 800bac0:	7d1b      	ldrb	r3, [r3, #20]
 800bac2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bac6:	b2da      	uxtb	r2, r3
 800bac8:	687b      	ldr	r3, [r7, #4]
 800baca:	751a      	strb	r2, [r3, #20]
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 800bacc:	687b      	ldr	r3, [r7, #4]
 800bace:	699b      	ldr	r3, [r3, #24]
 800bad0:	68ba      	ldr	r2, [r7, #8]
 800bad2:	8992      	ldrh	r2, [r2, #12]
 800bad4:	fbb3 f1f2 	udiv	r1, r3, r2
 800bad8:	fb01 f202 	mul.w	r2, r1, r2
 800badc:	1a9b      	subs	r3, r3, r2
 800bade:	2b00      	cmp	r3, #0
 800bae0:	d036      	beq.n	800bb50 <f_lseek+0x276>
 800bae2:	687b      	ldr	r3, [r7, #4]
 800bae4:	6a1b      	ldr	r3, [r3, #32]
 800bae6:	697a      	ldr	r2, [r7, #20]
 800bae8:	429a      	cmp	r2, r3
 800baea:	d031      	beq.n	800bb50 <f_lseek+0x276>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 800baec:	687b      	ldr	r3, [r7, #4]
 800baee:	7d1b      	ldrb	r3, [r3, #20]
 800baf0:	b25b      	sxtb	r3, r3
 800baf2:	2b00      	cmp	r3, #0
 800baf4:	da18      	bge.n	800bb28 <f_lseek+0x24e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800baf6:	68bb      	ldr	r3, [r7, #8]
 800baf8:	7858      	ldrb	r0, [r3, #1]
 800bafa:	687b      	ldr	r3, [r7, #4]
 800bafc:	f103 012c 	add.w	r1, r3, #44	; 0x2c
 800bb00:	687b      	ldr	r3, [r7, #4]
 800bb02:	6a1a      	ldr	r2, [r3, #32]
 800bb04:	2301      	movs	r3, #1
 800bb06:	f7fd fd4b 	bl	80095a0 <disk_write>
 800bb0a:	4603      	mov	r3, r0
 800bb0c:	2b00      	cmp	r3, #0
 800bb0e:	d004      	beq.n	800bb1a <f_lseek+0x240>
 800bb10:	687b      	ldr	r3, [r7, #4]
 800bb12:	2201      	movs	r2, #1
 800bb14:	755a      	strb	r2, [r3, #21]
 800bb16:	2301      	movs	r3, #1
 800bb18:	e01b      	b.n	800bb52 <f_lseek+0x278>
				fp->flag &= (BYTE)~FA_DIRTY;
 800bb1a:	687b      	ldr	r3, [r7, #4]
 800bb1c:	7d1b      	ldrb	r3, [r3, #20]
 800bb1e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bb22:	b2da      	uxtb	r2, r3
 800bb24:	687b      	ldr	r3, [r7, #4]
 800bb26:	751a      	strb	r2, [r3, #20]
			}
#endif
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800bb28:	68bb      	ldr	r3, [r7, #8]
 800bb2a:	7858      	ldrb	r0, [r3, #1]
 800bb2c:	687b      	ldr	r3, [r7, #4]
 800bb2e:	f103 012c 	add.w	r1, r3, #44	; 0x2c
 800bb32:	2301      	movs	r3, #1
 800bb34:	697a      	ldr	r2, [r7, #20]
 800bb36:	f7fd fd13 	bl	8009560 <disk_read>
 800bb3a:	4603      	mov	r3, r0
 800bb3c:	2b00      	cmp	r3, #0
 800bb3e:	d004      	beq.n	800bb4a <f_lseek+0x270>
 800bb40:	687b      	ldr	r3, [r7, #4]
 800bb42:	2201      	movs	r2, #1
 800bb44:	755a      	strb	r2, [r3, #21]
 800bb46:	2301      	movs	r3, #1
 800bb48:	e003      	b.n	800bb52 <f_lseek+0x278>
#endif
			fp->sect = nsect;
 800bb4a:	687b      	ldr	r3, [r7, #4]
 800bb4c:	697a      	ldr	r2, [r7, #20]
 800bb4e:	621a      	str	r2, [r3, #32]
		}
	}

	LEAVE_FF(fs, res);
 800bb50:	7ffb      	ldrb	r3, [r7, #31]
}
 800bb52:	4618      	mov	r0, r3
 800bb54:	3720      	adds	r7, #32
 800bb56:	46bd      	mov	sp, r7
 800bb58:	bd80      	pop	{r7, pc}
	...

0800bb5c <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800bb5c:	b480      	push	{r7}
 800bb5e:	b087      	sub	sp, #28
 800bb60:	af00      	add	r7, sp, #0
 800bb62:	60f8      	str	r0, [r7, #12]
 800bb64:	60b9      	str	r1, [r7, #8]
 800bb66:	4613      	mov	r3, r2
 800bb68:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800bb6a:	2301      	movs	r3, #1
 800bb6c:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800bb6e:	2300      	movs	r3, #0
 800bb70:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800bb72:	4b1f      	ldr	r3, [pc, #124]	; (800bbf0 <FATFS_LinkDriverEx+0x94>)
 800bb74:	7a5b      	ldrb	r3, [r3, #9]
 800bb76:	b2db      	uxtb	r3, r3
 800bb78:	2b00      	cmp	r3, #0
 800bb7a:	d131      	bne.n	800bbe0 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800bb7c:	4b1c      	ldr	r3, [pc, #112]	; (800bbf0 <FATFS_LinkDriverEx+0x94>)
 800bb7e:	7a5b      	ldrb	r3, [r3, #9]
 800bb80:	b2db      	uxtb	r3, r3
 800bb82:	461a      	mov	r2, r3
 800bb84:	4b1a      	ldr	r3, [pc, #104]	; (800bbf0 <FATFS_LinkDriverEx+0x94>)
 800bb86:	2100      	movs	r1, #0
 800bb88:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800bb8a:	4b19      	ldr	r3, [pc, #100]	; (800bbf0 <FATFS_LinkDriverEx+0x94>)
 800bb8c:	7a5b      	ldrb	r3, [r3, #9]
 800bb8e:	b2db      	uxtb	r3, r3
 800bb90:	4a17      	ldr	r2, [pc, #92]	; (800bbf0 <FATFS_LinkDriverEx+0x94>)
 800bb92:	009b      	lsls	r3, r3, #2
 800bb94:	4413      	add	r3, r2
 800bb96:	68fa      	ldr	r2, [r7, #12]
 800bb98:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800bb9a:	4b15      	ldr	r3, [pc, #84]	; (800bbf0 <FATFS_LinkDriverEx+0x94>)
 800bb9c:	7a5b      	ldrb	r3, [r3, #9]
 800bb9e:	b2db      	uxtb	r3, r3
 800bba0:	461a      	mov	r2, r3
 800bba2:	4b13      	ldr	r3, [pc, #76]	; (800bbf0 <FATFS_LinkDriverEx+0x94>)
 800bba4:	4413      	add	r3, r2
 800bba6:	79fa      	ldrb	r2, [r7, #7]
 800bba8:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800bbaa:	4b11      	ldr	r3, [pc, #68]	; (800bbf0 <FATFS_LinkDriverEx+0x94>)
 800bbac:	7a5b      	ldrb	r3, [r3, #9]
 800bbae:	b2db      	uxtb	r3, r3
 800bbb0:	1c5a      	adds	r2, r3, #1
 800bbb2:	b2d1      	uxtb	r1, r2
 800bbb4:	4a0e      	ldr	r2, [pc, #56]	; (800bbf0 <FATFS_LinkDriverEx+0x94>)
 800bbb6:	7251      	strb	r1, [r2, #9]
 800bbb8:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800bbba:	7dbb      	ldrb	r3, [r7, #22]
 800bbbc:	3330      	adds	r3, #48	; 0x30
 800bbbe:	b2da      	uxtb	r2, r3
 800bbc0:	68bb      	ldr	r3, [r7, #8]
 800bbc2:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800bbc4:	68bb      	ldr	r3, [r7, #8]
 800bbc6:	3301      	adds	r3, #1
 800bbc8:	223a      	movs	r2, #58	; 0x3a
 800bbca:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800bbcc:	68bb      	ldr	r3, [r7, #8]
 800bbce:	3302      	adds	r3, #2
 800bbd0:	222f      	movs	r2, #47	; 0x2f
 800bbd2:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800bbd4:	68bb      	ldr	r3, [r7, #8]
 800bbd6:	3303      	adds	r3, #3
 800bbd8:	2200      	movs	r2, #0
 800bbda:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800bbdc:	2300      	movs	r3, #0
 800bbde:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800bbe0:	7dfb      	ldrb	r3, [r7, #23]
}
 800bbe2:	4618      	mov	r0, r3
 800bbe4:	371c      	adds	r7, #28
 800bbe6:	46bd      	mov	sp, r7
 800bbe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbec:	4770      	bx	lr
 800bbee:	bf00      	nop
 800bbf0:	20007590 	.word	0x20007590

0800bbf4 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800bbf4:	b580      	push	{r7, lr}
 800bbf6:	b082      	sub	sp, #8
 800bbf8:	af00      	add	r7, sp, #0
 800bbfa:	6078      	str	r0, [r7, #4]
 800bbfc:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800bbfe:	2200      	movs	r2, #0
 800bc00:	6839      	ldr	r1, [r7, #0]
 800bc02:	6878      	ldr	r0, [r7, #4]
 800bc04:	f7ff ffaa 	bl	800bb5c <FATFS_LinkDriverEx>
 800bc08:	4603      	mov	r3, r0
}
 800bc0a:	4618      	mov	r0, r3
 800bc0c:	3708      	adds	r7, #8
 800bc0e:	46bd      	mov	sp, r7
 800bc10:	bd80      	pop	{r7, pc}
	...

0800bc14 <__errno>:
 800bc14:	4b01      	ldr	r3, [pc, #4]	; (800bc1c <__errno+0x8>)
 800bc16:	6818      	ldr	r0, [r3, #0]
 800bc18:	4770      	bx	lr
 800bc1a:	bf00      	nop
 800bc1c:	20000030 	.word	0x20000030

0800bc20 <__libc_init_array>:
 800bc20:	b570      	push	{r4, r5, r6, lr}
 800bc22:	4d0d      	ldr	r5, [pc, #52]	; (800bc58 <__libc_init_array+0x38>)
 800bc24:	4c0d      	ldr	r4, [pc, #52]	; (800bc5c <__libc_init_array+0x3c>)
 800bc26:	1b64      	subs	r4, r4, r5
 800bc28:	10a4      	asrs	r4, r4, #2
 800bc2a:	2600      	movs	r6, #0
 800bc2c:	42a6      	cmp	r6, r4
 800bc2e:	d109      	bne.n	800bc44 <__libc_init_array+0x24>
 800bc30:	4d0b      	ldr	r5, [pc, #44]	; (800bc60 <__libc_init_array+0x40>)
 800bc32:	4c0c      	ldr	r4, [pc, #48]	; (800bc64 <__libc_init_array+0x44>)
 800bc34:	f002 fd50 	bl	800e6d8 <_init>
 800bc38:	1b64      	subs	r4, r4, r5
 800bc3a:	10a4      	asrs	r4, r4, #2
 800bc3c:	2600      	movs	r6, #0
 800bc3e:	42a6      	cmp	r6, r4
 800bc40:	d105      	bne.n	800bc4e <__libc_init_array+0x2e>
 800bc42:	bd70      	pop	{r4, r5, r6, pc}
 800bc44:	f855 3b04 	ldr.w	r3, [r5], #4
 800bc48:	4798      	blx	r3
 800bc4a:	3601      	adds	r6, #1
 800bc4c:	e7ee      	b.n	800bc2c <__libc_init_array+0xc>
 800bc4e:	f855 3b04 	ldr.w	r3, [r5], #4
 800bc52:	4798      	blx	r3
 800bc54:	3601      	adds	r6, #1
 800bc56:	e7f2      	b.n	800bc3e <__libc_init_array+0x1e>
 800bc58:	0800ed6c 	.word	0x0800ed6c
 800bc5c:	0800ed6c 	.word	0x0800ed6c
 800bc60:	0800ed6c 	.word	0x0800ed6c
 800bc64:	0800ed70 	.word	0x0800ed70

0800bc68 <memset>:
 800bc68:	4402      	add	r2, r0
 800bc6a:	4603      	mov	r3, r0
 800bc6c:	4293      	cmp	r3, r2
 800bc6e:	d100      	bne.n	800bc72 <memset+0xa>
 800bc70:	4770      	bx	lr
 800bc72:	f803 1b01 	strb.w	r1, [r3], #1
 800bc76:	e7f9      	b.n	800bc6c <memset+0x4>

0800bc78 <__cvt>:
 800bc78:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800bc7c:	ec55 4b10 	vmov	r4, r5, d0
 800bc80:	2d00      	cmp	r5, #0
 800bc82:	460e      	mov	r6, r1
 800bc84:	4619      	mov	r1, r3
 800bc86:	462b      	mov	r3, r5
 800bc88:	bfbb      	ittet	lt
 800bc8a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800bc8e:	461d      	movlt	r5, r3
 800bc90:	2300      	movge	r3, #0
 800bc92:	232d      	movlt	r3, #45	; 0x2d
 800bc94:	700b      	strb	r3, [r1, #0]
 800bc96:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800bc98:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800bc9c:	4691      	mov	r9, r2
 800bc9e:	f023 0820 	bic.w	r8, r3, #32
 800bca2:	bfbc      	itt	lt
 800bca4:	4622      	movlt	r2, r4
 800bca6:	4614      	movlt	r4, r2
 800bca8:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800bcac:	d005      	beq.n	800bcba <__cvt+0x42>
 800bcae:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800bcb2:	d100      	bne.n	800bcb6 <__cvt+0x3e>
 800bcb4:	3601      	adds	r6, #1
 800bcb6:	2102      	movs	r1, #2
 800bcb8:	e000      	b.n	800bcbc <__cvt+0x44>
 800bcba:	2103      	movs	r1, #3
 800bcbc:	ab03      	add	r3, sp, #12
 800bcbe:	9301      	str	r3, [sp, #4]
 800bcc0:	ab02      	add	r3, sp, #8
 800bcc2:	9300      	str	r3, [sp, #0]
 800bcc4:	ec45 4b10 	vmov	d0, r4, r5
 800bcc8:	4653      	mov	r3, sl
 800bcca:	4632      	mov	r2, r6
 800bccc:	f000 fce4 	bl	800c698 <_dtoa_r>
 800bcd0:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800bcd4:	4607      	mov	r7, r0
 800bcd6:	d102      	bne.n	800bcde <__cvt+0x66>
 800bcd8:	f019 0f01 	tst.w	r9, #1
 800bcdc:	d022      	beq.n	800bd24 <__cvt+0xac>
 800bcde:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800bce2:	eb07 0906 	add.w	r9, r7, r6
 800bce6:	d110      	bne.n	800bd0a <__cvt+0x92>
 800bce8:	783b      	ldrb	r3, [r7, #0]
 800bcea:	2b30      	cmp	r3, #48	; 0x30
 800bcec:	d10a      	bne.n	800bd04 <__cvt+0x8c>
 800bcee:	2200      	movs	r2, #0
 800bcf0:	2300      	movs	r3, #0
 800bcf2:	4620      	mov	r0, r4
 800bcf4:	4629      	mov	r1, r5
 800bcf6:	f7f4 feef 	bl	8000ad8 <__aeabi_dcmpeq>
 800bcfa:	b918      	cbnz	r0, 800bd04 <__cvt+0x8c>
 800bcfc:	f1c6 0601 	rsb	r6, r6, #1
 800bd00:	f8ca 6000 	str.w	r6, [sl]
 800bd04:	f8da 3000 	ldr.w	r3, [sl]
 800bd08:	4499      	add	r9, r3
 800bd0a:	2200      	movs	r2, #0
 800bd0c:	2300      	movs	r3, #0
 800bd0e:	4620      	mov	r0, r4
 800bd10:	4629      	mov	r1, r5
 800bd12:	f7f4 fee1 	bl	8000ad8 <__aeabi_dcmpeq>
 800bd16:	b108      	cbz	r0, 800bd1c <__cvt+0xa4>
 800bd18:	f8cd 900c 	str.w	r9, [sp, #12]
 800bd1c:	2230      	movs	r2, #48	; 0x30
 800bd1e:	9b03      	ldr	r3, [sp, #12]
 800bd20:	454b      	cmp	r3, r9
 800bd22:	d307      	bcc.n	800bd34 <__cvt+0xbc>
 800bd24:	9b03      	ldr	r3, [sp, #12]
 800bd26:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800bd28:	1bdb      	subs	r3, r3, r7
 800bd2a:	4638      	mov	r0, r7
 800bd2c:	6013      	str	r3, [r2, #0]
 800bd2e:	b004      	add	sp, #16
 800bd30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bd34:	1c59      	adds	r1, r3, #1
 800bd36:	9103      	str	r1, [sp, #12]
 800bd38:	701a      	strb	r2, [r3, #0]
 800bd3a:	e7f0      	b.n	800bd1e <__cvt+0xa6>

0800bd3c <__exponent>:
 800bd3c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800bd3e:	4603      	mov	r3, r0
 800bd40:	2900      	cmp	r1, #0
 800bd42:	bfb8      	it	lt
 800bd44:	4249      	neglt	r1, r1
 800bd46:	f803 2b02 	strb.w	r2, [r3], #2
 800bd4a:	bfb4      	ite	lt
 800bd4c:	222d      	movlt	r2, #45	; 0x2d
 800bd4e:	222b      	movge	r2, #43	; 0x2b
 800bd50:	2909      	cmp	r1, #9
 800bd52:	7042      	strb	r2, [r0, #1]
 800bd54:	dd2a      	ble.n	800bdac <__exponent+0x70>
 800bd56:	f10d 0407 	add.w	r4, sp, #7
 800bd5a:	46a4      	mov	ip, r4
 800bd5c:	270a      	movs	r7, #10
 800bd5e:	46a6      	mov	lr, r4
 800bd60:	460a      	mov	r2, r1
 800bd62:	fb91 f6f7 	sdiv	r6, r1, r7
 800bd66:	fb07 1516 	mls	r5, r7, r6, r1
 800bd6a:	3530      	adds	r5, #48	; 0x30
 800bd6c:	2a63      	cmp	r2, #99	; 0x63
 800bd6e:	f104 34ff 	add.w	r4, r4, #4294967295
 800bd72:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800bd76:	4631      	mov	r1, r6
 800bd78:	dcf1      	bgt.n	800bd5e <__exponent+0x22>
 800bd7a:	3130      	adds	r1, #48	; 0x30
 800bd7c:	f1ae 0502 	sub.w	r5, lr, #2
 800bd80:	f804 1c01 	strb.w	r1, [r4, #-1]
 800bd84:	1c44      	adds	r4, r0, #1
 800bd86:	4629      	mov	r1, r5
 800bd88:	4561      	cmp	r1, ip
 800bd8a:	d30a      	bcc.n	800bda2 <__exponent+0x66>
 800bd8c:	f10d 0209 	add.w	r2, sp, #9
 800bd90:	eba2 020e 	sub.w	r2, r2, lr
 800bd94:	4565      	cmp	r5, ip
 800bd96:	bf88      	it	hi
 800bd98:	2200      	movhi	r2, #0
 800bd9a:	4413      	add	r3, r2
 800bd9c:	1a18      	subs	r0, r3, r0
 800bd9e:	b003      	add	sp, #12
 800bda0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bda2:	f811 2b01 	ldrb.w	r2, [r1], #1
 800bda6:	f804 2f01 	strb.w	r2, [r4, #1]!
 800bdaa:	e7ed      	b.n	800bd88 <__exponent+0x4c>
 800bdac:	2330      	movs	r3, #48	; 0x30
 800bdae:	3130      	adds	r1, #48	; 0x30
 800bdb0:	7083      	strb	r3, [r0, #2]
 800bdb2:	70c1      	strb	r1, [r0, #3]
 800bdb4:	1d03      	adds	r3, r0, #4
 800bdb6:	e7f1      	b.n	800bd9c <__exponent+0x60>

0800bdb8 <_printf_float>:
 800bdb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bdbc:	ed2d 8b02 	vpush	{d8}
 800bdc0:	b08d      	sub	sp, #52	; 0x34
 800bdc2:	460c      	mov	r4, r1
 800bdc4:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800bdc8:	4616      	mov	r6, r2
 800bdca:	461f      	mov	r7, r3
 800bdcc:	4605      	mov	r5, r0
 800bdce:	f001 fb47 	bl	800d460 <_localeconv_r>
 800bdd2:	f8d0 a000 	ldr.w	sl, [r0]
 800bdd6:	4650      	mov	r0, sl
 800bdd8:	f7f4 fa02 	bl	80001e0 <strlen>
 800bddc:	2300      	movs	r3, #0
 800bdde:	930a      	str	r3, [sp, #40]	; 0x28
 800bde0:	6823      	ldr	r3, [r4, #0]
 800bde2:	9305      	str	r3, [sp, #20]
 800bde4:	f8d8 3000 	ldr.w	r3, [r8]
 800bde8:	f894 b018 	ldrb.w	fp, [r4, #24]
 800bdec:	3307      	adds	r3, #7
 800bdee:	f023 0307 	bic.w	r3, r3, #7
 800bdf2:	f103 0208 	add.w	r2, r3, #8
 800bdf6:	f8c8 2000 	str.w	r2, [r8]
 800bdfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bdfe:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800be02:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800be06:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800be0a:	9307      	str	r3, [sp, #28]
 800be0c:	f8cd 8018 	str.w	r8, [sp, #24]
 800be10:	ee08 0a10 	vmov	s16, r0
 800be14:	4b9f      	ldr	r3, [pc, #636]	; (800c094 <_printf_float+0x2dc>)
 800be16:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800be1a:	f04f 32ff 	mov.w	r2, #4294967295
 800be1e:	f7f4 fe8d 	bl	8000b3c <__aeabi_dcmpun>
 800be22:	bb88      	cbnz	r0, 800be88 <_printf_float+0xd0>
 800be24:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800be28:	4b9a      	ldr	r3, [pc, #616]	; (800c094 <_printf_float+0x2dc>)
 800be2a:	f04f 32ff 	mov.w	r2, #4294967295
 800be2e:	f7f4 fe67 	bl	8000b00 <__aeabi_dcmple>
 800be32:	bb48      	cbnz	r0, 800be88 <_printf_float+0xd0>
 800be34:	2200      	movs	r2, #0
 800be36:	2300      	movs	r3, #0
 800be38:	4640      	mov	r0, r8
 800be3a:	4649      	mov	r1, r9
 800be3c:	f7f4 fe56 	bl	8000aec <__aeabi_dcmplt>
 800be40:	b110      	cbz	r0, 800be48 <_printf_float+0x90>
 800be42:	232d      	movs	r3, #45	; 0x2d
 800be44:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800be48:	4b93      	ldr	r3, [pc, #588]	; (800c098 <_printf_float+0x2e0>)
 800be4a:	4894      	ldr	r0, [pc, #592]	; (800c09c <_printf_float+0x2e4>)
 800be4c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800be50:	bf94      	ite	ls
 800be52:	4698      	movls	r8, r3
 800be54:	4680      	movhi	r8, r0
 800be56:	2303      	movs	r3, #3
 800be58:	6123      	str	r3, [r4, #16]
 800be5a:	9b05      	ldr	r3, [sp, #20]
 800be5c:	f023 0204 	bic.w	r2, r3, #4
 800be60:	6022      	str	r2, [r4, #0]
 800be62:	f04f 0900 	mov.w	r9, #0
 800be66:	9700      	str	r7, [sp, #0]
 800be68:	4633      	mov	r3, r6
 800be6a:	aa0b      	add	r2, sp, #44	; 0x2c
 800be6c:	4621      	mov	r1, r4
 800be6e:	4628      	mov	r0, r5
 800be70:	f000 f9d8 	bl	800c224 <_printf_common>
 800be74:	3001      	adds	r0, #1
 800be76:	f040 8090 	bne.w	800bf9a <_printf_float+0x1e2>
 800be7a:	f04f 30ff 	mov.w	r0, #4294967295
 800be7e:	b00d      	add	sp, #52	; 0x34
 800be80:	ecbd 8b02 	vpop	{d8}
 800be84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800be88:	4642      	mov	r2, r8
 800be8a:	464b      	mov	r3, r9
 800be8c:	4640      	mov	r0, r8
 800be8e:	4649      	mov	r1, r9
 800be90:	f7f4 fe54 	bl	8000b3c <__aeabi_dcmpun>
 800be94:	b140      	cbz	r0, 800bea8 <_printf_float+0xf0>
 800be96:	464b      	mov	r3, r9
 800be98:	2b00      	cmp	r3, #0
 800be9a:	bfbc      	itt	lt
 800be9c:	232d      	movlt	r3, #45	; 0x2d
 800be9e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800bea2:	487f      	ldr	r0, [pc, #508]	; (800c0a0 <_printf_float+0x2e8>)
 800bea4:	4b7f      	ldr	r3, [pc, #508]	; (800c0a4 <_printf_float+0x2ec>)
 800bea6:	e7d1      	b.n	800be4c <_printf_float+0x94>
 800bea8:	6863      	ldr	r3, [r4, #4]
 800beaa:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800beae:	9206      	str	r2, [sp, #24]
 800beb0:	1c5a      	adds	r2, r3, #1
 800beb2:	d13f      	bne.n	800bf34 <_printf_float+0x17c>
 800beb4:	2306      	movs	r3, #6
 800beb6:	6063      	str	r3, [r4, #4]
 800beb8:	9b05      	ldr	r3, [sp, #20]
 800beba:	6861      	ldr	r1, [r4, #4]
 800bebc:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800bec0:	2300      	movs	r3, #0
 800bec2:	9303      	str	r3, [sp, #12]
 800bec4:	ab0a      	add	r3, sp, #40	; 0x28
 800bec6:	e9cd b301 	strd	fp, r3, [sp, #4]
 800beca:	ab09      	add	r3, sp, #36	; 0x24
 800becc:	ec49 8b10 	vmov	d0, r8, r9
 800bed0:	9300      	str	r3, [sp, #0]
 800bed2:	6022      	str	r2, [r4, #0]
 800bed4:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800bed8:	4628      	mov	r0, r5
 800beda:	f7ff fecd 	bl	800bc78 <__cvt>
 800bede:	9b06      	ldr	r3, [sp, #24]
 800bee0:	9909      	ldr	r1, [sp, #36]	; 0x24
 800bee2:	2b47      	cmp	r3, #71	; 0x47
 800bee4:	4680      	mov	r8, r0
 800bee6:	d108      	bne.n	800befa <_printf_float+0x142>
 800bee8:	1cc8      	adds	r0, r1, #3
 800beea:	db02      	blt.n	800bef2 <_printf_float+0x13a>
 800beec:	6863      	ldr	r3, [r4, #4]
 800beee:	4299      	cmp	r1, r3
 800bef0:	dd41      	ble.n	800bf76 <_printf_float+0x1be>
 800bef2:	f1ab 0b02 	sub.w	fp, fp, #2
 800bef6:	fa5f fb8b 	uxtb.w	fp, fp
 800befa:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800befe:	d820      	bhi.n	800bf42 <_printf_float+0x18a>
 800bf00:	3901      	subs	r1, #1
 800bf02:	465a      	mov	r2, fp
 800bf04:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800bf08:	9109      	str	r1, [sp, #36]	; 0x24
 800bf0a:	f7ff ff17 	bl	800bd3c <__exponent>
 800bf0e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800bf10:	1813      	adds	r3, r2, r0
 800bf12:	2a01      	cmp	r2, #1
 800bf14:	4681      	mov	r9, r0
 800bf16:	6123      	str	r3, [r4, #16]
 800bf18:	dc02      	bgt.n	800bf20 <_printf_float+0x168>
 800bf1a:	6822      	ldr	r2, [r4, #0]
 800bf1c:	07d2      	lsls	r2, r2, #31
 800bf1e:	d501      	bpl.n	800bf24 <_printf_float+0x16c>
 800bf20:	3301      	adds	r3, #1
 800bf22:	6123      	str	r3, [r4, #16]
 800bf24:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800bf28:	2b00      	cmp	r3, #0
 800bf2a:	d09c      	beq.n	800be66 <_printf_float+0xae>
 800bf2c:	232d      	movs	r3, #45	; 0x2d
 800bf2e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800bf32:	e798      	b.n	800be66 <_printf_float+0xae>
 800bf34:	9a06      	ldr	r2, [sp, #24]
 800bf36:	2a47      	cmp	r2, #71	; 0x47
 800bf38:	d1be      	bne.n	800beb8 <_printf_float+0x100>
 800bf3a:	2b00      	cmp	r3, #0
 800bf3c:	d1bc      	bne.n	800beb8 <_printf_float+0x100>
 800bf3e:	2301      	movs	r3, #1
 800bf40:	e7b9      	b.n	800beb6 <_printf_float+0xfe>
 800bf42:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800bf46:	d118      	bne.n	800bf7a <_printf_float+0x1c2>
 800bf48:	2900      	cmp	r1, #0
 800bf4a:	6863      	ldr	r3, [r4, #4]
 800bf4c:	dd0b      	ble.n	800bf66 <_printf_float+0x1ae>
 800bf4e:	6121      	str	r1, [r4, #16]
 800bf50:	b913      	cbnz	r3, 800bf58 <_printf_float+0x1a0>
 800bf52:	6822      	ldr	r2, [r4, #0]
 800bf54:	07d0      	lsls	r0, r2, #31
 800bf56:	d502      	bpl.n	800bf5e <_printf_float+0x1a6>
 800bf58:	3301      	adds	r3, #1
 800bf5a:	440b      	add	r3, r1
 800bf5c:	6123      	str	r3, [r4, #16]
 800bf5e:	65a1      	str	r1, [r4, #88]	; 0x58
 800bf60:	f04f 0900 	mov.w	r9, #0
 800bf64:	e7de      	b.n	800bf24 <_printf_float+0x16c>
 800bf66:	b913      	cbnz	r3, 800bf6e <_printf_float+0x1b6>
 800bf68:	6822      	ldr	r2, [r4, #0]
 800bf6a:	07d2      	lsls	r2, r2, #31
 800bf6c:	d501      	bpl.n	800bf72 <_printf_float+0x1ba>
 800bf6e:	3302      	adds	r3, #2
 800bf70:	e7f4      	b.n	800bf5c <_printf_float+0x1a4>
 800bf72:	2301      	movs	r3, #1
 800bf74:	e7f2      	b.n	800bf5c <_printf_float+0x1a4>
 800bf76:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800bf7a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bf7c:	4299      	cmp	r1, r3
 800bf7e:	db05      	blt.n	800bf8c <_printf_float+0x1d4>
 800bf80:	6823      	ldr	r3, [r4, #0]
 800bf82:	6121      	str	r1, [r4, #16]
 800bf84:	07d8      	lsls	r0, r3, #31
 800bf86:	d5ea      	bpl.n	800bf5e <_printf_float+0x1a6>
 800bf88:	1c4b      	adds	r3, r1, #1
 800bf8a:	e7e7      	b.n	800bf5c <_printf_float+0x1a4>
 800bf8c:	2900      	cmp	r1, #0
 800bf8e:	bfd4      	ite	le
 800bf90:	f1c1 0202 	rsble	r2, r1, #2
 800bf94:	2201      	movgt	r2, #1
 800bf96:	4413      	add	r3, r2
 800bf98:	e7e0      	b.n	800bf5c <_printf_float+0x1a4>
 800bf9a:	6823      	ldr	r3, [r4, #0]
 800bf9c:	055a      	lsls	r2, r3, #21
 800bf9e:	d407      	bmi.n	800bfb0 <_printf_float+0x1f8>
 800bfa0:	6923      	ldr	r3, [r4, #16]
 800bfa2:	4642      	mov	r2, r8
 800bfa4:	4631      	mov	r1, r6
 800bfa6:	4628      	mov	r0, r5
 800bfa8:	47b8      	blx	r7
 800bfaa:	3001      	adds	r0, #1
 800bfac:	d12c      	bne.n	800c008 <_printf_float+0x250>
 800bfae:	e764      	b.n	800be7a <_printf_float+0xc2>
 800bfb0:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800bfb4:	f240 80e0 	bls.w	800c178 <_printf_float+0x3c0>
 800bfb8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800bfbc:	2200      	movs	r2, #0
 800bfbe:	2300      	movs	r3, #0
 800bfc0:	f7f4 fd8a 	bl	8000ad8 <__aeabi_dcmpeq>
 800bfc4:	2800      	cmp	r0, #0
 800bfc6:	d034      	beq.n	800c032 <_printf_float+0x27a>
 800bfc8:	4a37      	ldr	r2, [pc, #220]	; (800c0a8 <_printf_float+0x2f0>)
 800bfca:	2301      	movs	r3, #1
 800bfcc:	4631      	mov	r1, r6
 800bfce:	4628      	mov	r0, r5
 800bfd0:	47b8      	blx	r7
 800bfd2:	3001      	adds	r0, #1
 800bfd4:	f43f af51 	beq.w	800be7a <_printf_float+0xc2>
 800bfd8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800bfdc:	429a      	cmp	r2, r3
 800bfde:	db02      	blt.n	800bfe6 <_printf_float+0x22e>
 800bfe0:	6823      	ldr	r3, [r4, #0]
 800bfe2:	07d8      	lsls	r0, r3, #31
 800bfe4:	d510      	bpl.n	800c008 <_printf_float+0x250>
 800bfe6:	ee18 3a10 	vmov	r3, s16
 800bfea:	4652      	mov	r2, sl
 800bfec:	4631      	mov	r1, r6
 800bfee:	4628      	mov	r0, r5
 800bff0:	47b8      	blx	r7
 800bff2:	3001      	adds	r0, #1
 800bff4:	f43f af41 	beq.w	800be7a <_printf_float+0xc2>
 800bff8:	f04f 0800 	mov.w	r8, #0
 800bffc:	f104 091a 	add.w	r9, r4, #26
 800c000:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c002:	3b01      	subs	r3, #1
 800c004:	4543      	cmp	r3, r8
 800c006:	dc09      	bgt.n	800c01c <_printf_float+0x264>
 800c008:	6823      	ldr	r3, [r4, #0]
 800c00a:	079b      	lsls	r3, r3, #30
 800c00c:	f100 8105 	bmi.w	800c21a <_printf_float+0x462>
 800c010:	68e0      	ldr	r0, [r4, #12]
 800c012:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c014:	4298      	cmp	r0, r3
 800c016:	bfb8      	it	lt
 800c018:	4618      	movlt	r0, r3
 800c01a:	e730      	b.n	800be7e <_printf_float+0xc6>
 800c01c:	2301      	movs	r3, #1
 800c01e:	464a      	mov	r2, r9
 800c020:	4631      	mov	r1, r6
 800c022:	4628      	mov	r0, r5
 800c024:	47b8      	blx	r7
 800c026:	3001      	adds	r0, #1
 800c028:	f43f af27 	beq.w	800be7a <_printf_float+0xc2>
 800c02c:	f108 0801 	add.w	r8, r8, #1
 800c030:	e7e6      	b.n	800c000 <_printf_float+0x248>
 800c032:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c034:	2b00      	cmp	r3, #0
 800c036:	dc39      	bgt.n	800c0ac <_printf_float+0x2f4>
 800c038:	4a1b      	ldr	r2, [pc, #108]	; (800c0a8 <_printf_float+0x2f0>)
 800c03a:	2301      	movs	r3, #1
 800c03c:	4631      	mov	r1, r6
 800c03e:	4628      	mov	r0, r5
 800c040:	47b8      	blx	r7
 800c042:	3001      	adds	r0, #1
 800c044:	f43f af19 	beq.w	800be7a <_printf_float+0xc2>
 800c048:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800c04c:	4313      	orrs	r3, r2
 800c04e:	d102      	bne.n	800c056 <_printf_float+0x29e>
 800c050:	6823      	ldr	r3, [r4, #0]
 800c052:	07d9      	lsls	r1, r3, #31
 800c054:	d5d8      	bpl.n	800c008 <_printf_float+0x250>
 800c056:	ee18 3a10 	vmov	r3, s16
 800c05a:	4652      	mov	r2, sl
 800c05c:	4631      	mov	r1, r6
 800c05e:	4628      	mov	r0, r5
 800c060:	47b8      	blx	r7
 800c062:	3001      	adds	r0, #1
 800c064:	f43f af09 	beq.w	800be7a <_printf_float+0xc2>
 800c068:	f04f 0900 	mov.w	r9, #0
 800c06c:	f104 0a1a 	add.w	sl, r4, #26
 800c070:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c072:	425b      	negs	r3, r3
 800c074:	454b      	cmp	r3, r9
 800c076:	dc01      	bgt.n	800c07c <_printf_float+0x2c4>
 800c078:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c07a:	e792      	b.n	800bfa2 <_printf_float+0x1ea>
 800c07c:	2301      	movs	r3, #1
 800c07e:	4652      	mov	r2, sl
 800c080:	4631      	mov	r1, r6
 800c082:	4628      	mov	r0, r5
 800c084:	47b8      	blx	r7
 800c086:	3001      	adds	r0, #1
 800c088:	f43f aef7 	beq.w	800be7a <_printf_float+0xc2>
 800c08c:	f109 0901 	add.w	r9, r9, #1
 800c090:	e7ee      	b.n	800c070 <_printf_float+0x2b8>
 800c092:	bf00      	nop
 800c094:	7fefffff 	.word	0x7fefffff
 800c098:	0800e98c 	.word	0x0800e98c
 800c09c:	0800e990 	.word	0x0800e990
 800c0a0:	0800e998 	.word	0x0800e998
 800c0a4:	0800e994 	.word	0x0800e994
 800c0a8:	0800e99c 	.word	0x0800e99c
 800c0ac:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c0ae:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800c0b0:	429a      	cmp	r2, r3
 800c0b2:	bfa8      	it	ge
 800c0b4:	461a      	movge	r2, r3
 800c0b6:	2a00      	cmp	r2, #0
 800c0b8:	4691      	mov	r9, r2
 800c0ba:	dc37      	bgt.n	800c12c <_printf_float+0x374>
 800c0bc:	f04f 0b00 	mov.w	fp, #0
 800c0c0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800c0c4:	f104 021a 	add.w	r2, r4, #26
 800c0c8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800c0ca:	9305      	str	r3, [sp, #20]
 800c0cc:	eba3 0309 	sub.w	r3, r3, r9
 800c0d0:	455b      	cmp	r3, fp
 800c0d2:	dc33      	bgt.n	800c13c <_printf_float+0x384>
 800c0d4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800c0d8:	429a      	cmp	r2, r3
 800c0da:	db3b      	blt.n	800c154 <_printf_float+0x39c>
 800c0dc:	6823      	ldr	r3, [r4, #0]
 800c0de:	07da      	lsls	r2, r3, #31
 800c0e0:	d438      	bmi.n	800c154 <_printf_float+0x39c>
 800c0e2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c0e4:	9a05      	ldr	r2, [sp, #20]
 800c0e6:	9909      	ldr	r1, [sp, #36]	; 0x24
 800c0e8:	1a9a      	subs	r2, r3, r2
 800c0ea:	eba3 0901 	sub.w	r9, r3, r1
 800c0ee:	4591      	cmp	r9, r2
 800c0f0:	bfa8      	it	ge
 800c0f2:	4691      	movge	r9, r2
 800c0f4:	f1b9 0f00 	cmp.w	r9, #0
 800c0f8:	dc35      	bgt.n	800c166 <_printf_float+0x3ae>
 800c0fa:	f04f 0800 	mov.w	r8, #0
 800c0fe:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800c102:	f104 0a1a 	add.w	sl, r4, #26
 800c106:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800c10a:	1a9b      	subs	r3, r3, r2
 800c10c:	eba3 0309 	sub.w	r3, r3, r9
 800c110:	4543      	cmp	r3, r8
 800c112:	f77f af79 	ble.w	800c008 <_printf_float+0x250>
 800c116:	2301      	movs	r3, #1
 800c118:	4652      	mov	r2, sl
 800c11a:	4631      	mov	r1, r6
 800c11c:	4628      	mov	r0, r5
 800c11e:	47b8      	blx	r7
 800c120:	3001      	adds	r0, #1
 800c122:	f43f aeaa 	beq.w	800be7a <_printf_float+0xc2>
 800c126:	f108 0801 	add.w	r8, r8, #1
 800c12a:	e7ec      	b.n	800c106 <_printf_float+0x34e>
 800c12c:	4613      	mov	r3, r2
 800c12e:	4631      	mov	r1, r6
 800c130:	4642      	mov	r2, r8
 800c132:	4628      	mov	r0, r5
 800c134:	47b8      	blx	r7
 800c136:	3001      	adds	r0, #1
 800c138:	d1c0      	bne.n	800c0bc <_printf_float+0x304>
 800c13a:	e69e      	b.n	800be7a <_printf_float+0xc2>
 800c13c:	2301      	movs	r3, #1
 800c13e:	4631      	mov	r1, r6
 800c140:	4628      	mov	r0, r5
 800c142:	9205      	str	r2, [sp, #20]
 800c144:	47b8      	blx	r7
 800c146:	3001      	adds	r0, #1
 800c148:	f43f ae97 	beq.w	800be7a <_printf_float+0xc2>
 800c14c:	9a05      	ldr	r2, [sp, #20]
 800c14e:	f10b 0b01 	add.w	fp, fp, #1
 800c152:	e7b9      	b.n	800c0c8 <_printf_float+0x310>
 800c154:	ee18 3a10 	vmov	r3, s16
 800c158:	4652      	mov	r2, sl
 800c15a:	4631      	mov	r1, r6
 800c15c:	4628      	mov	r0, r5
 800c15e:	47b8      	blx	r7
 800c160:	3001      	adds	r0, #1
 800c162:	d1be      	bne.n	800c0e2 <_printf_float+0x32a>
 800c164:	e689      	b.n	800be7a <_printf_float+0xc2>
 800c166:	9a05      	ldr	r2, [sp, #20]
 800c168:	464b      	mov	r3, r9
 800c16a:	4442      	add	r2, r8
 800c16c:	4631      	mov	r1, r6
 800c16e:	4628      	mov	r0, r5
 800c170:	47b8      	blx	r7
 800c172:	3001      	adds	r0, #1
 800c174:	d1c1      	bne.n	800c0fa <_printf_float+0x342>
 800c176:	e680      	b.n	800be7a <_printf_float+0xc2>
 800c178:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c17a:	2a01      	cmp	r2, #1
 800c17c:	dc01      	bgt.n	800c182 <_printf_float+0x3ca>
 800c17e:	07db      	lsls	r3, r3, #31
 800c180:	d538      	bpl.n	800c1f4 <_printf_float+0x43c>
 800c182:	2301      	movs	r3, #1
 800c184:	4642      	mov	r2, r8
 800c186:	4631      	mov	r1, r6
 800c188:	4628      	mov	r0, r5
 800c18a:	47b8      	blx	r7
 800c18c:	3001      	adds	r0, #1
 800c18e:	f43f ae74 	beq.w	800be7a <_printf_float+0xc2>
 800c192:	ee18 3a10 	vmov	r3, s16
 800c196:	4652      	mov	r2, sl
 800c198:	4631      	mov	r1, r6
 800c19a:	4628      	mov	r0, r5
 800c19c:	47b8      	blx	r7
 800c19e:	3001      	adds	r0, #1
 800c1a0:	f43f ae6b 	beq.w	800be7a <_printf_float+0xc2>
 800c1a4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800c1a8:	2200      	movs	r2, #0
 800c1aa:	2300      	movs	r3, #0
 800c1ac:	f7f4 fc94 	bl	8000ad8 <__aeabi_dcmpeq>
 800c1b0:	b9d8      	cbnz	r0, 800c1ea <_printf_float+0x432>
 800c1b2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c1b4:	f108 0201 	add.w	r2, r8, #1
 800c1b8:	3b01      	subs	r3, #1
 800c1ba:	4631      	mov	r1, r6
 800c1bc:	4628      	mov	r0, r5
 800c1be:	47b8      	blx	r7
 800c1c0:	3001      	adds	r0, #1
 800c1c2:	d10e      	bne.n	800c1e2 <_printf_float+0x42a>
 800c1c4:	e659      	b.n	800be7a <_printf_float+0xc2>
 800c1c6:	2301      	movs	r3, #1
 800c1c8:	4652      	mov	r2, sl
 800c1ca:	4631      	mov	r1, r6
 800c1cc:	4628      	mov	r0, r5
 800c1ce:	47b8      	blx	r7
 800c1d0:	3001      	adds	r0, #1
 800c1d2:	f43f ae52 	beq.w	800be7a <_printf_float+0xc2>
 800c1d6:	f108 0801 	add.w	r8, r8, #1
 800c1da:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c1dc:	3b01      	subs	r3, #1
 800c1de:	4543      	cmp	r3, r8
 800c1e0:	dcf1      	bgt.n	800c1c6 <_printf_float+0x40e>
 800c1e2:	464b      	mov	r3, r9
 800c1e4:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800c1e8:	e6dc      	b.n	800bfa4 <_printf_float+0x1ec>
 800c1ea:	f04f 0800 	mov.w	r8, #0
 800c1ee:	f104 0a1a 	add.w	sl, r4, #26
 800c1f2:	e7f2      	b.n	800c1da <_printf_float+0x422>
 800c1f4:	2301      	movs	r3, #1
 800c1f6:	4642      	mov	r2, r8
 800c1f8:	e7df      	b.n	800c1ba <_printf_float+0x402>
 800c1fa:	2301      	movs	r3, #1
 800c1fc:	464a      	mov	r2, r9
 800c1fe:	4631      	mov	r1, r6
 800c200:	4628      	mov	r0, r5
 800c202:	47b8      	blx	r7
 800c204:	3001      	adds	r0, #1
 800c206:	f43f ae38 	beq.w	800be7a <_printf_float+0xc2>
 800c20a:	f108 0801 	add.w	r8, r8, #1
 800c20e:	68e3      	ldr	r3, [r4, #12]
 800c210:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800c212:	1a5b      	subs	r3, r3, r1
 800c214:	4543      	cmp	r3, r8
 800c216:	dcf0      	bgt.n	800c1fa <_printf_float+0x442>
 800c218:	e6fa      	b.n	800c010 <_printf_float+0x258>
 800c21a:	f04f 0800 	mov.w	r8, #0
 800c21e:	f104 0919 	add.w	r9, r4, #25
 800c222:	e7f4      	b.n	800c20e <_printf_float+0x456>

0800c224 <_printf_common>:
 800c224:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c228:	4616      	mov	r6, r2
 800c22a:	4699      	mov	r9, r3
 800c22c:	688a      	ldr	r2, [r1, #8]
 800c22e:	690b      	ldr	r3, [r1, #16]
 800c230:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800c234:	4293      	cmp	r3, r2
 800c236:	bfb8      	it	lt
 800c238:	4613      	movlt	r3, r2
 800c23a:	6033      	str	r3, [r6, #0]
 800c23c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800c240:	4607      	mov	r7, r0
 800c242:	460c      	mov	r4, r1
 800c244:	b10a      	cbz	r2, 800c24a <_printf_common+0x26>
 800c246:	3301      	adds	r3, #1
 800c248:	6033      	str	r3, [r6, #0]
 800c24a:	6823      	ldr	r3, [r4, #0]
 800c24c:	0699      	lsls	r1, r3, #26
 800c24e:	bf42      	ittt	mi
 800c250:	6833      	ldrmi	r3, [r6, #0]
 800c252:	3302      	addmi	r3, #2
 800c254:	6033      	strmi	r3, [r6, #0]
 800c256:	6825      	ldr	r5, [r4, #0]
 800c258:	f015 0506 	ands.w	r5, r5, #6
 800c25c:	d106      	bne.n	800c26c <_printf_common+0x48>
 800c25e:	f104 0a19 	add.w	sl, r4, #25
 800c262:	68e3      	ldr	r3, [r4, #12]
 800c264:	6832      	ldr	r2, [r6, #0]
 800c266:	1a9b      	subs	r3, r3, r2
 800c268:	42ab      	cmp	r3, r5
 800c26a:	dc26      	bgt.n	800c2ba <_printf_common+0x96>
 800c26c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800c270:	1e13      	subs	r3, r2, #0
 800c272:	6822      	ldr	r2, [r4, #0]
 800c274:	bf18      	it	ne
 800c276:	2301      	movne	r3, #1
 800c278:	0692      	lsls	r2, r2, #26
 800c27a:	d42b      	bmi.n	800c2d4 <_printf_common+0xb0>
 800c27c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800c280:	4649      	mov	r1, r9
 800c282:	4638      	mov	r0, r7
 800c284:	47c0      	blx	r8
 800c286:	3001      	adds	r0, #1
 800c288:	d01e      	beq.n	800c2c8 <_printf_common+0xa4>
 800c28a:	6823      	ldr	r3, [r4, #0]
 800c28c:	68e5      	ldr	r5, [r4, #12]
 800c28e:	6832      	ldr	r2, [r6, #0]
 800c290:	f003 0306 	and.w	r3, r3, #6
 800c294:	2b04      	cmp	r3, #4
 800c296:	bf08      	it	eq
 800c298:	1aad      	subeq	r5, r5, r2
 800c29a:	68a3      	ldr	r3, [r4, #8]
 800c29c:	6922      	ldr	r2, [r4, #16]
 800c29e:	bf0c      	ite	eq
 800c2a0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800c2a4:	2500      	movne	r5, #0
 800c2a6:	4293      	cmp	r3, r2
 800c2a8:	bfc4      	itt	gt
 800c2aa:	1a9b      	subgt	r3, r3, r2
 800c2ac:	18ed      	addgt	r5, r5, r3
 800c2ae:	2600      	movs	r6, #0
 800c2b0:	341a      	adds	r4, #26
 800c2b2:	42b5      	cmp	r5, r6
 800c2b4:	d11a      	bne.n	800c2ec <_printf_common+0xc8>
 800c2b6:	2000      	movs	r0, #0
 800c2b8:	e008      	b.n	800c2cc <_printf_common+0xa8>
 800c2ba:	2301      	movs	r3, #1
 800c2bc:	4652      	mov	r2, sl
 800c2be:	4649      	mov	r1, r9
 800c2c0:	4638      	mov	r0, r7
 800c2c2:	47c0      	blx	r8
 800c2c4:	3001      	adds	r0, #1
 800c2c6:	d103      	bne.n	800c2d0 <_printf_common+0xac>
 800c2c8:	f04f 30ff 	mov.w	r0, #4294967295
 800c2cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c2d0:	3501      	adds	r5, #1
 800c2d2:	e7c6      	b.n	800c262 <_printf_common+0x3e>
 800c2d4:	18e1      	adds	r1, r4, r3
 800c2d6:	1c5a      	adds	r2, r3, #1
 800c2d8:	2030      	movs	r0, #48	; 0x30
 800c2da:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800c2de:	4422      	add	r2, r4
 800c2e0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800c2e4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800c2e8:	3302      	adds	r3, #2
 800c2ea:	e7c7      	b.n	800c27c <_printf_common+0x58>
 800c2ec:	2301      	movs	r3, #1
 800c2ee:	4622      	mov	r2, r4
 800c2f0:	4649      	mov	r1, r9
 800c2f2:	4638      	mov	r0, r7
 800c2f4:	47c0      	blx	r8
 800c2f6:	3001      	adds	r0, #1
 800c2f8:	d0e6      	beq.n	800c2c8 <_printf_common+0xa4>
 800c2fa:	3601      	adds	r6, #1
 800c2fc:	e7d9      	b.n	800c2b2 <_printf_common+0x8e>
	...

0800c300 <_printf_i>:
 800c300:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c304:	7e0f      	ldrb	r7, [r1, #24]
 800c306:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800c308:	2f78      	cmp	r7, #120	; 0x78
 800c30a:	4691      	mov	r9, r2
 800c30c:	4680      	mov	r8, r0
 800c30e:	460c      	mov	r4, r1
 800c310:	469a      	mov	sl, r3
 800c312:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800c316:	d807      	bhi.n	800c328 <_printf_i+0x28>
 800c318:	2f62      	cmp	r7, #98	; 0x62
 800c31a:	d80a      	bhi.n	800c332 <_printf_i+0x32>
 800c31c:	2f00      	cmp	r7, #0
 800c31e:	f000 80d8 	beq.w	800c4d2 <_printf_i+0x1d2>
 800c322:	2f58      	cmp	r7, #88	; 0x58
 800c324:	f000 80a3 	beq.w	800c46e <_printf_i+0x16e>
 800c328:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c32c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800c330:	e03a      	b.n	800c3a8 <_printf_i+0xa8>
 800c332:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800c336:	2b15      	cmp	r3, #21
 800c338:	d8f6      	bhi.n	800c328 <_printf_i+0x28>
 800c33a:	a101      	add	r1, pc, #4	; (adr r1, 800c340 <_printf_i+0x40>)
 800c33c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800c340:	0800c399 	.word	0x0800c399
 800c344:	0800c3ad 	.word	0x0800c3ad
 800c348:	0800c329 	.word	0x0800c329
 800c34c:	0800c329 	.word	0x0800c329
 800c350:	0800c329 	.word	0x0800c329
 800c354:	0800c329 	.word	0x0800c329
 800c358:	0800c3ad 	.word	0x0800c3ad
 800c35c:	0800c329 	.word	0x0800c329
 800c360:	0800c329 	.word	0x0800c329
 800c364:	0800c329 	.word	0x0800c329
 800c368:	0800c329 	.word	0x0800c329
 800c36c:	0800c4b9 	.word	0x0800c4b9
 800c370:	0800c3dd 	.word	0x0800c3dd
 800c374:	0800c49b 	.word	0x0800c49b
 800c378:	0800c329 	.word	0x0800c329
 800c37c:	0800c329 	.word	0x0800c329
 800c380:	0800c4db 	.word	0x0800c4db
 800c384:	0800c329 	.word	0x0800c329
 800c388:	0800c3dd 	.word	0x0800c3dd
 800c38c:	0800c329 	.word	0x0800c329
 800c390:	0800c329 	.word	0x0800c329
 800c394:	0800c4a3 	.word	0x0800c4a3
 800c398:	682b      	ldr	r3, [r5, #0]
 800c39a:	1d1a      	adds	r2, r3, #4
 800c39c:	681b      	ldr	r3, [r3, #0]
 800c39e:	602a      	str	r2, [r5, #0]
 800c3a0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c3a4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800c3a8:	2301      	movs	r3, #1
 800c3aa:	e0a3      	b.n	800c4f4 <_printf_i+0x1f4>
 800c3ac:	6820      	ldr	r0, [r4, #0]
 800c3ae:	6829      	ldr	r1, [r5, #0]
 800c3b0:	0606      	lsls	r6, r0, #24
 800c3b2:	f101 0304 	add.w	r3, r1, #4
 800c3b6:	d50a      	bpl.n	800c3ce <_printf_i+0xce>
 800c3b8:	680e      	ldr	r6, [r1, #0]
 800c3ba:	602b      	str	r3, [r5, #0]
 800c3bc:	2e00      	cmp	r6, #0
 800c3be:	da03      	bge.n	800c3c8 <_printf_i+0xc8>
 800c3c0:	232d      	movs	r3, #45	; 0x2d
 800c3c2:	4276      	negs	r6, r6
 800c3c4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c3c8:	485e      	ldr	r0, [pc, #376]	; (800c544 <_printf_i+0x244>)
 800c3ca:	230a      	movs	r3, #10
 800c3cc:	e019      	b.n	800c402 <_printf_i+0x102>
 800c3ce:	680e      	ldr	r6, [r1, #0]
 800c3d0:	602b      	str	r3, [r5, #0]
 800c3d2:	f010 0f40 	tst.w	r0, #64	; 0x40
 800c3d6:	bf18      	it	ne
 800c3d8:	b236      	sxthne	r6, r6
 800c3da:	e7ef      	b.n	800c3bc <_printf_i+0xbc>
 800c3dc:	682b      	ldr	r3, [r5, #0]
 800c3de:	6820      	ldr	r0, [r4, #0]
 800c3e0:	1d19      	adds	r1, r3, #4
 800c3e2:	6029      	str	r1, [r5, #0]
 800c3e4:	0601      	lsls	r1, r0, #24
 800c3e6:	d501      	bpl.n	800c3ec <_printf_i+0xec>
 800c3e8:	681e      	ldr	r6, [r3, #0]
 800c3ea:	e002      	b.n	800c3f2 <_printf_i+0xf2>
 800c3ec:	0646      	lsls	r6, r0, #25
 800c3ee:	d5fb      	bpl.n	800c3e8 <_printf_i+0xe8>
 800c3f0:	881e      	ldrh	r6, [r3, #0]
 800c3f2:	4854      	ldr	r0, [pc, #336]	; (800c544 <_printf_i+0x244>)
 800c3f4:	2f6f      	cmp	r7, #111	; 0x6f
 800c3f6:	bf0c      	ite	eq
 800c3f8:	2308      	moveq	r3, #8
 800c3fa:	230a      	movne	r3, #10
 800c3fc:	2100      	movs	r1, #0
 800c3fe:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800c402:	6865      	ldr	r5, [r4, #4]
 800c404:	60a5      	str	r5, [r4, #8]
 800c406:	2d00      	cmp	r5, #0
 800c408:	bfa2      	ittt	ge
 800c40a:	6821      	ldrge	r1, [r4, #0]
 800c40c:	f021 0104 	bicge.w	r1, r1, #4
 800c410:	6021      	strge	r1, [r4, #0]
 800c412:	b90e      	cbnz	r6, 800c418 <_printf_i+0x118>
 800c414:	2d00      	cmp	r5, #0
 800c416:	d04d      	beq.n	800c4b4 <_printf_i+0x1b4>
 800c418:	4615      	mov	r5, r2
 800c41a:	fbb6 f1f3 	udiv	r1, r6, r3
 800c41e:	fb03 6711 	mls	r7, r3, r1, r6
 800c422:	5dc7      	ldrb	r7, [r0, r7]
 800c424:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800c428:	4637      	mov	r7, r6
 800c42a:	42bb      	cmp	r3, r7
 800c42c:	460e      	mov	r6, r1
 800c42e:	d9f4      	bls.n	800c41a <_printf_i+0x11a>
 800c430:	2b08      	cmp	r3, #8
 800c432:	d10b      	bne.n	800c44c <_printf_i+0x14c>
 800c434:	6823      	ldr	r3, [r4, #0]
 800c436:	07de      	lsls	r6, r3, #31
 800c438:	d508      	bpl.n	800c44c <_printf_i+0x14c>
 800c43a:	6923      	ldr	r3, [r4, #16]
 800c43c:	6861      	ldr	r1, [r4, #4]
 800c43e:	4299      	cmp	r1, r3
 800c440:	bfde      	ittt	le
 800c442:	2330      	movle	r3, #48	; 0x30
 800c444:	f805 3c01 	strble.w	r3, [r5, #-1]
 800c448:	f105 35ff 	addle.w	r5, r5, #4294967295
 800c44c:	1b52      	subs	r2, r2, r5
 800c44e:	6122      	str	r2, [r4, #16]
 800c450:	f8cd a000 	str.w	sl, [sp]
 800c454:	464b      	mov	r3, r9
 800c456:	aa03      	add	r2, sp, #12
 800c458:	4621      	mov	r1, r4
 800c45a:	4640      	mov	r0, r8
 800c45c:	f7ff fee2 	bl	800c224 <_printf_common>
 800c460:	3001      	adds	r0, #1
 800c462:	d14c      	bne.n	800c4fe <_printf_i+0x1fe>
 800c464:	f04f 30ff 	mov.w	r0, #4294967295
 800c468:	b004      	add	sp, #16
 800c46a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c46e:	4835      	ldr	r0, [pc, #212]	; (800c544 <_printf_i+0x244>)
 800c470:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800c474:	6829      	ldr	r1, [r5, #0]
 800c476:	6823      	ldr	r3, [r4, #0]
 800c478:	f851 6b04 	ldr.w	r6, [r1], #4
 800c47c:	6029      	str	r1, [r5, #0]
 800c47e:	061d      	lsls	r5, r3, #24
 800c480:	d514      	bpl.n	800c4ac <_printf_i+0x1ac>
 800c482:	07df      	lsls	r7, r3, #31
 800c484:	bf44      	itt	mi
 800c486:	f043 0320 	orrmi.w	r3, r3, #32
 800c48a:	6023      	strmi	r3, [r4, #0]
 800c48c:	b91e      	cbnz	r6, 800c496 <_printf_i+0x196>
 800c48e:	6823      	ldr	r3, [r4, #0]
 800c490:	f023 0320 	bic.w	r3, r3, #32
 800c494:	6023      	str	r3, [r4, #0]
 800c496:	2310      	movs	r3, #16
 800c498:	e7b0      	b.n	800c3fc <_printf_i+0xfc>
 800c49a:	6823      	ldr	r3, [r4, #0]
 800c49c:	f043 0320 	orr.w	r3, r3, #32
 800c4a0:	6023      	str	r3, [r4, #0]
 800c4a2:	2378      	movs	r3, #120	; 0x78
 800c4a4:	4828      	ldr	r0, [pc, #160]	; (800c548 <_printf_i+0x248>)
 800c4a6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800c4aa:	e7e3      	b.n	800c474 <_printf_i+0x174>
 800c4ac:	0659      	lsls	r1, r3, #25
 800c4ae:	bf48      	it	mi
 800c4b0:	b2b6      	uxthmi	r6, r6
 800c4b2:	e7e6      	b.n	800c482 <_printf_i+0x182>
 800c4b4:	4615      	mov	r5, r2
 800c4b6:	e7bb      	b.n	800c430 <_printf_i+0x130>
 800c4b8:	682b      	ldr	r3, [r5, #0]
 800c4ba:	6826      	ldr	r6, [r4, #0]
 800c4bc:	6961      	ldr	r1, [r4, #20]
 800c4be:	1d18      	adds	r0, r3, #4
 800c4c0:	6028      	str	r0, [r5, #0]
 800c4c2:	0635      	lsls	r5, r6, #24
 800c4c4:	681b      	ldr	r3, [r3, #0]
 800c4c6:	d501      	bpl.n	800c4cc <_printf_i+0x1cc>
 800c4c8:	6019      	str	r1, [r3, #0]
 800c4ca:	e002      	b.n	800c4d2 <_printf_i+0x1d2>
 800c4cc:	0670      	lsls	r0, r6, #25
 800c4ce:	d5fb      	bpl.n	800c4c8 <_printf_i+0x1c8>
 800c4d0:	8019      	strh	r1, [r3, #0]
 800c4d2:	2300      	movs	r3, #0
 800c4d4:	6123      	str	r3, [r4, #16]
 800c4d6:	4615      	mov	r5, r2
 800c4d8:	e7ba      	b.n	800c450 <_printf_i+0x150>
 800c4da:	682b      	ldr	r3, [r5, #0]
 800c4dc:	1d1a      	adds	r2, r3, #4
 800c4de:	602a      	str	r2, [r5, #0]
 800c4e0:	681d      	ldr	r5, [r3, #0]
 800c4e2:	6862      	ldr	r2, [r4, #4]
 800c4e4:	2100      	movs	r1, #0
 800c4e6:	4628      	mov	r0, r5
 800c4e8:	f7f3 fe82 	bl	80001f0 <memchr>
 800c4ec:	b108      	cbz	r0, 800c4f2 <_printf_i+0x1f2>
 800c4ee:	1b40      	subs	r0, r0, r5
 800c4f0:	6060      	str	r0, [r4, #4]
 800c4f2:	6863      	ldr	r3, [r4, #4]
 800c4f4:	6123      	str	r3, [r4, #16]
 800c4f6:	2300      	movs	r3, #0
 800c4f8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c4fc:	e7a8      	b.n	800c450 <_printf_i+0x150>
 800c4fe:	6923      	ldr	r3, [r4, #16]
 800c500:	462a      	mov	r2, r5
 800c502:	4649      	mov	r1, r9
 800c504:	4640      	mov	r0, r8
 800c506:	47d0      	blx	sl
 800c508:	3001      	adds	r0, #1
 800c50a:	d0ab      	beq.n	800c464 <_printf_i+0x164>
 800c50c:	6823      	ldr	r3, [r4, #0]
 800c50e:	079b      	lsls	r3, r3, #30
 800c510:	d413      	bmi.n	800c53a <_printf_i+0x23a>
 800c512:	68e0      	ldr	r0, [r4, #12]
 800c514:	9b03      	ldr	r3, [sp, #12]
 800c516:	4298      	cmp	r0, r3
 800c518:	bfb8      	it	lt
 800c51a:	4618      	movlt	r0, r3
 800c51c:	e7a4      	b.n	800c468 <_printf_i+0x168>
 800c51e:	2301      	movs	r3, #1
 800c520:	4632      	mov	r2, r6
 800c522:	4649      	mov	r1, r9
 800c524:	4640      	mov	r0, r8
 800c526:	47d0      	blx	sl
 800c528:	3001      	adds	r0, #1
 800c52a:	d09b      	beq.n	800c464 <_printf_i+0x164>
 800c52c:	3501      	adds	r5, #1
 800c52e:	68e3      	ldr	r3, [r4, #12]
 800c530:	9903      	ldr	r1, [sp, #12]
 800c532:	1a5b      	subs	r3, r3, r1
 800c534:	42ab      	cmp	r3, r5
 800c536:	dcf2      	bgt.n	800c51e <_printf_i+0x21e>
 800c538:	e7eb      	b.n	800c512 <_printf_i+0x212>
 800c53a:	2500      	movs	r5, #0
 800c53c:	f104 0619 	add.w	r6, r4, #25
 800c540:	e7f5      	b.n	800c52e <_printf_i+0x22e>
 800c542:	bf00      	nop
 800c544:	0800e99e 	.word	0x0800e99e
 800c548:	0800e9af 	.word	0x0800e9af

0800c54c <iprintf>:
 800c54c:	b40f      	push	{r0, r1, r2, r3}
 800c54e:	4b0a      	ldr	r3, [pc, #40]	; (800c578 <iprintf+0x2c>)
 800c550:	b513      	push	{r0, r1, r4, lr}
 800c552:	681c      	ldr	r4, [r3, #0]
 800c554:	b124      	cbz	r4, 800c560 <iprintf+0x14>
 800c556:	69a3      	ldr	r3, [r4, #24]
 800c558:	b913      	cbnz	r3, 800c560 <iprintf+0x14>
 800c55a:	4620      	mov	r0, r4
 800c55c:	f000 fee2 	bl	800d324 <__sinit>
 800c560:	ab05      	add	r3, sp, #20
 800c562:	9a04      	ldr	r2, [sp, #16]
 800c564:	68a1      	ldr	r1, [r4, #8]
 800c566:	9301      	str	r3, [sp, #4]
 800c568:	4620      	mov	r0, r4
 800c56a:	f001 fc3b 	bl	800dde4 <_vfiprintf_r>
 800c56e:	b002      	add	sp, #8
 800c570:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c574:	b004      	add	sp, #16
 800c576:	4770      	bx	lr
 800c578:	20000030 	.word	0x20000030

0800c57c <quorem>:
 800c57c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c580:	6903      	ldr	r3, [r0, #16]
 800c582:	690c      	ldr	r4, [r1, #16]
 800c584:	42a3      	cmp	r3, r4
 800c586:	4607      	mov	r7, r0
 800c588:	f2c0 8081 	blt.w	800c68e <quorem+0x112>
 800c58c:	3c01      	subs	r4, #1
 800c58e:	f101 0814 	add.w	r8, r1, #20
 800c592:	f100 0514 	add.w	r5, r0, #20
 800c596:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800c59a:	9301      	str	r3, [sp, #4]
 800c59c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800c5a0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800c5a4:	3301      	adds	r3, #1
 800c5a6:	429a      	cmp	r2, r3
 800c5a8:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800c5ac:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800c5b0:	fbb2 f6f3 	udiv	r6, r2, r3
 800c5b4:	d331      	bcc.n	800c61a <quorem+0x9e>
 800c5b6:	f04f 0e00 	mov.w	lr, #0
 800c5ba:	4640      	mov	r0, r8
 800c5bc:	46ac      	mov	ip, r5
 800c5be:	46f2      	mov	sl, lr
 800c5c0:	f850 2b04 	ldr.w	r2, [r0], #4
 800c5c4:	b293      	uxth	r3, r2
 800c5c6:	fb06 e303 	mla	r3, r6, r3, lr
 800c5ca:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800c5ce:	b29b      	uxth	r3, r3
 800c5d0:	ebaa 0303 	sub.w	r3, sl, r3
 800c5d4:	f8dc a000 	ldr.w	sl, [ip]
 800c5d8:	0c12      	lsrs	r2, r2, #16
 800c5da:	fa13 f38a 	uxtah	r3, r3, sl
 800c5de:	fb06 e202 	mla	r2, r6, r2, lr
 800c5e2:	9300      	str	r3, [sp, #0]
 800c5e4:	9b00      	ldr	r3, [sp, #0]
 800c5e6:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800c5ea:	b292      	uxth	r2, r2
 800c5ec:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800c5f0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800c5f4:	f8bd 3000 	ldrh.w	r3, [sp]
 800c5f8:	4581      	cmp	r9, r0
 800c5fa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c5fe:	f84c 3b04 	str.w	r3, [ip], #4
 800c602:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800c606:	d2db      	bcs.n	800c5c0 <quorem+0x44>
 800c608:	f855 300b 	ldr.w	r3, [r5, fp]
 800c60c:	b92b      	cbnz	r3, 800c61a <quorem+0x9e>
 800c60e:	9b01      	ldr	r3, [sp, #4]
 800c610:	3b04      	subs	r3, #4
 800c612:	429d      	cmp	r5, r3
 800c614:	461a      	mov	r2, r3
 800c616:	d32e      	bcc.n	800c676 <quorem+0xfa>
 800c618:	613c      	str	r4, [r7, #16]
 800c61a:	4638      	mov	r0, r7
 800c61c:	f001 f9c0 	bl	800d9a0 <__mcmp>
 800c620:	2800      	cmp	r0, #0
 800c622:	db24      	blt.n	800c66e <quorem+0xf2>
 800c624:	3601      	adds	r6, #1
 800c626:	4628      	mov	r0, r5
 800c628:	f04f 0c00 	mov.w	ip, #0
 800c62c:	f858 2b04 	ldr.w	r2, [r8], #4
 800c630:	f8d0 e000 	ldr.w	lr, [r0]
 800c634:	b293      	uxth	r3, r2
 800c636:	ebac 0303 	sub.w	r3, ip, r3
 800c63a:	0c12      	lsrs	r2, r2, #16
 800c63c:	fa13 f38e 	uxtah	r3, r3, lr
 800c640:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800c644:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800c648:	b29b      	uxth	r3, r3
 800c64a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c64e:	45c1      	cmp	r9, r8
 800c650:	f840 3b04 	str.w	r3, [r0], #4
 800c654:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800c658:	d2e8      	bcs.n	800c62c <quorem+0xb0>
 800c65a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800c65e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800c662:	b922      	cbnz	r2, 800c66e <quorem+0xf2>
 800c664:	3b04      	subs	r3, #4
 800c666:	429d      	cmp	r5, r3
 800c668:	461a      	mov	r2, r3
 800c66a:	d30a      	bcc.n	800c682 <quorem+0x106>
 800c66c:	613c      	str	r4, [r7, #16]
 800c66e:	4630      	mov	r0, r6
 800c670:	b003      	add	sp, #12
 800c672:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c676:	6812      	ldr	r2, [r2, #0]
 800c678:	3b04      	subs	r3, #4
 800c67a:	2a00      	cmp	r2, #0
 800c67c:	d1cc      	bne.n	800c618 <quorem+0x9c>
 800c67e:	3c01      	subs	r4, #1
 800c680:	e7c7      	b.n	800c612 <quorem+0x96>
 800c682:	6812      	ldr	r2, [r2, #0]
 800c684:	3b04      	subs	r3, #4
 800c686:	2a00      	cmp	r2, #0
 800c688:	d1f0      	bne.n	800c66c <quorem+0xf0>
 800c68a:	3c01      	subs	r4, #1
 800c68c:	e7eb      	b.n	800c666 <quorem+0xea>
 800c68e:	2000      	movs	r0, #0
 800c690:	e7ee      	b.n	800c670 <quorem+0xf4>
 800c692:	0000      	movs	r0, r0
 800c694:	0000      	movs	r0, r0
	...

0800c698 <_dtoa_r>:
 800c698:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c69c:	ed2d 8b04 	vpush	{d8-d9}
 800c6a0:	ec57 6b10 	vmov	r6, r7, d0
 800c6a4:	b093      	sub	sp, #76	; 0x4c
 800c6a6:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800c6a8:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800c6ac:	9106      	str	r1, [sp, #24]
 800c6ae:	ee10 aa10 	vmov	sl, s0
 800c6b2:	4604      	mov	r4, r0
 800c6b4:	9209      	str	r2, [sp, #36]	; 0x24
 800c6b6:	930c      	str	r3, [sp, #48]	; 0x30
 800c6b8:	46bb      	mov	fp, r7
 800c6ba:	b975      	cbnz	r5, 800c6da <_dtoa_r+0x42>
 800c6bc:	2010      	movs	r0, #16
 800c6be:	f000 fed7 	bl	800d470 <malloc>
 800c6c2:	4602      	mov	r2, r0
 800c6c4:	6260      	str	r0, [r4, #36]	; 0x24
 800c6c6:	b920      	cbnz	r0, 800c6d2 <_dtoa_r+0x3a>
 800c6c8:	4ba7      	ldr	r3, [pc, #668]	; (800c968 <_dtoa_r+0x2d0>)
 800c6ca:	21ea      	movs	r1, #234	; 0xea
 800c6cc:	48a7      	ldr	r0, [pc, #668]	; (800c96c <_dtoa_r+0x2d4>)
 800c6ce:	f001 fddf 	bl	800e290 <__assert_func>
 800c6d2:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800c6d6:	6005      	str	r5, [r0, #0]
 800c6d8:	60c5      	str	r5, [r0, #12]
 800c6da:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c6dc:	6819      	ldr	r1, [r3, #0]
 800c6de:	b151      	cbz	r1, 800c6f6 <_dtoa_r+0x5e>
 800c6e0:	685a      	ldr	r2, [r3, #4]
 800c6e2:	604a      	str	r2, [r1, #4]
 800c6e4:	2301      	movs	r3, #1
 800c6e6:	4093      	lsls	r3, r2
 800c6e8:	608b      	str	r3, [r1, #8]
 800c6ea:	4620      	mov	r0, r4
 800c6ec:	f000 ff16 	bl	800d51c <_Bfree>
 800c6f0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c6f2:	2200      	movs	r2, #0
 800c6f4:	601a      	str	r2, [r3, #0]
 800c6f6:	1e3b      	subs	r3, r7, #0
 800c6f8:	bfaa      	itet	ge
 800c6fa:	2300      	movge	r3, #0
 800c6fc:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 800c700:	f8c8 3000 	strge.w	r3, [r8]
 800c704:	4b9a      	ldr	r3, [pc, #616]	; (800c970 <_dtoa_r+0x2d8>)
 800c706:	bfbc      	itt	lt
 800c708:	2201      	movlt	r2, #1
 800c70a:	f8c8 2000 	strlt.w	r2, [r8]
 800c70e:	ea33 030b 	bics.w	r3, r3, fp
 800c712:	d11b      	bne.n	800c74c <_dtoa_r+0xb4>
 800c714:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800c716:	f242 730f 	movw	r3, #9999	; 0x270f
 800c71a:	6013      	str	r3, [r2, #0]
 800c71c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800c720:	4333      	orrs	r3, r6
 800c722:	f000 8592 	beq.w	800d24a <_dtoa_r+0xbb2>
 800c726:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c728:	b963      	cbnz	r3, 800c744 <_dtoa_r+0xac>
 800c72a:	4b92      	ldr	r3, [pc, #584]	; (800c974 <_dtoa_r+0x2dc>)
 800c72c:	e022      	b.n	800c774 <_dtoa_r+0xdc>
 800c72e:	4b92      	ldr	r3, [pc, #584]	; (800c978 <_dtoa_r+0x2e0>)
 800c730:	9301      	str	r3, [sp, #4]
 800c732:	3308      	adds	r3, #8
 800c734:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800c736:	6013      	str	r3, [r2, #0]
 800c738:	9801      	ldr	r0, [sp, #4]
 800c73a:	b013      	add	sp, #76	; 0x4c
 800c73c:	ecbd 8b04 	vpop	{d8-d9}
 800c740:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c744:	4b8b      	ldr	r3, [pc, #556]	; (800c974 <_dtoa_r+0x2dc>)
 800c746:	9301      	str	r3, [sp, #4]
 800c748:	3303      	adds	r3, #3
 800c74a:	e7f3      	b.n	800c734 <_dtoa_r+0x9c>
 800c74c:	2200      	movs	r2, #0
 800c74e:	2300      	movs	r3, #0
 800c750:	4650      	mov	r0, sl
 800c752:	4659      	mov	r1, fp
 800c754:	f7f4 f9c0 	bl	8000ad8 <__aeabi_dcmpeq>
 800c758:	ec4b ab19 	vmov	d9, sl, fp
 800c75c:	4680      	mov	r8, r0
 800c75e:	b158      	cbz	r0, 800c778 <_dtoa_r+0xe0>
 800c760:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800c762:	2301      	movs	r3, #1
 800c764:	6013      	str	r3, [r2, #0]
 800c766:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c768:	2b00      	cmp	r3, #0
 800c76a:	f000 856b 	beq.w	800d244 <_dtoa_r+0xbac>
 800c76e:	4883      	ldr	r0, [pc, #524]	; (800c97c <_dtoa_r+0x2e4>)
 800c770:	6018      	str	r0, [r3, #0]
 800c772:	1e43      	subs	r3, r0, #1
 800c774:	9301      	str	r3, [sp, #4]
 800c776:	e7df      	b.n	800c738 <_dtoa_r+0xa0>
 800c778:	ec4b ab10 	vmov	d0, sl, fp
 800c77c:	aa10      	add	r2, sp, #64	; 0x40
 800c77e:	a911      	add	r1, sp, #68	; 0x44
 800c780:	4620      	mov	r0, r4
 800c782:	f001 f9b3 	bl	800daec <__d2b>
 800c786:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800c78a:	ee08 0a10 	vmov	s16, r0
 800c78e:	2d00      	cmp	r5, #0
 800c790:	f000 8084 	beq.w	800c89c <_dtoa_r+0x204>
 800c794:	ee19 3a90 	vmov	r3, s19
 800c798:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c79c:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800c7a0:	4656      	mov	r6, sl
 800c7a2:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800c7a6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800c7aa:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800c7ae:	4b74      	ldr	r3, [pc, #464]	; (800c980 <_dtoa_r+0x2e8>)
 800c7b0:	2200      	movs	r2, #0
 800c7b2:	4630      	mov	r0, r6
 800c7b4:	4639      	mov	r1, r7
 800c7b6:	f7f3 fd6f 	bl	8000298 <__aeabi_dsub>
 800c7ba:	a365      	add	r3, pc, #404	; (adr r3, 800c950 <_dtoa_r+0x2b8>)
 800c7bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c7c0:	f7f3 ff22 	bl	8000608 <__aeabi_dmul>
 800c7c4:	a364      	add	r3, pc, #400	; (adr r3, 800c958 <_dtoa_r+0x2c0>)
 800c7c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c7ca:	f7f3 fd67 	bl	800029c <__adddf3>
 800c7ce:	4606      	mov	r6, r0
 800c7d0:	4628      	mov	r0, r5
 800c7d2:	460f      	mov	r7, r1
 800c7d4:	f7f3 feae 	bl	8000534 <__aeabi_i2d>
 800c7d8:	a361      	add	r3, pc, #388	; (adr r3, 800c960 <_dtoa_r+0x2c8>)
 800c7da:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c7de:	f7f3 ff13 	bl	8000608 <__aeabi_dmul>
 800c7e2:	4602      	mov	r2, r0
 800c7e4:	460b      	mov	r3, r1
 800c7e6:	4630      	mov	r0, r6
 800c7e8:	4639      	mov	r1, r7
 800c7ea:	f7f3 fd57 	bl	800029c <__adddf3>
 800c7ee:	4606      	mov	r6, r0
 800c7f0:	460f      	mov	r7, r1
 800c7f2:	f7f4 f9b9 	bl	8000b68 <__aeabi_d2iz>
 800c7f6:	2200      	movs	r2, #0
 800c7f8:	9000      	str	r0, [sp, #0]
 800c7fa:	2300      	movs	r3, #0
 800c7fc:	4630      	mov	r0, r6
 800c7fe:	4639      	mov	r1, r7
 800c800:	f7f4 f974 	bl	8000aec <__aeabi_dcmplt>
 800c804:	b150      	cbz	r0, 800c81c <_dtoa_r+0x184>
 800c806:	9800      	ldr	r0, [sp, #0]
 800c808:	f7f3 fe94 	bl	8000534 <__aeabi_i2d>
 800c80c:	4632      	mov	r2, r6
 800c80e:	463b      	mov	r3, r7
 800c810:	f7f4 f962 	bl	8000ad8 <__aeabi_dcmpeq>
 800c814:	b910      	cbnz	r0, 800c81c <_dtoa_r+0x184>
 800c816:	9b00      	ldr	r3, [sp, #0]
 800c818:	3b01      	subs	r3, #1
 800c81a:	9300      	str	r3, [sp, #0]
 800c81c:	9b00      	ldr	r3, [sp, #0]
 800c81e:	2b16      	cmp	r3, #22
 800c820:	d85a      	bhi.n	800c8d8 <_dtoa_r+0x240>
 800c822:	9a00      	ldr	r2, [sp, #0]
 800c824:	4b57      	ldr	r3, [pc, #348]	; (800c984 <_dtoa_r+0x2ec>)
 800c826:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c82a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c82e:	ec51 0b19 	vmov	r0, r1, d9
 800c832:	f7f4 f95b 	bl	8000aec <__aeabi_dcmplt>
 800c836:	2800      	cmp	r0, #0
 800c838:	d050      	beq.n	800c8dc <_dtoa_r+0x244>
 800c83a:	9b00      	ldr	r3, [sp, #0]
 800c83c:	3b01      	subs	r3, #1
 800c83e:	9300      	str	r3, [sp, #0]
 800c840:	2300      	movs	r3, #0
 800c842:	930b      	str	r3, [sp, #44]	; 0x2c
 800c844:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800c846:	1b5d      	subs	r5, r3, r5
 800c848:	1e6b      	subs	r3, r5, #1
 800c84a:	9305      	str	r3, [sp, #20]
 800c84c:	bf45      	ittet	mi
 800c84e:	f1c5 0301 	rsbmi	r3, r5, #1
 800c852:	9304      	strmi	r3, [sp, #16]
 800c854:	2300      	movpl	r3, #0
 800c856:	2300      	movmi	r3, #0
 800c858:	bf4c      	ite	mi
 800c85a:	9305      	strmi	r3, [sp, #20]
 800c85c:	9304      	strpl	r3, [sp, #16]
 800c85e:	9b00      	ldr	r3, [sp, #0]
 800c860:	2b00      	cmp	r3, #0
 800c862:	db3d      	blt.n	800c8e0 <_dtoa_r+0x248>
 800c864:	9b05      	ldr	r3, [sp, #20]
 800c866:	9a00      	ldr	r2, [sp, #0]
 800c868:	920a      	str	r2, [sp, #40]	; 0x28
 800c86a:	4413      	add	r3, r2
 800c86c:	9305      	str	r3, [sp, #20]
 800c86e:	2300      	movs	r3, #0
 800c870:	9307      	str	r3, [sp, #28]
 800c872:	9b06      	ldr	r3, [sp, #24]
 800c874:	2b09      	cmp	r3, #9
 800c876:	f200 8089 	bhi.w	800c98c <_dtoa_r+0x2f4>
 800c87a:	2b05      	cmp	r3, #5
 800c87c:	bfc4      	itt	gt
 800c87e:	3b04      	subgt	r3, #4
 800c880:	9306      	strgt	r3, [sp, #24]
 800c882:	9b06      	ldr	r3, [sp, #24]
 800c884:	f1a3 0302 	sub.w	r3, r3, #2
 800c888:	bfcc      	ite	gt
 800c88a:	2500      	movgt	r5, #0
 800c88c:	2501      	movle	r5, #1
 800c88e:	2b03      	cmp	r3, #3
 800c890:	f200 8087 	bhi.w	800c9a2 <_dtoa_r+0x30a>
 800c894:	e8df f003 	tbb	[pc, r3]
 800c898:	59383a2d 	.word	0x59383a2d
 800c89c:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800c8a0:	441d      	add	r5, r3
 800c8a2:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800c8a6:	2b20      	cmp	r3, #32
 800c8a8:	bfc1      	itttt	gt
 800c8aa:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800c8ae:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800c8b2:	fa0b f303 	lslgt.w	r3, fp, r3
 800c8b6:	fa26 f000 	lsrgt.w	r0, r6, r0
 800c8ba:	bfda      	itte	le
 800c8bc:	f1c3 0320 	rsble	r3, r3, #32
 800c8c0:	fa06 f003 	lslle.w	r0, r6, r3
 800c8c4:	4318      	orrgt	r0, r3
 800c8c6:	f7f3 fe25 	bl	8000514 <__aeabi_ui2d>
 800c8ca:	2301      	movs	r3, #1
 800c8cc:	4606      	mov	r6, r0
 800c8ce:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800c8d2:	3d01      	subs	r5, #1
 800c8d4:	930e      	str	r3, [sp, #56]	; 0x38
 800c8d6:	e76a      	b.n	800c7ae <_dtoa_r+0x116>
 800c8d8:	2301      	movs	r3, #1
 800c8da:	e7b2      	b.n	800c842 <_dtoa_r+0x1aa>
 800c8dc:	900b      	str	r0, [sp, #44]	; 0x2c
 800c8de:	e7b1      	b.n	800c844 <_dtoa_r+0x1ac>
 800c8e0:	9b04      	ldr	r3, [sp, #16]
 800c8e2:	9a00      	ldr	r2, [sp, #0]
 800c8e4:	1a9b      	subs	r3, r3, r2
 800c8e6:	9304      	str	r3, [sp, #16]
 800c8e8:	4253      	negs	r3, r2
 800c8ea:	9307      	str	r3, [sp, #28]
 800c8ec:	2300      	movs	r3, #0
 800c8ee:	930a      	str	r3, [sp, #40]	; 0x28
 800c8f0:	e7bf      	b.n	800c872 <_dtoa_r+0x1da>
 800c8f2:	2300      	movs	r3, #0
 800c8f4:	9308      	str	r3, [sp, #32]
 800c8f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c8f8:	2b00      	cmp	r3, #0
 800c8fa:	dc55      	bgt.n	800c9a8 <_dtoa_r+0x310>
 800c8fc:	2301      	movs	r3, #1
 800c8fe:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800c902:	461a      	mov	r2, r3
 800c904:	9209      	str	r2, [sp, #36]	; 0x24
 800c906:	e00c      	b.n	800c922 <_dtoa_r+0x28a>
 800c908:	2301      	movs	r3, #1
 800c90a:	e7f3      	b.n	800c8f4 <_dtoa_r+0x25c>
 800c90c:	2300      	movs	r3, #0
 800c90e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c910:	9308      	str	r3, [sp, #32]
 800c912:	9b00      	ldr	r3, [sp, #0]
 800c914:	4413      	add	r3, r2
 800c916:	9302      	str	r3, [sp, #8]
 800c918:	3301      	adds	r3, #1
 800c91a:	2b01      	cmp	r3, #1
 800c91c:	9303      	str	r3, [sp, #12]
 800c91e:	bfb8      	it	lt
 800c920:	2301      	movlt	r3, #1
 800c922:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800c924:	2200      	movs	r2, #0
 800c926:	6042      	str	r2, [r0, #4]
 800c928:	2204      	movs	r2, #4
 800c92a:	f102 0614 	add.w	r6, r2, #20
 800c92e:	429e      	cmp	r6, r3
 800c930:	6841      	ldr	r1, [r0, #4]
 800c932:	d93d      	bls.n	800c9b0 <_dtoa_r+0x318>
 800c934:	4620      	mov	r0, r4
 800c936:	f000 fdb1 	bl	800d49c <_Balloc>
 800c93a:	9001      	str	r0, [sp, #4]
 800c93c:	2800      	cmp	r0, #0
 800c93e:	d13b      	bne.n	800c9b8 <_dtoa_r+0x320>
 800c940:	4b11      	ldr	r3, [pc, #68]	; (800c988 <_dtoa_r+0x2f0>)
 800c942:	4602      	mov	r2, r0
 800c944:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800c948:	e6c0      	b.n	800c6cc <_dtoa_r+0x34>
 800c94a:	2301      	movs	r3, #1
 800c94c:	e7df      	b.n	800c90e <_dtoa_r+0x276>
 800c94e:	bf00      	nop
 800c950:	636f4361 	.word	0x636f4361
 800c954:	3fd287a7 	.word	0x3fd287a7
 800c958:	8b60c8b3 	.word	0x8b60c8b3
 800c95c:	3fc68a28 	.word	0x3fc68a28
 800c960:	509f79fb 	.word	0x509f79fb
 800c964:	3fd34413 	.word	0x3fd34413
 800c968:	0800e9cd 	.word	0x0800e9cd
 800c96c:	0800e9e4 	.word	0x0800e9e4
 800c970:	7ff00000 	.word	0x7ff00000
 800c974:	0800e9c9 	.word	0x0800e9c9
 800c978:	0800e9c0 	.word	0x0800e9c0
 800c97c:	0800e99d 	.word	0x0800e99d
 800c980:	3ff80000 	.word	0x3ff80000
 800c984:	0800eb38 	.word	0x0800eb38
 800c988:	0800ea3f 	.word	0x0800ea3f
 800c98c:	2501      	movs	r5, #1
 800c98e:	2300      	movs	r3, #0
 800c990:	9306      	str	r3, [sp, #24]
 800c992:	9508      	str	r5, [sp, #32]
 800c994:	f04f 33ff 	mov.w	r3, #4294967295
 800c998:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800c99c:	2200      	movs	r2, #0
 800c99e:	2312      	movs	r3, #18
 800c9a0:	e7b0      	b.n	800c904 <_dtoa_r+0x26c>
 800c9a2:	2301      	movs	r3, #1
 800c9a4:	9308      	str	r3, [sp, #32]
 800c9a6:	e7f5      	b.n	800c994 <_dtoa_r+0x2fc>
 800c9a8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c9aa:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800c9ae:	e7b8      	b.n	800c922 <_dtoa_r+0x28a>
 800c9b0:	3101      	adds	r1, #1
 800c9b2:	6041      	str	r1, [r0, #4]
 800c9b4:	0052      	lsls	r2, r2, #1
 800c9b6:	e7b8      	b.n	800c92a <_dtoa_r+0x292>
 800c9b8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c9ba:	9a01      	ldr	r2, [sp, #4]
 800c9bc:	601a      	str	r2, [r3, #0]
 800c9be:	9b03      	ldr	r3, [sp, #12]
 800c9c0:	2b0e      	cmp	r3, #14
 800c9c2:	f200 809d 	bhi.w	800cb00 <_dtoa_r+0x468>
 800c9c6:	2d00      	cmp	r5, #0
 800c9c8:	f000 809a 	beq.w	800cb00 <_dtoa_r+0x468>
 800c9cc:	9b00      	ldr	r3, [sp, #0]
 800c9ce:	2b00      	cmp	r3, #0
 800c9d0:	dd32      	ble.n	800ca38 <_dtoa_r+0x3a0>
 800c9d2:	4ab7      	ldr	r2, [pc, #732]	; (800ccb0 <_dtoa_r+0x618>)
 800c9d4:	f003 030f 	and.w	r3, r3, #15
 800c9d8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800c9dc:	e9d3 8900 	ldrd	r8, r9, [r3]
 800c9e0:	9b00      	ldr	r3, [sp, #0]
 800c9e2:	05d8      	lsls	r0, r3, #23
 800c9e4:	ea4f 1723 	mov.w	r7, r3, asr #4
 800c9e8:	d516      	bpl.n	800ca18 <_dtoa_r+0x380>
 800c9ea:	4bb2      	ldr	r3, [pc, #712]	; (800ccb4 <_dtoa_r+0x61c>)
 800c9ec:	ec51 0b19 	vmov	r0, r1, d9
 800c9f0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800c9f4:	f7f3 ff32 	bl	800085c <__aeabi_ddiv>
 800c9f8:	f007 070f 	and.w	r7, r7, #15
 800c9fc:	4682      	mov	sl, r0
 800c9fe:	468b      	mov	fp, r1
 800ca00:	2503      	movs	r5, #3
 800ca02:	4eac      	ldr	r6, [pc, #688]	; (800ccb4 <_dtoa_r+0x61c>)
 800ca04:	b957      	cbnz	r7, 800ca1c <_dtoa_r+0x384>
 800ca06:	4642      	mov	r2, r8
 800ca08:	464b      	mov	r3, r9
 800ca0a:	4650      	mov	r0, sl
 800ca0c:	4659      	mov	r1, fp
 800ca0e:	f7f3 ff25 	bl	800085c <__aeabi_ddiv>
 800ca12:	4682      	mov	sl, r0
 800ca14:	468b      	mov	fp, r1
 800ca16:	e028      	b.n	800ca6a <_dtoa_r+0x3d2>
 800ca18:	2502      	movs	r5, #2
 800ca1a:	e7f2      	b.n	800ca02 <_dtoa_r+0x36a>
 800ca1c:	07f9      	lsls	r1, r7, #31
 800ca1e:	d508      	bpl.n	800ca32 <_dtoa_r+0x39a>
 800ca20:	4640      	mov	r0, r8
 800ca22:	4649      	mov	r1, r9
 800ca24:	e9d6 2300 	ldrd	r2, r3, [r6]
 800ca28:	f7f3 fdee 	bl	8000608 <__aeabi_dmul>
 800ca2c:	3501      	adds	r5, #1
 800ca2e:	4680      	mov	r8, r0
 800ca30:	4689      	mov	r9, r1
 800ca32:	107f      	asrs	r7, r7, #1
 800ca34:	3608      	adds	r6, #8
 800ca36:	e7e5      	b.n	800ca04 <_dtoa_r+0x36c>
 800ca38:	f000 809b 	beq.w	800cb72 <_dtoa_r+0x4da>
 800ca3c:	9b00      	ldr	r3, [sp, #0]
 800ca3e:	4f9d      	ldr	r7, [pc, #628]	; (800ccb4 <_dtoa_r+0x61c>)
 800ca40:	425e      	negs	r6, r3
 800ca42:	4b9b      	ldr	r3, [pc, #620]	; (800ccb0 <_dtoa_r+0x618>)
 800ca44:	f006 020f 	and.w	r2, r6, #15
 800ca48:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ca4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca50:	ec51 0b19 	vmov	r0, r1, d9
 800ca54:	f7f3 fdd8 	bl	8000608 <__aeabi_dmul>
 800ca58:	1136      	asrs	r6, r6, #4
 800ca5a:	4682      	mov	sl, r0
 800ca5c:	468b      	mov	fp, r1
 800ca5e:	2300      	movs	r3, #0
 800ca60:	2502      	movs	r5, #2
 800ca62:	2e00      	cmp	r6, #0
 800ca64:	d17a      	bne.n	800cb5c <_dtoa_r+0x4c4>
 800ca66:	2b00      	cmp	r3, #0
 800ca68:	d1d3      	bne.n	800ca12 <_dtoa_r+0x37a>
 800ca6a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ca6c:	2b00      	cmp	r3, #0
 800ca6e:	f000 8082 	beq.w	800cb76 <_dtoa_r+0x4de>
 800ca72:	4b91      	ldr	r3, [pc, #580]	; (800ccb8 <_dtoa_r+0x620>)
 800ca74:	2200      	movs	r2, #0
 800ca76:	4650      	mov	r0, sl
 800ca78:	4659      	mov	r1, fp
 800ca7a:	f7f4 f837 	bl	8000aec <__aeabi_dcmplt>
 800ca7e:	2800      	cmp	r0, #0
 800ca80:	d079      	beq.n	800cb76 <_dtoa_r+0x4de>
 800ca82:	9b03      	ldr	r3, [sp, #12]
 800ca84:	2b00      	cmp	r3, #0
 800ca86:	d076      	beq.n	800cb76 <_dtoa_r+0x4de>
 800ca88:	9b02      	ldr	r3, [sp, #8]
 800ca8a:	2b00      	cmp	r3, #0
 800ca8c:	dd36      	ble.n	800cafc <_dtoa_r+0x464>
 800ca8e:	9b00      	ldr	r3, [sp, #0]
 800ca90:	4650      	mov	r0, sl
 800ca92:	4659      	mov	r1, fp
 800ca94:	1e5f      	subs	r7, r3, #1
 800ca96:	2200      	movs	r2, #0
 800ca98:	4b88      	ldr	r3, [pc, #544]	; (800ccbc <_dtoa_r+0x624>)
 800ca9a:	f7f3 fdb5 	bl	8000608 <__aeabi_dmul>
 800ca9e:	9e02      	ldr	r6, [sp, #8]
 800caa0:	4682      	mov	sl, r0
 800caa2:	468b      	mov	fp, r1
 800caa4:	3501      	adds	r5, #1
 800caa6:	4628      	mov	r0, r5
 800caa8:	f7f3 fd44 	bl	8000534 <__aeabi_i2d>
 800caac:	4652      	mov	r2, sl
 800caae:	465b      	mov	r3, fp
 800cab0:	f7f3 fdaa 	bl	8000608 <__aeabi_dmul>
 800cab4:	4b82      	ldr	r3, [pc, #520]	; (800ccc0 <_dtoa_r+0x628>)
 800cab6:	2200      	movs	r2, #0
 800cab8:	f7f3 fbf0 	bl	800029c <__adddf3>
 800cabc:	46d0      	mov	r8, sl
 800cabe:	46d9      	mov	r9, fp
 800cac0:	4682      	mov	sl, r0
 800cac2:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800cac6:	2e00      	cmp	r6, #0
 800cac8:	d158      	bne.n	800cb7c <_dtoa_r+0x4e4>
 800caca:	4b7e      	ldr	r3, [pc, #504]	; (800ccc4 <_dtoa_r+0x62c>)
 800cacc:	2200      	movs	r2, #0
 800cace:	4640      	mov	r0, r8
 800cad0:	4649      	mov	r1, r9
 800cad2:	f7f3 fbe1 	bl	8000298 <__aeabi_dsub>
 800cad6:	4652      	mov	r2, sl
 800cad8:	465b      	mov	r3, fp
 800cada:	4680      	mov	r8, r0
 800cadc:	4689      	mov	r9, r1
 800cade:	f7f4 f823 	bl	8000b28 <__aeabi_dcmpgt>
 800cae2:	2800      	cmp	r0, #0
 800cae4:	f040 8295 	bne.w	800d012 <_dtoa_r+0x97a>
 800cae8:	4652      	mov	r2, sl
 800caea:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800caee:	4640      	mov	r0, r8
 800caf0:	4649      	mov	r1, r9
 800caf2:	f7f3 fffb 	bl	8000aec <__aeabi_dcmplt>
 800caf6:	2800      	cmp	r0, #0
 800caf8:	f040 8289 	bne.w	800d00e <_dtoa_r+0x976>
 800cafc:	ec5b ab19 	vmov	sl, fp, d9
 800cb00:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800cb02:	2b00      	cmp	r3, #0
 800cb04:	f2c0 8148 	blt.w	800cd98 <_dtoa_r+0x700>
 800cb08:	9a00      	ldr	r2, [sp, #0]
 800cb0a:	2a0e      	cmp	r2, #14
 800cb0c:	f300 8144 	bgt.w	800cd98 <_dtoa_r+0x700>
 800cb10:	4b67      	ldr	r3, [pc, #412]	; (800ccb0 <_dtoa_r+0x618>)
 800cb12:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800cb16:	e9d3 8900 	ldrd	r8, r9, [r3]
 800cb1a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cb1c:	2b00      	cmp	r3, #0
 800cb1e:	f280 80d5 	bge.w	800cccc <_dtoa_r+0x634>
 800cb22:	9b03      	ldr	r3, [sp, #12]
 800cb24:	2b00      	cmp	r3, #0
 800cb26:	f300 80d1 	bgt.w	800cccc <_dtoa_r+0x634>
 800cb2a:	f040 826f 	bne.w	800d00c <_dtoa_r+0x974>
 800cb2e:	4b65      	ldr	r3, [pc, #404]	; (800ccc4 <_dtoa_r+0x62c>)
 800cb30:	2200      	movs	r2, #0
 800cb32:	4640      	mov	r0, r8
 800cb34:	4649      	mov	r1, r9
 800cb36:	f7f3 fd67 	bl	8000608 <__aeabi_dmul>
 800cb3a:	4652      	mov	r2, sl
 800cb3c:	465b      	mov	r3, fp
 800cb3e:	f7f3 ffe9 	bl	8000b14 <__aeabi_dcmpge>
 800cb42:	9e03      	ldr	r6, [sp, #12]
 800cb44:	4637      	mov	r7, r6
 800cb46:	2800      	cmp	r0, #0
 800cb48:	f040 8245 	bne.w	800cfd6 <_dtoa_r+0x93e>
 800cb4c:	9d01      	ldr	r5, [sp, #4]
 800cb4e:	2331      	movs	r3, #49	; 0x31
 800cb50:	f805 3b01 	strb.w	r3, [r5], #1
 800cb54:	9b00      	ldr	r3, [sp, #0]
 800cb56:	3301      	adds	r3, #1
 800cb58:	9300      	str	r3, [sp, #0]
 800cb5a:	e240      	b.n	800cfde <_dtoa_r+0x946>
 800cb5c:	07f2      	lsls	r2, r6, #31
 800cb5e:	d505      	bpl.n	800cb6c <_dtoa_r+0x4d4>
 800cb60:	e9d7 2300 	ldrd	r2, r3, [r7]
 800cb64:	f7f3 fd50 	bl	8000608 <__aeabi_dmul>
 800cb68:	3501      	adds	r5, #1
 800cb6a:	2301      	movs	r3, #1
 800cb6c:	1076      	asrs	r6, r6, #1
 800cb6e:	3708      	adds	r7, #8
 800cb70:	e777      	b.n	800ca62 <_dtoa_r+0x3ca>
 800cb72:	2502      	movs	r5, #2
 800cb74:	e779      	b.n	800ca6a <_dtoa_r+0x3d2>
 800cb76:	9f00      	ldr	r7, [sp, #0]
 800cb78:	9e03      	ldr	r6, [sp, #12]
 800cb7a:	e794      	b.n	800caa6 <_dtoa_r+0x40e>
 800cb7c:	9901      	ldr	r1, [sp, #4]
 800cb7e:	4b4c      	ldr	r3, [pc, #304]	; (800ccb0 <_dtoa_r+0x618>)
 800cb80:	4431      	add	r1, r6
 800cb82:	910d      	str	r1, [sp, #52]	; 0x34
 800cb84:	9908      	ldr	r1, [sp, #32]
 800cb86:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800cb8a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800cb8e:	2900      	cmp	r1, #0
 800cb90:	d043      	beq.n	800cc1a <_dtoa_r+0x582>
 800cb92:	494d      	ldr	r1, [pc, #308]	; (800ccc8 <_dtoa_r+0x630>)
 800cb94:	2000      	movs	r0, #0
 800cb96:	f7f3 fe61 	bl	800085c <__aeabi_ddiv>
 800cb9a:	4652      	mov	r2, sl
 800cb9c:	465b      	mov	r3, fp
 800cb9e:	f7f3 fb7b 	bl	8000298 <__aeabi_dsub>
 800cba2:	9d01      	ldr	r5, [sp, #4]
 800cba4:	4682      	mov	sl, r0
 800cba6:	468b      	mov	fp, r1
 800cba8:	4649      	mov	r1, r9
 800cbaa:	4640      	mov	r0, r8
 800cbac:	f7f3 ffdc 	bl	8000b68 <__aeabi_d2iz>
 800cbb0:	4606      	mov	r6, r0
 800cbb2:	f7f3 fcbf 	bl	8000534 <__aeabi_i2d>
 800cbb6:	4602      	mov	r2, r0
 800cbb8:	460b      	mov	r3, r1
 800cbba:	4640      	mov	r0, r8
 800cbbc:	4649      	mov	r1, r9
 800cbbe:	f7f3 fb6b 	bl	8000298 <__aeabi_dsub>
 800cbc2:	3630      	adds	r6, #48	; 0x30
 800cbc4:	f805 6b01 	strb.w	r6, [r5], #1
 800cbc8:	4652      	mov	r2, sl
 800cbca:	465b      	mov	r3, fp
 800cbcc:	4680      	mov	r8, r0
 800cbce:	4689      	mov	r9, r1
 800cbd0:	f7f3 ff8c 	bl	8000aec <__aeabi_dcmplt>
 800cbd4:	2800      	cmp	r0, #0
 800cbd6:	d163      	bne.n	800cca0 <_dtoa_r+0x608>
 800cbd8:	4642      	mov	r2, r8
 800cbda:	464b      	mov	r3, r9
 800cbdc:	4936      	ldr	r1, [pc, #216]	; (800ccb8 <_dtoa_r+0x620>)
 800cbde:	2000      	movs	r0, #0
 800cbe0:	f7f3 fb5a 	bl	8000298 <__aeabi_dsub>
 800cbe4:	4652      	mov	r2, sl
 800cbe6:	465b      	mov	r3, fp
 800cbe8:	f7f3 ff80 	bl	8000aec <__aeabi_dcmplt>
 800cbec:	2800      	cmp	r0, #0
 800cbee:	f040 80b5 	bne.w	800cd5c <_dtoa_r+0x6c4>
 800cbf2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800cbf4:	429d      	cmp	r5, r3
 800cbf6:	d081      	beq.n	800cafc <_dtoa_r+0x464>
 800cbf8:	4b30      	ldr	r3, [pc, #192]	; (800ccbc <_dtoa_r+0x624>)
 800cbfa:	2200      	movs	r2, #0
 800cbfc:	4650      	mov	r0, sl
 800cbfe:	4659      	mov	r1, fp
 800cc00:	f7f3 fd02 	bl	8000608 <__aeabi_dmul>
 800cc04:	4b2d      	ldr	r3, [pc, #180]	; (800ccbc <_dtoa_r+0x624>)
 800cc06:	4682      	mov	sl, r0
 800cc08:	468b      	mov	fp, r1
 800cc0a:	4640      	mov	r0, r8
 800cc0c:	4649      	mov	r1, r9
 800cc0e:	2200      	movs	r2, #0
 800cc10:	f7f3 fcfa 	bl	8000608 <__aeabi_dmul>
 800cc14:	4680      	mov	r8, r0
 800cc16:	4689      	mov	r9, r1
 800cc18:	e7c6      	b.n	800cba8 <_dtoa_r+0x510>
 800cc1a:	4650      	mov	r0, sl
 800cc1c:	4659      	mov	r1, fp
 800cc1e:	f7f3 fcf3 	bl	8000608 <__aeabi_dmul>
 800cc22:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800cc24:	9d01      	ldr	r5, [sp, #4]
 800cc26:	930f      	str	r3, [sp, #60]	; 0x3c
 800cc28:	4682      	mov	sl, r0
 800cc2a:	468b      	mov	fp, r1
 800cc2c:	4649      	mov	r1, r9
 800cc2e:	4640      	mov	r0, r8
 800cc30:	f7f3 ff9a 	bl	8000b68 <__aeabi_d2iz>
 800cc34:	4606      	mov	r6, r0
 800cc36:	f7f3 fc7d 	bl	8000534 <__aeabi_i2d>
 800cc3a:	3630      	adds	r6, #48	; 0x30
 800cc3c:	4602      	mov	r2, r0
 800cc3e:	460b      	mov	r3, r1
 800cc40:	4640      	mov	r0, r8
 800cc42:	4649      	mov	r1, r9
 800cc44:	f7f3 fb28 	bl	8000298 <__aeabi_dsub>
 800cc48:	f805 6b01 	strb.w	r6, [r5], #1
 800cc4c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800cc4e:	429d      	cmp	r5, r3
 800cc50:	4680      	mov	r8, r0
 800cc52:	4689      	mov	r9, r1
 800cc54:	f04f 0200 	mov.w	r2, #0
 800cc58:	d124      	bne.n	800cca4 <_dtoa_r+0x60c>
 800cc5a:	4b1b      	ldr	r3, [pc, #108]	; (800ccc8 <_dtoa_r+0x630>)
 800cc5c:	4650      	mov	r0, sl
 800cc5e:	4659      	mov	r1, fp
 800cc60:	f7f3 fb1c 	bl	800029c <__adddf3>
 800cc64:	4602      	mov	r2, r0
 800cc66:	460b      	mov	r3, r1
 800cc68:	4640      	mov	r0, r8
 800cc6a:	4649      	mov	r1, r9
 800cc6c:	f7f3 ff5c 	bl	8000b28 <__aeabi_dcmpgt>
 800cc70:	2800      	cmp	r0, #0
 800cc72:	d173      	bne.n	800cd5c <_dtoa_r+0x6c4>
 800cc74:	4652      	mov	r2, sl
 800cc76:	465b      	mov	r3, fp
 800cc78:	4913      	ldr	r1, [pc, #76]	; (800ccc8 <_dtoa_r+0x630>)
 800cc7a:	2000      	movs	r0, #0
 800cc7c:	f7f3 fb0c 	bl	8000298 <__aeabi_dsub>
 800cc80:	4602      	mov	r2, r0
 800cc82:	460b      	mov	r3, r1
 800cc84:	4640      	mov	r0, r8
 800cc86:	4649      	mov	r1, r9
 800cc88:	f7f3 ff30 	bl	8000aec <__aeabi_dcmplt>
 800cc8c:	2800      	cmp	r0, #0
 800cc8e:	f43f af35 	beq.w	800cafc <_dtoa_r+0x464>
 800cc92:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800cc94:	1e6b      	subs	r3, r5, #1
 800cc96:	930f      	str	r3, [sp, #60]	; 0x3c
 800cc98:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800cc9c:	2b30      	cmp	r3, #48	; 0x30
 800cc9e:	d0f8      	beq.n	800cc92 <_dtoa_r+0x5fa>
 800cca0:	9700      	str	r7, [sp, #0]
 800cca2:	e049      	b.n	800cd38 <_dtoa_r+0x6a0>
 800cca4:	4b05      	ldr	r3, [pc, #20]	; (800ccbc <_dtoa_r+0x624>)
 800cca6:	f7f3 fcaf 	bl	8000608 <__aeabi_dmul>
 800ccaa:	4680      	mov	r8, r0
 800ccac:	4689      	mov	r9, r1
 800ccae:	e7bd      	b.n	800cc2c <_dtoa_r+0x594>
 800ccb0:	0800eb38 	.word	0x0800eb38
 800ccb4:	0800eb10 	.word	0x0800eb10
 800ccb8:	3ff00000 	.word	0x3ff00000
 800ccbc:	40240000 	.word	0x40240000
 800ccc0:	401c0000 	.word	0x401c0000
 800ccc4:	40140000 	.word	0x40140000
 800ccc8:	3fe00000 	.word	0x3fe00000
 800cccc:	9d01      	ldr	r5, [sp, #4]
 800ccce:	4656      	mov	r6, sl
 800ccd0:	465f      	mov	r7, fp
 800ccd2:	4642      	mov	r2, r8
 800ccd4:	464b      	mov	r3, r9
 800ccd6:	4630      	mov	r0, r6
 800ccd8:	4639      	mov	r1, r7
 800ccda:	f7f3 fdbf 	bl	800085c <__aeabi_ddiv>
 800ccde:	f7f3 ff43 	bl	8000b68 <__aeabi_d2iz>
 800cce2:	4682      	mov	sl, r0
 800cce4:	f7f3 fc26 	bl	8000534 <__aeabi_i2d>
 800cce8:	4642      	mov	r2, r8
 800ccea:	464b      	mov	r3, r9
 800ccec:	f7f3 fc8c 	bl	8000608 <__aeabi_dmul>
 800ccf0:	4602      	mov	r2, r0
 800ccf2:	460b      	mov	r3, r1
 800ccf4:	4630      	mov	r0, r6
 800ccf6:	4639      	mov	r1, r7
 800ccf8:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800ccfc:	f7f3 facc 	bl	8000298 <__aeabi_dsub>
 800cd00:	f805 6b01 	strb.w	r6, [r5], #1
 800cd04:	9e01      	ldr	r6, [sp, #4]
 800cd06:	9f03      	ldr	r7, [sp, #12]
 800cd08:	1bae      	subs	r6, r5, r6
 800cd0a:	42b7      	cmp	r7, r6
 800cd0c:	4602      	mov	r2, r0
 800cd0e:	460b      	mov	r3, r1
 800cd10:	d135      	bne.n	800cd7e <_dtoa_r+0x6e6>
 800cd12:	f7f3 fac3 	bl	800029c <__adddf3>
 800cd16:	4642      	mov	r2, r8
 800cd18:	464b      	mov	r3, r9
 800cd1a:	4606      	mov	r6, r0
 800cd1c:	460f      	mov	r7, r1
 800cd1e:	f7f3 ff03 	bl	8000b28 <__aeabi_dcmpgt>
 800cd22:	b9d0      	cbnz	r0, 800cd5a <_dtoa_r+0x6c2>
 800cd24:	4642      	mov	r2, r8
 800cd26:	464b      	mov	r3, r9
 800cd28:	4630      	mov	r0, r6
 800cd2a:	4639      	mov	r1, r7
 800cd2c:	f7f3 fed4 	bl	8000ad8 <__aeabi_dcmpeq>
 800cd30:	b110      	cbz	r0, 800cd38 <_dtoa_r+0x6a0>
 800cd32:	f01a 0f01 	tst.w	sl, #1
 800cd36:	d110      	bne.n	800cd5a <_dtoa_r+0x6c2>
 800cd38:	4620      	mov	r0, r4
 800cd3a:	ee18 1a10 	vmov	r1, s16
 800cd3e:	f000 fbed 	bl	800d51c <_Bfree>
 800cd42:	2300      	movs	r3, #0
 800cd44:	9800      	ldr	r0, [sp, #0]
 800cd46:	702b      	strb	r3, [r5, #0]
 800cd48:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800cd4a:	3001      	adds	r0, #1
 800cd4c:	6018      	str	r0, [r3, #0]
 800cd4e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800cd50:	2b00      	cmp	r3, #0
 800cd52:	f43f acf1 	beq.w	800c738 <_dtoa_r+0xa0>
 800cd56:	601d      	str	r5, [r3, #0]
 800cd58:	e4ee      	b.n	800c738 <_dtoa_r+0xa0>
 800cd5a:	9f00      	ldr	r7, [sp, #0]
 800cd5c:	462b      	mov	r3, r5
 800cd5e:	461d      	mov	r5, r3
 800cd60:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800cd64:	2a39      	cmp	r2, #57	; 0x39
 800cd66:	d106      	bne.n	800cd76 <_dtoa_r+0x6de>
 800cd68:	9a01      	ldr	r2, [sp, #4]
 800cd6a:	429a      	cmp	r2, r3
 800cd6c:	d1f7      	bne.n	800cd5e <_dtoa_r+0x6c6>
 800cd6e:	9901      	ldr	r1, [sp, #4]
 800cd70:	2230      	movs	r2, #48	; 0x30
 800cd72:	3701      	adds	r7, #1
 800cd74:	700a      	strb	r2, [r1, #0]
 800cd76:	781a      	ldrb	r2, [r3, #0]
 800cd78:	3201      	adds	r2, #1
 800cd7a:	701a      	strb	r2, [r3, #0]
 800cd7c:	e790      	b.n	800cca0 <_dtoa_r+0x608>
 800cd7e:	4ba6      	ldr	r3, [pc, #664]	; (800d018 <_dtoa_r+0x980>)
 800cd80:	2200      	movs	r2, #0
 800cd82:	f7f3 fc41 	bl	8000608 <__aeabi_dmul>
 800cd86:	2200      	movs	r2, #0
 800cd88:	2300      	movs	r3, #0
 800cd8a:	4606      	mov	r6, r0
 800cd8c:	460f      	mov	r7, r1
 800cd8e:	f7f3 fea3 	bl	8000ad8 <__aeabi_dcmpeq>
 800cd92:	2800      	cmp	r0, #0
 800cd94:	d09d      	beq.n	800ccd2 <_dtoa_r+0x63a>
 800cd96:	e7cf      	b.n	800cd38 <_dtoa_r+0x6a0>
 800cd98:	9a08      	ldr	r2, [sp, #32]
 800cd9a:	2a00      	cmp	r2, #0
 800cd9c:	f000 80d7 	beq.w	800cf4e <_dtoa_r+0x8b6>
 800cda0:	9a06      	ldr	r2, [sp, #24]
 800cda2:	2a01      	cmp	r2, #1
 800cda4:	f300 80ba 	bgt.w	800cf1c <_dtoa_r+0x884>
 800cda8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800cdaa:	2a00      	cmp	r2, #0
 800cdac:	f000 80b2 	beq.w	800cf14 <_dtoa_r+0x87c>
 800cdb0:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800cdb4:	9e07      	ldr	r6, [sp, #28]
 800cdb6:	9d04      	ldr	r5, [sp, #16]
 800cdb8:	9a04      	ldr	r2, [sp, #16]
 800cdba:	441a      	add	r2, r3
 800cdbc:	9204      	str	r2, [sp, #16]
 800cdbe:	9a05      	ldr	r2, [sp, #20]
 800cdc0:	2101      	movs	r1, #1
 800cdc2:	441a      	add	r2, r3
 800cdc4:	4620      	mov	r0, r4
 800cdc6:	9205      	str	r2, [sp, #20]
 800cdc8:	f000 fc60 	bl	800d68c <__i2b>
 800cdcc:	4607      	mov	r7, r0
 800cdce:	2d00      	cmp	r5, #0
 800cdd0:	dd0c      	ble.n	800cdec <_dtoa_r+0x754>
 800cdd2:	9b05      	ldr	r3, [sp, #20]
 800cdd4:	2b00      	cmp	r3, #0
 800cdd6:	dd09      	ble.n	800cdec <_dtoa_r+0x754>
 800cdd8:	42ab      	cmp	r3, r5
 800cdda:	9a04      	ldr	r2, [sp, #16]
 800cddc:	bfa8      	it	ge
 800cdde:	462b      	movge	r3, r5
 800cde0:	1ad2      	subs	r2, r2, r3
 800cde2:	9204      	str	r2, [sp, #16]
 800cde4:	9a05      	ldr	r2, [sp, #20]
 800cde6:	1aed      	subs	r5, r5, r3
 800cde8:	1ad3      	subs	r3, r2, r3
 800cdea:	9305      	str	r3, [sp, #20]
 800cdec:	9b07      	ldr	r3, [sp, #28]
 800cdee:	b31b      	cbz	r3, 800ce38 <_dtoa_r+0x7a0>
 800cdf0:	9b08      	ldr	r3, [sp, #32]
 800cdf2:	2b00      	cmp	r3, #0
 800cdf4:	f000 80af 	beq.w	800cf56 <_dtoa_r+0x8be>
 800cdf8:	2e00      	cmp	r6, #0
 800cdfa:	dd13      	ble.n	800ce24 <_dtoa_r+0x78c>
 800cdfc:	4639      	mov	r1, r7
 800cdfe:	4632      	mov	r2, r6
 800ce00:	4620      	mov	r0, r4
 800ce02:	f000 fd03 	bl	800d80c <__pow5mult>
 800ce06:	ee18 2a10 	vmov	r2, s16
 800ce0a:	4601      	mov	r1, r0
 800ce0c:	4607      	mov	r7, r0
 800ce0e:	4620      	mov	r0, r4
 800ce10:	f000 fc52 	bl	800d6b8 <__multiply>
 800ce14:	ee18 1a10 	vmov	r1, s16
 800ce18:	4680      	mov	r8, r0
 800ce1a:	4620      	mov	r0, r4
 800ce1c:	f000 fb7e 	bl	800d51c <_Bfree>
 800ce20:	ee08 8a10 	vmov	s16, r8
 800ce24:	9b07      	ldr	r3, [sp, #28]
 800ce26:	1b9a      	subs	r2, r3, r6
 800ce28:	d006      	beq.n	800ce38 <_dtoa_r+0x7a0>
 800ce2a:	ee18 1a10 	vmov	r1, s16
 800ce2e:	4620      	mov	r0, r4
 800ce30:	f000 fcec 	bl	800d80c <__pow5mult>
 800ce34:	ee08 0a10 	vmov	s16, r0
 800ce38:	2101      	movs	r1, #1
 800ce3a:	4620      	mov	r0, r4
 800ce3c:	f000 fc26 	bl	800d68c <__i2b>
 800ce40:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ce42:	2b00      	cmp	r3, #0
 800ce44:	4606      	mov	r6, r0
 800ce46:	f340 8088 	ble.w	800cf5a <_dtoa_r+0x8c2>
 800ce4a:	461a      	mov	r2, r3
 800ce4c:	4601      	mov	r1, r0
 800ce4e:	4620      	mov	r0, r4
 800ce50:	f000 fcdc 	bl	800d80c <__pow5mult>
 800ce54:	9b06      	ldr	r3, [sp, #24]
 800ce56:	2b01      	cmp	r3, #1
 800ce58:	4606      	mov	r6, r0
 800ce5a:	f340 8081 	ble.w	800cf60 <_dtoa_r+0x8c8>
 800ce5e:	f04f 0800 	mov.w	r8, #0
 800ce62:	6933      	ldr	r3, [r6, #16]
 800ce64:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800ce68:	6918      	ldr	r0, [r3, #16]
 800ce6a:	f000 fbbf 	bl	800d5ec <__hi0bits>
 800ce6e:	f1c0 0020 	rsb	r0, r0, #32
 800ce72:	9b05      	ldr	r3, [sp, #20]
 800ce74:	4418      	add	r0, r3
 800ce76:	f010 001f 	ands.w	r0, r0, #31
 800ce7a:	f000 8092 	beq.w	800cfa2 <_dtoa_r+0x90a>
 800ce7e:	f1c0 0320 	rsb	r3, r0, #32
 800ce82:	2b04      	cmp	r3, #4
 800ce84:	f340 808a 	ble.w	800cf9c <_dtoa_r+0x904>
 800ce88:	f1c0 001c 	rsb	r0, r0, #28
 800ce8c:	9b04      	ldr	r3, [sp, #16]
 800ce8e:	4403      	add	r3, r0
 800ce90:	9304      	str	r3, [sp, #16]
 800ce92:	9b05      	ldr	r3, [sp, #20]
 800ce94:	4403      	add	r3, r0
 800ce96:	4405      	add	r5, r0
 800ce98:	9305      	str	r3, [sp, #20]
 800ce9a:	9b04      	ldr	r3, [sp, #16]
 800ce9c:	2b00      	cmp	r3, #0
 800ce9e:	dd07      	ble.n	800ceb0 <_dtoa_r+0x818>
 800cea0:	ee18 1a10 	vmov	r1, s16
 800cea4:	461a      	mov	r2, r3
 800cea6:	4620      	mov	r0, r4
 800cea8:	f000 fd0a 	bl	800d8c0 <__lshift>
 800ceac:	ee08 0a10 	vmov	s16, r0
 800ceb0:	9b05      	ldr	r3, [sp, #20]
 800ceb2:	2b00      	cmp	r3, #0
 800ceb4:	dd05      	ble.n	800cec2 <_dtoa_r+0x82a>
 800ceb6:	4631      	mov	r1, r6
 800ceb8:	461a      	mov	r2, r3
 800ceba:	4620      	mov	r0, r4
 800cebc:	f000 fd00 	bl	800d8c0 <__lshift>
 800cec0:	4606      	mov	r6, r0
 800cec2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800cec4:	2b00      	cmp	r3, #0
 800cec6:	d06e      	beq.n	800cfa6 <_dtoa_r+0x90e>
 800cec8:	ee18 0a10 	vmov	r0, s16
 800cecc:	4631      	mov	r1, r6
 800cece:	f000 fd67 	bl	800d9a0 <__mcmp>
 800ced2:	2800      	cmp	r0, #0
 800ced4:	da67      	bge.n	800cfa6 <_dtoa_r+0x90e>
 800ced6:	9b00      	ldr	r3, [sp, #0]
 800ced8:	3b01      	subs	r3, #1
 800ceda:	ee18 1a10 	vmov	r1, s16
 800cede:	9300      	str	r3, [sp, #0]
 800cee0:	220a      	movs	r2, #10
 800cee2:	2300      	movs	r3, #0
 800cee4:	4620      	mov	r0, r4
 800cee6:	f000 fb3b 	bl	800d560 <__multadd>
 800ceea:	9b08      	ldr	r3, [sp, #32]
 800ceec:	ee08 0a10 	vmov	s16, r0
 800cef0:	2b00      	cmp	r3, #0
 800cef2:	f000 81b1 	beq.w	800d258 <_dtoa_r+0xbc0>
 800cef6:	2300      	movs	r3, #0
 800cef8:	4639      	mov	r1, r7
 800cefa:	220a      	movs	r2, #10
 800cefc:	4620      	mov	r0, r4
 800cefe:	f000 fb2f 	bl	800d560 <__multadd>
 800cf02:	9b02      	ldr	r3, [sp, #8]
 800cf04:	2b00      	cmp	r3, #0
 800cf06:	4607      	mov	r7, r0
 800cf08:	f300 808e 	bgt.w	800d028 <_dtoa_r+0x990>
 800cf0c:	9b06      	ldr	r3, [sp, #24]
 800cf0e:	2b02      	cmp	r3, #2
 800cf10:	dc51      	bgt.n	800cfb6 <_dtoa_r+0x91e>
 800cf12:	e089      	b.n	800d028 <_dtoa_r+0x990>
 800cf14:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800cf16:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800cf1a:	e74b      	b.n	800cdb4 <_dtoa_r+0x71c>
 800cf1c:	9b03      	ldr	r3, [sp, #12]
 800cf1e:	1e5e      	subs	r6, r3, #1
 800cf20:	9b07      	ldr	r3, [sp, #28]
 800cf22:	42b3      	cmp	r3, r6
 800cf24:	bfbf      	itttt	lt
 800cf26:	9b07      	ldrlt	r3, [sp, #28]
 800cf28:	9607      	strlt	r6, [sp, #28]
 800cf2a:	1af2      	sublt	r2, r6, r3
 800cf2c:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800cf2e:	bfb6      	itet	lt
 800cf30:	189b      	addlt	r3, r3, r2
 800cf32:	1b9e      	subge	r6, r3, r6
 800cf34:	930a      	strlt	r3, [sp, #40]	; 0x28
 800cf36:	9b03      	ldr	r3, [sp, #12]
 800cf38:	bfb8      	it	lt
 800cf3a:	2600      	movlt	r6, #0
 800cf3c:	2b00      	cmp	r3, #0
 800cf3e:	bfb7      	itett	lt
 800cf40:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800cf44:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800cf48:	1a9d      	sublt	r5, r3, r2
 800cf4a:	2300      	movlt	r3, #0
 800cf4c:	e734      	b.n	800cdb8 <_dtoa_r+0x720>
 800cf4e:	9e07      	ldr	r6, [sp, #28]
 800cf50:	9d04      	ldr	r5, [sp, #16]
 800cf52:	9f08      	ldr	r7, [sp, #32]
 800cf54:	e73b      	b.n	800cdce <_dtoa_r+0x736>
 800cf56:	9a07      	ldr	r2, [sp, #28]
 800cf58:	e767      	b.n	800ce2a <_dtoa_r+0x792>
 800cf5a:	9b06      	ldr	r3, [sp, #24]
 800cf5c:	2b01      	cmp	r3, #1
 800cf5e:	dc18      	bgt.n	800cf92 <_dtoa_r+0x8fa>
 800cf60:	f1ba 0f00 	cmp.w	sl, #0
 800cf64:	d115      	bne.n	800cf92 <_dtoa_r+0x8fa>
 800cf66:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800cf6a:	b993      	cbnz	r3, 800cf92 <_dtoa_r+0x8fa>
 800cf6c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800cf70:	0d1b      	lsrs	r3, r3, #20
 800cf72:	051b      	lsls	r3, r3, #20
 800cf74:	b183      	cbz	r3, 800cf98 <_dtoa_r+0x900>
 800cf76:	9b04      	ldr	r3, [sp, #16]
 800cf78:	3301      	adds	r3, #1
 800cf7a:	9304      	str	r3, [sp, #16]
 800cf7c:	9b05      	ldr	r3, [sp, #20]
 800cf7e:	3301      	adds	r3, #1
 800cf80:	9305      	str	r3, [sp, #20]
 800cf82:	f04f 0801 	mov.w	r8, #1
 800cf86:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cf88:	2b00      	cmp	r3, #0
 800cf8a:	f47f af6a 	bne.w	800ce62 <_dtoa_r+0x7ca>
 800cf8e:	2001      	movs	r0, #1
 800cf90:	e76f      	b.n	800ce72 <_dtoa_r+0x7da>
 800cf92:	f04f 0800 	mov.w	r8, #0
 800cf96:	e7f6      	b.n	800cf86 <_dtoa_r+0x8ee>
 800cf98:	4698      	mov	r8, r3
 800cf9a:	e7f4      	b.n	800cf86 <_dtoa_r+0x8ee>
 800cf9c:	f43f af7d 	beq.w	800ce9a <_dtoa_r+0x802>
 800cfa0:	4618      	mov	r0, r3
 800cfa2:	301c      	adds	r0, #28
 800cfa4:	e772      	b.n	800ce8c <_dtoa_r+0x7f4>
 800cfa6:	9b03      	ldr	r3, [sp, #12]
 800cfa8:	2b00      	cmp	r3, #0
 800cfaa:	dc37      	bgt.n	800d01c <_dtoa_r+0x984>
 800cfac:	9b06      	ldr	r3, [sp, #24]
 800cfae:	2b02      	cmp	r3, #2
 800cfb0:	dd34      	ble.n	800d01c <_dtoa_r+0x984>
 800cfb2:	9b03      	ldr	r3, [sp, #12]
 800cfb4:	9302      	str	r3, [sp, #8]
 800cfb6:	9b02      	ldr	r3, [sp, #8]
 800cfb8:	b96b      	cbnz	r3, 800cfd6 <_dtoa_r+0x93e>
 800cfba:	4631      	mov	r1, r6
 800cfbc:	2205      	movs	r2, #5
 800cfbe:	4620      	mov	r0, r4
 800cfc0:	f000 face 	bl	800d560 <__multadd>
 800cfc4:	4601      	mov	r1, r0
 800cfc6:	4606      	mov	r6, r0
 800cfc8:	ee18 0a10 	vmov	r0, s16
 800cfcc:	f000 fce8 	bl	800d9a0 <__mcmp>
 800cfd0:	2800      	cmp	r0, #0
 800cfd2:	f73f adbb 	bgt.w	800cb4c <_dtoa_r+0x4b4>
 800cfd6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cfd8:	9d01      	ldr	r5, [sp, #4]
 800cfda:	43db      	mvns	r3, r3
 800cfdc:	9300      	str	r3, [sp, #0]
 800cfde:	f04f 0800 	mov.w	r8, #0
 800cfe2:	4631      	mov	r1, r6
 800cfe4:	4620      	mov	r0, r4
 800cfe6:	f000 fa99 	bl	800d51c <_Bfree>
 800cfea:	2f00      	cmp	r7, #0
 800cfec:	f43f aea4 	beq.w	800cd38 <_dtoa_r+0x6a0>
 800cff0:	f1b8 0f00 	cmp.w	r8, #0
 800cff4:	d005      	beq.n	800d002 <_dtoa_r+0x96a>
 800cff6:	45b8      	cmp	r8, r7
 800cff8:	d003      	beq.n	800d002 <_dtoa_r+0x96a>
 800cffa:	4641      	mov	r1, r8
 800cffc:	4620      	mov	r0, r4
 800cffe:	f000 fa8d 	bl	800d51c <_Bfree>
 800d002:	4639      	mov	r1, r7
 800d004:	4620      	mov	r0, r4
 800d006:	f000 fa89 	bl	800d51c <_Bfree>
 800d00a:	e695      	b.n	800cd38 <_dtoa_r+0x6a0>
 800d00c:	2600      	movs	r6, #0
 800d00e:	4637      	mov	r7, r6
 800d010:	e7e1      	b.n	800cfd6 <_dtoa_r+0x93e>
 800d012:	9700      	str	r7, [sp, #0]
 800d014:	4637      	mov	r7, r6
 800d016:	e599      	b.n	800cb4c <_dtoa_r+0x4b4>
 800d018:	40240000 	.word	0x40240000
 800d01c:	9b08      	ldr	r3, [sp, #32]
 800d01e:	2b00      	cmp	r3, #0
 800d020:	f000 80ca 	beq.w	800d1b8 <_dtoa_r+0xb20>
 800d024:	9b03      	ldr	r3, [sp, #12]
 800d026:	9302      	str	r3, [sp, #8]
 800d028:	2d00      	cmp	r5, #0
 800d02a:	dd05      	ble.n	800d038 <_dtoa_r+0x9a0>
 800d02c:	4639      	mov	r1, r7
 800d02e:	462a      	mov	r2, r5
 800d030:	4620      	mov	r0, r4
 800d032:	f000 fc45 	bl	800d8c0 <__lshift>
 800d036:	4607      	mov	r7, r0
 800d038:	f1b8 0f00 	cmp.w	r8, #0
 800d03c:	d05b      	beq.n	800d0f6 <_dtoa_r+0xa5e>
 800d03e:	6879      	ldr	r1, [r7, #4]
 800d040:	4620      	mov	r0, r4
 800d042:	f000 fa2b 	bl	800d49c <_Balloc>
 800d046:	4605      	mov	r5, r0
 800d048:	b928      	cbnz	r0, 800d056 <_dtoa_r+0x9be>
 800d04a:	4b87      	ldr	r3, [pc, #540]	; (800d268 <_dtoa_r+0xbd0>)
 800d04c:	4602      	mov	r2, r0
 800d04e:	f240 21ea 	movw	r1, #746	; 0x2ea
 800d052:	f7ff bb3b 	b.w	800c6cc <_dtoa_r+0x34>
 800d056:	693a      	ldr	r2, [r7, #16]
 800d058:	3202      	adds	r2, #2
 800d05a:	0092      	lsls	r2, r2, #2
 800d05c:	f107 010c 	add.w	r1, r7, #12
 800d060:	300c      	adds	r0, #12
 800d062:	f000 fa0d 	bl	800d480 <memcpy>
 800d066:	2201      	movs	r2, #1
 800d068:	4629      	mov	r1, r5
 800d06a:	4620      	mov	r0, r4
 800d06c:	f000 fc28 	bl	800d8c0 <__lshift>
 800d070:	9b01      	ldr	r3, [sp, #4]
 800d072:	f103 0901 	add.w	r9, r3, #1
 800d076:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800d07a:	4413      	add	r3, r2
 800d07c:	9305      	str	r3, [sp, #20]
 800d07e:	f00a 0301 	and.w	r3, sl, #1
 800d082:	46b8      	mov	r8, r7
 800d084:	9304      	str	r3, [sp, #16]
 800d086:	4607      	mov	r7, r0
 800d088:	4631      	mov	r1, r6
 800d08a:	ee18 0a10 	vmov	r0, s16
 800d08e:	f7ff fa75 	bl	800c57c <quorem>
 800d092:	4641      	mov	r1, r8
 800d094:	9002      	str	r0, [sp, #8]
 800d096:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800d09a:	ee18 0a10 	vmov	r0, s16
 800d09e:	f000 fc7f 	bl	800d9a0 <__mcmp>
 800d0a2:	463a      	mov	r2, r7
 800d0a4:	9003      	str	r0, [sp, #12]
 800d0a6:	4631      	mov	r1, r6
 800d0a8:	4620      	mov	r0, r4
 800d0aa:	f000 fc95 	bl	800d9d8 <__mdiff>
 800d0ae:	68c2      	ldr	r2, [r0, #12]
 800d0b0:	f109 3bff 	add.w	fp, r9, #4294967295
 800d0b4:	4605      	mov	r5, r0
 800d0b6:	bb02      	cbnz	r2, 800d0fa <_dtoa_r+0xa62>
 800d0b8:	4601      	mov	r1, r0
 800d0ba:	ee18 0a10 	vmov	r0, s16
 800d0be:	f000 fc6f 	bl	800d9a0 <__mcmp>
 800d0c2:	4602      	mov	r2, r0
 800d0c4:	4629      	mov	r1, r5
 800d0c6:	4620      	mov	r0, r4
 800d0c8:	9207      	str	r2, [sp, #28]
 800d0ca:	f000 fa27 	bl	800d51c <_Bfree>
 800d0ce:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800d0d2:	ea43 0102 	orr.w	r1, r3, r2
 800d0d6:	9b04      	ldr	r3, [sp, #16]
 800d0d8:	430b      	orrs	r3, r1
 800d0da:	464d      	mov	r5, r9
 800d0dc:	d10f      	bne.n	800d0fe <_dtoa_r+0xa66>
 800d0de:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800d0e2:	d02a      	beq.n	800d13a <_dtoa_r+0xaa2>
 800d0e4:	9b03      	ldr	r3, [sp, #12]
 800d0e6:	2b00      	cmp	r3, #0
 800d0e8:	dd02      	ble.n	800d0f0 <_dtoa_r+0xa58>
 800d0ea:	9b02      	ldr	r3, [sp, #8]
 800d0ec:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800d0f0:	f88b a000 	strb.w	sl, [fp]
 800d0f4:	e775      	b.n	800cfe2 <_dtoa_r+0x94a>
 800d0f6:	4638      	mov	r0, r7
 800d0f8:	e7ba      	b.n	800d070 <_dtoa_r+0x9d8>
 800d0fa:	2201      	movs	r2, #1
 800d0fc:	e7e2      	b.n	800d0c4 <_dtoa_r+0xa2c>
 800d0fe:	9b03      	ldr	r3, [sp, #12]
 800d100:	2b00      	cmp	r3, #0
 800d102:	db04      	blt.n	800d10e <_dtoa_r+0xa76>
 800d104:	9906      	ldr	r1, [sp, #24]
 800d106:	430b      	orrs	r3, r1
 800d108:	9904      	ldr	r1, [sp, #16]
 800d10a:	430b      	orrs	r3, r1
 800d10c:	d122      	bne.n	800d154 <_dtoa_r+0xabc>
 800d10e:	2a00      	cmp	r2, #0
 800d110:	ddee      	ble.n	800d0f0 <_dtoa_r+0xa58>
 800d112:	ee18 1a10 	vmov	r1, s16
 800d116:	2201      	movs	r2, #1
 800d118:	4620      	mov	r0, r4
 800d11a:	f000 fbd1 	bl	800d8c0 <__lshift>
 800d11e:	4631      	mov	r1, r6
 800d120:	ee08 0a10 	vmov	s16, r0
 800d124:	f000 fc3c 	bl	800d9a0 <__mcmp>
 800d128:	2800      	cmp	r0, #0
 800d12a:	dc03      	bgt.n	800d134 <_dtoa_r+0xa9c>
 800d12c:	d1e0      	bne.n	800d0f0 <_dtoa_r+0xa58>
 800d12e:	f01a 0f01 	tst.w	sl, #1
 800d132:	d0dd      	beq.n	800d0f0 <_dtoa_r+0xa58>
 800d134:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800d138:	d1d7      	bne.n	800d0ea <_dtoa_r+0xa52>
 800d13a:	2339      	movs	r3, #57	; 0x39
 800d13c:	f88b 3000 	strb.w	r3, [fp]
 800d140:	462b      	mov	r3, r5
 800d142:	461d      	mov	r5, r3
 800d144:	3b01      	subs	r3, #1
 800d146:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800d14a:	2a39      	cmp	r2, #57	; 0x39
 800d14c:	d071      	beq.n	800d232 <_dtoa_r+0xb9a>
 800d14e:	3201      	adds	r2, #1
 800d150:	701a      	strb	r2, [r3, #0]
 800d152:	e746      	b.n	800cfe2 <_dtoa_r+0x94a>
 800d154:	2a00      	cmp	r2, #0
 800d156:	dd07      	ble.n	800d168 <_dtoa_r+0xad0>
 800d158:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800d15c:	d0ed      	beq.n	800d13a <_dtoa_r+0xaa2>
 800d15e:	f10a 0301 	add.w	r3, sl, #1
 800d162:	f88b 3000 	strb.w	r3, [fp]
 800d166:	e73c      	b.n	800cfe2 <_dtoa_r+0x94a>
 800d168:	9b05      	ldr	r3, [sp, #20]
 800d16a:	f809 ac01 	strb.w	sl, [r9, #-1]
 800d16e:	4599      	cmp	r9, r3
 800d170:	d047      	beq.n	800d202 <_dtoa_r+0xb6a>
 800d172:	ee18 1a10 	vmov	r1, s16
 800d176:	2300      	movs	r3, #0
 800d178:	220a      	movs	r2, #10
 800d17a:	4620      	mov	r0, r4
 800d17c:	f000 f9f0 	bl	800d560 <__multadd>
 800d180:	45b8      	cmp	r8, r7
 800d182:	ee08 0a10 	vmov	s16, r0
 800d186:	f04f 0300 	mov.w	r3, #0
 800d18a:	f04f 020a 	mov.w	r2, #10
 800d18e:	4641      	mov	r1, r8
 800d190:	4620      	mov	r0, r4
 800d192:	d106      	bne.n	800d1a2 <_dtoa_r+0xb0a>
 800d194:	f000 f9e4 	bl	800d560 <__multadd>
 800d198:	4680      	mov	r8, r0
 800d19a:	4607      	mov	r7, r0
 800d19c:	f109 0901 	add.w	r9, r9, #1
 800d1a0:	e772      	b.n	800d088 <_dtoa_r+0x9f0>
 800d1a2:	f000 f9dd 	bl	800d560 <__multadd>
 800d1a6:	4639      	mov	r1, r7
 800d1a8:	4680      	mov	r8, r0
 800d1aa:	2300      	movs	r3, #0
 800d1ac:	220a      	movs	r2, #10
 800d1ae:	4620      	mov	r0, r4
 800d1b0:	f000 f9d6 	bl	800d560 <__multadd>
 800d1b4:	4607      	mov	r7, r0
 800d1b6:	e7f1      	b.n	800d19c <_dtoa_r+0xb04>
 800d1b8:	9b03      	ldr	r3, [sp, #12]
 800d1ba:	9302      	str	r3, [sp, #8]
 800d1bc:	9d01      	ldr	r5, [sp, #4]
 800d1be:	ee18 0a10 	vmov	r0, s16
 800d1c2:	4631      	mov	r1, r6
 800d1c4:	f7ff f9da 	bl	800c57c <quorem>
 800d1c8:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800d1cc:	9b01      	ldr	r3, [sp, #4]
 800d1ce:	f805 ab01 	strb.w	sl, [r5], #1
 800d1d2:	1aea      	subs	r2, r5, r3
 800d1d4:	9b02      	ldr	r3, [sp, #8]
 800d1d6:	4293      	cmp	r3, r2
 800d1d8:	dd09      	ble.n	800d1ee <_dtoa_r+0xb56>
 800d1da:	ee18 1a10 	vmov	r1, s16
 800d1de:	2300      	movs	r3, #0
 800d1e0:	220a      	movs	r2, #10
 800d1e2:	4620      	mov	r0, r4
 800d1e4:	f000 f9bc 	bl	800d560 <__multadd>
 800d1e8:	ee08 0a10 	vmov	s16, r0
 800d1ec:	e7e7      	b.n	800d1be <_dtoa_r+0xb26>
 800d1ee:	9b02      	ldr	r3, [sp, #8]
 800d1f0:	2b00      	cmp	r3, #0
 800d1f2:	bfc8      	it	gt
 800d1f4:	461d      	movgt	r5, r3
 800d1f6:	9b01      	ldr	r3, [sp, #4]
 800d1f8:	bfd8      	it	le
 800d1fa:	2501      	movle	r5, #1
 800d1fc:	441d      	add	r5, r3
 800d1fe:	f04f 0800 	mov.w	r8, #0
 800d202:	ee18 1a10 	vmov	r1, s16
 800d206:	2201      	movs	r2, #1
 800d208:	4620      	mov	r0, r4
 800d20a:	f000 fb59 	bl	800d8c0 <__lshift>
 800d20e:	4631      	mov	r1, r6
 800d210:	ee08 0a10 	vmov	s16, r0
 800d214:	f000 fbc4 	bl	800d9a0 <__mcmp>
 800d218:	2800      	cmp	r0, #0
 800d21a:	dc91      	bgt.n	800d140 <_dtoa_r+0xaa8>
 800d21c:	d102      	bne.n	800d224 <_dtoa_r+0xb8c>
 800d21e:	f01a 0f01 	tst.w	sl, #1
 800d222:	d18d      	bne.n	800d140 <_dtoa_r+0xaa8>
 800d224:	462b      	mov	r3, r5
 800d226:	461d      	mov	r5, r3
 800d228:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800d22c:	2a30      	cmp	r2, #48	; 0x30
 800d22e:	d0fa      	beq.n	800d226 <_dtoa_r+0xb8e>
 800d230:	e6d7      	b.n	800cfe2 <_dtoa_r+0x94a>
 800d232:	9a01      	ldr	r2, [sp, #4]
 800d234:	429a      	cmp	r2, r3
 800d236:	d184      	bne.n	800d142 <_dtoa_r+0xaaa>
 800d238:	9b00      	ldr	r3, [sp, #0]
 800d23a:	3301      	adds	r3, #1
 800d23c:	9300      	str	r3, [sp, #0]
 800d23e:	2331      	movs	r3, #49	; 0x31
 800d240:	7013      	strb	r3, [r2, #0]
 800d242:	e6ce      	b.n	800cfe2 <_dtoa_r+0x94a>
 800d244:	4b09      	ldr	r3, [pc, #36]	; (800d26c <_dtoa_r+0xbd4>)
 800d246:	f7ff ba95 	b.w	800c774 <_dtoa_r+0xdc>
 800d24a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800d24c:	2b00      	cmp	r3, #0
 800d24e:	f47f aa6e 	bne.w	800c72e <_dtoa_r+0x96>
 800d252:	4b07      	ldr	r3, [pc, #28]	; (800d270 <_dtoa_r+0xbd8>)
 800d254:	f7ff ba8e 	b.w	800c774 <_dtoa_r+0xdc>
 800d258:	9b02      	ldr	r3, [sp, #8]
 800d25a:	2b00      	cmp	r3, #0
 800d25c:	dcae      	bgt.n	800d1bc <_dtoa_r+0xb24>
 800d25e:	9b06      	ldr	r3, [sp, #24]
 800d260:	2b02      	cmp	r3, #2
 800d262:	f73f aea8 	bgt.w	800cfb6 <_dtoa_r+0x91e>
 800d266:	e7a9      	b.n	800d1bc <_dtoa_r+0xb24>
 800d268:	0800ea3f 	.word	0x0800ea3f
 800d26c:	0800e99c 	.word	0x0800e99c
 800d270:	0800e9c0 	.word	0x0800e9c0

0800d274 <std>:
 800d274:	2300      	movs	r3, #0
 800d276:	b510      	push	{r4, lr}
 800d278:	4604      	mov	r4, r0
 800d27a:	e9c0 3300 	strd	r3, r3, [r0]
 800d27e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800d282:	6083      	str	r3, [r0, #8]
 800d284:	8181      	strh	r1, [r0, #12]
 800d286:	6643      	str	r3, [r0, #100]	; 0x64
 800d288:	81c2      	strh	r2, [r0, #14]
 800d28a:	6183      	str	r3, [r0, #24]
 800d28c:	4619      	mov	r1, r3
 800d28e:	2208      	movs	r2, #8
 800d290:	305c      	adds	r0, #92	; 0x5c
 800d292:	f7fe fce9 	bl	800bc68 <memset>
 800d296:	4b05      	ldr	r3, [pc, #20]	; (800d2ac <std+0x38>)
 800d298:	6263      	str	r3, [r4, #36]	; 0x24
 800d29a:	4b05      	ldr	r3, [pc, #20]	; (800d2b0 <std+0x3c>)
 800d29c:	62a3      	str	r3, [r4, #40]	; 0x28
 800d29e:	4b05      	ldr	r3, [pc, #20]	; (800d2b4 <std+0x40>)
 800d2a0:	62e3      	str	r3, [r4, #44]	; 0x2c
 800d2a2:	4b05      	ldr	r3, [pc, #20]	; (800d2b8 <std+0x44>)
 800d2a4:	6224      	str	r4, [r4, #32]
 800d2a6:	6323      	str	r3, [r4, #48]	; 0x30
 800d2a8:	bd10      	pop	{r4, pc}
 800d2aa:	bf00      	nop
 800d2ac:	0800e065 	.word	0x0800e065
 800d2b0:	0800e087 	.word	0x0800e087
 800d2b4:	0800e0bf 	.word	0x0800e0bf
 800d2b8:	0800e0e3 	.word	0x0800e0e3

0800d2bc <_cleanup_r>:
 800d2bc:	4901      	ldr	r1, [pc, #4]	; (800d2c4 <_cleanup_r+0x8>)
 800d2be:	f000 b8af 	b.w	800d420 <_fwalk_reent>
 800d2c2:	bf00      	nop
 800d2c4:	0800e3f9 	.word	0x0800e3f9

0800d2c8 <__sfmoreglue>:
 800d2c8:	b570      	push	{r4, r5, r6, lr}
 800d2ca:	2268      	movs	r2, #104	; 0x68
 800d2cc:	1e4d      	subs	r5, r1, #1
 800d2ce:	4355      	muls	r5, r2
 800d2d0:	460e      	mov	r6, r1
 800d2d2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800d2d6:	f000 fce7 	bl	800dca8 <_malloc_r>
 800d2da:	4604      	mov	r4, r0
 800d2dc:	b140      	cbz	r0, 800d2f0 <__sfmoreglue+0x28>
 800d2de:	2100      	movs	r1, #0
 800d2e0:	e9c0 1600 	strd	r1, r6, [r0]
 800d2e4:	300c      	adds	r0, #12
 800d2e6:	60a0      	str	r0, [r4, #8]
 800d2e8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800d2ec:	f7fe fcbc 	bl	800bc68 <memset>
 800d2f0:	4620      	mov	r0, r4
 800d2f2:	bd70      	pop	{r4, r5, r6, pc}

0800d2f4 <__sfp_lock_acquire>:
 800d2f4:	4801      	ldr	r0, [pc, #4]	; (800d2fc <__sfp_lock_acquire+0x8>)
 800d2f6:	f000 b8b8 	b.w	800d46a <__retarget_lock_acquire_recursive>
 800d2fa:	bf00      	nop
 800d2fc:	2000759d 	.word	0x2000759d

0800d300 <__sfp_lock_release>:
 800d300:	4801      	ldr	r0, [pc, #4]	; (800d308 <__sfp_lock_release+0x8>)
 800d302:	f000 b8b3 	b.w	800d46c <__retarget_lock_release_recursive>
 800d306:	bf00      	nop
 800d308:	2000759d 	.word	0x2000759d

0800d30c <__sinit_lock_acquire>:
 800d30c:	4801      	ldr	r0, [pc, #4]	; (800d314 <__sinit_lock_acquire+0x8>)
 800d30e:	f000 b8ac 	b.w	800d46a <__retarget_lock_acquire_recursive>
 800d312:	bf00      	nop
 800d314:	2000759e 	.word	0x2000759e

0800d318 <__sinit_lock_release>:
 800d318:	4801      	ldr	r0, [pc, #4]	; (800d320 <__sinit_lock_release+0x8>)
 800d31a:	f000 b8a7 	b.w	800d46c <__retarget_lock_release_recursive>
 800d31e:	bf00      	nop
 800d320:	2000759e 	.word	0x2000759e

0800d324 <__sinit>:
 800d324:	b510      	push	{r4, lr}
 800d326:	4604      	mov	r4, r0
 800d328:	f7ff fff0 	bl	800d30c <__sinit_lock_acquire>
 800d32c:	69a3      	ldr	r3, [r4, #24]
 800d32e:	b11b      	cbz	r3, 800d338 <__sinit+0x14>
 800d330:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d334:	f7ff bff0 	b.w	800d318 <__sinit_lock_release>
 800d338:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800d33c:	6523      	str	r3, [r4, #80]	; 0x50
 800d33e:	4b13      	ldr	r3, [pc, #76]	; (800d38c <__sinit+0x68>)
 800d340:	4a13      	ldr	r2, [pc, #76]	; (800d390 <__sinit+0x6c>)
 800d342:	681b      	ldr	r3, [r3, #0]
 800d344:	62a2      	str	r2, [r4, #40]	; 0x28
 800d346:	42a3      	cmp	r3, r4
 800d348:	bf04      	itt	eq
 800d34a:	2301      	moveq	r3, #1
 800d34c:	61a3      	streq	r3, [r4, #24]
 800d34e:	4620      	mov	r0, r4
 800d350:	f000 f820 	bl	800d394 <__sfp>
 800d354:	6060      	str	r0, [r4, #4]
 800d356:	4620      	mov	r0, r4
 800d358:	f000 f81c 	bl	800d394 <__sfp>
 800d35c:	60a0      	str	r0, [r4, #8]
 800d35e:	4620      	mov	r0, r4
 800d360:	f000 f818 	bl	800d394 <__sfp>
 800d364:	2200      	movs	r2, #0
 800d366:	60e0      	str	r0, [r4, #12]
 800d368:	2104      	movs	r1, #4
 800d36a:	6860      	ldr	r0, [r4, #4]
 800d36c:	f7ff ff82 	bl	800d274 <std>
 800d370:	68a0      	ldr	r0, [r4, #8]
 800d372:	2201      	movs	r2, #1
 800d374:	2109      	movs	r1, #9
 800d376:	f7ff ff7d 	bl	800d274 <std>
 800d37a:	68e0      	ldr	r0, [r4, #12]
 800d37c:	2202      	movs	r2, #2
 800d37e:	2112      	movs	r1, #18
 800d380:	f7ff ff78 	bl	800d274 <std>
 800d384:	2301      	movs	r3, #1
 800d386:	61a3      	str	r3, [r4, #24]
 800d388:	e7d2      	b.n	800d330 <__sinit+0xc>
 800d38a:	bf00      	nop
 800d38c:	0800e988 	.word	0x0800e988
 800d390:	0800d2bd 	.word	0x0800d2bd

0800d394 <__sfp>:
 800d394:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d396:	4607      	mov	r7, r0
 800d398:	f7ff ffac 	bl	800d2f4 <__sfp_lock_acquire>
 800d39c:	4b1e      	ldr	r3, [pc, #120]	; (800d418 <__sfp+0x84>)
 800d39e:	681e      	ldr	r6, [r3, #0]
 800d3a0:	69b3      	ldr	r3, [r6, #24]
 800d3a2:	b913      	cbnz	r3, 800d3aa <__sfp+0x16>
 800d3a4:	4630      	mov	r0, r6
 800d3a6:	f7ff ffbd 	bl	800d324 <__sinit>
 800d3aa:	3648      	adds	r6, #72	; 0x48
 800d3ac:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800d3b0:	3b01      	subs	r3, #1
 800d3b2:	d503      	bpl.n	800d3bc <__sfp+0x28>
 800d3b4:	6833      	ldr	r3, [r6, #0]
 800d3b6:	b30b      	cbz	r3, 800d3fc <__sfp+0x68>
 800d3b8:	6836      	ldr	r6, [r6, #0]
 800d3ba:	e7f7      	b.n	800d3ac <__sfp+0x18>
 800d3bc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800d3c0:	b9d5      	cbnz	r5, 800d3f8 <__sfp+0x64>
 800d3c2:	4b16      	ldr	r3, [pc, #88]	; (800d41c <__sfp+0x88>)
 800d3c4:	60e3      	str	r3, [r4, #12]
 800d3c6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800d3ca:	6665      	str	r5, [r4, #100]	; 0x64
 800d3cc:	f000 f84c 	bl	800d468 <__retarget_lock_init_recursive>
 800d3d0:	f7ff ff96 	bl	800d300 <__sfp_lock_release>
 800d3d4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800d3d8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800d3dc:	6025      	str	r5, [r4, #0]
 800d3de:	61a5      	str	r5, [r4, #24]
 800d3e0:	2208      	movs	r2, #8
 800d3e2:	4629      	mov	r1, r5
 800d3e4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800d3e8:	f7fe fc3e 	bl	800bc68 <memset>
 800d3ec:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800d3f0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800d3f4:	4620      	mov	r0, r4
 800d3f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d3f8:	3468      	adds	r4, #104	; 0x68
 800d3fa:	e7d9      	b.n	800d3b0 <__sfp+0x1c>
 800d3fc:	2104      	movs	r1, #4
 800d3fe:	4638      	mov	r0, r7
 800d400:	f7ff ff62 	bl	800d2c8 <__sfmoreglue>
 800d404:	4604      	mov	r4, r0
 800d406:	6030      	str	r0, [r6, #0]
 800d408:	2800      	cmp	r0, #0
 800d40a:	d1d5      	bne.n	800d3b8 <__sfp+0x24>
 800d40c:	f7ff ff78 	bl	800d300 <__sfp_lock_release>
 800d410:	230c      	movs	r3, #12
 800d412:	603b      	str	r3, [r7, #0]
 800d414:	e7ee      	b.n	800d3f4 <__sfp+0x60>
 800d416:	bf00      	nop
 800d418:	0800e988 	.word	0x0800e988
 800d41c:	ffff0001 	.word	0xffff0001

0800d420 <_fwalk_reent>:
 800d420:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d424:	4606      	mov	r6, r0
 800d426:	4688      	mov	r8, r1
 800d428:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800d42c:	2700      	movs	r7, #0
 800d42e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800d432:	f1b9 0901 	subs.w	r9, r9, #1
 800d436:	d505      	bpl.n	800d444 <_fwalk_reent+0x24>
 800d438:	6824      	ldr	r4, [r4, #0]
 800d43a:	2c00      	cmp	r4, #0
 800d43c:	d1f7      	bne.n	800d42e <_fwalk_reent+0xe>
 800d43e:	4638      	mov	r0, r7
 800d440:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d444:	89ab      	ldrh	r3, [r5, #12]
 800d446:	2b01      	cmp	r3, #1
 800d448:	d907      	bls.n	800d45a <_fwalk_reent+0x3a>
 800d44a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800d44e:	3301      	adds	r3, #1
 800d450:	d003      	beq.n	800d45a <_fwalk_reent+0x3a>
 800d452:	4629      	mov	r1, r5
 800d454:	4630      	mov	r0, r6
 800d456:	47c0      	blx	r8
 800d458:	4307      	orrs	r7, r0
 800d45a:	3568      	adds	r5, #104	; 0x68
 800d45c:	e7e9      	b.n	800d432 <_fwalk_reent+0x12>
	...

0800d460 <_localeconv_r>:
 800d460:	4800      	ldr	r0, [pc, #0]	; (800d464 <_localeconv_r+0x4>)
 800d462:	4770      	bx	lr
 800d464:	20000184 	.word	0x20000184

0800d468 <__retarget_lock_init_recursive>:
 800d468:	4770      	bx	lr

0800d46a <__retarget_lock_acquire_recursive>:
 800d46a:	4770      	bx	lr

0800d46c <__retarget_lock_release_recursive>:
 800d46c:	4770      	bx	lr
	...

0800d470 <malloc>:
 800d470:	4b02      	ldr	r3, [pc, #8]	; (800d47c <malloc+0xc>)
 800d472:	4601      	mov	r1, r0
 800d474:	6818      	ldr	r0, [r3, #0]
 800d476:	f000 bc17 	b.w	800dca8 <_malloc_r>
 800d47a:	bf00      	nop
 800d47c:	20000030 	.word	0x20000030

0800d480 <memcpy>:
 800d480:	440a      	add	r2, r1
 800d482:	4291      	cmp	r1, r2
 800d484:	f100 33ff 	add.w	r3, r0, #4294967295
 800d488:	d100      	bne.n	800d48c <memcpy+0xc>
 800d48a:	4770      	bx	lr
 800d48c:	b510      	push	{r4, lr}
 800d48e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d492:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d496:	4291      	cmp	r1, r2
 800d498:	d1f9      	bne.n	800d48e <memcpy+0xe>
 800d49a:	bd10      	pop	{r4, pc}

0800d49c <_Balloc>:
 800d49c:	b570      	push	{r4, r5, r6, lr}
 800d49e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800d4a0:	4604      	mov	r4, r0
 800d4a2:	460d      	mov	r5, r1
 800d4a4:	b976      	cbnz	r6, 800d4c4 <_Balloc+0x28>
 800d4a6:	2010      	movs	r0, #16
 800d4a8:	f7ff ffe2 	bl	800d470 <malloc>
 800d4ac:	4602      	mov	r2, r0
 800d4ae:	6260      	str	r0, [r4, #36]	; 0x24
 800d4b0:	b920      	cbnz	r0, 800d4bc <_Balloc+0x20>
 800d4b2:	4b18      	ldr	r3, [pc, #96]	; (800d514 <_Balloc+0x78>)
 800d4b4:	4818      	ldr	r0, [pc, #96]	; (800d518 <_Balloc+0x7c>)
 800d4b6:	2166      	movs	r1, #102	; 0x66
 800d4b8:	f000 feea 	bl	800e290 <__assert_func>
 800d4bc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800d4c0:	6006      	str	r6, [r0, #0]
 800d4c2:	60c6      	str	r6, [r0, #12]
 800d4c4:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800d4c6:	68f3      	ldr	r3, [r6, #12]
 800d4c8:	b183      	cbz	r3, 800d4ec <_Balloc+0x50>
 800d4ca:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d4cc:	68db      	ldr	r3, [r3, #12]
 800d4ce:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800d4d2:	b9b8      	cbnz	r0, 800d504 <_Balloc+0x68>
 800d4d4:	2101      	movs	r1, #1
 800d4d6:	fa01 f605 	lsl.w	r6, r1, r5
 800d4da:	1d72      	adds	r2, r6, #5
 800d4dc:	0092      	lsls	r2, r2, #2
 800d4de:	4620      	mov	r0, r4
 800d4e0:	f000 fb60 	bl	800dba4 <_calloc_r>
 800d4e4:	b160      	cbz	r0, 800d500 <_Balloc+0x64>
 800d4e6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800d4ea:	e00e      	b.n	800d50a <_Balloc+0x6e>
 800d4ec:	2221      	movs	r2, #33	; 0x21
 800d4ee:	2104      	movs	r1, #4
 800d4f0:	4620      	mov	r0, r4
 800d4f2:	f000 fb57 	bl	800dba4 <_calloc_r>
 800d4f6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d4f8:	60f0      	str	r0, [r6, #12]
 800d4fa:	68db      	ldr	r3, [r3, #12]
 800d4fc:	2b00      	cmp	r3, #0
 800d4fe:	d1e4      	bne.n	800d4ca <_Balloc+0x2e>
 800d500:	2000      	movs	r0, #0
 800d502:	bd70      	pop	{r4, r5, r6, pc}
 800d504:	6802      	ldr	r2, [r0, #0]
 800d506:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800d50a:	2300      	movs	r3, #0
 800d50c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800d510:	e7f7      	b.n	800d502 <_Balloc+0x66>
 800d512:	bf00      	nop
 800d514:	0800e9cd 	.word	0x0800e9cd
 800d518:	0800eab0 	.word	0x0800eab0

0800d51c <_Bfree>:
 800d51c:	b570      	push	{r4, r5, r6, lr}
 800d51e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800d520:	4605      	mov	r5, r0
 800d522:	460c      	mov	r4, r1
 800d524:	b976      	cbnz	r6, 800d544 <_Bfree+0x28>
 800d526:	2010      	movs	r0, #16
 800d528:	f7ff ffa2 	bl	800d470 <malloc>
 800d52c:	4602      	mov	r2, r0
 800d52e:	6268      	str	r0, [r5, #36]	; 0x24
 800d530:	b920      	cbnz	r0, 800d53c <_Bfree+0x20>
 800d532:	4b09      	ldr	r3, [pc, #36]	; (800d558 <_Bfree+0x3c>)
 800d534:	4809      	ldr	r0, [pc, #36]	; (800d55c <_Bfree+0x40>)
 800d536:	218a      	movs	r1, #138	; 0x8a
 800d538:	f000 feaa 	bl	800e290 <__assert_func>
 800d53c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800d540:	6006      	str	r6, [r0, #0]
 800d542:	60c6      	str	r6, [r0, #12]
 800d544:	b13c      	cbz	r4, 800d556 <_Bfree+0x3a>
 800d546:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800d548:	6862      	ldr	r2, [r4, #4]
 800d54a:	68db      	ldr	r3, [r3, #12]
 800d54c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800d550:	6021      	str	r1, [r4, #0]
 800d552:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800d556:	bd70      	pop	{r4, r5, r6, pc}
 800d558:	0800e9cd 	.word	0x0800e9cd
 800d55c:	0800eab0 	.word	0x0800eab0

0800d560 <__multadd>:
 800d560:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d564:	690d      	ldr	r5, [r1, #16]
 800d566:	4607      	mov	r7, r0
 800d568:	460c      	mov	r4, r1
 800d56a:	461e      	mov	r6, r3
 800d56c:	f101 0c14 	add.w	ip, r1, #20
 800d570:	2000      	movs	r0, #0
 800d572:	f8dc 3000 	ldr.w	r3, [ip]
 800d576:	b299      	uxth	r1, r3
 800d578:	fb02 6101 	mla	r1, r2, r1, r6
 800d57c:	0c1e      	lsrs	r6, r3, #16
 800d57e:	0c0b      	lsrs	r3, r1, #16
 800d580:	fb02 3306 	mla	r3, r2, r6, r3
 800d584:	b289      	uxth	r1, r1
 800d586:	3001      	adds	r0, #1
 800d588:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800d58c:	4285      	cmp	r5, r0
 800d58e:	f84c 1b04 	str.w	r1, [ip], #4
 800d592:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800d596:	dcec      	bgt.n	800d572 <__multadd+0x12>
 800d598:	b30e      	cbz	r6, 800d5de <__multadd+0x7e>
 800d59a:	68a3      	ldr	r3, [r4, #8]
 800d59c:	42ab      	cmp	r3, r5
 800d59e:	dc19      	bgt.n	800d5d4 <__multadd+0x74>
 800d5a0:	6861      	ldr	r1, [r4, #4]
 800d5a2:	4638      	mov	r0, r7
 800d5a4:	3101      	adds	r1, #1
 800d5a6:	f7ff ff79 	bl	800d49c <_Balloc>
 800d5aa:	4680      	mov	r8, r0
 800d5ac:	b928      	cbnz	r0, 800d5ba <__multadd+0x5a>
 800d5ae:	4602      	mov	r2, r0
 800d5b0:	4b0c      	ldr	r3, [pc, #48]	; (800d5e4 <__multadd+0x84>)
 800d5b2:	480d      	ldr	r0, [pc, #52]	; (800d5e8 <__multadd+0x88>)
 800d5b4:	21b5      	movs	r1, #181	; 0xb5
 800d5b6:	f000 fe6b 	bl	800e290 <__assert_func>
 800d5ba:	6922      	ldr	r2, [r4, #16]
 800d5bc:	3202      	adds	r2, #2
 800d5be:	f104 010c 	add.w	r1, r4, #12
 800d5c2:	0092      	lsls	r2, r2, #2
 800d5c4:	300c      	adds	r0, #12
 800d5c6:	f7ff ff5b 	bl	800d480 <memcpy>
 800d5ca:	4621      	mov	r1, r4
 800d5cc:	4638      	mov	r0, r7
 800d5ce:	f7ff ffa5 	bl	800d51c <_Bfree>
 800d5d2:	4644      	mov	r4, r8
 800d5d4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800d5d8:	3501      	adds	r5, #1
 800d5da:	615e      	str	r6, [r3, #20]
 800d5dc:	6125      	str	r5, [r4, #16]
 800d5de:	4620      	mov	r0, r4
 800d5e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d5e4:	0800ea3f 	.word	0x0800ea3f
 800d5e8:	0800eab0 	.word	0x0800eab0

0800d5ec <__hi0bits>:
 800d5ec:	0c03      	lsrs	r3, r0, #16
 800d5ee:	041b      	lsls	r3, r3, #16
 800d5f0:	b9d3      	cbnz	r3, 800d628 <__hi0bits+0x3c>
 800d5f2:	0400      	lsls	r0, r0, #16
 800d5f4:	2310      	movs	r3, #16
 800d5f6:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800d5fa:	bf04      	itt	eq
 800d5fc:	0200      	lsleq	r0, r0, #8
 800d5fe:	3308      	addeq	r3, #8
 800d600:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800d604:	bf04      	itt	eq
 800d606:	0100      	lsleq	r0, r0, #4
 800d608:	3304      	addeq	r3, #4
 800d60a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800d60e:	bf04      	itt	eq
 800d610:	0080      	lsleq	r0, r0, #2
 800d612:	3302      	addeq	r3, #2
 800d614:	2800      	cmp	r0, #0
 800d616:	db05      	blt.n	800d624 <__hi0bits+0x38>
 800d618:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800d61c:	f103 0301 	add.w	r3, r3, #1
 800d620:	bf08      	it	eq
 800d622:	2320      	moveq	r3, #32
 800d624:	4618      	mov	r0, r3
 800d626:	4770      	bx	lr
 800d628:	2300      	movs	r3, #0
 800d62a:	e7e4      	b.n	800d5f6 <__hi0bits+0xa>

0800d62c <__lo0bits>:
 800d62c:	6803      	ldr	r3, [r0, #0]
 800d62e:	f013 0207 	ands.w	r2, r3, #7
 800d632:	4601      	mov	r1, r0
 800d634:	d00b      	beq.n	800d64e <__lo0bits+0x22>
 800d636:	07da      	lsls	r2, r3, #31
 800d638:	d423      	bmi.n	800d682 <__lo0bits+0x56>
 800d63a:	0798      	lsls	r0, r3, #30
 800d63c:	bf49      	itett	mi
 800d63e:	085b      	lsrmi	r3, r3, #1
 800d640:	089b      	lsrpl	r3, r3, #2
 800d642:	2001      	movmi	r0, #1
 800d644:	600b      	strmi	r3, [r1, #0]
 800d646:	bf5c      	itt	pl
 800d648:	600b      	strpl	r3, [r1, #0]
 800d64a:	2002      	movpl	r0, #2
 800d64c:	4770      	bx	lr
 800d64e:	b298      	uxth	r0, r3
 800d650:	b9a8      	cbnz	r0, 800d67e <__lo0bits+0x52>
 800d652:	0c1b      	lsrs	r3, r3, #16
 800d654:	2010      	movs	r0, #16
 800d656:	b2da      	uxtb	r2, r3
 800d658:	b90a      	cbnz	r2, 800d65e <__lo0bits+0x32>
 800d65a:	3008      	adds	r0, #8
 800d65c:	0a1b      	lsrs	r3, r3, #8
 800d65e:	071a      	lsls	r2, r3, #28
 800d660:	bf04      	itt	eq
 800d662:	091b      	lsreq	r3, r3, #4
 800d664:	3004      	addeq	r0, #4
 800d666:	079a      	lsls	r2, r3, #30
 800d668:	bf04      	itt	eq
 800d66a:	089b      	lsreq	r3, r3, #2
 800d66c:	3002      	addeq	r0, #2
 800d66e:	07da      	lsls	r2, r3, #31
 800d670:	d403      	bmi.n	800d67a <__lo0bits+0x4e>
 800d672:	085b      	lsrs	r3, r3, #1
 800d674:	f100 0001 	add.w	r0, r0, #1
 800d678:	d005      	beq.n	800d686 <__lo0bits+0x5a>
 800d67a:	600b      	str	r3, [r1, #0]
 800d67c:	4770      	bx	lr
 800d67e:	4610      	mov	r0, r2
 800d680:	e7e9      	b.n	800d656 <__lo0bits+0x2a>
 800d682:	2000      	movs	r0, #0
 800d684:	4770      	bx	lr
 800d686:	2020      	movs	r0, #32
 800d688:	4770      	bx	lr
	...

0800d68c <__i2b>:
 800d68c:	b510      	push	{r4, lr}
 800d68e:	460c      	mov	r4, r1
 800d690:	2101      	movs	r1, #1
 800d692:	f7ff ff03 	bl	800d49c <_Balloc>
 800d696:	4602      	mov	r2, r0
 800d698:	b928      	cbnz	r0, 800d6a6 <__i2b+0x1a>
 800d69a:	4b05      	ldr	r3, [pc, #20]	; (800d6b0 <__i2b+0x24>)
 800d69c:	4805      	ldr	r0, [pc, #20]	; (800d6b4 <__i2b+0x28>)
 800d69e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800d6a2:	f000 fdf5 	bl	800e290 <__assert_func>
 800d6a6:	2301      	movs	r3, #1
 800d6a8:	6144      	str	r4, [r0, #20]
 800d6aa:	6103      	str	r3, [r0, #16]
 800d6ac:	bd10      	pop	{r4, pc}
 800d6ae:	bf00      	nop
 800d6b0:	0800ea3f 	.word	0x0800ea3f
 800d6b4:	0800eab0 	.word	0x0800eab0

0800d6b8 <__multiply>:
 800d6b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d6bc:	4691      	mov	r9, r2
 800d6be:	690a      	ldr	r2, [r1, #16]
 800d6c0:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800d6c4:	429a      	cmp	r2, r3
 800d6c6:	bfb8      	it	lt
 800d6c8:	460b      	movlt	r3, r1
 800d6ca:	460c      	mov	r4, r1
 800d6cc:	bfbc      	itt	lt
 800d6ce:	464c      	movlt	r4, r9
 800d6d0:	4699      	movlt	r9, r3
 800d6d2:	6927      	ldr	r7, [r4, #16]
 800d6d4:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800d6d8:	68a3      	ldr	r3, [r4, #8]
 800d6da:	6861      	ldr	r1, [r4, #4]
 800d6dc:	eb07 060a 	add.w	r6, r7, sl
 800d6e0:	42b3      	cmp	r3, r6
 800d6e2:	b085      	sub	sp, #20
 800d6e4:	bfb8      	it	lt
 800d6e6:	3101      	addlt	r1, #1
 800d6e8:	f7ff fed8 	bl	800d49c <_Balloc>
 800d6ec:	b930      	cbnz	r0, 800d6fc <__multiply+0x44>
 800d6ee:	4602      	mov	r2, r0
 800d6f0:	4b44      	ldr	r3, [pc, #272]	; (800d804 <__multiply+0x14c>)
 800d6f2:	4845      	ldr	r0, [pc, #276]	; (800d808 <__multiply+0x150>)
 800d6f4:	f240 115d 	movw	r1, #349	; 0x15d
 800d6f8:	f000 fdca 	bl	800e290 <__assert_func>
 800d6fc:	f100 0514 	add.w	r5, r0, #20
 800d700:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800d704:	462b      	mov	r3, r5
 800d706:	2200      	movs	r2, #0
 800d708:	4543      	cmp	r3, r8
 800d70a:	d321      	bcc.n	800d750 <__multiply+0x98>
 800d70c:	f104 0314 	add.w	r3, r4, #20
 800d710:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800d714:	f109 0314 	add.w	r3, r9, #20
 800d718:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800d71c:	9202      	str	r2, [sp, #8]
 800d71e:	1b3a      	subs	r2, r7, r4
 800d720:	3a15      	subs	r2, #21
 800d722:	f022 0203 	bic.w	r2, r2, #3
 800d726:	3204      	adds	r2, #4
 800d728:	f104 0115 	add.w	r1, r4, #21
 800d72c:	428f      	cmp	r7, r1
 800d72e:	bf38      	it	cc
 800d730:	2204      	movcc	r2, #4
 800d732:	9201      	str	r2, [sp, #4]
 800d734:	9a02      	ldr	r2, [sp, #8]
 800d736:	9303      	str	r3, [sp, #12]
 800d738:	429a      	cmp	r2, r3
 800d73a:	d80c      	bhi.n	800d756 <__multiply+0x9e>
 800d73c:	2e00      	cmp	r6, #0
 800d73e:	dd03      	ble.n	800d748 <__multiply+0x90>
 800d740:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800d744:	2b00      	cmp	r3, #0
 800d746:	d05a      	beq.n	800d7fe <__multiply+0x146>
 800d748:	6106      	str	r6, [r0, #16]
 800d74a:	b005      	add	sp, #20
 800d74c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d750:	f843 2b04 	str.w	r2, [r3], #4
 800d754:	e7d8      	b.n	800d708 <__multiply+0x50>
 800d756:	f8b3 a000 	ldrh.w	sl, [r3]
 800d75a:	f1ba 0f00 	cmp.w	sl, #0
 800d75e:	d024      	beq.n	800d7aa <__multiply+0xf2>
 800d760:	f104 0e14 	add.w	lr, r4, #20
 800d764:	46a9      	mov	r9, r5
 800d766:	f04f 0c00 	mov.w	ip, #0
 800d76a:	f85e 2b04 	ldr.w	r2, [lr], #4
 800d76e:	f8d9 1000 	ldr.w	r1, [r9]
 800d772:	fa1f fb82 	uxth.w	fp, r2
 800d776:	b289      	uxth	r1, r1
 800d778:	fb0a 110b 	mla	r1, sl, fp, r1
 800d77c:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800d780:	f8d9 2000 	ldr.w	r2, [r9]
 800d784:	4461      	add	r1, ip
 800d786:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800d78a:	fb0a c20b 	mla	r2, sl, fp, ip
 800d78e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800d792:	b289      	uxth	r1, r1
 800d794:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800d798:	4577      	cmp	r7, lr
 800d79a:	f849 1b04 	str.w	r1, [r9], #4
 800d79e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800d7a2:	d8e2      	bhi.n	800d76a <__multiply+0xb2>
 800d7a4:	9a01      	ldr	r2, [sp, #4]
 800d7a6:	f845 c002 	str.w	ip, [r5, r2]
 800d7aa:	9a03      	ldr	r2, [sp, #12]
 800d7ac:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800d7b0:	3304      	adds	r3, #4
 800d7b2:	f1b9 0f00 	cmp.w	r9, #0
 800d7b6:	d020      	beq.n	800d7fa <__multiply+0x142>
 800d7b8:	6829      	ldr	r1, [r5, #0]
 800d7ba:	f104 0c14 	add.w	ip, r4, #20
 800d7be:	46ae      	mov	lr, r5
 800d7c0:	f04f 0a00 	mov.w	sl, #0
 800d7c4:	f8bc b000 	ldrh.w	fp, [ip]
 800d7c8:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800d7cc:	fb09 220b 	mla	r2, r9, fp, r2
 800d7d0:	4492      	add	sl, r2
 800d7d2:	b289      	uxth	r1, r1
 800d7d4:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800d7d8:	f84e 1b04 	str.w	r1, [lr], #4
 800d7dc:	f85c 2b04 	ldr.w	r2, [ip], #4
 800d7e0:	f8be 1000 	ldrh.w	r1, [lr]
 800d7e4:	0c12      	lsrs	r2, r2, #16
 800d7e6:	fb09 1102 	mla	r1, r9, r2, r1
 800d7ea:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800d7ee:	4567      	cmp	r7, ip
 800d7f0:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800d7f4:	d8e6      	bhi.n	800d7c4 <__multiply+0x10c>
 800d7f6:	9a01      	ldr	r2, [sp, #4]
 800d7f8:	50a9      	str	r1, [r5, r2]
 800d7fa:	3504      	adds	r5, #4
 800d7fc:	e79a      	b.n	800d734 <__multiply+0x7c>
 800d7fe:	3e01      	subs	r6, #1
 800d800:	e79c      	b.n	800d73c <__multiply+0x84>
 800d802:	bf00      	nop
 800d804:	0800ea3f 	.word	0x0800ea3f
 800d808:	0800eab0 	.word	0x0800eab0

0800d80c <__pow5mult>:
 800d80c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d810:	4615      	mov	r5, r2
 800d812:	f012 0203 	ands.w	r2, r2, #3
 800d816:	4606      	mov	r6, r0
 800d818:	460f      	mov	r7, r1
 800d81a:	d007      	beq.n	800d82c <__pow5mult+0x20>
 800d81c:	4c25      	ldr	r4, [pc, #148]	; (800d8b4 <__pow5mult+0xa8>)
 800d81e:	3a01      	subs	r2, #1
 800d820:	2300      	movs	r3, #0
 800d822:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800d826:	f7ff fe9b 	bl	800d560 <__multadd>
 800d82a:	4607      	mov	r7, r0
 800d82c:	10ad      	asrs	r5, r5, #2
 800d82e:	d03d      	beq.n	800d8ac <__pow5mult+0xa0>
 800d830:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800d832:	b97c      	cbnz	r4, 800d854 <__pow5mult+0x48>
 800d834:	2010      	movs	r0, #16
 800d836:	f7ff fe1b 	bl	800d470 <malloc>
 800d83a:	4602      	mov	r2, r0
 800d83c:	6270      	str	r0, [r6, #36]	; 0x24
 800d83e:	b928      	cbnz	r0, 800d84c <__pow5mult+0x40>
 800d840:	4b1d      	ldr	r3, [pc, #116]	; (800d8b8 <__pow5mult+0xac>)
 800d842:	481e      	ldr	r0, [pc, #120]	; (800d8bc <__pow5mult+0xb0>)
 800d844:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800d848:	f000 fd22 	bl	800e290 <__assert_func>
 800d84c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800d850:	6004      	str	r4, [r0, #0]
 800d852:	60c4      	str	r4, [r0, #12]
 800d854:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800d858:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800d85c:	b94c      	cbnz	r4, 800d872 <__pow5mult+0x66>
 800d85e:	f240 2171 	movw	r1, #625	; 0x271
 800d862:	4630      	mov	r0, r6
 800d864:	f7ff ff12 	bl	800d68c <__i2b>
 800d868:	2300      	movs	r3, #0
 800d86a:	f8c8 0008 	str.w	r0, [r8, #8]
 800d86e:	4604      	mov	r4, r0
 800d870:	6003      	str	r3, [r0, #0]
 800d872:	f04f 0900 	mov.w	r9, #0
 800d876:	07eb      	lsls	r3, r5, #31
 800d878:	d50a      	bpl.n	800d890 <__pow5mult+0x84>
 800d87a:	4639      	mov	r1, r7
 800d87c:	4622      	mov	r2, r4
 800d87e:	4630      	mov	r0, r6
 800d880:	f7ff ff1a 	bl	800d6b8 <__multiply>
 800d884:	4639      	mov	r1, r7
 800d886:	4680      	mov	r8, r0
 800d888:	4630      	mov	r0, r6
 800d88a:	f7ff fe47 	bl	800d51c <_Bfree>
 800d88e:	4647      	mov	r7, r8
 800d890:	106d      	asrs	r5, r5, #1
 800d892:	d00b      	beq.n	800d8ac <__pow5mult+0xa0>
 800d894:	6820      	ldr	r0, [r4, #0]
 800d896:	b938      	cbnz	r0, 800d8a8 <__pow5mult+0x9c>
 800d898:	4622      	mov	r2, r4
 800d89a:	4621      	mov	r1, r4
 800d89c:	4630      	mov	r0, r6
 800d89e:	f7ff ff0b 	bl	800d6b8 <__multiply>
 800d8a2:	6020      	str	r0, [r4, #0]
 800d8a4:	f8c0 9000 	str.w	r9, [r0]
 800d8a8:	4604      	mov	r4, r0
 800d8aa:	e7e4      	b.n	800d876 <__pow5mult+0x6a>
 800d8ac:	4638      	mov	r0, r7
 800d8ae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d8b2:	bf00      	nop
 800d8b4:	0800ec00 	.word	0x0800ec00
 800d8b8:	0800e9cd 	.word	0x0800e9cd
 800d8bc:	0800eab0 	.word	0x0800eab0

0800d8c0 <__lshift>:
 800d8c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d8c4:	460c      	mov	r4, r1
 800d8c6:	6849      	ldr	r1, [r1, #4]
 800d8c8:	6923      	ldr	r3, [r4, #16]
 800d8ca:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800d8ce:	68a3      	ldr	r3, [r4, #8]
 800d8d0:	4607      	mov	r7, r0
 800d8d2:	4691      	mov	r9, r2
 800d8d4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800d8d8:	f108 0601 	add.w	r6, r8, #1
 800d8dc:	42b3      	cmp	r3, r6
 800d8de:	db0b      	blt.n	800d8f8 <__lshift+0x38>
 800d8e0:	4638      	mov	r0, r7
 800d8e2:	f7ff fddb 	bl	800d49c <_Balloc>
 800d8e6:	4605      	mov	r5, r0
 800d8e8:	b948      	cbnz	r0, 800d8fe <__lshift+0x3e>
 800d8ea:	4602      	mov	r2, r0
 800d8ec:	4b2a      	ldr	r3, [pc, #168]	; (800d998 <__lshift+0xd8>)
 800d8ee:	482b      	ldr	r0, [pc, #172]	; (800d99c <__lshift+0xdc>)
 800d8f0:	f240 11d9 	movw	r1, #473	; 0x1d9
 800d8f4:	f000 fccc 	bl	800e290 <__assert_func>
 800d8f8:	3101      	adds	r1, #1
 800d8fa:	005b      	lsls	r3, r3, #1
 800d8fc:	e7ee      	b.n	800d8dc <__lshift+0x1c>
 800d8fe:	2300      	movs	r3, #0
 800d900:	f100 0114 	add.w	r1, r0, #20
 800d904:	f100 0210 	add.w	r2, r0, #16
 800d908:	4618      	mov	r0, r3
 800d90a:	4553      	cmp	r3, sl
 800d90c:	db37      	blt.n	800d97e <__lshift+0xbe>
 800d90e:	6920      	ldr	r0, [r4, #16]
 800d910:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800d914:	f104 0314 	add.w	r3, r4, #20
 800d918:	f019 091f 	ands.w	r9, r9, #31
 800d91c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800d920:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800d924:	d02f      	beq.n	800d986 <__lshift+0xc6>
 800d926:	f1c9 0e20 	rsb	lr, r9, #32
 800d92a:	468a      	mov	sl, r1
 800d92c:	f04f 0c00 	mov.w	ip, #0
 800d930:	681a      	ldr	r2, [r3, #0]
 800d932:	fa02 f209 	lsl.w	r2, r2, r9
 800d936:	ea42 020c 	orr.w	r2, r2, ip
 800d93a:	f84a 2b04 	str.w	r2, [sl], #4
 800d93e:	f853 2b04 	ldr.w	r2, [r3], #4
 800d942:	4298      	cmp	r0, r3
 800d944:	fa22 fc0e 	lsr.w	ip, r2, lr
 800d948:	d8f2      	bhi.n	800d930 <__lshift+0x70>
 800d94a:	1b03      	subs	r3, r0, r4
 800d94c:	3b15      	subs	r3, #21
 800d94e:	f023 0303 	bic.w	r3, r3, #3
 800d952:	3304      	adds	r3, #4
 800d954:	f104 0215 	add.w	r2, r4, #21
 800d958:	4290      	cmp	r0, r2
 800d95a:	bf38      	it	cc
 800d95c:	2304      	movcc	r3, #4
 800d95e:	f841 c003 	str.w	ip, [r1, r3]
 800d962:	f1bc 0f00 	cmp.w	ip, #0
 800d966:	d001      	beq.n	800d96c <__lshift+0xac>
 800d968:	f108 0602 	add.w	r6, r8, #2
 800d96c:	3e01      	subs	r6, #1
 800d96e:	4638      	mov	r0, r7
 800d970:	612e      	str	r6, [r5, #16]
 800d972:	4621      	mov	r1, r4
 800d974:	f7ff fdd2 	bl	800d51c <_Bfree>
 800d978:	4628      	mov	r0, r5
 800d97a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d97e:	f842 0f04 	str.w	r0, [r2, #4]!
 800d982:	3301      	adds	r3, #1
 800d984:	e7c1      	b.n	800d90a <__lshift+0x4a>
 800d986:	3904      	subs	r1, #4
 800d988:	f853 2b04 	ldr.w	r2, [r3], #4
 800d98c:	f841 2f04 	str.w	r2, [r1, #4]!
 800d990:	4298      	cmp	r0, r3
 800d992:	d8f9      	bhi.n	800d988 <__lshift+0xc8>
 800d994:	e7ea      	b.n	800d96c <__lshift+0xac>
 800d996:	bf00      	nop
 800d998:	0800ea3f 	.word	0x0800ea3f
 800d99c:	0800eab0 	.word	0x0800eab0

0800d9a0 <__mcmp>:
 800d9a0:	b530      	push	{r4, r5, lr}
 800d9a2:	6902      	ldr	r2, [r0, #16]
 800d9a4:	690c      	ldr	r4, [r1, #16]
 800d9a6:	1b12      	subs	r2, r2, r4
 800d9a8:	d10e      	bne.n	800d9c8 <__mcmp+0x28>
 800d9aa:	f100 0314 	add.w	r3, r0, #20
 800d9ae:	3114      	adds	r1, #20
 800d9b0:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800d9b4:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800d9b8:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800d9bc:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800d9c0:	42a5      	cmp	r5, r4
 800d9c2:	d003      	beq.n	800d9cc <__mcmp+0x2c>
 800d9c4:	d305      	bcc.n	800d9d2 <__mcmp+0x32>
 800d9c6:	2201      	movs	r2, #1
 800d9c8:	4610      	mov	r0, r2
 800d9ca:	bd30      	pop	{r4, r5, pc}
 800d9cc:	4283      	cmp	r3, r0
 800d9ce:	d3f3      	bcc.n	800d9b8 <__mcmp+0x18>
 800d9d0:	e7fa      	b.n	800d9c8 <__mcmp+0x28>
 800d9d2:	f04f 32ff 	mov.w	r2, #4294967295
 800d9d6:	e7f7      	b.n	800d9c8 <__mcmp+0x28>

0800d9d8 <__mdiff>:
 800d9d8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d9dc:	460c      	mov	r4, r1
 800d9de:	4606      	mov	r6, r0
 800d9e0:	4611      	mov	r1, r2
 800d9e2:	4620      	mov	r0, r4
 800d9e4:	4690      	mov	r8, r2
 800d9e6:	f7ff ffdb 	bl	800d9a0 <__mcmp>
 800d9ea:	1e05      	subs	r5, r0, #0
 800d9ec:	d110      	bne.n	800da10 <__mdiff+0x38>
 800d9ee:	4629      	mov	r1, r5
 800d9f0:	4630      	mov	r0, r6
 800d9f2:	f7ff fd53 	bl	800d49c <_Balloc>
 800d9f6:	b930      	cbnz	r0, 800da06 <__mdiff+0x2e>
 800d9f8:	4b3a      	ldr	r3, [pc, #232]	; (800dae4 <__mdiff+0x10c>)
 800d9fa:	4602      	mov	r2, r0
 800d9fc:	f240 2132 	movw	r1, #562	; 0x232
 800da00:	4839      	ldr	r0, [pc, #228]	; (800dae8 <__mdiff+0x110>)
 800da02:	f000 fc45 	bl	800e290 <__assert_func>
 800da06:	2301      	movs	r3, #1
 800da08:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800da0c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800da10:	bfa4      	itt	ge
 800da12:	4643      	movge	r3, r8
 800da14:	46a0      	movge	r8, r4
 800da16:	4630      	mov	r0, r6
 800da18:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800da1c:	bfa6      	itte	ge
 800da1e:	461c      	movge	r4, r3
 800da20:	2500      	movge	r5, #0
 800da22:	2501      	movlt	r5, #1
 800da24:	f7ff fd3a 	bl	800d49c <_Balloc>
 800da28:	b920      	cbnz	r0, 800da34 <__mdiff+0x5c>
 800da2a:	4b2e      	ldr	r3, [pc, #184]	; (800dae4 <__mdiff+0x10c>)
 800da2c:	4602      	mov	r2, r0
 800da2e:	f44f 7110 	mov.w	r1, #576	; 0x240
 800da32:	e7e5      	b.n	800da00 <__mdiff+0x28>
 800da34:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800da38:	6926      	ldr	r6, [r4, #16]
 800da3a:	60c5      	str	r5, [r0, #12]
 800da3c:	f104 0914 	add.w	r9, r4, #20
 800da40:	f108 0514 	add.w	r5, r8, #20
 800da44:	f100 0e14 	add.w	lr, r0, #20
 800da48:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800da4c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800da50:	f108 0210 	add.w	r2, r8, #16
 800da54:	46f2      	mov	sl, lr
 800da56:	2100      	movs	r1, #0
 800da58:	f859 3b04 	ldr.w	r3, [r9], #4
 800da5c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800da60:	fa1f f883 	uxth.w	r8, r3
 800da64:	fa11 f18b 	uxtah	r1, r1, fp
 800da68:	0c1b      	lsrs	r3, r3, #16
 800da6a:	eba1 0808 	sub.w	r8, r1, r8
 800da6e:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800da72:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800da76:	fa1f f888 	uxth.w	r8, r8
 800da7a:	1419      	asrs	r1, r3, #16
 800da7c:	454e      	cmp	r6, r9
 800da7e:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800da82:	f84a 3b04 	str.w	r3, [sl], #4
 800da86:	d8e7      	bhi.n	800da58 <__mdiff+0x80>
 800da88:	1b33      	subs	r3, r6, r4
 800da8a:	3b15      	subs	r3, #21
 800da8c:	f023 0303 	bic.w	r3, r3, #3
 800da90:	3304      	adds	r3, #4
 800da92:	3415      	adds	r4, #21
 800da94:	42a6      	cmp	r6, r4
 800da96:	bf38      	it	cc
 800da98:	2304      	movcc	r3, #4
 800da9a:	441d      	add	r5, r3
 800da9c:	4473      	add	r3, lr
 800da9e:	469e      	mov	lr, r3
 800daa0:	462e      	mov	r6, r5
 800daa2:	4566      	cmp	r6, ip
 800daa4:	d30e      	bcc.n	800dac4 <__mdiff+0xec>
 800daa6:	f10c 0203 	add.w	r2, ip, #3
 800daaa:	1b52      	subs	r2, r2, r5
 800daac:	f022 0203 	bic.w	r2, r2, #3
 800dab0:	3d03      	subs	r5, #3
 800dab2:	45ac      	cmp	ip, r5
 800dab4:	bf38      	it	cc
 800dab6:	2200      	movcc	r2, #0
 800dab8:	441a      	add	r2, r3
 800daba:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800dabe:	b17b      	cbz	r3, 800dae0 <__mdiff+0x108>
 800dac0:	6107      	str	r7, [r0, #16]
 800dac2:	e7a3      	b.n	800da0c <__mdiff+0x34>
 800dac4:	f856 8b04 	ldr.w	r8, [r6], #4
 800dac8:	fa11 f288 	uxtah	r2, r1, r8
 800dacc:	1414      	asrs	r4, r2, #16
 800dace:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800dad2:	b292      	uxth	r2, r2
 800dad4:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800dad8:	f84e 2b04 	str.w	r2, [lr], #4
 800dadc:	1421      	asrs	r1, r4, #16
 800dade:	e7e0      	b.n	800daa2 <__mdiff+0xca>
 800dae0:	3f01      	subs	r7, #1
 800dae2:	e7ea      	b.n	800daba <__mdiff+0xe2>
 800dae4:	0800ea3f 	.word	0x0800ea3f
 800dae8:	0800eab0 	.word	0x0800eab0

0800daec <__d2b>:
 800daec:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800daf0:	4689      	mov	r9, r1
 800daf2:	2101      	movs	r1, #1
 800daf4:	ec57 6b10 	vmov	r6, r7, d0
 800daf8:	4690      	mov	r8, r2
 800dafa:	f7ff fccf 	bl	800d49c <_Balloc>
 800dafe:	4604      	mov	r4, r0
 800db00:	b930      	cbnz	r0, 800db10 <__d2b+0x24>
 800db02:	4602      	mov	r2, r0
 800db04:	4b25      	ldr	r3, [pc, #148]	; (800db9c <__d2b+0xb0>)
 800db06:	4826      	ldr	r0, [pc, #152]	; (800dba0 <__d2b+0xb4>)
 800db08:	f240 310a 	movw	r1, #778	; 0x30a
 800db0c:	f000 fbc0 	bl	800e290 <__assert_func>
 800db10:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800db14:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800db18:	bb35      	cbnz	r5, 800db68 <__d2b+0x7c>
 800db1a:	2e00      	cmp	r6, #0
 800db1c:	9301      	str	r3, [sp, #4]
 800db1e:	d028      	beq.n	800db72 <__d2b+0x86>
 800db20:	4668      	mov	r0, sp
 800db22:	9600      	str	r6, [sp, #0]
 800db24:	f7ff fd82 	bl	800d62c <__lo0bits>
 800db28:	9900      	ldr	r1, [sp, #0]
 800db2a:	b300      	cbz	r0, 800db6e <__d2b+0x82>
 800db2c:	9a01      	ldr	r2, [sp, #4]
 800db2e:	f1c0 0320 	rsb	r3, r0, #32
 800db32:	fa02 f303 	lsl.w	r3, r2, r3
 800db36:	430b      	orrs	r3, r1
 800db38:	40c2      	lsrs	r2, r0
 800db3a:	6163      	str	r3, [r4, #20]
 800db3c:	9201      	str	r2, [sp, #4]
 800db3e:	9b01      	ldr	r3, [sp, #4]
 800db40:	61a3      	str	r3, [r4, #24]
 800db42:	2b00      	cmp	r3, #0
 800db44:	bf14      	ite	ne
 800db46:	2202      	movne	r2, #2
 800db48:	2201      	moveq	r2, #1
 800db4a:	6122      	str	r2, [r4, #16]
 800db4c:	b1d5      	cbz	r5, 800db84 <__d2b+0x98>
 800db4e:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800db52:	4405      	add	r5, r0
 800db54:	f8c9 5000 	str.w	r5, [r9]
 800db58:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800db5c:	f8c8 0000 	str.w	r0, [r8]
 800db60:	4620      	mov	r0, r4
 800db62:	b003      	add	sp, #12
 800db64:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800db68:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800db6c:	e7d5      	b.n	800db1a <__d2b+0x2e>
 800db6e:	6161      	str	r1, [r4, #20]
 800db70:	e7e5      	b.n	800db3e <__d2b+0x52>
 800db72:	a801      	add	r0, sp, #4
 800db74:	f7ff fd5a 	bl	800d62c <__lo0bits>
 800db78:	9b01      	ldr	r3, [sp, #4]
 800db7a:	6163      	str	r3, [r4, #20]
 800db7c:	2201      	movs	r2, #1
 800db7e:	6122      	str	r2, [r4, #16]
 800db80:	3020      	adds	r0, #32
 800db82:	e7e3      	b.n	800db4c <__d2b+0x60>
 800db84:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800db88:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800db8c:	f8c9 0000 	str.w	r0, [r9]
 800db90:	6918      	ldr	r0, [r3, #16]
 800db92:	f7ff fd2b 	bl	800d5ec <__hi0bits>
 800db96:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800db9a:	e7df      	b.n	800db5c <__d2b+0x70>
 800db9c:	0800ea3f 	.word	0x0800ea3f
 800dba0:	0800eab0 	.word	0x0800eab0

0800dba4 <_calloc_r>:
 800dba4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800dba6:	fba1 2402 	umull	r2, r4, r1, r2
 800dbaa:	b94c      	cbnz	r4, 800dbc0 <_calloc_r+0x1c>
 800dbac:	4611      	mov	r1, r2
 800dbae:	9201      	str	r2, [sp, #4]
 800dbb0:	f000 f87a 	bl	800dca8 <_malloc_r>
 800dbb4:	9a01      	ldr	r2, [sp, #4]
 800dbb6:	4605      	mov	r5, r0
 800dbb8:	b930      	cbnz	r0, 800dbc8 <_calloc_r+0x24>
 800dbba:	4628      	mov	r0, r5
 800dbbc:	b003      	add	sp, #12
 800dbbe:	bd30      	pop	{r4, r5, pc}
 800dbc0:	220c      	movs	r2, #12
 800dbc2:	6002      	str	r2, [r0, #0]
 800dbc4:	2500      	movs	r5, #0
 800dbc6:	e7f8      	b.n	800dbba <_calloc_r+0x16>
 800dbc8:	4621      	mov	r1, r4
 800dbca:	f7fe f84d 	bl	800bc68 <memset>
 800dbce:	e7f4      	b.n	800dbba <_calloc_r+0x16>

0800dbd0 <_free_r>:
 800dbd0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800dbd2:	2900      	cmp	r1, #0
 800dbd4:	d044      	beq.n	800dc60 <_free_r+0x90>
 800dbd6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800dbda:	9001      	str	r0, [sp, #4]
 800dbdc:	2b00      	cmp	r3, #0
 800dbde:	f1a1 0404 	sub.w	r4, r1, #4
 800dbe2:	bfb8      	it	lt
 800dbe4:	18e4      	addlt	r4, r4, r3
 800dbe6:	f000 fcdf 	bl	800e5a8 <__malloc_lock>
 800dbea:	4a1e      	ldr	r2, [pc, #120]	; (800dc64 <_free_r+0x94>)
 800dbec:	9801      	ldr	r0, [sp, #4]
 800dbee:	6813      	ldr	r3, [r2, #0]
 800dbf0:	b933      	cbnz	r3, 800dc00 <_free_r+0x30>
 800dbf2:	6063      	str	r3, [r4, #4]
 800dbf4:	6014      	str	r4, [r2, #0]
 800dbf6:	b003      	add	sp, #12
 800dbf8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800dbfc:	f000 bcda 	b.w	800e5b4 <__malloc_unlock>
 800dc00:	42a3      	cmp	r3, r4
 800dc02:	d908      	bls.n	800dc16 <_free_r+0x46>
 800dc04:	6825      	ldr	r5, [r4, #0]
 800dc06:	1961      	adds	r1, r4, r5
 800dc08:	428b      	cmp	r3, r1
 800dc0a:	bf01      	itttt	eq
 800dc0c:	6819      	ldreq	r1, [r3, #0]
 800dc0e:	685b      	ldreq	r3, [r3, #4]
 800dc10:	1949      	addeq	r1, r1, r5
 800dc12:	6021      	streq	r1, [r4, #0]
 800dc14:	e7ed      	b.n	800dbf2 <_free_r+0x22>
 800dc16:	461a      	mov	r2, r3
 800dc18:	685b      	ldr	r3, [r3, #4]
 800dc1a:	b10b      	cbz	r3, 800dc20 <_free_r+0x50>
 800dc1c:	42a3      	cmp	r3, r4
 800dc1e:	d9fa      	bls.n	800dc16 <_free_r+0x46>
 800dc20:	6811      	ldr	r1, [r2, #0]
 800dc22:	1855      	adds	r5, r2, r1
 800dc24:	42a5      	cmp	r5, r4
 800dc26:	d10b      	bne.n	800dc40 <_free_r+0x70>
 800dc28:	6824      	ldr	r4, [r4, #0]
 800dc2a:	4421      	add	r1, r4
 800dc2c:	1854      	adds	r4, r2, r1
 800dc2e:	42a3      	cmp	r3, r4
 800dc30:	6011      	str	r1, [r2, #0]
 800dc32:	d1e0      	bne.n	800dbf6 <_free_r+0x26>
 800dc34:	681c      	ldr	r4, [r3, #0]
 800dc36:	685b      	ldr	r3, [r3, #4]
 800dc38:	6053      	str	r3, [r2, #4]
 800dc3a:	4421      	add	r1, r4
 800dc3c:	6011      	str	r1, [r2, #0]
 800dc3e:	e7da      	b.n	800dbf6 <_free_r+0x26>
 800dc40:	d902      	bls.n	800dc48 <_free_r+0x78>
 800dc42:	230c      	movs	r3, #12
 800dc44:	6003      	str	r3, [r0, #0]
 800dc46:	e7d6      	b.n	800dbf6 <_free_r+0x26>
 800dc48:	6825      	ldr	r5, [r4, #0]
 800dc4a:	1961      	adds	r1, r4, r5
 800dc4c:	428b      	cmp	r3, r1
 800dc4e:	bf04      	itt	eq
 800dc50:	6819      	ldreq	r1, [r3, #0]
 800dc52:	685b      	ldreq	r3, [r3, #4]
 800dc54:	6063      	str	r3, [r4, #4]
 800dc56:	bf04      	itt	eq
 800dc58:	1949      	addeq	r1, r1, r5
 800dc5a:	6021      	streq	r1, [r4, #0]
 800dc5c:	6054      	str	r4, [r2, #4]
 800dc5e:	e7ca      	b.n	800dbf6 <_free_r+0x26>
 800dc60:	b003      	add	sp, #12
 800dc62:	bd30      	pop	{r4, r5, pc}
 800dc64:	200075a0 	.word	0x200075a0

0800dc68 <sbrk_aligned>:
 800dc68:	b570      	push	{r4, r5, r6, lr}
 800dc6a:	4e0e      	ldr	r6, [pc, #56]	; (800dca4 <sbrk_aligned+0x3c>)
 800dc6c:	460c      	mov	r4, r1
 800dc6e:	6831      	ldr	r1, [r6, #0]
 800dc70:	4605      	mov	r5, r0
 800dc72:	b911      	cbnz	r1, 800dc7a <sbrk_aligned+0x12>
 800dc74:	f000 f9e6 	bl	800e044 <_sbrk_r>
 800dc78:	6030      	str	r0, [r6, #0]
 800dc7a:	4621      	mov	r1, r4
 800dc7c:	4628      	mov	r0, r5
 800dc7e:	f000 f9e1 	bl	800e044 <_sbrk_r>
 800dc82:	1c43      	adds	r3, r0, #1
 800dc84:	d00a      	beq.n	800dc9c <sbrk_aligned+0x34>
 800dc86:	1cc4      	adds	r4, r0, #3
 800dc88:	f024 0403 	bic.w	r4, r4, #3
 800dc8c:	42a0      	cmp	r0, r4
 800dc8e:	d007      	beq.n	800dca0 <sbrk_aligned+0x38>
 800dc90:	1a21      	subs	r1, r4, r0
 800dc92:	4628      	mov	r0, r5
 800dc94:	f000 f9d6 	bl	800e044 <_sbrk_r>
 800dc98:	3001      	adds	r0, #1
 800dc9a:	d101      	bne.n	800dca0 <sbrk_aligned+0x38>
 800dc9c:	f04f 34ff 	mov.w	r4, #4294967295
 800dca0:	4620      	mov	r0, r4
 800dca2:	bd70      	pop	{r4, r5, r6, pc}
 800dca4:	200075a4 	.word	0x200075a4

0800dca8 <_malloc_r>:
 800dca8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dcac:	1ccd      	adds	r5, r1, #3
 800dcae:	f025 0503 	bic.w	r5, r5, #3
 800dcb2:	3508      	adds	r5, #8
 800dcb4:	2d0c      	cmp	r5, #12
 800dcb6:	bf38      	it	cc
 800dcb8:	250c      	movcc	r5, #12
 800dcba:	2d00      	cmp	r5, #0
 800dcbc:	4607      	mov	r7, r0
 800dcbe:	db01      	blt.n	800dcc4 <_malloc_r+0x1c>
 800dcc0:	42a9      	cmp	r1, r5
 800dcc2:	d905      	bls.n	800dcd0 <_malloc_r+0x28>
 800dcc4:	230c      	movs	r3, #12
 800dcc6:	603b      	str	r3, [r7, #0]
 800dcc8:	2600      	movs	r6, #0
 800dcca:	4630      	mov	r0, r6
 800dccc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dcd0:	4e2e      	ldr	r6, [pc, #184]	; (800dd8c <_malloc_r+0xe4>)
 800dcd2:	f000 fc69 	bl	800e5a8 <__malloc_lock>
 800dcd6:	6833      	ldr	r3, [r6, #0]
 800dcd8:	461c      	mov	r4, r3
 800dcda:	bb34      	cbnz	r4, 800dd2a <_malloc_r+0x82>
 800dcdc:	4629      	mov	r1, r5
 800dcde:	4638      	mov	r0, r7
 800dce0:	f7ff ffc2 	bl	800dc68 <sbrk_aligned>
 800dce4:	1c43      	adds	r3, r0, #1
 800dce6:	4604      	mov	r4, r0
 800dce8:	d14d      	bne.n	800dd86 <_malloc_r+0xde>
 800dcea:	6834      	ldr	r4, [r6, #0]
 800dcec:	4626      	mov	r6, r4
 800dcee:	2e00      	cmp	r6, #0
 800dcf0:	d140      	bne.n	800dd74 <_malloc_r+0xcc>
 800dcf2:	6823      	ldr	r3, [r4, #0]
 800dcf4:	4631      	mov	r1, r6
 800dcf6:	4638      	mov	r0, r7
 800dcf8:	eb04 0803 	add.w	r8, r4, r3
 800dcfc:	f000 f9a2 	bl	800e044 <_sbrk_r>
 800dd00:	4580      	cmp	r8, r0
 800dd02:	d13a      	bne.n	800dd7a <_malloc_r+0xd2>
 800dd04:	6821      	ldr	r1, [r4, #0]
 800dd06:	3503      	adds	r5, #3
 800dd08:	1a6d      	subs	r5, r5, r1
 800dd0a:	f025 0503 	bic.w	r5, r5, #3
 800dd0e:	3508      	adds	r5, #8
 800dd10:	2d0c      	cmp	r5, #12
 800dd12:	bf38      	it	cc
 800dd14:	250c      	movcc	r5, #12
 800dd16:	4629      	mov	r1, r5
 800dd18:	4638      	mov	r0, r7
 800dd1a:	f7ff ffa5 	bl	800dc68 <sbrk_aligned>
 800dd1e:	3001      	adds	r0, #1
 800dd20:	d02b      	beq.n	800dd7a <_malloc_r+0xd2>
 800dd22:	6823      	ldr	r3, [r4, #0]
 800dd24:	442b      	add	r3, r5
 800dd26:	6023      	str	r3, [r4, #0]
 800dd28:	e00e      	b.n	800dd48 <_malloc_r+0xa0>
 800dd2a:	6822      	ldr	r2, [r4, #0]
 800dd2c:	1b52      	subs	r2, r2, r5
 800dd2e:	d41e      	bmi.n	800dd6e <_malloc_r+0xc6>
 800dd30:	2a0b      	cmp	r2, #11
 800dd32:	d916      	bls.n	800dd62 <_malloc_r+0xba>
 800dd34:	1961      	adds	r1, r4, r5
 800dd36:	42a3      	cmp	r3, r4
 800dd38:	6025      	str	r5, [r4, #0]
 800dd3a:	bf18      	it	ne
 800dd3c:	6059      	strne	r1, [r3, #4]
 800dd3e:	6863      	ldr	r3, [r4, #4]
 800dd40:	bf08      	it	eq
 800dd42:	6031      	streq	r1, [r6, #0]
 800dd44:	5162      	str	r2, [r4, r5]
 800dd46:	604b      	str	r3, [r1, #4]
 800dd48:	4638      	mov	r0, r7
 800dd4a:	f104 060b 	add.w	r6, r4, #11
 800dd4e:	f000 fc31 	bl	800e5b4 <__malloc_unlock>
 800dd52:	f026 0607 	bic.w	r6, r6, #7
 800dd56:	1d23      	adds	r3, r4, #4
 800dd58:	1af2      	subs	r2, r6, r3
 800dd5a:	d0b6      	beq.n	800dcca <_malloc_r+0x22>
 800dd5c:	1b9b      	subs	r3, r3, r6
 800dd5e:	50a3      	str	r3, [r4, r2]
 800dd60:	e7b3      	b.n	800dcca <_malloc_r+0x22>
 800dd62:	6862      	ldr	r2, [r4, #4]
 800dd64:	42a3      	cmp	r3, r4
 800dd66:	bf0c      	ite	eq
 800dd68:	6032      	streq	r2, [r6, #0]
 800dd6a:	605a      	strne	r2, [r3, #4]
 800dd6c:	e7ec      	b.n	800dd48 <_malloc_r+0xa0>
 800dd6e:	4623      	mov	r3, r4
 800dd70:	6864      	ldr	r4, [r4, #4]
 800dd72:	e7b2      	b.n	800dcda <_malloc_r+0x32>
 800dd74:	4634      	mov	r4, r6
 800dd76:	6876      	ldr	r6, [r6, #4]
 800dd78:	e7b9      	b.n	800dcee <_malloc_r+0x46>
 800dd7a:	230c      	movs	r3, #12
 800dd7c:	603b      	str	r3, [r7, #0]
 800dd7e:	4638      	mov	r0, r7
 800dd80:	f000 fc18 	bl	800e5b4 <__malloc_unlock>
 800dd84:	e7a1      	b.n	800dcca <_malloc_r+0x22>
 800dd86:	6025      	str	r5, [r4, #0]
 800dd88:	e7de      	b.n	800dd48 <_malloc_r+0xa0>
 800dd8a:	bf00      	nop
 800dd8c:	200075a0 	.word	0x200075a0

0800dd90 <__sfputc_r>:
 800dd90:	6893      	ldr	r3, [r2, #8]
 800dd92:	3b01      	subs	r3, #1
 800dd94:	2b00      	cmp	r3, #0
 800dd96:	b410      	push	{r4}
 800dd98:	6093      	str	r3, [r2, #8]
 800dd9a:	da08      	bge.n	800ddae <__sfputc_r+0x1e>
 800dd9c:	6994      	ldr	r4, [r2, #24]
 800dd9e:	42a3      	cmp	r3, r4
 800dda0:	db01      	blt.n	800dda6 <__sfputc_r+0x16>
 800dda2:	290a      	cmp	r1, #10
 800dda4:	d103      	bne.n	800ddae <__sfputc_r+0x1e>
 800dda6:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ddaa:	f000 b99f 	b.w	800e0ec <__swbuf_r>
 800ddae:	6813      	ldr	r3, [r2, #0]
 800ddb0:	1c58      	adds	r0, r3, #1
 800ddb2:	6010      	str	r0, [r2, #0]
 800ddb4:	7019      	strb	r1, [r3, #0]
 800ddb6:	4608      	mov	r0, r1
 800ddb8:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ddbc:	4770      	bx	lr

0800ddbe <__sfputs_r>:
 800ddbe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ddc0:	4606      	mov	r6, r0
 800ddc2:	460f      	mov	r7, r1
 800ddc4:	4614      	mov	r4, r2
 800ddc6:	18d5      	adds	r5, r2, r3
 800ddc8:	42ac      	cmp	r4, r5
 800ddca:	d101      	bne.n	800ddd0 <__sfputs_r+0x12>
 800ddcc:	2000      	movs	r0, #0
 800ddce:	e007      	b.n	800dde0 <__sfputs_r+0x22>
 800ddd0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ddd4:	463a      	mov	r2, r7
 800ddd6:	4630      	mov	r0, r6
 800ddd8:	f7ff ffda 	bl	800dd90 <__sfputc_r>
 800dddc:	1c43      	adds	r3, r0, #1
 800ddde:	d1f3      	bne.n	800ddc8 <__sfputs_r+0xa>
 800dde0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800dde4 <_vfiprintf_r>:
 800dde4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dde8:	460d      	mov	r5, r1
 800ddea:	b09d      	sub	sp, #116	; 0x74
 800ddec:	4614      	mov	r4, r2
 800ddee:	4698      	mov	r8, r3
 800ddf0:	4606      	mov	r6, r0
 800ddf2:	b118      	cbz	r0, 800ddfc <_vfiprintf_r+0x18>
 800ddf4:	6983      	ldr	r3, [r0, #24]
 800ddf6:	b90b      	cbnz	r3, 800ddfc <_vfiprintf_r+0x18>
 800ddf8:	f7ff fa94 	bl	800d324 <__sinit>
 800ddfc:	4b89      	ldr	r3, [pc, #548]	; (800e024 <_vfiprintf_r+0x240>)
 800ddfe:	429d      	cmp	r5, r3
 800de00:	d11b      	bne.n	800de3a <_vfiprintf_r+0x56>
 800de02:	6875      	ldr	r5, [r6, #4]
 800de04:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800de06:	07d9      	lsls	r1, r3, #31
 800de08:	d405      	bmi.n	800de16 <_vfiprintf_r+0x32>
 800de0a:	89ab      	ldrh	r3, [r5, #12]
 800de0c:	059a      	lsls	r2, r3, #22
 800de0e:	d402      	bmi.n	800de16 <_vfiprintf_r+0x32>
 800de10:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800de12:	f7ff fb2a 	bl	800d46a <__retarget_lock_acquire_recursive>
 800de16:	89ab      	ldrh	r3, [r5, #12]
 800de18:	071b      	lsls	r3, r3, #28
 800de1a:	d501      	bpl.n	800de20 <_vfiprintf_r+0x3c>
 800de1c:	692b      	ldr	r3, [r5, #16]
 800de1e:	b9eb      	cbnz	r3, 800de5c <_vfiprintf_r+0x78>
 800de20:	4629      	mov	r1, r5
 800de22:	4630      	mov	r0, r6
 800de24:	f000 f9c6 	bl	800e1b4 <__swsetup_r>
 800de28:	b1c0      	cbz	r0, 800de5c <_vfiprintf_r+0x78>
 800de2a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800de2c:	07dc      	lsls	r4, r3, #31
 800de2e:	d50e      	bpl.n	800de4e <_vfiprintf_r+0x6a>
 800de30:	f04f 30ff 	mov.w	r0, #4294967295
 800de34:	b01d      	add	sp, #116	; 0x74
 800de36:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800de3a:	4b7b      	ldr	r3, [pc, #492]	; (800e028 <_vfiprintf_r+0x244>)
 800de3c:	429d      	cmp	r5, r3
 800de3e:	d101      	bne.n	800de44 <_vfiprintf_r+0x60>
 800de40:	68b5      	ldr	r5, [r6, #8]
 800de42:	e7df      	b.n	800de04 <_vfiprintf_r+0x20>
 800de44:	4b79      	ldr	r3, [pc, #484]	; (800e02c <_vfiprintf_r+0x248>)
 800de46:	429d      	cmp	r5, r3
 800de48:	bf08      	it	eq
 800de4a:	68f5      	ldreq	r5, [r6, #12]
 800de4c:	e7da      	b.n	800de04 <_vfiprintf_r+0x20>
 800de4e:	89ab      	ldrh	r3, [r5, #12]
 800de50:	0598      	lsls	r0, r3, #22
 800de52:	d4ed      	bmi.n	800de30 <_vfiprintf_r+0x4c>
 800de54:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800de56:	f7ff fb09 	bl	800d46c <__retarget_lock_release_recursive>
 800de5a:	e7e9      	b.n	800de30 <_vfiprintf_r+0x4c>
 800de5c:	2300      	movs	r3, #0
 800de5e:	9309      	str	r3, [sp, #36]	; 0x24
 800de60:	2320      	movs	r3, #32
 800de62:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800de66:	f8cd 800c 	str.w	r8, [sp, #12]
 800de6a:	2330      	movs	r3, #48	; 0x30
 800de6c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800e030 <_vfiprintf_r+0x24c>
 800de70:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800de74:	f04f 0901 	mov.w	r9, #1
 800de78:	4623      	mov	r3, r4
 800de7a:	469a      	mov	sl, r3
 800de7c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800de80:	b10a      	cbz	r2, 800de86 <_vfiprintf_r+0xa2>
 800de82:	2a25      	cmp	r2, #37	; 0x25
 800de84:	d1f9      	bne.n	800de7a <_vfiprintf_r+0x96>
 800de86:	ebba 0b04 	subs.w	fp, sl, r4
 800de8a:	d00b      	beq.n	800dea4 <_vfiprintf_r+0xc0>
 800de8c:	465b      	mov	r3, fp
 800de8e:	4622      	mov	r2, r4
 800de90:	4629      	mov	r1, r5
 800de92:	4630      	mov	r0, r6
 800de94:	f7ff ff93 	bl	800ddbe <__sfputs_r>
 800de98:	3001      	adds	r0, #1
 800de9a:	f000 80aa 	beq.w	800dff2 <_vfiprintf_r+0x20e>
 800de9e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800dea0:	445a      	add	r2, fp
 800dea2:	9209      	str	r2, [sp, #36]	; 0x24
 800dea4:	f89a 3000 	ldrb.w	r3, [sl]
 800dea8:	2b00      	cmp	r3, #0
 800deaa:	f000 80a2 	beq.w	800dff2 <_vfiprintf_r+0x20e>
 800deae:	2300      	movs	r3, #0
 800deb0:	f04f 32ff 	mov.w	r2, #4294967295
 800deb4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800deb8:	f10a 0a01 	add.w	sl, sl, #1
 800debc:	9304      	str	r3, [sp, #16]
 800debe:	9307      	str	r3, [sp, #28]
 800dec0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800dec4:	931a      	str	r3, [sp, #104]	; 0x68
 800dec6:	4654      	mov	r4, sl
 800dec8:	2205      	movs	r2, #5
 800deca:	f814 1b01 	ldrb.w	r1, [r4], #1
 800dece:	4858      	ldr	r0, [pc, #352]	; (800e030 <_vfiprintf_r+0x24c>)
 800ded0:	f7f2 f98e 	bl	80001f0 <memchr>
 800ded4:	9a04      	ldr	r2, [sp, #16]
 800ded6:	b9d8      	cbnz	r0, 800df10 <_vfiprintf_r+0x12c>
 800ded8:	06d1      	lsls	r1, r2, #27
 800deda:	bf44      	itt	mi
 800dedc:	2320      	movmi	r3, #32
 800dede:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800dee2:	0713      	lsls	r3, r2, #28
 800dee4:	bf44      	itt	mi
 800dee6:	232b      	movmi	r3, #43	; 0x2b
 800dee8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800deec:	f89a 3000 	ldrb.w	r3, [sl]
 800def0:	2b2a      	cmp	r3, #42	; 0x2a
 800def2:	d015      	beq.n	800df20 <_vfiprintf_r+0x13c>
 800def4:	9a07      	ldr	r2, [sp, #28]
 800def6:	4654      	mov	r4, sl
 800def8:	2000      	movs	r0, #0
 800defa:	f04f 0c0a 	mov.w	ip, #10
 800defe:	4621      	mov	r1, r4
 800df00:	f811 3b01 	ldrb.w	r3, [r1], #1
 800df04:	3b30      	subs	r3, #48	; 0x30
 800df06:	2b09      	cmp	r3, #9
 800df08:	d94e      	bls.n	800dfa8 <_vfiprintf_r+0x1c4>
 800df0a:	b1b0      	cbz	r0, 800df3a <_vfiprintf_r+0x156>
 800df0c:	9207      	str	r2, [sp, #28]
 800df0e:	e014      	b.n	800df3a <_vfiprintf_r+0x156>
 800df10:	eba0 0308 	sub.w	r3, r0, r8
 800df14:	fa09 f303 	lsl.w	r3, r9, r3
 800df18:	4313      	orrs	r3, r2
 800df1a:	9304      	str	r3, [sp, #16]
 800df1c:	46a2      	mov	sl, r4
 800df1e:	e7d2      	b.n	800dec6 <_vfiprintf_r+0xe2>
 800df20:	9b03      	ldr	r3, [sp, #12]
 800df22:	1d19      	adds	r1, r3, #4
 800df24:	681b      	ldr	r3, [r3, #0]
 800df26:	9103      	str	r1, [sp, #12]
 800df28:	2b00      	cmp	r3, #0
 800df2a:	bfbb      	ittet	lt
 800df2c:	425b      	neglt	r3, r3
 800df2e:	f042 0202 	orrlt.w	r2, r2, #2
 800df32:	9307      	strge	r3, [sp, #28]
 800df34:	9307      	strlt	r3, [sp, #28]
 800df36:	bfb8      	it	lt
 800df38:	9204      	strlt	r2, [sp, #16]
 800df3a:	7823      	ldrb	r3, [r4, #0]
 800df3c:	2b2e      	cmp	r3, #46	; 0x2e
 800df3e:	d10c      	bne.n	800df5a <_vfiprintf_r+0x176>
 800df40:	7863      	ldrb	r3, [r4, #1]
 800df42:	2b2a      	cmp	r3, #42	; 0x2a
 800df44:	d135      	bne.n	800dfb2 <_vfiprintf_r+0x1ce>
 800df46:	9b03      	ldr	r3, [sp, #12]
 800df48:	1d1a      	adds	r2, r3, #4
 800df4a:	681b      	ldr	r3, [r3, #0]
 800df4c:	9203      	str	r2, [sp, #12]
 800df4e:	2b00      	cmp	r3, #0
 800df50:	bfb8      	it	lt
 800df52:	f04f 33ff 	movlt.w	r3, #4294967295
 800df56:	3402      	adds	r4, #2
 800df58:	9305      	str	r3, [sp, #20]
 800df5a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800e040 <_vfiprintf_r+0x25c>
 800df5e:	7821      	ldrb	r1, [r4, #0]
 800df60:	2203      	movs	r2, #3
 800df62:	4650      	mov	r0, sl
 800df64:	f7f2 f944 	bl	80001f0 <memchr>
 800df68:	b140      	cbz	r0, 800df7c <_vfiprintf_r+0x198>
 800df6a:	2340      	movs	r3, #64	; 0x40
 800df6c:	eba0 000a 	sub.w	r0, r0, sl
 800df70:	fa03 f000 	lsl.w	r0, r3, r0
 800df74:	9b04      	ldr	r3, [sp, #16]
 800df76:	4303      	orrs	r3, r0
 800df78:	3401      	adds	r4, #1
 800df7a:	9304      	str	r3, [sp, #16]
 800df7c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800df80:	482c      	ldr	r0, [pc, #176]	; (800e034 <_vfiprintf_r+0x250>)
 800df82:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800df86:	2206      	movs	r2, #6
 800df88:	f7f2 f932 	bl	80001f0 <memchr>
 800df8c:	2800      	cmp	r0, #0
 800df8e:	d03f      	beq.n	800e010 <_vfiprintf_r+0x22c>
 800df90:	4b29      	ldr	r3, [pc, #164]	; (800e038 <_vfiprintf_r+0x254>)
 800df92:	bb1b      	cbnz	r3, 800dfdc <_vfiprintf_r+0x1f8>
 800df94:	9b03      	ldr	r3, [sp, #12]
 800df96:	3307      	adds	r3, #7
 800df98:	f023 0307 	bic.w	r3, r3, #7
 800df9c:	3308      	adds	r3, #8
 800df9e:	9303      	str	r3, [sp, #12]
 800dfa0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dfa2:	443b      	add	r3, r7
 800dfa4:	9309      	str	r3, [sp, #36]	; 0x24
 800dfa6:	e767      	b.n	800de78 <_vfiprintf_r+0x94>
 800dfa8:	fb0c 3202 	mla	r2, ip, r2, r3
 800dfac:	460c      	mov	r4, r1
 800dfae:	2001      	movs	r0, #1
 800dfb0:	e7a5      	b.n	800defe <_vfiprintf_r+0x11a>
 800dfb2:	2300      	movs	r3, #0
 800dfb4:	3401      	adds	r4, #1
 800dfb6:	9305      	str	r3, [sp, #20]
 800dfb8:	4619      	mov	r1, r3
 800dfba:	f04f 0c0a 	mov.w	ip, #10
 800dfbe:	4620      	mov	r0, r4
 800dfc0:	f810 2b01 	ldrb.w	r2, [r0], #1
 800dfc4:	3a30      	subs	r2, #48	; 0x30
 800dfc6:	2a09      	cmp	r2, #9
 800dfc8:	d903      	bls.n	800dfd2 <_vfiprintf_r+0x1ee>
 800dfca:	2b00      	cmp	r3, #0
 800dfcc:	d0c5      	beq.n	800df5a <_vfiprintf_r+0x176>
 800dfce:	9105      	str	r1, [sp, #20]
 800dfd0:	e7c3      	b.n	800df5a <_vfiprintf_r+0x176>
 800dfd2:	fb0c 2101 	mla	r1, ip, r1, r2
 800dfd6:	4604      	mov	r4, r0
 800dfd8:	2301      	movs	r3, #1
 800dfda:	e7f0      	b.n	800dfbe <_vfiprintf_r+0x1da>
 800dfdc:	ab03      	add	r3, sp, #12
 800dfde:	9300      	str	r3, [sp, #0]
 800dfe0:	462a      	mov	r2, r5
 800dfe2:	4b16      	ldr	r3, [pc, #88]	; (800e03c <_vfiprintf_r+0x258>)
 800dfe4:	a904      	add	r1, sp, #16
 800dfe6:	4630      	mov	r0, r6
 800dfe8:	f7fd fee6 	bl	800bdb8 <_printf_float>
 800dfec:	4607      	mov	r7, r0
 800dfee:	1c78      	adds	r0, r7, #1
 800dff0:	d1d6      	bne.n	800dfa0 <_vfiprintf_r+0x1bc>
 800dff2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800dff4:	07d9      	lsls	r1, r3, #31
 800dff6:	d405      	bmi.n	800e004 <_vfiprintf_r+0x220>
 800dff8:	89ab      	ldrh	r3, [r5, #12]
 800dffa:	059a      	lsls	r2, r3, #22
 800dffc:	d402      	bmi.n	800e004 <_vfiprintf_r+0x220>
 800dffe:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e000:	f7ff fa34 	bl	800d46c <__retarget_lock_release_recursive>
 800e004:	89ab      	ldrh	r3, [r5, #12]
 800e006:	065b      	lsls	r3, r3, #25
 800e008:	f53f af12 	bmi.w	800de30 <_vfiprintf_r+0x4c>
 800e00c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e00e:	e711      	b.n	800de34 <_vfiprintf_r+0x50>
 800e010:	ab03      	add	r3, sp, #12
 800e012:	9300      	str	r3, [sp, #0]
 800e014:	462a      	mov	r2, r5
 800e016:	4b09      	ldr	r3, [pc, #36]	; (800e03c <_vfiprintf_r+0x258>)
 800e018:	a904      	add	r1, sp, #16
 800e01a:	4630      	mov	r0, r6
 800e01c:	f7fe f970 	bl	800c300 <_printf_i>
 800e020:	e7e4      	b.n	800dfec <_vfiprintf_r+0x208>
 800e022:	bf00      	nop
 800e024:	0800ea70 	.word	0x0800ea70
 800e028:	0800ea90 	.word	0x0800ea90
 800e02c:	0800ea50 	.word	0x0800ea50
 800e030:	0800ec0c 	.word	0x0800ec0c
 800e034:	0800ec16 	.word	0x0800ec16
 800e038:	0800bdb9 	.word	0x0800bdb9
 800e03c:	0800ddbf 	.word	0x0800ddbf
 800e040:	0800ec12 	.word	0x0800ec12

0800e044 <_sbrk_r>:
 800e044:	b538      	push	{r3, r4, r5, lr}
 800e046:	4d06      	ldr	r5, [pc, #24]	; (800e060 <_sbrk_r+0x1c>)
 800e048:	2300      	movs	r3, #0
 800e04a:	4604      	mov	r4, r0
 800e04c:	4608      	mov	r0, r1
 800e04e:	602b      	str	r3, [r5, #0]
 800e050:	f7f5 fcee 	bl	8003a30 <_sbrk>
 800e054:	1c43      	adds	r3, r0, #1
 800e056:	d102      	bne.n	800e05e <_sbrk_r+0x1a>
 800e058:	682b      	ldr	r3, [r5, #0]
 800e05a:	b103      	cbz	r3, 800e05e <_sbrk_r+0x1a>
 800e05c:	6023      	str	r3, [r4, #0]
 800e05e:	bd38      	pop	{r3, r4, r5, pc}
 800e060:	200075a8 	.word	0x200075a8

0800e064 <__sread>:
 800e064:	b510      	push	{r4, lr}
 800e066:	460c      	mov	r4, r1
 800e068:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e06c:	f000 faa8 	bl	800e5c0 <_read_r>
 800e070:	2800      	cmp	r0, #0
 800e072:	bfab      	itete	ge
 800e074:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800e076:	89a3      	ldrhlt	r3, [r4, #12]
 800e078:	181b      	addge	r3, r3, r0
 800e07a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800e07e:	bfac      	ite	ge
 800e080:	6563      	strge	r3, [r4, #84]	; 0x54
 800e082:	81a3      	strhlt	r3, [r4, #12]
 800e084:	bd10      	pop	{r4, pc}

0800e086 <__swrite>:
 800e086:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e08a:	461f      	mov	r7, r3
 800e08c:	898b      	ldrh	r3, [r1, #12]
 800e08e:	05db      	lsls	r3, r3, #23
 800e090:	4605      	mov	r5, r0
 800e092:	460c      	mov	r4, r1
 800e094:	4616      	mov	r6, r2
 800e096:	d505      	bpl.n	800e0a4 <__swrite+0x1e>
 800e098:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e09c:	2302      	movs	r3, #2
 800e09e:	2200      	movs	r2, #0
 800e0a0:	f000 f9f8 	bl	800e494 <_lseek_r>
 800e0a4:	89a3      	ldrh	r3, [r4, #12]
 800e0a6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e0aa:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800e0ae:	81a3      	strh	r3, [r4, #12]
 800e0b0:	4632      	mov	r2, r6
 800e0b2:	463b      	mov	r3, r7
 800e0b4:	4628      	mov	r0, r5
 800e0b6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e0ba:	f000 b869 	b.w	800e190 <_write_r>

0800e0be <__sseek>:
 800e0be:	b510      	push	{r4, lr}
 800e0c0:	460c      	mov	r4, r1
 800e0c2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e0c6:	f000 f9e5 	bl	800e494 <_lseek_r>
 800e0ca:	1c43      	adds	r3, r0, #1
 800e0cc:	89a3      	ldrh	r3, [r4, #12]
 800e0ce:	bf15      	itete	ne
 800e0d0:	6560      	strne	r0, [r4, #84]	; 0x54
 800e0d2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800e0d6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800e0da:	81a3      	strheq	r3, [r4, #12]
 800e0dc:	bf18      	it	ne
 800e0de:	81a3      	strhne	r3, [r4, #12]
 800e0e0:	bd10      	pop	{r4, pc}

0800e0e2 <__sclose>:
 800e0e2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e0e6:	f000 b8f1 	b.w	800e2cc <_close_r>
	...

0800e0ec <__swbuf_r>:
 800e0ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e0ee:	460e      	mov	r6, r1
 800e0f0:	4614      	mov	r4, r2
 800e0f2:	4605      	mov	r5, r0
 800e0f4:	b118      	cbz	r0, 800e0fe <__swbuf_r+0x12>
 800e0f6:	6983      	ldr	r3, [r0, #24]
 800e0f8:	b90b      	cbnz	r3, 800e0fe <__swbuf_r+0x12>
 800e0fa:	f7ff f913 	bl	800d324 <__sinit>
 800e0fe:	4b21      	ldr	r3, [pc, #132]	; (800e184 <__swbuf_r+0x98>)
 800e100:	429c      	cmp	r4, r3
 800e102:	d12b      	bne.n	800e15c <__swbuf_r+0x70>
 800e104:	686c      	ldr	r4, [r5, #4]
 800e106:	69a3      	ldr	r3, [r4, #24]
 800e108:	60a3      	str	r3, [r4, #8]
 800e10a:	89a3      	ldrh	r3, [r4, #12]
 800e10c:	071a      	lsls	r2, r3, #28
 800e10e:	d52f      	bpl.n	800e170 <__swbuf_r+0x84>
 800e110:	6923      	ldr	r3, [r4, #16]
 800e112:	b36b      	cbz	r3, 800e170 <__swbuf_r+0x84>
 800e114:	6923      	ldr	r3, [r4, #16]
 800e116:	6820      	ldr	r0, [r4, #0]
 800e118:	1ac0      	subs	r0, r0, r3
 800e11a:	6963      	ldr	r3, [r4, #20]
 800e11c:	b2f6      	uxtb	r6, r6
 800e11e:	4283      	cmp	r3, r0
 800e120:	4637      	mov	r7, r6
 800e122:	dc04      	bgt.n	800e12e <__swbuf_r+0x42>
 800e124:	4621      	mov	r1, r4
 800e126:	4628      	mov	r0, r5
 800e128:	f000 f966 	bl	800e3f8 <_fflush_r>
 800e12c:	bb30      	cbnz	r0, 800e17c <__swbuf_r+0x90>
 800e12e:	68a3      	ldr	r3, [r4, #8]
 800e130:	3b01      	subs	r3, #1
 800e132:	60a3      	str	r3, [r4, #8]
 800e134:	6823      	ldr	r3, [r4, #0]
 800e136:	1c5a      	adds	r2, r3, #1
 800e138:	6022      	str	r2, [r4, #0]
 800e13a:	701e      	strb	r6, [r3, #0]
 800e13c:	6963      	ldr	r3, [r4, #20]
 800e13e:	3001      	adds	r0, #1
 800e140:	4283      	cmp	r3, r0
 800e142:	d004      	beq.n	800e14e <__swbuf_r+0x62>
 800e144:	89a3      	ldrh	r3, [r4, #12]
 800e146:	07db      	lsls	r3, r3, #31
 800e148:	d506      	bpl.n	800e158 <__swbuf_r+0x6c>
 800e14a:	2e0a      	cmp	r6, #10
 800e14c:	d104      	bne.n	800e158 <__swbuf_r+0x6c>
 800e14e:	4621      	mov	r1, r4
 800e150:	4628      	mov	r0, r5
 800e152:	f000 f951 	bl	800e3f8 <_fflush_r>
 800e156:	b988      	cbnz	r0, 800e17c <__swbuf_r+0x90>
 800e158:	4638      	mov	r0, r7
 800e15a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e15c:	4b0a      	ldr	r3, [pc, #40]	; (800e188 <__swbuf_r+0x9c>)
 800e15e:	429c      	cmp	r4, r3
 800e160:	d101      	bne.n	800e166 <__swbuf_r+0x7a>
 800e162:	68ac      	ldr	r4, [r5, #8]
 800e164:	e7cf      	b.n	800e106 <__swbuf_r+0x1a>
 800e166:	4b09      	ldr	r3, [pc, #36]	; (800e18c <__swbuf_r+0xa0>)
 800e168:	429c      	cmp	r4, r3
 800e16a:	bf08      	it	eq
 800e16c:	68ec      	ldreq	r4, [r5, #12]
 800e16e:	e7ca      	b.n	800e106 <__swbuf_r+0x1a>
 800e170:	4621      	mov	r1, r4
 800e172:	4628      	mov	r0, r5
 800e174:	f000 f81e 	bl	800e1b4 <__swsetup_r>
 800e178:	2800      	cmp	r0, #0
 800e17a:	d0cb      	beq.n	800e114 <__swbuf_r+0x28>
 800e17c:	f04f 37ff 	mov.w	r7, #4294967295
 800e180:	e7ea      	b.n	800e158 <__swbuf_r+0x6c>
 800e182:	bf00      	nop
 800e184:	0800ea70 	.word	0x0800ea70
 800e188:	0800ea90 	.word	0x0800ea90
 800e18c:	0800ea50 	.word	0x0800ea50

0800e190 <_write_r>:
 800e190:	b538      	push	{r3, r4, r5, lr}
 800e192:	4d07      	ldr	r5, [pc, #28]	; (800e1b0 <_write_r+0x20>)
 800e194:	4604      	mov	r4, r0
 800e196:	4608      	mov	r0, r1
 800e198:	4611      	mov	r1, r2
 800e19a:	2200      	movs	r2, #0
 800e19c:	602a      	str	r2, [r5, #0]
 800e19e:	461a      	mov	r2, r3
 800e1a0:	f7f2 ff53 	bl	800104a <_write>
 800e1a4:	1c43      	adds	r3, r0, #1
 800e1a6:	d102      	bne.n	800e1ae <_write_r+0x1e>
 800e1a8:	682b      	ldr	r3, [r5, #0]
 800e1aa:	b103      	cbz	r3, 800e1ae <_write_r+0x1e>
 800e1ac:	6023      	str	r3, [r4, #0]
 800e1ae:	bd38      	pop	{r3, r4, r5, pc}
 800e1b0:	200075a8 	.word	0x200075a8

0800e1b4 <__swsetup_r>:
 800e1b4:	4b32      	ldr	r3, [pc, #200]	; (800e280 <__swsetup_r+0xcc>)
 800e1b6:	b570      	push	{r4, r5, r6, lr}
 800e1b8:	681d      	ldr	r5, [r3, #0]
 800e1ba:	4606      	mov	r6, r0
 800e1bc:	460c      	mov	r4, r1
 800e1be:	b125      	cbz	r5, 800e1ca <__swsetup_r+0x16>
 800e1c0:	69ab      	ldr	r3, [r5, #24]
 800e1c2:	b913      	cbnz	r3, 800e1ca <__swsetup_r+0x16>
 800e1c4:	4628      	mov	r0, r5
 800e1c6:	f7ff f8ad 	bl	800d324 <__sinit>
 800e1ca:	4b2e      	ldr	r3, [pc, #184]	; (800e284 <__swsetup_r+0xd0>)
 800e1cc:	429c      	cmp	r4, r3
 800e1ce:	d10f      	bne.n	800e1f0 <__swsetup_r+0x3c>
 800e1d0:	686c      	ldr	r4, [r5, #4]
 800e1d2:	89a3      	ldrh	r3, [r4, #12]
 800e1d4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800e1d8:	0719      	lsls	r1, r3, #28
 800e1da:	d42c      	bmi.n	800e236 <__swsetup_r+0x82>
 800e1dc:	06dd      	lsls	r5, r3, #27
 800e1de:	d411      	bmi.n	800e204 <__swsetup_r+0x50>
 800e1e0:	2309      	movs	r3, #9
 800e1e2:	6033      	str	r3, [r6, #0]
 800e1e4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800e1e8:	81a3      	strh	r3, [r4, #12]
 800e1ea:	f04f 30ff 	mov.w	r0, #4294967295
 800e1ee:	e03e      	b.n	800e26e <__swsetup_r+0xba>
 800e1f0:	4b25      	ldr	r3, [pc, #148]	; (800e288 <__swsetup_r+0xd4>)
 800e1f2:	429c      	cmp	r4, r3
 800e1f4:	d101      	bne.n	800e1fa <__swsetup_r+0x46>
 800e1f6:	68ac      	ldr	r4, [r5, #8]
 800e1f8:	e7eb      	b.n	800e1d2 <__swsetup_r+0x1e>
 800e1fa:	4b24      	ldr	r3, [pc, #144]	; (800e28c <__swsetup_r+0xd8>)
 800e1fc:	429c      	cmp	r4, r3
 800e1fe:	bf08      	it	eq
 800e200:	68ec      	ldreq	r4, [r5, #12]
 800e202:	e7e6      	b.n	800e1d2 <__swsetup_r+0x1e>
 800e204:	0758      	lsls	r0, r3, #29
 800e206:	d512      	bpl.n	800e22e <__swsetup_r+0x7a>
 800e208:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800e20a:	b141      	cbz	r1, 800e21e <__swsetup_r+0x6a>
 800e20c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800e210:	4299      	cmp	r1, r3
 800e212:	d002      	beq.n	800e21a <__swsetup_r+0x66>
 800e214:	4630      	mov	r0, r6
 800e216:	f7ff fcdb 	bl	800dbd0 <_free_r>
 800e21a:	2300      	movs	r3, #0
 800e21c:	6363      	str	r3, [r4, #52]	; 0x34
 800e21e:	89a3      	ldrh	r3, [r4, #12]
 800e220:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800e224:	81a3      	strh	r3, [r4, #12]
 800e226:	2300      	movs	r3, #0
 800e228:	6063      	str	r3, [r4, #4]
 800e22a:	6923      	ldr	r3, [r4, #16]
 800e22c:	6023      	str	r3, [r4, #0]
 800e22e:	89a3      	ldrh	r3, [r4, #12]
 800e230:	f043 0308 	orr.w	r3, r3, #8
 800e234:	81a3      	strh	r3, [r4, #12]
 800e236:	6923      	ldr	r3, [r4, #16]
 800e238:	b94b      	cbnz	r3, 800e24e <__swsetup_r+0x9a>
 800e23a:	89a3      	ldrh	r3, [r4, #12]
 800e23c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800e240:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e244:	d003      	beq.n	800e24e <__swsetup_r+0x9a>
 800e246:	4621      	mov	r1, r4
 800e248:	4630      	mov	r0, r6
 800e24a:	f000 f95b 	bl	800e504 <__smakebuf_r>
 800e24e:	89a0      	ldrh	r0, [r4, #12]
 800e250:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800e254:	f010 0301 	ands.w	r3, r0, #1
 800e258:	d00a      	beq.n	800e270 <__swsetup_r+0xbc>
 800e25a:	2300      	movs	r3, #0
 800e25c:	60a3      	str	r3, [r4, #8]
 800e25e:	6963      	ldr	r3, [r4, #20]
 800e260:	425b      	negs	r3, r3
 800e262:	61a3      	str	r3, [r4, #24]
 800e264:	6923      	ldr	r3, [r4, #16]
 800e266:	b943      	cbnz	r3, 800e27a <__swsetup_r+0xc6>
 800e268:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800e26c:	d1ba      	bne.n	800e1e4 <__swsetup_r+0x30>
 800e26e:	bd70      	pop	{r4, r5, r6, pc}
 800e270:	0781      	lsls	r1, r0, #30
 800e272:	bf58      	it	pl
 800e274:	6963      	ldrpl	r3, [r4, #20]
 800e276:	60a3      	str	r3, [r4, #8]
 800e278:	e7f4      	b.n	800e264 <__swsetup_r+0xb0>
 800e27a:	2000      	movs	r0, #0
 800e27c:	e7f7      	b.n	800e26e <__swsetup_r+0xba>
 800e27e:	bf00      	nop
 800e280:	20000030 	.word	0x20000030
 800e284:	0800ea70 	.word	0x0800ea70
 800e288:	0800ea90 	.word	0x0800ea90
 800e28c:	0800ea50 	.word	0x0800ea50

0800e290 <__assert_func>:
 800e290:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800e292:	4614      	mov	r4, r2
 800e294:	461a      	mov	r2, r3
 800e296:	4b09      	ldr	r3, [pc, #36]	; (800e2bc <__assert_func+0x2c>)
 800e298:	681b      	ldr	r3, [r3, #0]
 800e29a:	4605      	mov	r5, r0
 800e29c:	68d8      	ldr	r0, [r3, #12]
 800e29e:	b14c      	cbz	r4, 800e2b4 <__assert_func+0x24>
 800e2a0:	4b07      	ldr	r3, [pc, #28]	; (800e2c0 <__assert_func+0x30>)
 800e2a2:	9100      	str	r1, [sp, #0]
 800e2a4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800e2a8:	4906      	ldr	r1, [pc, #24]	; (800e2c4 <__assert_func+0x34>)
 800e2aa:	462b      	mov	r3, r5
 800e2ac:	f000 f8e0 	bl	800e470 <fiprintf>
 800e2b0:	f000 f9a5 	bl	800e5fe <abort>
 800e2b4:	4b04      	ldr	r3, [pc, #16]	; (800e2c8 <__assert_func+0x38>)
 800e2b6:	461c      	mov	r4, r3
 800e2b8:	e7f3      	b.n	800e2a2 <__assert_func+0x12>
 800e2ba:	bf00      	nop
 800e2bc:	20000030 	.word	0x20000030
 800e2c0:	0800ec1d 	.word	0x0800ec1d
 800e2c4:	0800ec2a 	.word	0x0800ec2a
 800e2c8:	0800ec58 	.word	0x0800ec58

0800e2cc <_close_r>:
 800e2cc:	b538      	push	{r3, r4, r5, lr}
 800e2ce:	4d06      	ldr	r5, [pc, #24]	; (800e2e8 <_close_r+0x1c>)
 800e2d0:	2300      	movs	r3, #0
 800e2d2:	4604      	mov	r4, r0
 800e2d4:	4608      	mov	r0, r1
 800e2d6:	602b      	str	r3, [r5, #0]
 800e2d8:	f7f5 fb75 	bl	80039c6 <_close>
 800e2dc:	1c43      	adds	r3, r0, #1
 800e2de:	d102      	bne.n	800e2e6 <_close_r+0x1a>
 800e2e0:	682b      	ldr	r3, [r5, #0]
 800e2e2:	b103      	cbz	r3, 800e2e6 <_close_r+0x1a>
 800e2e4:	6023      	str	r3, [r4, #0]
 800e2e6:	bd38      	pop	{r3, r4, r5, pc}
 800e2e8:	200075a8 	.word	0x200075a8

0800e2ec <__sflush_r>:
 800e2ec:	898a      	ldrh	r2, [r1, #12]
 800e2ee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e2f2:	4605      	mov	r5, r0
 800e2f4:	0710      	lsls	r0, r2, #28
 800e2f6:	460c      	mov	r4, r1
 800e2f8:	d458      	bmi.n	800e3ac <__sflush_r+0xc0>
 800e2fa:	684b      	ldr	r3, [r1, #4]
 800e2fc:	2b00      	cmp	r3, #0
 800e2fe:	dc05      	bgt.n	800e30c <__sflush_r+0x20>
 800e300:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800e302:	2b00      	cmp	r3, #0
 800e304:	dc02      	bgt.n	800e30c <__sflush_r+0x20>
 800e306:	2000      	movs	r0, #0
 800e308:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e30c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800e30e:	2e00      	cmp	r6, #0
 800e310:	d0f9      	beq.n	800e306 <__sflush_r+0x1a>
 800e312:	2300      	movs	r3, #0
 800e314:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800e318:	682f      	ldr	r7, [r5, #0]
 800e31a:	602b      	str	r3, [r5, #0]
 800e31c:	d032      	beq.n	800e384 <__sflush_r+0x98>
 800e31e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800e320:	89a3      	ldrh	r3, [r4, #12]
 800e322:	075a      	lsls	r2, r3, #29
 800e324:	d505      	bpl.n	800e332 <__sflush_r+0x46>
 800e326:	6863      	ldr	r3, [r4, #4]
 800e328:	1ac0      	subs	r0, r0, r3
 800e32a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800e32c:	b10b      	cbz	r3, 800e332 <__sflush_r+0x46>
 800e32e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800e330:	1ac0      	subs	r0, r0, r3
 800e332:	2300      	movs	r3, #0
 800e334:	4602      	mov	r2, r0
 800e336:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800e338:	6a21      	ldr	r1, [r4, #32]
 800e33a:	4628      	mov	r0, r5
 800e33c:	47b0      	blx	r6
 800e33e:	1c43      	adds	r3, r0, #1
 800e340:	89a3      	ldrh	r3, [r4, #12]
 800e342:	d106      	bne.n	800e352 <__sflush_r+0x66>
 800e344:	6829      	ldr	r1, [r5, #0]
 800e346:	291d      	cmp	r1, #29
 800e348:	d82c      	bhi.n	800e3a4 <__sflush_r+0xb8>
 800e34a:	4a2a      	ldr	r2, [pc, #168]	; (800e3f4 <__sflush_r+0x108>)
 800e34c:	40ca      	lsrs	r2, r1
 800e34e:	07d6      	lsls	r6, r2, #31
 800e350:	d528      	bpl.n	800e3a4 <__sflush_r+0xb8>
 800e352:	2200      	movs	r2, #0
 800e354:	6062      	str	r2, [r4, #4]
 800e356:	04d9      	lsls	r1, r3, #19
 800e358:	6922      	ldr	r2, [r4, #16]
 800e35a:	6022      	str	r2, [r4, #0]
 800e35c:	d504      	bpl.n	800e368 <__sflush_r+0x7c>
 800e35e:	1c42      	adds	r2, r0, #1
 800e360:	d101      	bne.n	800e366 <__sflush_r+0x7a>
 800e362:	682b      	ldr	r3, [r5, #0]
 800e364:	b903      	cbnz	r3, 800e368 <__sflush_r+0x7c>
 800e366:	6560      	str	r0, [r4, #84]	; 0x54
 800e368:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800e36a:	602f      	str	r7, [r5, #0]
 800e36c:	2900      	cmp	r1, #0
 800e36e:	d0ca      	beq.n	800e306 <__sflush_r+0x1a>
 800e370:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800e374:	4299      	cmp	r1, r3
 800e376:	d002      	beq.n	800e37e <__sflush_r+0x92>
 800e378:	4628      	mov	r0, r5
 800e37a:	f7ff fc29 	bl	800dbd0 <_free_r>
 800e37e:	2000      	movs	r0, #0
 800e380:	6360      	str	r0, [r4, #52]	; 0x34
 800e382:	e7c1      	b.n	800e308 <__sflush_r+0x1c>
 800e384:	6a21      	ldr	r1, [r4, #32]
 800e386:	2301      	movs	r3, #1
 800e388:	4628      	mov	r0, r5
 800e38a:	47b0      	blx	r6
 800e38c:	1c41      	adds	r1, r0, #1
 800e38e:	d1c7      	bne.n	800e320 <__sflush_r+0x34>
 800e390:	682b      	ldr	r3, [r5, #0]
 800e392:	2b00      	cmp	r3, #0
 800e394:	d0c4      	beq.n	800e320 <__sflush_r+0x34>
 800e396:	2b1d      	cmp	r3, #29
 800e398:	d001      	beq.n	800e39e <__sflush_r+0xb2>
 800e39a:	2b16      	cmp	r3, #22
 800e39c:	d101      	bne.n	800e3a2 <__sflush_r+0xb6>
 800e39e:	602f      	str	r7, [r5, #0]
 800e3a0:	e7b1      	b.n	800e306 <__sflush_r+0x1a>
 800e3a2:	89a3      	ldrh	r3, [r4, #12]
 800e3a4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e3a8:	81a3      	strh	r3, [r4, #12]
 800e3aa:	e7ad      	b.n	800e308 <__sflush_r+0x1c>
 800e3ac:	690f      	ldr	r7, [r1, #16]
 800e3ae:	2f00      	cmp	r7, #0
 800e3b0:	d0a9      	beq.n	800e306 <__sflush_r+0x1a>
 800e3b2:	0793      	lsls	r3, r2, #30
 800e3b4:	680e      	ldr	r6, [r1, #0]
 800e3b6:	bf08      	it	eq
 800e3b8:	694b      	ldreq	r3, [r1, #20]
 800e3ba:	600f      	str	r7, [r1, #0]
 800e3bc:	bf18      	it	ne
 800e3be:	2300      	movne	r3, #0
 800e3c0:	eba6 0807 	sub.w	r8, r6, r7
 800e3c4:	608b      	str	r3, [r1, #8]
 800e3c6:	f1b8 0f00 	cmp.w	r8, #0
 800e3ca:	dd9c      	ble.n	800e306 <__sflush_r+0x1a>
 800e3cc:	6a21      	ldr	r1, [r4, #32]
 800e3ce:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800e3d0:	4643      	mov	r3, r8
 800e3d2:	463a      	mov	r2, r7
 800e3d4:	4628      	mov	r0, r5
 800e3d6:	47b0      	blx	r6
 800e3d8:	2800      	cmp	r0, #0
 800e3da:	dc06      	bgt.n	800e3ea <__sflush_r+0xfe>
 800e3dc:	89a3      	ldrh	r3, [r4, #12]
 800e3de:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e3e2:	81a3      	strh	r3, [r4, #12]
 800e3e4:	f04f 30ff 	mov.w	r0, #4294967295
 800e3e8:	e78e      	b.n	800e308 <__sflush_r+0x1c>
 800e3ea:	4407      	add	r7, r0
 800e3ec:	eba8 0800 	sub.w	r8, r8, r0
 800e3f0:	e7e9      	b.n	800e3c6 <__sflush_r+0xda>
 800e3f2:	bf00      	nop
 800e3f4:	20400001 	.word	0x20400001

0800e3f8 <_fflush_r>:
 800e3f8:	b538      	push	{r3, r4, r5, lr}
 800e3fa:	690b      	ldr	r3, [r1, #16]
 800e3fc:	4605      	mov	r5, r0
 800e3fe:	460c      	mov	r4, r1
 800e400:	b913      	cbnz	r3, 800e408 <_fflush_r+0x10>
 800e402:	2500      	movs	r5, #0
 800e404:	4628      	mov	r0, r5
 800e406:	bd38      	pop	{r3, r4, r5, pc}
 800e408:	b118      	cbz	r0, 800e412 <_fflush_r+0x1a>
 800e40a:	6983      	ldr	r3, [r0, #24]
 800e40c:	b90b      	cbnz	r3, 800e412 <_fflush_r+0x1a>
 800e40e:	f7fe ff89 	bl	800d324 <__sinit>
 800e412:	4b14      	ldr	r3, [pc, #80]	; (800e464 <_fflush_r+0x6c>)
 800e414:	429c      	cmp	r4, r3
 800e416:	d11b      	bne.n	800e450 <_fflush_r+0x58>
 800e418:	686c      	ldr	r4, [r5, #4]
 800e41a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e41e:	2b00      	cmp	r3, #0
 800e420:	d0ef      	beq.n	800e402 <_fflush_r+0xa>
 800e422:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800e424:	07d0      	lsls	r0, r2, #31
 800e426:	d404      	bmi.n	800e432 <_fflush_r+0x3a>
 800e428:	0599      	lsls	r1, r3, #22
 800e42a:	d402      	bmi.n	800e432 <_fflush_r+0x3a>
 800e42c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e42e:	f7ff f81c 	bl	800d46a <__retarget_lock_acquire_recursive>
 800e432:	4628      	mov	r0, r5
 800e434:	4621      	mov	r1, r4
 800e436:	f7ff ff59 	bl	800e2ec <__sflush_r>
 800e43a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800e43c:	07da      	lsls	r2, r3, #31
 800e43e:	4605      	mov	r5, r0
 800e440:	d4e0      	bmi.n	800e404 <_fflush_r+0xc>
 800e442:	89a3      	ldrh	r3, [r4, #12]
 800e444:	059b      	lsls	r3, r3, #22
 800e446:	d4dd      	bmi.n	800e404 <_fflush_r+0xc>
 800e448:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e44a:	f7ff f80f 	bl	800d46c <__retarget_lock_release_recursive>
 800e44e:	e7d9      	b.n	800e404 <_fflush_r+0xc>
 800e450:	4b05      	ldr	r3, [pc, #20]	; (800e468 <_fflush_r+0x70>)
 800e452:	429c      	cmp	r4, r3
 800e454:	d101      	bne.n	800e45a <_fflush_r+0x62>
 800e456:	68ac      	ldr	r4, [r5, #8]
 800e458:	e7df      	b.n	800e41a <_fflush_r+0x22>
 800e45a:	4b04      	ldr	r3, [pc, #16]	; (800e46c <_fflush_r+0x74>)
 800e45c:	429c      	cmp	r4, r3
 800e45e:	bf08      	it	eq
 800e460:	68ec      	ldreq	r4, [r5, #12]
 800e462:	e7da      	b.n	800e41a <_fflush_r+0x22>
 800e464:	0800ea70 	.word	0x0800ea70
 800e468:	0800ea90 	.word	0x0800ea90
 800e46c:	0800ea50 	.word	0x0800ea50

0800e470 <fiprintf>:
 800e470:	b40e      	push	{r1, r2, r3}
 800e472:	b503      	push	{r0, r1, lr}
 800e474:	4601      	mov	r1, r0
 800e476:	ab03      	add	r3, sp, #12
 800e478:	4805      	ldr	r0, [pc, #20]	; (800e490 <fiprintf+0x20>)
 800e47a:	f853 2b04 	ldr.w	r2, [r3], #4
 800e47e:	6800      	ldr	r0, [r0, #0]
 800e480:	9301      	str	r3, [sp, #4]
 800e482:	f7ff fcaf 	bl	800dde4 <_vfiprintf_r>
 800e486:	b002      	add	sp, #8
 800e488:	f85d eb04 	ldr.w	lr, [sp], #4
 800e48c:	b003      	add	sp, #12
 800e48e:	4770      	bx	lr
 800e490:	20000030 	.word	0x20000030

0800e494 <_lseek_r>:
 800e494:	b538      	push	{r3, r4, r5, lr}
 800e496:	4d07      	ldr	r5, [pc, #28]	; (800e4b4 <_lseek_r+0x20>)
 800e498:	4604      	mov	r4, r0
 800e49a:	4608      	mov	r0, r1
 800e49c:	4611      	mov	r1, r2
 800e49e:	2200      	movs	r2, #0
 800e4a0:	602a      	str	r2, [r5, #0]
 800e4a2:	461a      	mov	r2, r3
 800e4a4:	f7f5 fab6 	bl	8003a14 <_lseek>
 800e4a8:	1c43      	adds	r3, r0, #1
 800e4aa:	d102      	bne.n	800e4b2 <_lseek_r+0x1e>
 800e4ac:	682b      	ldr	r3, [r5, #0]
 800e4ae:	b103      	cbz	r3, 800e4b2 <_lseek_r+0x1e>
 800e4b0:	6023      	str	r3, [r4, #0]
 800e4b2:	bd38      	pop	{r3, r4, r5, pc}
 800e4b4:	200075a8 	.word	0x200075a8

0800e4b8 <__swhatbuf_r>:
 800e4b8:	b570      	push	{r4, r5, r6, lr}
 800e4ba:	460e      	mov	r6, r1
 800e4bc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e4c0:	2900      	cmp	r1, #0
 800e4c2:	b096      	sub	sp, #88	; 0x58
 800e4c4:	4614      	mov	r4, r2
 800e4c6:	461d      	mov	r5, r3
 800e4c8:	da08      	bge.n	800e4dc <__swhatbuf_r+0x24>
 800e4ca:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800e4ce:	2200      	movs	r2, #0
 800e4d0:	602a      	str	r2, [r5, #0]
 800e4d2:	061a      	lsls	r2, r3, #24
 800e4d4:	d410      	bmi.n	800e4f8 <__swhatbuf_r+0x40>
 800e4d6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e4da:	e00e      	b.n	800e4fa <__swhatbuf_r+0x42>
 800e4dc:	466a      	mov	r2, sp
 800e4de:	f000 f895 	bl	800e60c <_fstat_r>
 800e4e2:	2800      	cmp	r0, #0
 800e4e4:	dbf1      	blt.n	800e4ca <__swhatbuf_r+0x12>
 800e4e6:	9a01      	ldr	r2, [sp, #4]
 800e4e8:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800e4ec:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800e4f0:	425a      	negs	r2, r3
 800e4f2:	415a      	adcs	r2, r3
 800e4f4:	602a      	str	r2, [r5, #0]
 800e4f6:	e7ee      	b.n	800e4d6 <__swhatbuf_r+0x1e>
 800e4f8:	2340      	movs	r3, #64	; 0x40
 800e4fa:	2000      	movs	r0, #0
 800e4fc:	6023      	str	r3, [r4, #0]
 800e4fe:	b016      	add	sp, #88	; 0x58
 800e500:	bd70      	pop	{r4, r5, r6, pc}
	...

0800e504 <__smakebuf_r>:
 800e504:	898b      	ldrh	r3, [r1, #12]
 800e506:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800e508:	079d      	lsls	r5, r3, #30
 800e50a:	4606      	mov	r6, r0
 800e50c:	460c      	mov	r4, r1
 800e50e:	d507      	bpl.n	800e520 <__smakebuf_r+0x1c>
 800e510:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800e514:	6023      	str	r3, [r4, #0]
 800e516:	6123      	str	r3, [r4, #16]
 800e518:	2301      	movs	r3, #1
 800e51a:	6163      	str	r3, [r4, #20]
 800e51c:	b002      	add	sp, #8
 800e51e:	bd70      	pop	{r4, r5, r6, pc}
 800e520:	ab01      	add	r3, sp, #4
 800e522:	466a      	mov	r2, sp
 800e524:	f7ff ffc8 	bl	800e4b8 <__swhatbuf_r>
 800e528:	9900      	ldr	r1, [sp, #0]
 800e52a:	4605      	mov	r5, r0
 800e52c:	4630      	mov	r0, r6
 800e52e:	f7ff fbbb 	bl	800dca8 <_malloc_r>
 800e532:	b948      	cbnz	r0, 800e548 <__smakebuf_r+0x44>
 800e534:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e538:	059a      	lsls	r2, r3, #22
 800e53a:	d4ef      	bmi.n	800e51c <__smakebuf_r+0x18>
 800e53c:	f023 0303 	bic.w	r3, r3, #3
 800e540:	f043 0302 	orr.w	r3, r3, #2
 800e544:	81a3      	strh	r3, [r4, #12]
 800e546:	e7e3      	b.n	800e510 <__smakebuf_r+0xc>
 800e548:	4b0d      	ldr	r3, [pc, #52]	; (800e580 <__smakebuf_r+0x7c>)
 800e54a:	62b3      	str	r3, [r6, #40]	; 0x28
 800e54c:	89a3      	ldrh	r3, [r4, #12]
 800e54e:	6020      	str	r0, [r4, #0]
 800e550:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e554:	81a3      	strh	r3, [r4, #12]
 800e556:	9b00      	ldr	r3, [sp, #0]
 800e558:	6163      	str	r3, [r4, #20]
 800e55a:	9b01      	ldr	r3, [sp, #4]
 800e55c:	6120      	str	r0, [r4, #16]
 800e55e:	b15b      	cbz	r3, 800e578 <__smakebuf_r+0x74>
 800e560:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e564:	4630      	mov	r0, r6
 800e566:	f000 f863 	bl	800e630 <_isatty_r>
 800e56a:	b128      	cbz	r0, 800e578 <__smakebuf_r+0x74>
 800e56c:	89a3      	ldrh	r3, [r4, #12]
 800e56e:	f023 0303 	bic.w	r3, r3, #3
 800e572:	f043 0301 	orr.w	r3, r3, #1
 800e576:	81a3      	strh	r3, [r4, #12]
 800e578:	89a0      	ldrh	r0, [r4, #12]
 800e57a:	4305      	orrs	r5, r0
 800e57c:	81a5      	strh	r5, [r4, #12]
 800e57e:	e7cd      	b.n	800e51c <__smakebuf_r+0x18>
 800e580:	0800d2bd 	.word	0x0800d2bd

0800e584 <__ascii_mbtowc>:
 800e584:	b082      	sub	sp, #8
 800e586:	b901      	cbnz	r1, 800e58a <__ascii_mbtowc+0x6>
 800e588:	a901      	add	r1, sp, #4
 800e58a:	b142      	cbz	r2, 800e59e <__ascii_mbtowc+0x1a>
 800e58c:	b14b      	cbz	r3, 800e5a2 <__ascii_mbtowc+0x1e>
 800e58e:	7813      	ldrb	r3, [r2, #0]
 800e590:	600b      	str	r3, [r1, #0]
 800e592:	7812      	ldrb	r2, [r2, #0]
 800e594:	1e10      	subs	r0, r2, #0
 800e596:	bf18      	it	ne
 800e598:	2001      	movne	r0, #1
 800e59a:	b002      	add	sp, #8
 800e59c:	4770      	bx	lr
 800e59e:	4610      	mov	r0, r2
 800e5a0:	e7fb      	b.n	800e59a <__ascii_mbtowc+0x16>
 800e5a2:	f06f 0001 	mvn.w	r0, #1
 800e5a6:	e7f8      	b.n	800e59a <__ascii_mbtowc+0x16>

0800e5a8 <__malloc_lock>:
 800e5a8:	4801      	ldr	r0, [pc, #4]	; (800e5b0 <__malloc_lock+0x8>)
 800e5aa:	f7fe bf5e 	b.w	800d46a <__retarget_lock_acquire_recursive>
 800e5ae:	bf00      	nop
 800e5b0:	2000759c 	.word	0x2000759c

0800e5b4 <__malloc_unlock>:
 800e5b4:	4801      	ldr	r0, [pc, #4]	; (800e5bc <__malloc_unlock+0x8>)
 800e5b6:	f7fe bf59 	b.w	800d46c <__retarget_lock_release_recursive>
 800e5ba:	bf00      	nop
 800e5bc:	2000759c 	.word	0x2000759c

0800e5c0 <_read_r>:
 800e5c0:	b538      	push	{r3, r4, r5, lr}
 800e5c2:	4d07      	ldr	r5, [pc, #28]	; (800e5e0 <_read_r+0x20>)
 800e5c4:	4604      	mov	r4, r0
 800e5c6:	4608      	mov	r0, r1
 800e5c8:	4611      	mov	r1, r2
 800e5ca:	2200      	movs	r2, #0
 800e5cc:	602a      	str	r2, [r5, #0]
 800e5ce:	461a      	mov	r2, r3
 800e5d0:	f7f5 f9dc 	bl	800398c <_read>
 800e5d4:	1c43      	adds	r3, r0, #1
 800e5d6:	d102      	bne.n	800e5de <_read_r+0x1e>
 800e5d8:	682b      	ldr	r3, [r5, #0]
 800e5da:	b103      	cbz	r3, 800e5de <_read_r+0x1e>
 800e5dc:	6023      	str	r3, [r4, #0]
 800e5de:	bd38      	pop	{r3, r4, r5, pc}
 800e5e0:	200075a8 	.word	0x200075a8

0800e5e4 <__ascii_wctomb>:
 800e5e4:	b149      	cbz	r1, 800e5fa <__ascii_wctomb+0x16>
 800e5e6:	2aff      	cmp	r2, #255	; 0xff
 800e5e8:	bf85      	ittet	hi
 800e5ea:	238a      	movhi	r3, #138	; 0x8a
 800e5ec:	6003      	strhi	r3, [r0, #0]
 800e5ee:	700a      	strbls	r2, [r1, #0]
 800e5f0:	f04f 30ff 	movhi.w	r0, #4294967295
 800e5f4:	bf98      	it	ls
 800e5f6:	2001      	movls	r0, #1
 800e5f8:	4770      	bx	lr
 800e5fa:	4608      	mov	r0, r1
 800e5fc:	4770      	bx	lr

0800e5fe <abort>:
 800e5fe:	b508      	push	{r3, lr}
 800e600:	2006      	movs	r0, #6
 800e602:	f000 f84d 	bl	800e6a0 <raise>
 800e606:	2001      	movs	r0, #1
 800e608:	f7f5 f9b6 	bl	8003978 <_exit>

0800e60c <_fstat_r>:
 800e60c:	b538      	push	{r3, r4, r5, lr}
 800e60e:	4d07      	ldr	r5, [pc, #28]	; (800e62c <_fstat_r+0x20>)
 800e610:	2300      	movs	r3, #0
 800e612:	4604      	mov	r4, r0
 800e614:	4608      	mov	r0, r1
 800e616:	4611      	mov	r1, r2
 800e618:	602b      	str	r3, [r5, #0]
 800e61a:	f7f5 f9e0 	bl	80039de <_fstat>
 800e61e:	1c43      	adds	r3, r0, #1
 800e620:	d102      	bne.n	800e628 <_fstat_r+0x1c>
 800e622:	682b      	ldr	r3, [r5, #0]
 800e624:	b103      	cbz	r3, 800e628 <_fstat_r+0x1c>
 800e626:	6023      	str	r3, [r4, #0]
 800e628:	bd38      	pop	{r3, r4, r5, pc}
 800e62a:	bf00      	nop
 800e62c:	200075a8 	.word	0x200075a8

0800e630 <_isatty_r>:
 800e630:	b538      	push	{r3, r4, r5, lr}
 800e632:	4d06      	ldr	r5, [pc, #24]	; (800e64c <_isatty_r+0x1c>)
 800e634:	2300      	movs	r3, #0
 800e636:	4604      	mov	r4, r0
 800e638:	4608      	mov	r0, r1
 800e63a:	602b      	str	r3, [r5, #0]
 800e63c:	f7f5 f9df 	bl	80039fe <_isatty>
 800e640:	1c43      	adds	r3, r0, #1
 800e642:	d102      	bne.n	800e64a <_isatty_r+0x1a>
 800e644:	682b      	ldr	r3, [r5, #0]
 800e646:	b103      	cbz	r3, 800e64a <_isatty_r+0x1a>
 800e648:	6023      	str	r3, [r4, #0]
 800e64a:	bd38      	pop	{r3, r4, r5, pc}
 800e64c:	200075a8 	.word	0x200075a8

0800e650 <_raise_r>:
 800e650:	291f      	cmp	r1, #31
 800e652:	b538      	push	{r3, r4, r5, lr}
 800e654:	4604      	mov	r4, r0
 800e656:	460d      	mov	r5, r1
 800e658:	d904      	bls.n	800e664 <_raise_r+0x14>
 800e65a:	2316      	movs	r3, #22
 800e65c:	6003      	str	r3, [r0, #0]
 800e65e:	f04f 30ff 	mov.w	r0, #4294967295
 800e662:	bd38      	pop	{r3, r4, r5, pc}
 800e664:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800e666:	b112      	cbz	r2, 800e66e <_raise_r+0x1e>
 800e668:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800e66c:	b94b      	cbnz	r3, 800e682 <_raise_r+0x32>
 800e66e:	4620      	mov	r0, r4
 800e670:	f000 f830 	bl	800e6d4 <_getpid_r>
 800e674:	462a      	mov	r2, r5
 800e676:	4601      	mov	r1, r0
 800e678:	4620      	mov	r0, r4
 800e67a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e67e:	f000 b817 	b.w	800e6b0 <_kill_r>
 800e682:	2b01      	cmp	r3, #1
 800e684:	d00a      	beq.n	800e69c <_raise_r+0x4c>
 800e686:	1c59      	adds	r1, r3, #1
 800e688:	d103      	bne.n	800e692 <_raise_r+0x42>
 800e68a:	2316      	movs	r3, #22
 800e68c:	6003      	str	r3, [r0, #0]
 800e68e:	2001      	movs	r0, #1
 800e690:	e7e7      	b.n	800e662 <_raise_r+0x12>
 800e692:	2400      	movs	r4, #0
 800e694:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800e698:	4628      	mov	r0, r5
 800e69a:	4798      	blx	r3
 800e69c:	2000      	movs	r0, #0
 800e69e:	e7e0      	b.n	800e662 <_raise_r+0x12>

0800e6a0 <raise>:
 800e6a0:	4b02      	ldr	r3, [pc, #8]	; (800e6ac <raise+0xc>)
 800e6a2:	4601      	mov	r1, r0
 800e6a4:	6818      	ldr	r0, [r3, #0]
 800e6a6:	f7ff bfd3 	b.w	800e650 <_raise_r>
 800e6aa:	bf00      	nop
 800e6ac:	20000030 	.word	0x20000030

0800e6b0 <_kill_r>:
 800e6b0:	b538      	push	{r3, r4, r5, lr}
 800e6b2:	4d07      	ldr	r5, [pc, #28]	; (800e6d0 <_kill_r+0x20>)
 800e6b4:	2300      	movs	r3, #0
 800e6b6:	4604      	mov	r4, r0
 800e6b8:	4608      	mov	r0, r1
 800e6ba:	4611      	mov	r1, r2
 800e6bc:	602b      	str	r3, [r5, #0]
 800e6be:	f7f5 f94b 	bl	8003958 <_kill>
 800e6c2:	1c43      	adds	r3, r0, #1
 800e6c4:	d102      	bne.n	800e6cc <_kill_r+0x1c>
 800e6c6:	682b      	ldr	r3, [r5, #0]
 800e6c8:	b103      	cbz	r3, 800e6cc <_kill_r+0x1c>
 800e6ca:	6023      	str	r3, [r4, #0]
 800e6cc:	bd38      	pop	{r3, r4, r5, pc}
 800e6ce:	bf00      	nop
 800e6d0:	200075a8 	.word	0x200075a8

0800e6d4 <_getpid_r>:
 800e6d4:	f7f5 b938 	b.w	8003948 <_getpid>

0800e6d8 <_init>:
 800e6d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e6da:	bf00      	nop
 800e6dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e6de:	bc08      	pop	{r3}
 800e6e0:	469e      	mov	lr, r3
 800e6e2:	4770      	bx	lr

0800e6e4 <_fini>:
 800e6e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e6e6:	bf00      	nop
 800e6e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e6ea:	bc08      	pop	{r3}
 800e6ec:	469e      	mov	lr, r3
 800e6ee:	4770      	bx	lr
